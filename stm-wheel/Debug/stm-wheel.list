
stm-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ec4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08006fd4  08006fd4  00007fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007128  08007128  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007128  08007128  00008128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007130  08007130  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007130  08007130  00008130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007134  08007134  00008134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007138  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012e8  20000060  08007198  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001348  08007198  00009348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001629a  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d1  00000000  00000000  0001f323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  000227f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f9f  00000000  00000000  00023c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9bf  00000000  00000000  00024bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168b0  00000000  00000000  0003f576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009afd7  00000000  00000000  00055e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0dfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005964  00000000  00000000  000f0e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000f67a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006fbc 	.word	0x08006fbc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006fbc 	.word	0x08006fbc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	@ 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4a06      	ldr	r2, [pc, #24]	@ (80003a4 <vApplicationGetIdleTaskMemory+0x28>)
 800038c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	4a05      	ldr	r2, [pc, #20]	@ (80003a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000392:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2280      	movs	r2, #128	@ 0x80
 8000398:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	2000007c 	.word	0x2000007c
 80003a8:	2000011c 	.word	0x2000011c

080003ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ac:	b5b0      	push	{r4, r5, r7, lr}
 80003ae:	b096      	sub	sp, #88	@ 0x58
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b2:	f001 f947 	bl	8001644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b6:	f000 f881 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ba:	f000 f9d3 	bl	8000764 <MX_GPIO_Init>
  MX_DMA_Init();
 80003be:	f000 f9b3 	bl	8000728 <MX_DMA_Init>
  MX_CAN_Init();
 80003c2:	f000 f939 	bl	8000638 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80003c6:	f000 f985 	bl	80006d4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80003ca:	f000 f8cb 	bl	8000564 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 80003ce:	4832      	ldr	r0, [pc, #200]	@ (8000498 <main+0xec>)
 80003d0:	f001 ff13 	bl	80021fa <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80003d4:	2110      	movs	r1, #16
 80003d6:	4830      	ldr	r0, [pc, #192]	@ (8000498 <main+0xec>)
 80003d8:	f002 f9b3 	bl	8002742 <HAL_CAN_ActivateNotification>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80003dc:	4b2f      	ldr	r3, [pc, #188]	@ (800049c <main+0xf0>)
 80003de:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80003e2:	461d      	mov	r5, r3
 80003e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80003f0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f004 feac 	bl	8005154 <osThreadCreate>
 80003fc:	4603      	mov	r3, r0
 80003fe:	4a28      	ldr	r2, [pc, #160]	@ (80004a0 <main+0xf4>)
 8000400:	6013      	str	r3, [r2, #0]

  /* definition and creation of nextionTask */
  osThreadDef(nextionTask, startNextionTask, osPriorityAboveNormal, 0, 192);
 8000402:	4b28      	ldr	r3, [pc, #160]	@ (80004a4 <main+0xf8>)
 8000404:	f107 0420 	add.w	r4, r7, #32
 8000408:	461d      	mov	r5, r3
 800040a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800040c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800040e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000412:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  nextionTaskHandle = osThreadCreate(osThread(nextionTask), NULL);
 8000416:	f107 0320 	add.w	r3, r7, #32
 800041a:	2100      	movs	r1, #0
 800041c:	4618      	mov	r0, r3
 800041e:	f004 fe99 	bl	8005154 <osThreadCreate>
 8000422:	4603      	mov	r3, r0
 8000424:	4a20      	ldr	r2, [pc, #128]	@ (80004a8 <main+0xfc>)
 8000426:	6013      	str	r3, [r2, #0]

  /* definition and creation of canTask */
  osThreadDef(canTask, startCanTask, osPriorityHigh, 0, 192);
 8000428:	4b20      	ldr	r3, [pc, #128]	@ (80004ac <main+0x100>)
 800042a:	1d3c      	adds	r4, r7, #4
 800042c:	461d      	mov	r5, r3
 800042e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000432:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000436:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canTaskHandle = osThreadCreate(osThread(canTask), NULL);
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f004 fe88 	bl	8005154 <osThreadCreate>
 8000444:	4603      	mov	r3, r0
 8000446:	4a1a      	ldr	r2, [pc, #104]	@ (80004b0 <main+0x104>)
 8000448:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800044a:	f004 fe7c 	bl	8005146 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 800044e:	f005 f975 	bl	800573c <vTaskStartScheduler>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 8000452:	2201      	movs	r2, #1
 8000454:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000458:	4816      	ldr	r0, [pc, #88]	@ (80004b4 <main+0x108>)
 800045a:	f003 f8e2 	bl	8003622 <HAL_GPIO_WritePin>
	telemetry_data.tRpm = 0;
 800045e:	4b16      	ldr	r3, [pc, #88]	@ (80004b8 <main+0x10c>)
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 8000464:	4b14      	ldr	r3, [pc, #80]	@ (80004b8 <main+0x10c>)
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 800046a:	4b13      	ldr	r3, [pc, #76]	@ (80004b8 <main+0x10c>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 8000470:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <main+0x10c>)
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 8000476:	4b10      	ldr	r3, [pc, #64]	@ (80004b8 <main+0x10c>)
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 800047c:	4b0e      	ldr	r3, [pc, #56]	@ (80004b8 <main+0x10c>)
 800047e:	2200      	movs	r2, #0
 8000480:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 8000482:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <main+0x10c>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 8000488:	4b0b      	ldr	r3, [pc, #44]	@ (80004b8 <main+0x10c>)
 800048a:	2200      	movs	r2, #0
 800048c:	61da      	str	r2, [r3, #28]

	Start_ADC_DMA();
 800048e:	f000 fc27 	bl	8000ce0 <Start_ADC_DMA>
  while (1)
 8000492:	bf00      	nop
 8000494:	e7fd      	b.n	8000492 <main+0xe6>
 8000496:	bf00      	nop
 8000498:	200003c0 	.word	0x200003c0
 800049c:	08006fe0 	.word	0x08006fe0
 80004a0:	20000430 	.word	0x20000430
 80004a4:	08007008 	.word	0x08007008
 80004a8:	20000434 	.word	0x20000434
 80004ac:	0800702c 	.word	0x0800702c
 80004b0:	20000438 	.word	0x20000438
 80004b4:	40011000 	.word	0x40011000
 80004b8:	2000031c 	.word	0x2000031c

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b094      	sub	sp, #80	@ 0x50
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004c6:	2228      	movs	r2, #40	@ 0x28
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f006 f93e 	bl	800674c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ec:	2302      	movs	r3, #2
 80004ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f0:	2301      	movs	r3, #1
 80004f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f4:	2310      	movs	r3, #16
 80004f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f8:	2302      	movs	r3, #2
 80004fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004fc:	2300      	movs	r3, #0
 80004fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000500:	2300      	movs	r3, #0
 8000502:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000504:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000508:	4618      	mov	r0, r3
 800050a:	f003 f8bb 	bl	8003684 <HAL_RCC_OscConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000514:	f000 fddc 	bl	80010d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000518:	230f      	movs	r3, #15
 800051a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051c:	2302      	movs	r3, #2
 800051e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f003 fb28 	bl	8003b88 <HAL_RCC_ClockConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800053e:	f000 fdc7 	bl	80010d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000542:	2302      	movs	r3, #2
 8000544:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	4618      	mov	r0, r3
 800054e:	f003 fcd9 	bl	8003f04 <HAL_RCCEx_PeriphCLKConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000558:	f000 fdba 	bl	80010d0 <Error_Handler>
  }
}
 800055c:	bf00      	nop
 800055e:	3750      	adds	r7, #80	@ 0x50
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000574:	4b2e      	ldr	r3, [pc, #184]	@ (8000630 <MX_ADC1_Init+0xcc>)
 8000576:	4a2f      	ldr	r2, [pc, #188]	@ (8000634 <MX_ADC1_Init+0xd0>)
 8000578:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800057a:	4b2d      	ldr	r3, [pc, #180]	@ (8000630 <MX_ADC1_Init+0xcc>)
 800057c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000580:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000582:	4b2b      	ldr	r3, [pc, #172]	@ (8000630 <MX_ADC1_Init+0xcc>)
 8000584:	2201      	movs	r2, #1
 8000586:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000588:	4b29      	ldr	r3, [pc, #164]	@ (8000630 <MX_ADC1_Init+0xcc>)
 800058a:	2200      	movs	r2, #0
 800058c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800058e:	4b28      	ldr	r3, [pc, #160]	@ (8000630 <MX_ADC1_Init+0xcc>)
 8000590:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000594:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000596:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <MX_ADC1_Init+0xcc>)
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800059c:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <MX_ADC1_Init+0xcc>)
 800059e:	2204      	movs	r2, #4
 80005a0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a2:	4823      	ldr	r0, [pc, #140]	@ (8000630 <MX_ADC1_Init+0xcc>)
 80005a4:	f001 f8a4 	bl	80016f0 <HAL_ADC_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80005ae:	f000 fd8f 	bl	80010d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80005ba:	2305      	movs	r3, #5
 80005bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4619      	mov	r1, r3
 80005c2:	481b      	ldr	r0, [pc, #108]	@ (8000630 <MX_ADC1_Init+0xcc>)
 80005c4:	f001 fa5c 	bl	8001a80 <HAL_ADC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005ce:	f000 fd7f 	bl	80010d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4619      	mov	r1, r3
 80005de:	4814      	ldr	r0, [pc, #80]	@ (8000630 <MX_ADC1_Init+0xcc>)
 80005e0:	f001 fa4e 	bl	8001a80 <HAL_ADC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80005ea:	f000 fd71 	bl	80010d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005f2:	2303      	movs	r3, #3
 80005f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4619      	mov	r1, r3
 80005fa:	480d      	ldr	r0, [pc, #52]	@ (8000630 <MX_ADC1_Init+0xcc>)
 80005fc:	f001 fa40 	bl	8001a80 <HAL_ADC_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000606:	f000 fd63 	bl	80010d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800060a:	2303      	movs	r3, #3
 800060c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800060e:	2304      	movs	r3, #4
 8000610:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4619      	mov	r1, r3
 8000616:	4806      	ldr	r0, [pc, #24]	@ (8000630 <MX_ADC1_Init+0xcc>)
 8000618:	f001 fa32 	bl	8001a80 <HAL_ADC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000622:	f000 fd55 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000034c 	.word	0x2000034c
 8000634:	40012400 	.word	0x40012400

08000638 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	@ 0x28
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <MX_CAN_Init+0x94>)
 8000640:	4a23      	ldr	r2, [pc, #140]	@ (80006d0 <MX_CAN_Init+0x98>)
 8000642:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <MX_CAN_Init+0x94>)
 8000646:	2201      	movs	r2, #1
 8000648:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <MX_CAN_Init+0x94>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <MX_CAN_Init+0x94>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <MX_CAN_Init+0x94>)
 8000658:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800065c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800065e:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_CAN_Init+0x94>)
 8000660:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000664:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000666:	4b19      	ldr	r3, [pc, #100]	@ (80006cc <MX_CAN_Init+0x94>)
 8000668:	2200      	movs	r2, #0
 800066a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <MX_CAN_Init+0x94>)
 800066e:	2200      	movs	r2, #0
 8000670:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000672:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <MX_CAN_Init+0x94>)
 8000674:	2200      	movs	r2, #0
 8000676:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_CAN_Init+0x94>)
 800067a:	2200      	movs	r2, #0
 800067c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <MX_CAN_Init+0x94>)
 8000680:	2200      	movs	r2, #0
 8000682:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_CAN_Init+0x94>)
 8000686:	2200      	movs	r2, #0
 8000688:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800068a:	4810      	ldr	r0, [pc, #64]	@ (80006cc <MX_CAN_Init+0x94>)
 800068c:	f001 fbf1 	bl	8001e72 <HAL_CAN_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000696:	f000 fd1b 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x100 << 5;       // Accept all IDs
 80006a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006aa:	603b      	str	r3, [r7, #0]
  filterConfig.FilterMaskIdHigh = 0x700 << 5;;   // Accept all IDs
 80006ac:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80006b0:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;  // Assign to FIFO 1
 80006b2:	2301      	movs	r3, #1
 80006b4:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 80006b6:	2301      	movs	r3, #1
 80006b8:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80006ba:	463b      	mov	r3, r7
 80006bc:	4619      	mov	r1, r3
 80006be:	4803      	ldr	r0, [pc, #12]	@ (80006cc <MX_CAN_Init+0x94>)
 80006c0:	f001 fcd2 	bl	8002068 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	@ 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200003c0 	.word	0x200003c0
 80006d0:	40006400 	.word	0x40006400

080006d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <MX_USART1_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_USART1_UART_Init+0x4c>)
 800070c:	f003 feee 	bl	80044ec <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 fcdb 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200003e8 	.word	0x200003e8
 8000724:	40013800 	.word	0x40013800

08000728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_DMA_Init+0x38>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a0b      	ldr	r2, [pc, #44]	@ (8000760 <MX_DMA_Init+0x38>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_DMA_Init+0x38>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2105      	movs	r1, #5
 800074a:	200b      	movs	r0, #11
 800074c:	f002 fb01 	bl	8002d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000750:	200b      	movs	r0, #11
 8000752:	f002 fb1a 	bl	8002d8a <HAL_NVIC_EnableIRQ>

}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000778:	4b3f      	ldr	r3, [pc, #252]	@ (8000878 <MX_GPIO_Init+0x114>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a3e      	ldr	r2, [pc, #248]	@ (8000878 <MX_GPIO_Init+0x114>)
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b3c      	ldr	r3, [pc, #240]	@ (8000878 <MX_GPIO_Init+0x114>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0310 	and.w	r3, r3, #16
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000790:	4b39      	ldr	r3, [pc, #228]	@ (8000878 <MX_GPIO_Init+0x114>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a38      	ldr	r2, [pc, #224]	@ (8000878 <MX_GPIO_Init+0x114>)
 8000796:	f043 0320 	orr.w	r3, r3, #32
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b36      	ldr	r3, [pc, #216]	@ (8000878 <MX_GPIO_Init+0x114>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0320 	and.w	r3, r3, #32
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <MX_GPIO_Init+0x114>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a32      	ldr	r2, [pc, #200]	@ (8000878 <MX_GPIO_Init+0x114>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <MX_GPIO_Init+0x114>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <MX_GPIO_Init+0x114>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a2c      	ldr	r2, [pc, #176]	@ (8000878 <MX_GPIO_Init+0x114>)
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <MX_GPIO_Init+0x114>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0308 	and.w	r3, r3, #8
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007de:	4827      	ldr	r0, [pc, #156]	@ (800087c <MX_GPIO_Init+0x118>)
 80007e0:	f002 ff1f 	bl	8003622 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	4619      	mov	r1, r3
 80007fc:	481f      	ldr	r0, [pc, #124]	@ (800087c <MX_GPIO_Init+0x118>)
 80007fe:	f002 fd75 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000802:	f248 03f0 	movw	r3, #33008	@ 0x80f0
 8000806:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	481a      	ldr	r0, [pc, #104]	@ (8000880 <MX_GPIO_Init+0x11c>)
 8000818:	f002 fd68 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB4 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800081c:	f640 7357 	movw	r3, #3927	@ 0xf57
 8000820:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	4619      	mov	r1, r3
 8000830:	4814      	ldr	r0, [pc, #80]	@ (8000884 <MX_GPIO_Init+0x120>)
 8000832:	f002 fd5b 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 8000836:	23a8      	movs	r3, #168	@ 0xa8
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <MX_GPIO_Init+0x124>)
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800083e:	2301      	movs	r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	4619      	mov	r1, r3
 8000848:	480e      	ldr	r0, [pc, #56]	@ (8000884 <MX_GPIO_Init+0x120>)
 800084a:	f002 fd4f 	bl	80032ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	2009      	movs	r0, #9
 8000854:	f002 fa7d 	bl	8002d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000858:	2009      	movs	r0, #9
 800085a:	f002 fa96 	bl	8002d8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2017      	movs	r0, #23
 8000864:	f002 fa75 	bl	8002d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000868:	2017      	movs	r0, #23
 800086a:	f002 fa8e 	bl	8002d8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000
 800087c:	40011000 	.word	0x40011000
 8000880:	40010800 	.word	0x40010800
 8000884:	40010c00 	.word	0x40010c00
 8000888:	10110000 	.word	0x10110000

0800088c <updateTelemetry>:
}

/*
 * NEXTION UART FUNCTIONS
 */
void updateTelemetry() {
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
//	int mappedRpm = map_value(telemetry_data.tRpm, 0, telemetry_data.tMaxRpm, 0, 100);
	char *mappedRpm = int_to_string(telemetry_data.tRpm);
 8000892:	4b31      	ldr	r3, [pc, #196]	@ (8000958 <updateTelemetry+0xcc>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f90e 	bl	8000ab8 <int_to_string>
 800089c:	61f8      	str	r0, [r7, #28]
	char *mappedGear = map_gear(telemetry_data.tGear);
 800089e:	4b2e      	ldr	r3, [pc, #184]	@ (8000958 <updateTelemetry+0xcc>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f89a 	bl	80009dc <map_gear>
 80008a8:	61b8      	str	r0, [r7, #24]
	char *mappedSpeed = int_to_string(telemetry_data.tSpeedKmh);
 80008aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000958 <updateTelemetry+0xcc>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f902 	bl	8000ab8 <int_to_string>
 80008b4:	6178      	str	r0, [r7, #20]
	char *mappedHasDrs = int_to_string(telemetry_data.tHasDRS);
 80008b6:	4b28      	ldr	r3, [pc, #160]	@ (8000958 <updateTelemetry+0xcc>)
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f8fc 	bl	8000ab8 <int_to_string>
 80008c0:	6138      	str	r0, [r7, #16]
	char *mappedPitLim = int_to_string(telemetry_data.tPitLim);
 80008c2:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <updateTelemetry+0xcc>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f8f6 	bl	8000ab8 <int_to_string>
 80008cc:	60f8      	str	r0, [r7, #12]
	char *mappedFuel = int_to_string(telemetry_data.tFuel);
 80008ce:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <updateTelemetry+0xcc>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f8f0 	bl	8000ab8 <int_to_string>
 80008d8:	60b8      	str	r0, [r7, #8]
	char *mappedBrakeBias = int_to_string(telemetry_data.tBrakeBias);
 80008da:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <updateTelemetry+0xcc>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f8ea 	bl	8000ab8 <int_to_string>
 80008e4:	6078      	str	r0, [r7, #4]

//	send_int_to_nextion("rpmbar", mappedRpm);
	send__char_to_nextion("rpm", mappedRpm);
 80008e6:	69f9      	ldr	r1, [r7, #28]
 80008e8:	481c      	ldr	r0, [pc, #112]	@ (800095c <updateTelemetry+0xd0>)
 80008ea:	f000 f83f 	bl	800096c <send__char_to_nextion>
	send__char_to_nextion("gear", mappedGear);
 80008ee:	69b9      	ldr	r1, [r7, #24]
 80008f0:	481b      	ldr	r0, [pc, #108]	@ (8000960 <updateTelemetry+0xd4>)
 80008f2:	f000 f83b 	bl	800096c <send__char_to_nextion>
	send__char_to_nextion("speed", mappedSpeed);
 80008f6:	6979      	ldr	r1, [r7, #20]
 80008f8:	481a      	ldr	r0, [pc, #104]	@ (8000964 <updateTelemetry+0xd8>)
 80008fa:	f000 f837 	bl	800096c <send__char_to_nextion>
	//send__char_to_nextion("mappedHasDrs", mappedHasDrs);
	//send_to_nextion("pitlim", telemetry_data.tPitLim);
	send__char_to_nextion("fuel", mappedFuel);
 80008fe:	68b9      	ldr	r1, [r7, #8]
 8000900:	4819      	ldr	r0, [pc, #100]	@ (8000968 <updateTelemetry+0xdc>)
 8000902:	f000 f833 	bl	800096c <send__char_to_nextion>
	//send_to_nextion("gear", telemetry_data.tBrakeBias);

	if(mappedRpm) {
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d002      	beq.n	8000912 <updateTelemetry+0x86>
		free(mappedRpm);
 800090c:	69f8      	ldr	r0, [r7, #28]
 800090e:	f005 fe33 	bl	8006578 <free>
	}
	// dont do gear since thats not int to string
	if(mappedSpeed) {
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d002      	beq.n	800091e <updateTelemetry+0x92>
		free(mappedSpeed);
 8000918:	6978      	ldr	r0, [r7, #20]
 800091a:	f005 fe2d 	bl	8006578 <free>
	}
	if(mappedHasDrs) {
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d002      	beq.n	800092a <updateTelemetry+0x9e>
		free(mappedHasDrs);
 8000924:	6938      	ldr	r0, [r7, #16]
 8000926:	f005 fe27 	bl	8006578 <free>
	}
	if(mappedPitLim) {
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <updateTelemetry+0xaa>
		free(mappedPitLim);
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f005 fe21 	bl	8006578 <free>
	}
	if(mappedFuel) {
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d002      	beq.n	8000942 <updateTelemetry+0xb6>
		free(mappedFuel);
 800093c:	68b8      	ldr	r0, [r7, #8]
 800093e:	f005 fe1b 	bl	8006578 <free>
	}
	if(mappedBrakeBias) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <updateTelemetry+0xc2>
		free(mappedBrakeBias);
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f005 fe15 	bl	8006578 <free>
	}

}
 800094e:	bf00      	nop
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000031c 	.word	0x2000031c
 800095c:	08007048 	.word	0x08007048
 8000960:	0800704c 	.word	0x0800704c
 8000964:	08007054 	.word	0x08007054
 8000968:	0800705c 	.word	0x0800705c

0800096c <send__char_to_nextion>:

	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
}

void send__char_to_nextion(const char *var_name, char *value) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b08e      	sub	sp, #56	@ 0x38
 8000970:	af02      	add	r7, sp, #8
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
	char command[32];
	snprintf(command, sizeof(command), "%s.txt=\"%s\"", var_name, value);
 8000976:	f107 0010 	add.w	r0, r7, #16
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a13      	ldr	r2, [pc, #76]	@ (80009d0 <send__char_to_nextion+0x64>)
 8000982:	2120      	movs	r1, #32
 8000984:	f005 feae 	bl	80066e4 <sniprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fbdf 	bl	8000150 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29a      	uxth	r2, r3
 8000996:	f107 0110 	add.w	r1, r7, #16
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <send__char_to_nextion+0x68>)
 80009a0:	f003 fdf4 	bl	800458c <HAL_UART_Transmit>

	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
 80009a4:	4a0c      	ldr	r2, [pc, #48]	@ (80009d8 <send__char_to_nextion+0x6c>)
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	4611      	mov	r1, r2
 80009ae:	8019      	strh	r1, [r3, #0]
 80009b0:	3302      	adds	r3, #2
 80009b2:	0c12      	lsrs	r2, r2, #16
 80009b4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
 80009b6:	f107 010c 	add.w	r1, r7, #12
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	2203      	movs	r2, #3
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <send__char_to_nextion+0x68>)
 80009c2:	f003 fde3 	bl	800458c <HAL_UART_Transmit>
}
 80009c6:	bf00      	nop
 80009c8:	3730      	adds	r7, #48	@ 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	08007074 	.word	0x08007074
 80009d4:	200003e8 	.word	0x200003e8
 80009d8:	08007070 	.word	0x08007070

080009dc <map_gear>:
    if (input > in_max) input = in_max;

    return (input - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

const char* map_gear(int value)  {
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    if (value < 0 || value > 13) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db02      	blt.n	80009f0 <map_gear+0x14>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0d      	cmp	r3, #13
 80009ee:	dd01      	ble.n	80009f4 <map_gear+0x18>
        return "X";
 80009f0:	4b22      	ldr	r3, [pc, #136]	@ (8000a7c <map_gear+0xa0>)
 80009f2:	e03e      	b.n	8000a72 <map_gear+0x96>
    }

    switch (value) {
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b0d      	cmp	r3, #13
 80009f8:	d83a      	bhi.n	8000a70 <map_gear+0x94>
 80009fa:	a201      	add	r2, pc, #4	@ (adr r2, 8000a00 <map_gear+0x24>)
 80009fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a00:	08000a39 	.word	0x08000a39
 8000a04:	08000a3d 	.word	0x08000a3d
 8000a08:	08000a41 	.word	0x08000a41
 8000a0c:	08000a45 	.word	0x08000a45
 8000a10:	08000a49 	.word	0x08000a49
 8000a14:	08000a4d 	.word	0x08000a4d
 8000a18:	08000a51 	.word	0x08000a51
 8000a1c:	08000a55 	.word	0x08000a55
 8000a20:	08000a59 	.word	0x08000a59
 8000a24:	08000a5d 	.word	0x08000a5d
 8000a28:	08000a61 	.word	0x08000a61
 8000a2c:	08000a65 	.word	0x08000a65
 8000a30:	08000a69 	.word	0x08000a69
 8000a34:	08000a6d 	.word	0x08000a6d
        case 0: return "R";
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <map_gear+0xa4>)
 8000a3a:	e01a      	b.n	8000a72 <map_gear+0x96>
        case 1: return "N";
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <map_gear+0xa8>)
 8000a3e:	e018      	b.n	8000a72 <map_gear+0x96>
        case 2: return "1";
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <map_gear+0xac>)
 8000a42:	e016      	b.n	8000a72 <map_gear+0x96>
        case 3: return "2";
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <map_gear+0xb0>)
 8000a46:	e014      	b.n	8000a72 <map_gear+0x96>
        case 4: return "3";
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <map_gear+0xb4>)
 8000a4a:	e012      	b.n	8000a72 <map_gear+0x96>
        case 5: return "4";
 8000a4c:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <map_gear+0xb8>)
 8000a4e:	e010      	b.n	8000a72 <map_gear+0x96>
        case 6: return "5";
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <map_gear+0xbc>)
 8000a52:	e00e      	b.n	8000a72 <map_gear+0x96>
        case 7: return "6";
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <map_gear+0xc0>)
 8000a56:	e00c      	b.n	8000a72 <map_gear+0x96>
        case 8: return "7";
 8000a58:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <map_gear+0xc4>)
 8000a5a:	e00a      	b.n	8000a72 <map_gear+0x96>
        case 9: return "8";
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <map_gear+0xc8>)
 8000a5e:	e008      	b.n	8000a72 <map_gear+0x96>
        case 10: return "9";
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <map_gear+0xcc>)
 8000a62:	e006      	b.n	8000a72 <map_gear+0x96>
        case 11: return "10";
 8000a64:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <map_gear+0xd0>)
 8000a66:	e004      	b.n	8000a72 <map_gear+0x96>
        case 12: return "11";
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <map_gear+0xd4>)
 8000a6a:	e002      	b.n	8000a72 <map_gear+0x96>
        case 13: return "12";
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <map_gear+0xd8>)
 8000a6e:	e000      	b.n	8000a72 <map_gear+0x96>

        default:
        	return "X";
 8000a70:	4b02      	ldr	r3, [pc, #8]	@ (8000a7c <map_gear+0xa0>)
    }
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	08007080 	.word	0x08007080
 8000a80:	08007084 	.word	0x08007084
 8000a84:	08007088 	.word	0x08007088
 8000a88:	0800708c 	.word	0x0800708c
 8000a8c:	08007090 	.word	0x08007090
 8000a90:	08007094 	.word	0x08007094
 8000a94:	08007098 	.word	0x08007098
 8000a98:	0800709c 	.word	0x0800709c
 8000a9c:	080070a0 	.word	0x080070a0
 8000aa0:	080070a4 	.word	0x080070a4
 8000aa4:	080070a8 	.word	0x080070a8
 8000aa8:	080070ac 	.word	0x080070ac
 8000aac:	080070b0 	.word	0x080070b0
 8000ab0:	080070b4 	.word	0x080070b4
 8000ab4:	080070b8 	.word	0x080070b8

08000ab8 <int_to_string>:

char* int_to_string(int value) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    // Determine required buffer size (including null terminator)
    size_t buffer_size = snprintf(NULL, 0, "%d", value) + 1;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8000afc <int_to_string+0x44>)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f005 fe0c 	bl	80066e4 <sniprintf>
 8000acc:	4603      	mov	r3, r0
 8000ace:	3301      	adds	r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]

    // Allocate memory
    char *string = (char*)malloc(buffer_size);
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f005 fd48 	bl	8006568 <malloc>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	60bb      	str	r3, [r7, #8]
    if (!string) {
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <int_to_string+0x2e>
        return NULL;  // Return NULL if allocation fails
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e006      	b.n	8000af4 <int_to_string+0x3c>
    }

    // Format the integer into the allocated string
    snprintf(string, buffer_size, "%d", value);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	@ (8000afc <int_to_string+0x44>)
 8000aea:	68f9      	ldr	r1, [r7, #12]
 8000aec:	68b8      	ldr	r0, [r7, #8]
 8000aee:	f005 fdf9 	bl	80066e4 <sniprintf>

    return string;  // Caller must free() this memory
 8000af2:	68bb      	ldr	r3, [r7, #8]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	080070bc 	.word	0x080070bc

08000b00 <updateUserInput>:

void updateUserInput() {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	user_input_data.buttons = 0; // Clear all bits initially
 8000b04:	4b6f      	ldr	r3, [pc, #444]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
	user_input_data.hall_analog_1 = 0;
 8000b0a:	4b6e      	ldr	r3, [pc, #440]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	711a      	strb	r2, [r3, #4]
	user_input_data.hall_analog_2 = 0;
 8000b10:	4b6c      	ldr	r3, [pc, #432]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	715a      	strb	r2, [r3, #5]
	// Buttons
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_1_PIN)) user_input_data.buttons |= (1 << 0);
 8000b16:	2110      	movs	r1, #16
 8000b18:	486b      	ldr	r0, [pc, #428]	@ (8000cc8 <updateUserInput+0x1c8>)
 8000b1a:	f002 fd6b 	bl	80035f4 <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d105      	bne.n	8000b30 <updateUserInput+0x30>
 8000b24:	4b67      	ldr	r3, [pc, #412]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	4a65      	ldr	r2, [pc, #404]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000b2e:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_2_PIN)) user_input_data.buttons |= (1 << 1);
 8000b30:	2120      	movs	r1, #32
 8000b32:	4865      	ldr	r0, [pc, #404]	@ (8000cc8 <updateUserInput+0x1c8>)
 8000b34:	f002 fd5e 	bl	80035f4 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d105      	bne.n	8000b4a <updateUserInput+0x4a>
 8000b3e:	4b61      	ldr	r3, [pc, #388]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	4a5f      	ldr	r2, [pc, #380]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000b48:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_3_PIN)) user_input_data.buttons |= (1 << 2);
 8000b4a:	2140      	movs	r1, #64	@ 0x40
 8000b4c:	485e      	ldr	r0, [pc, #376]	@ (8000cc8 <updateUserInput+0x1c8>)
 8000b4e:	f002 fd51 	bl	80035f4 <HAL_GPIO_ReadPin>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d105      	bne.n	8000b64 <updateUserInput+0x64>
 8000b58:	4b5a      	ldr	r3, [pc, #360]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	4a58      	ldr	r2, [pc, #352]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000b62:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_4_PIN)) user_input_data.buttons |= (1 << 3);
 8000b64:	2180      	movs	r1, #128	@ 0x80
 8000b66:	4858      	ldr	r0, [pc, #352]	@ (8000cc8 <updateUserInput+0x1c8>)
 8000b68:	f002 fd44 	bl	80035f4 <HAL_GPIO_ReadPin>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d105      	bne.n	8000b7e <updateUserInput+0x7e>
 8000b72:	4b54      	ldr	r3, [pc, #336]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f043 0308 	orr.w	r3, r3, #8
 8000b7a:	4a52      	ldr	r2, [pc, #328]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000b7c:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_5_PIN)) user_input_data.buttons |= (1 << 4);
 8000b7e:	2101      	movs	r1, #1
 8000b80:	4852      	ldr	r0, [pc, #328]	@ (8000ccc <updateUserInput+0x1cc>)
 8000b82:	f002 fd37 	bl	80035f4 <HAL_GPIO_ReadPin>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d105      	bne.n	8000b98 <updateUserInput+0x98>
 8000b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f043 0310 	orr.w	r3, r3, #16
 8000b94:	4a4b      	ldr	r2, [pc, #300]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000b96:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_6_PIN)) user_input_data.buttons |= (1 << 5);
 8000b98:	2102      	movs	r1, #2
 8000b9a:	484c      	ldr	r0, [pc, #304]	@ (8000ccc <updateUserInput+0x1cc>)
 8000b9c:	f002 fd2a 	bl	80035f4 <HAL_GPIO_ReadPin>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d105      	bne.n	8000bb2 <updateUserInput+0xb2>
 8000ba6:	4b47      	ldr	r3, [pc, #284]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f043 0320 	orr.w	r3, r3, #32
 8000bae:	4a45      	ldr	r2, [pc, #276]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000bb0:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_7_PIN)) user_input_data.buttons |= (1 << 6);
 8000bb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bb6:	4845      	ldr	r0, [pc, #276]	@ (8000ccc <updateUserInput+0x1cc>)
 8000bb8:	f002 fd1c 	bl	80035f4 <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d105      	bne.n	8000bce <updateUserInput+0xce>
 8000bc2:	4b40      	ldr	r3, [pc, #256]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bca:	4a3e      	ldr	r2, [pc, #248]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000bcc:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_8_PIN)) user_input_data.buttons |= (1 << 7);
 8000bce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bd2:	483e      	ldr	r0, [pc, #248]	@ (8000ccc <updateUserInput+0x1cc>)
 8000bd4:	f002 fd0e 	bl	80035f4 <HAL_GPIO_ReadPin>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d105      	bne.n	8000bea <updateUserInput+0xea>
 8000bde:	4b39      	ldr	r3, [pc, #228]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000be6:	4a37      	ldr	r2, [pc, #220]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000be8:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_9_PIN)) user_input_data.buttons |= (1 << 8);
 8000bea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bee:	4837      	ldr	r0, [pc, #220]	@ (8000ccc <updateUserInput+0x1cc>)
 8000bf0:	f002 fd00 	bl	80035f4 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d105      	bne.n	8000c06 <updateUserInput+0x106>
 8000bfa:	4b32      	ldr	r3, [pc, #200]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c02:	4a30      	ldr	r2, [pc, #192]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000c04:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_10_PIN)) user_input_data.buttons |= (1 << 9);
 8000c06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c0a:	4830      	ldr	r0, [pc, #192]	@ (8000ccc <updateUserInput+0x1cc>)
 8000c0c:	f002 fcf2 	bl	80035f4 <HAL_GPIO_ReadPin>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d105      	bne.n	8000c22 <updateUserInput+0x122>
 8000c16:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c1e:	4a29      	ldr	r2, [pc, #164]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000c20:	6013      	str	r3, [r2, #0]

	if(adc_data_ready) {
 8000c22:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd0 <updateUserInput+0x1d0>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <updateUserInput+0x130>
		processADC();
 8000c2c:	f000 f87c 	bl	8000d28 <processADC>
	}

	if (enc_l_flag == 1) user_input_data.buttons |= (1 << 12);
 8000c30:	4b28      	ldr	r3, [pc, #160]	@ (8000cd4 <updateUserInput+0x1d4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d105      	bne.n	8000c44 <updateUserInput+0x144>
 8000c38:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c40:	4a20      	ldr	r2, [pc, #128]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000c42:	6013      	str	r3, [r2, #0]
	if (enc_l_flag == -1) user_input_data.buttons |= (1 << 13);
 8000c44:	4b23      	ldr	r3, [pc, #140]	@ (8000cd4 <updateUserInput+0x1d4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4c:	d105      	bne.n	8000c5a <updateUserInput+0x15a>
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c56:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000c58:	6013      	str	r3, [r2, #0]
	if (enc_c_flag == 1) user_input_data.buttons |= (1 << 14);
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <updateUserInput+0x1d8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d105      	bne.n	8000c6e <updateUserInput+0x16e>
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6a:	4a16      	ldr	r2, [pc, #88]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000c6c:	6013      	str	r3, [r2, #0]
	if (enc_c_flag == -1) user_input_data.buttons |= (1 << 15);
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <updateUserInput+0x1d8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c76:	d105      	bne.n	8000c84 <updateUserInput+0x184>
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c80:	4a10      	ldr	r2, [pc, #64]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000c82:	6013      	str	r3, [r2, #0]
	if (enc_r_flag == 1) user_input_data.buttons |= (1 << 16);
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <updateUserInput+0x1dc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d105      	bne.n	8000c98 <updateUserInput+0x198>
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c94:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000c96:	6013      	str	r3, [r2, #0]
	if (enc_r_flag == -1) user_input_data.buttons |= (1 << 17);
 8000c98:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <updateUserInput+0x1dc>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d105      	bne.n	8000cae <updateUserInput+0x1ae>
 8000ca2:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000caa:	4a06      	ldr	r2, [pc, #24]	@ (8000cc4 <updateUserInput+0x1c4>)
 8000cac:	6013      	str	r3, [r2, #0]

	enc_l_flag = 0;
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <updateUserInput+0x1d4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
	enc_c_flag = 0;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <updateUserInput+0x1d8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
	enc_r_flag = 0;
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <updateUserInput+0x1dc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000344 	.word	0x20000344
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	40010c00 	.word	0x40010c00
 8000cd0:	20000454 	.word	0x20000454
 8000cd4:	2000043c 	.word	0x2000043c
 8000cd8:	20000440 	.word	0x20000440
 8000cdc:	20000444 	.word	0x20000444

08000ce0 <Start_ADC_DMA>:

void Start_ADC_DMA() {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, ADC_CHANNEL_COUNT);
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	4903      	ldr	r1, [pc, #12]	@ (8000cf4 <Start_ADC_DMA+0x14>)
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <Start_ADC_DMA+0x18>)
 8000cea:	f000 fdd9 	bl	80018a0 <HAL_ADC_Start_DMA>
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000044c 	.word	0x2000044c
 8000cf8:	2000034c 	.word	0x2000034c

08000cfc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <HAL_ADC_ConvCpltCallback+0x24>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d102      	bne.n	8000d14 <HAL_ADC_ConvCpltCallback+0x18>
        adc_data_ready = 1;  // Set flag (do NOT process here)
 8000d0e:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <HAL_ADC_ConvCpltCallback+0x28>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
    }
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40012400 	.word	0x40012400
 8000d24:	20000454 	.word	0x20000454

08000d28 <processADC>:

void processADC() {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	adc_data_ready = 0;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <processADC+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]

	// Convert ADC values to 8-bit format
	user_input_data.hall_analog_1 = map_hall_sensor(adc_values[2]);
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <processADC+0x68>)
 8000d34:	889b      	ldrh	r3, [r3, #4]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f82e 	bl	8000d98 <map_hall_sensor>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <processADC+0x6c>)
 8000d42:	711a      	strb	r2, [r3, #4]
	user_input_data.hall_analog_2 = map_hall_sensor(adc_values[3]);
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <processADC+0x68>)
 8000d46:	88db      	ldrh	r3, [r3, #6]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 f825 	bl	8000d98 <map_hall_sensor>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <processADC+0x6c>)
 8000d54:	715a      	strb	r2, [r3, #5]

	// Process hall button thresholds
	if (adc_values[0] > 2200) user_input_data.buttons |= (1 << 10);
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <processADC+0x68>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	f640 0298 	movw	r2, #2200	@ 0x898
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d905      	bls.n	8000d6e <processADC+0x46>
 8000d62:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <processADC+0x6c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <processADC+0x6c>)
 8000d6c:	6013      	str	r3, [r2, #0]
	if (adc_values[1] > 2200) user_input_data.buttons |= (1 << 11);
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <processADC+0x68>)
 8000d70:	885b      	ldrh	r3, [r3, #2]
 8000d72:	f640 0298 	movw	r2, #2200	@ 0x898
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d905      	bls.n	8000d86 <processADC+0x5e>
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <processADC+0x6c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d82:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <processADC+0x6c>)
 8000d84:	6013      	str	r3, [r2, #0]
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000454 	.word	0x20000454
 8000d90:	2000044c 	.word	0x2000044c
 8000d94:	20000344 	.word	0x20000344

08000d98 <map_hall_sensor>:
uint8_t map_hall_sensor(uint16_t adc_value) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
    if (adc_value < ADC_REST) adc_value = ADC_REST;
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000da8:	d202      	bcs.n	8000db0 <map_hall_sensor+0x18>
 8000daa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000dae:	80fb      	strh	r3, [r7, #6]
    if (adc_value > ADC_MAX) adc_value = ADC_MAX;
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8000db6:	d902      	bls.n	8000dbe <map_hall_sensor+0x26>
 8000db8:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8000dbc:	80fb      	strh	r3, [r7, #6]

    return (uint8_t)(((adc_value - ADC_REST) * 255) / (ADC_MAX - ADC_REST));
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	4a06      	ldr	r2, [pc, #24]	@ (8000de4 <map_hall_sensor+0x4c>)
 8000dcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd0:	1212      	asrs	r2, r2, #8
 8000dd2:	17db      	asrs	r3, r3, #31
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	b2db      	uxtb	r3, r3
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	51eb851f 	.word	0x51eb851f

08000de8 <CAN_Transmit>:

/*
 * CAN BUS FUNCTIONS
 */
void CAN_Transmit() {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	uint32_t currentTime = HAL_GetTick();
 8000dee:	f000 fc51 	bl	8001694 <HAL_GetTick>
 8000df2:	6078      	str	r0, [r7, #4]

	if(currentTime - lastSendTime >= 2) {
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <CAN_Transmit+0x58>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d91a      	bls.n	8000e36 <CAN_Transmit+0x4e>
		sendCANMessage(0x200, (int32_t)user_input_data.buttons);
 8000e00:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <CAN_Transmit+0x5c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e0a:	f000 f81d 	bl	8000e48 <sendCANMessage>
		sendCANMessage(0x201, (int32_t)user_input_data.hall_analog_1 & 0xFF);
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <CAN_Transmit+0x5c>)
 8000e10:	791b      	ldrb	r3, [r3, #4]
 8000e12:	4619      	mov	r1, r3
 8000e14:	f240 2001 	movw	r0, #513	@ 0x201
 8000e18:	f000 f816 	bl	8000e48 <sendCANMessage>
		sendCANMessage(0x202, (int32_t)user_input_data.hall_analog_2 & 0xFF);
 8000e1c:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <CAN_Transmit+0x5c>)
 8000e1e:	795b      	ldrb	r3, [r3, #5]
 8000e20:	4619      	mov	r1, r3
 8000e22:	f240 2002 	movw	r0, #514	@ 0x202
 8000e26:	f000 f80f 	bl	8000e48 <sendCANMessage>

		lastSendTime = currentTime;  // Update last transmission time
 8000e2a:	4a05      	ldr	r2, [pc, #20]	@ (8000e40 <CAN_Transmit+0x58>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6013      	str	r3, [r2, #0]
		HAL_Delay(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f000 fc39 	bl	80016a8 <HAL_Delay>
	}
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000448 	.word	0x20000448
 8000e44:	20000344 	.word	0x20000344

08000e48 <sendCANMessage>:


void sendCANMessage(uint16_t canID, int32_t value) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	@ 0x30
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	80fb      	strh	r3, [r7, #6]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[4];  // 4-byte buffer

    // Ensure correct byte order in CAN message
    TxData[0] = (uint8_t)(value & 0xFF);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	743b      	strb	r3, [r7, #16]
    TxData[1] = (uint8_t)((value >> 8) & 0xFF);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	121b      	asrs	r3, r3, #8
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	747b      	strb	r3, [r7, #17]
    TxData[2] = (uint8_t)((value >> 16) & 0xFF);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	141b      	asrs	r3, r3, #16
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	74bb      	strb	r3, [r7, #18]
    TxData[3] = (uint8_t)((value >> 24) & 0xFF);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	161b      	asrs	r3, r3, #24
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	74fb      	strb	r3, [r7, #19]

    uint32_t TxMailbox;

    // Configure the CAN header
    TxHeader.StdId = canID;  // Set the ID
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	617b      	str	r3, [r7, #20]
    TxHeader.IDE = CAN_ID_STD;  // Standard 11-bit ID
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    TxHeader.RTR = CAN_RTR_DATA;  // Data frame, not remote request
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
    TxHeader.DLC = sizeof(value);  // Data Length = 4 bytes
 8000e7e:	2304      	movs	r3, #4
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24

    // Copy integer value into TxData buffer (ensure correct byte order)
    memcpy(TxData, &value, sizeof(value));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	613b      	str	r3, [r7, #16]

    // Send the CAN message
    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	f107 0210 	add.w	r2, r7, #16
 8000e8e:	f107 0114 	add.w	r1, r7, #20
 8000e92:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <sendCANMessage+0x7c>)
 8000e94:	f001 fa3e 	bl	8002314 <HAL_CAN_AddTxMessage>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00d      	beq.n	8000eba <sendCANMessage+0x72>
    	 // Optionally log the state of CAN error counters
		uint32_t error = HAL_CAN_GetError(&hcan);
 8000e9e:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <sendCANMessage+0x7c>)
 8000ea0:	f001 fe97 	bl	8002bd2 <HAL_CAN_GetError>
 8000ea4:	62f8      	str	r0, [r7, #44]	@ 0x2c
		HAL_CAN_Stop(&hcan);  // Stop CAN
 8000ea6:	4807      	ldr	r0, [pc, #28]	@ (8000ec4 <sendCANMessage+0x7c>)
 8000ea8:	f001 f9eb 	bl	8002282 <HAL_CAN_Stop>
		HAL_CAN_Start(&hcan); // Restart CAN
 8000eac:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <sendCANMessage+0x7c>)
 8000eae:	f001 f9a4 	bl	80021fa <HAL_CAN_Start>

		// Optional: Clear error flags
		__HAL_CAN_CLEAR_FLAG(&hcan, CAN_FLAG_ERRI);
 8000eb2:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <sendCANMessage+0x7c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	605a      	str	r2, [r3, #4]
    }
}
 8000eba:	bf00      	nop
 8000ebc:	3730      	adds	r7, #48	@ 0x30
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200003c0 	.word	0x200003c0

08000ec8 <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN receive interrupt callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	@ 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO1) > 0) {
 8000ed0:	e053      	b.n	8000f7a <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	f107 0214 	add.w	r2, r7, #20
 8000eda:	2101      	movs	r1, #1
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f001 fae8 	bl	80024b2 <HAL_CAN_GetRxMessage>

		int32_t value;
		memcpy(&value, RxData, sizeof(value));
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]

		switch (RxHeader.StdId) {
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000eec:	2b09      	cmp	r3, #9
 8000eee:	d843      	bhi.n	8000f78 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>
 8000ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ef8 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef6:	bf00      	nop
 8000ef8:	08000f21 	.word	0x08000f21
 8000efc:	08000f29 	.word	0x08000f29
 8000f00:	08000f31 	.word	0x08000f31
 8000f04:	08000f39 	.word	0x08000f39
 8000f08:	08000f41 	.word	0x08000f41
 8000f0c:	08000f49 	.word	0x08000f49
 8000f10:	08000f51 	.word	0x08000f51
 8000f14:	08000f59 	.word	0x08000f59
 8000f18:	08000f61 	.word	0x08000f61
 8000f1c:	08000f69 	.word	0x08000f69
			// Wheelbase
			case 0x100: telemetry_data.tRpm = value; break;
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4a1c      	ldr	r2, [pc, #112]	@ (8000f94 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e028      	b.n	8000f7a <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x101: telemetry_data.tGear = value; break;
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8000f94 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000f2c:	6053      	str	r3, [r2, #4]
 8000f2e:	e024      	b.n	8000f7a <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x102: telemetry_data.tSpeedKmh = value; break;
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000f34:	6093      	str	r3, [r2, #8]
 8000f36:	e020      	b.n	8000f7a <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x103: telemetry_data.tHasDRS = value; break;
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4a16      	ldr	r2, [pc, #88]	@ (8000f94 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000f3c:	60d3      	str	r3, [r2, #12]
 8000f3e:	e01c      	b.n	8000f7a <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x104: telemetry_data.tDrs = value; break;
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000f44:	6113      	str	r3, [r2, #16]
 8000f46:	e018      	b.n	8000f7a <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x105: telemetry_data.tPitLim = value; break;
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4a12      	ldr	r2, [pc, #72]	@ (8000f94 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000f4c:	6153      	str	r3, [r2, #20]
 8000f4e:	e014      	b.n	8000f7a <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x106: telemetry_data.tFuel = value; break;
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4a10      	ldr	r2, [pc, #64]	@ (8000f94 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000f54:	6193      	str	r3, [r2, #24]
 8000f56:	e010      	b.n	8000f7a <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x107: telemetry_data.tBrakeBias = value; break;
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f94 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	e00c      	b.n	8000f7a <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x108: telemetry_data.tMaxRpm = value; break;
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4a0c      	ldr	r2, [pc, #48]	@ (8000f94 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000f64:	6213      	str	r3, [r2, #32]
 8000f66:	e008      	b.n	8000f7a <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x109: telemetry_data.tForceFB = value; break;
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff f9b2 	bl	80002d4 <__aeabi_i2f>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a08      	ldr	r2, [pc, #32]	@ (8000f94 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000f74:	6253      	str	r3, [r2, #36]	@ 0x24
 8000f76:	e000      	b.n	8000f7a <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			default: break;
 8000f78:	bf00      	nop
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO1) > 0) {
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f001 fbb9 	bl	80026f4 <HAL_CAN_GetRxFifoFillLevel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1a4      	bne.n	8000ed2 <HAL_CAN_RxFifo1MsgPendingCallback+0xa>
		}
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3730      	adds	r7, #48	@ 0x30
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000031c 	.word	0x2000031c

08000f98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	uint32_t current_time = HAL_GetTick();  // Get system time in ms
 8000fa2:	f000 fb77 	bl	8001694 <HAL_GetTick>
 8000fa6:	60f8      	str	r0, [r7, #12]
	if (current_time - last_enc_interrupt_time < 250) return;  // Debounce (5ms)
 8000fa8:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2bf9      	cmp	r3, #249	@ 0xf9
 8000fb2:	d93a      	bls.n	800102a <HAL_GPIO_EXTI_Callback+0x92>
	last_enc_interrupt_time = current_time;
 8000fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8001034 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6013      	str	r3, [r2, #0]
    if (GPIO_Pin == L_ENC_PIN_CLK) {
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	2b80      	cmp	r3, #128	@ 0x80
 8000fbe:	d10e      	bne.n	8000fde <HAL_GPIO_EXTI_Callback+0x46>
        if (HAL_GPIO_ReadPin(GPIOB, L_ENC_PIN_DT) == GPIO_PIN_SET) {
 8000fc0:	2140      	movs	r1, #64	@ 0x40
 8000fc2:	481d      	ldr	r0, [pc, #116]	@ (8001038 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000fc4:	f002 fb16 	bl	80035f4 <HAL_GPIO_ReadPin>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d103      	bne.n	8000fd6 <HAL_GPIO_EXTI_Callback+0x3e>
        	enc_l_flag = 1;
 8000fce:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e003      	b.n	8000fde <HAL_GPIO_EXTI_Callback+0x46>
        } else {
        	enc_l_flag = -1;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	@ (800103c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	601a      	str	r2, [r3, #0]
        }
    }
    if (GPIO_Pin == C_ENC_PIN_CLK) {
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	2b20      	cmp	r3, #32
 8000fe2:	d10e      	bne.n	8001002 <HAL_GPIO_EXTI_Callback+0x6a>
		if (HAL_GPIO_ReadPin(GPIOB, C_ENC_PIN_DT) == GPIO_PIN_SET) {
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	4814      	ldr	r0, [pc, #80]	@ (8001038 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000fe8:	f002 fb04 	bl	80035f4 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d103      	bne.n	8000ffa <HAL_GPIO_EXTI_Callback+0x62>
			enc_c_flag = 1;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	e003      	b.n	8001002 <HAL_GPIO_EXTI_Callback+0x6a>
		} else {
			enc_c_flag = -1;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	601a      	str	r2, [r3, #0]
		}
	}
    if (GPIO_Pin == R_ENC_PIN_CLK) {
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	2b08      	cmp	r3, #8
 8001006:	d111      	bne.n	800102c <HAL_GPIO_EXTI_Callback+0x94>
		if (HAL_GPIO_ReadPin(GPIOA, R_ENC_PIN_DT) == GPIO_PIN_SET) {
 8001008:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800100c:	480d      	ldr	r0, [pc, #52]	@ (8001044 <HAL_GPIO_EXTI_Callback+0xac>)
 800100e:	f002 faf1 	bl	80035f4 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	2b01      	cmp	r3, #1
 8001016:	d103      	bne.n	8001020 <HAL_GPIO_EXTI_Callback+0x88>
			enc_r_flag = 1;
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <HAL_GPIO_EXTI_Callback+0xb0>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	e005      	b.n	800102c <HAL_GPIO_EXTI_Callback+0x94>
		} else {
			enc_r_flag = -1;
 8001020:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001022:	f04f 32ff 	mov.w	r2, #4294967295
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e000      	b.n	800102c <HAL_GPIO_EXTI_Callback+0x94>
	if (current_time - last_enc_interrupt_time < 250) return;  // Debounce (5ms)
 800102a:	bf00      	nop
		}
	}
}
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000458 	.word	0x20000458
 8001038:	40010c00 	.word	0x40010c00
 800103c:	2000043c 	.word	0x2000043c
 8001040:	20000440 	.word	0x20000440
 8001044:	40010800 	.word	0x40010800
 8001048:	20000444 	.word	0x20000444

0800104c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800105a:	4807      	ldr	r0, [pc, #28]	@ (8001078 <StartDefaultTask+0x2c>)
 800105c:	f002 fae1 	bl	8003622 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001066:	4804      	ldr	r0, [pc, #16]	@ (8001078 <StartDefaultTask+0x2c>)
 8001068:	f002 fadb 	bl	8003622 <HAL_GPIO_WritePin>
	  osDelay(5);
 800106c:	2005      	movs	r0, #5
 800106e:	f004 f8bd 	bl	80051ec <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 8001072:	bf00      	nop
 8001074:	e7ee      	b.n	8001054 <StartDefaultTask+0x8>
 8001076:	bf00      	nop
 8001078:	40011000 	.word	0x40011000

0800107c <startNextionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startNextionTask */
void startNextionTask(void const * argument)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startNextionTask */
  /* Infinite loop */
  for(;;)
  {
	  updateTelemetry();
 8001084:	f7ff fc02 	bl	800088c <updateTelemetry>
	  osDelay(5);
 8001088:	2005      	movs	r0, #5
 800108a:	f004 f8af 	bl	80051ec <osDelay>
	  updateTelemetry();
 800108e:	bf00      	nop
 8001090:	e7f8      	b.n	8001084 <startNextionTask+0x8>

08001092 <startCanTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startCanTask */
void startCanTask(void const * argument)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startCanTask */
  /* Infinite loop */
  for(;;)
  {
	  updateUserInput();
 800109a:	f7ff fd31 	bl	8000b00 <updateUserInput>
	  CAN_Transmit();
 800109e:	f7ff fea3 	bl	8000de8 <CAN_Transmit>
	  osDelay(5);
 80010a2:	2005      	movs	r0, #5
 80010a4:	f004 f8a2 	bl	80051ec <osDelay>
	  updateUserInput();
 80010a8:	bf00      	nop
 80010aa:	e7f6      	b.n	800109a <startCanTask+0x8>

080010ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010be:	f000 fad7 	bl	8001670 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40000800 	.word	0x40000800

080010d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d4:	b672      	cpsid	i
}
 80010d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <Error_Handler+0x8>

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010e2:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_MspInit+0x68>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	4a17      	ldr	r2, [pc, #92]	@ (8001144 <HAL_MspInit+0x68>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6193      	str	r3, [r2, #24]
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_MspInit+0x68>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <HAL_MspInit+0x68>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	4a11      	ldr	r2, [pc, #68]	@ (8001144 <HAL_MspInit+0x68>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001104:	61d3      	str	r3, [r2, #28]
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <HAL_MspInit+0x68>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	210f      	movs	r1, #15
 8001116:	f06f 0001 	mvn.w	r0, #1
 800111a:	f001 fe1a 	bl	8002d52 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_MspInit+0x6c>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <HAL_MspInit+0x6c>)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000

0800114c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a29      	ldr	r2, [pc, #164]	@ (800120c <HAL_ADC_MspInit+0xc0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d14a      	bne.n	8001202 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800116c:	4b28      	ldr	r3, [pc, #160]	@ (8001210 <HAL_ADC_MspInit+0xc4>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a27      	ldr	r2, [pc, #156]	@ (8001210 <HAL_ADC_MspInit+0xc4>)
 8001172:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b25      	ldr	r3, [pc, #148]	@ (8001210 <HAL_ADC_MspInit+0xc4>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <HAL_ADC_MspInit+0xc4>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <HAL_ADC_MspInit+0xc4>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <HAL_ADC_MspInit+0xc4>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800119c:	230f      	movs	r3, #15
 800119e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a0:	2303      	movs	r3, #3
 80011a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	4619      	mov	r1, r3
 80011aa:	481a      	ldr	r0, [pc, #104]	@ (8001214 <HAL_ADC_MspInit+0xc8>)
 80011ac:	f002 f89e 	bl	80032ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011b0:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <HAL_ADC_MspInit+0xcc>)
 80011b2:	4a1a      	ldr	r2, [pc, #104]	@ (800121c <HAL_ADC_MspInit+0xd0>)
 80011b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b6:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <HAL_ADC_MspInit+0xcc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011bc:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <HAL_ADC_MspInit+0xcc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <HAL_ADC_MspInit+0xcc>)
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <HAL_ADC_MspInit+0xcc>)
 80011ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d0:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_ADC_MspInit+0xcc>)
 80011d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <HAL_ADC_MspInit+0xcc>)
 80011da:	2220      	movs	r2, #32
 80011dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <HAL_ADC_MspInit+0xcc>)
 80011e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011e6:	480c      	ldr	r0, [pc, #48]	@ (8001218 <HAL_ADC_MspInit+0xcc>)
 80011e8:	f001 fdde 	bl	8002da8 <HAL_DMA_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80011f2:	f7ff ff6d 	bl	80010d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a07      	ldr	r2, [pc, #28]	@ (8001218 <HAL_ADC_MspInit+0xcc>)
 80011fa:	621a      	str	r2, [r3, #32]
 80011fc:	4a06      	ldr	r2, [pc, #24]	@ (8001218 <HAL_ADC_MspInit+0xcc>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40012400 	.word	0x40012400
 8001210:	40021000 	.word	0x40021000
 8001214:	40010800 	.word	0x40010800
 8001218:	2000037c 	.word	0x2000037c
 800121c:	40020008 	.word	0x40020008

08001220 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a2c      	ldr	r2, [pc, #176]	@ (80012ec <HAL_CAN_MspInit+0xcc>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d151      	bne.n	80012e4 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001240:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <HAL_CAN_MspInit+0xd0>)
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	4a2a      	ldr	r2, [pc, #168]	@ (80012f0 <HAL_CAN_MspInit+0xd0>)
 8001246:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800124a:	61d3      	str	r3, [r2, #28]
 800124c:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <HAL_CAN_MspInit+0xd0>)
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <HAL_CAN_MspInit+0xd0>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a24      	ldr	r2, [pc, #144]	@ (80012f0 <HAL_CAN_MspInit+0xd0>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <HAL_CAN_MspInit+0xd0>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001270:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001274:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800127a:	2301      	movs	r3, #1
 800127c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4619      	mov	r1, r3
 8001284:	481b      	ldr	r0, [pc, #108]	@ (80012f4 <HAL_CAN_MspInit+0xd4>)
 8001286:	f002 f831 	bl	80032ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800128a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	4815      	ldr	r0, [pc, #84]	@ (80012f4 <HAL_CAN_MspInit+0xd4>)
 80012a0:	f002 f824 	bl	80032ec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2105      	movs	r1, #5
 80012a8:	2013      	movs	r0, #19
 80012aa:	f001 fd52 	bl	8002d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80012ae:	2013      	movs	r0, #19
 80012b0:	f001 fd6b 	bl	8002d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2105      	movs	r1, #5
 80012b8:	2014      	movs	r0, #20
 80012ba:	f001 fd4a 	bl	8002d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80012be:	2014      	movs	r0, #20
 80012c0:	f001 fd63 	bl	8002d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2105      	movs	r1, #5
 80012c8:	2015      	movs	r0, #21
 80012ca:	f001 fd42 	bl	8002d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80012ce:	2015      	movs	r0, #21
 80012d0:	f001 fd5b 	bl	8002d8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2105      	movs	r1, #5
 80012d8:	2016      	movs	r0, #22
 80012da:	f001 fd3a 	bl	8002d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80012de:	2016      	movs	r0, #22
 80012e0:	f001 fd53 	bl	8002d8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80012e4:	bf00      	nop
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40006400 	.word	0x40006400
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010800 	.word	0x40010800

080012f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a20      	ldr	r2, [pc, #128]	@ (8001394 <HAL_UART_MspInit+0x9c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d139      	bne.n	800138c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001318:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <HAL_UART_MspInit+0xa0>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a1e      	ldr	r2, [pc, #120]	@ (8001398 <HAL_UART_MspInit+0xa0>)
 800131e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b1c      	ldr	r3, [pc, #112]	@ (8001398 <HAL_UART_MspInit+0xa0>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <HAL_UART_MspInit+0xa0>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a18      	ldr	r2, [pc, #96]	@ (8001398 <HAL_UART_MspInit+0xa0>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <HAL_UART_MspInit+0xa0>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800134c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	4619      	mov	r1, r3
 800135c:	480f      	ldr	r0, [pc, #60]	@ (800139c <HAL_UART_MspInit+0xa4>)
 800135e:	f001 ffc5 	bl	80032ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4619      	mov	r1, r3
 8001376:	4809      	ldr	r0, [pc, #36]	@ (800139c <HAL_UART_MspInit+0xa4>)
 8001378:	f001 ffb8 	bl	80032ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2105      	movs	r1, #5
 8001380:	2025      	movs	r0, #37	@ 0x25
 8001382:	f001 fce6 	bl	8002d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001386:	2025      	movs	r0, #37	@ 0x25
 8001388:	f001 fcff 	bl	8002d8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40013800 	.word	0x40013800
 8001398:	40021000 	.word	0x40021000
 800139c:	40010800 	.word	0x40010800

080013a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08e      	sub	sp, #56	@ 0x38
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80013b6:	4b34      	ldr	r3, [pc, #208]	@ (8001488 <HAL_InitTick+0xe8>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a33      	ldr	r2, [pc, #204]	@ (8001488 <HAL_InitTick+0xe8>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b31      	ldr	r3, [pc, #196]	@ (8001488 <HAL_InitTick+0xe8>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013ce:	f107 0210 	add.w	r2, r7, #16
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f002 fd45 	bl	8003e68 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d103      	bne.n	80013f0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013e8:	f002 fd16 	bl	8003e18 <HAL_RCC_GetPCLK1Freq>
 80013ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80013ee:	e004      	b.n	80013fa <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013f0:	f002 fd12 	bl	8003e18 <HAL_RCC_GetPCLK1Freq>
 80013f4:	4603      	mov	r3, r0
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013fc:	4a23      	ldr	r2, [pc, #140]	@ (800148c <HAL_InitTick+0xec>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0c9b      	lsrs	r3, r3, #18
 8001404:	3b01      	subs	r3, #1
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001408:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <HAL_InitTick+0xf0>)
 800140a:	4a22      	ldr	r2, [pc, #136]	@ (8001494 <HAL_InitTick+0xf4>)
 800140c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800140e:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <HAL_InitTick+0xf0>)
 8001410:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001414:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001416:	4a1e      	ldr	r2, [pc, #120]	@ (8001490 <HAL_InitTick+0xf0>)
 8001418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800141a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800141c:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <HAL_InitTick+0xf0>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001422:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <HAL_InitTick+0xf0>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <HAL_InitTick+0xf0>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800142e:	4818      	ldr	r0, [pc, #96]	@ (8001490 <HAL_InitTick+0xf0>)
 8001430:	f002 fe1e 	bl	8004070 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800143a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800143e:	2b00      	cmp	r3, #0
 8001440:	d11b      	bne.n	800147a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001442:	4813      	ldr	r0, [pc, #76]	@ (8001490 <HAL_InitTick+0xf0>)
 8001444:	f002 fe6c 	bl	8004120 <HAL_TIM_Base_Start_IT>
 8001448:	4603      	mov	r3, r0
 800144a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800144e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001452:	2b00      	cmp	r3, #0
 8001454:	d111      	bne.n	800147a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001456:	201e      	movs	r0, #30
 8001458:	f001 fc97 	bl	8002d8a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	d808      	bhi.n	8001474 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001462:	2200      	movs	r2, #0
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	201e      	movs	r0, #30
 8001468:	f001 fc73 	bl	8002d52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800146c:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <HAL_InitTick+0xf8>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e002      	b.n	800147a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800147a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800147e:	4618      	mov	r0, r3
 8001480:	3738      	adds	r7, #56	@ 0x38
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	431bde83 	.word	0x431bde83
 8001490:	2000045c 	.word	0x2000045c
 8001494:	40000800 	.word	0x40000800
 8001498:	20000004 	.word	0x20000004

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <NMI_Handler+0x4>

080014a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <MemManage_Handler+0x4>

080014b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80014d4:	2008      	movs	r0, #8
 80014d6:	f002 f8bd 	bl	8003654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <DMA1_Channel1_IRQHandler+0x10>)
 80014e6:	f001 fdcd 	bl	8003084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000037c 	.word	0x2000037c

080014f4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80014fa:	f001 f947 	bl	800278c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200003c0 	.word	0x200003c0

08001508 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800150e:	f001 f93d 	bl	800278c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200003c0 	.word	0x200003c0

0800151c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <CAN1_RX1_IRQHandler+0x10>)
 8001522:	f001 f933 	bl	800278c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200003c0 	.word	0x200003c0

08001530 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <CAN1_SCE_IRQHandler+0x10>)
 8001536:	f001 f929 	bl	800278c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200003c0 	.word	0x200003c0

08001544 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001548:	2020      	movs	r0, #32
 800154a:	f002 f883 	bl	8003654 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800154e:	2080      	movs	r0, #128	@ 0x80
 8001550:	f002 f880 	bl	8003654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <TIM4_IRQHandler+0x10>)
 800155e:	f002 fe31 	bl	80041c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000045c 	.word	0x2000045c

0800156c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <USART1_IRQHandler+0x10>)
 8001572:	f003 f897 	bl	80046a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200003e8 	.word	0x200003e8

08001580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001588:	4a14      	ldr	r2, [pc, #80]	@ (80015dc <_sbrk+0x5c>)
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <_sbrk+0x60>)
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <_sbrk+0x64>)
 800159e:	4a12      	ldr	r2, [pc, #72]	@ (80015e8 <_sbrk+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d207      	bcs.n	80015c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b0:	f005 f93a 	bl	8006828 <__errno>
 80015b4:	4603      	mov	r3, r0
 80015b6:	220c      	movs	r2, #12
 80015b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	e009      	b.n	80015d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a05      	ldr	r2, [pc, #20]	@ (80015e4 <_sbrk+0x64>)
 80015d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d2:	68fb      	ldr	r3, [r7, #12]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20005000 	.word	0x20005000
 80015e0:	00000400 	.word	0x00000400
 80015e4:	200004a4 	.word	0x200004a4
 80015e8:	20001348 	.word	0x20001348

080015ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015f8:	f7ff fff8 	bl	80015ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015fc:	480b      	ldr	r0, [pc, #44]	@ (800162c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015fe:	490c      	ldr	r1, [pc, #48]	@ (8001630 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001600:	4a0c      	ldr	r2, [pc, #48]	@ (8001634 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a09      	ldr	r2, [pc, #36]	@ (8001638 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001614:	4c09      	ldr	r4, [pc, #36]	@ (800163c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001622:	f005 f907 	bl	8006834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001626:	f7fe fec1 	bl	80003ac <main>
  bx lr
 800162a:	4770      	bx	lr
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001634:	08007138 	.word	0x08007138
  ldr r2, =_sbss
 8001638:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800163c:	20001348 	.word	0x20001348

08001640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC1_2_IRQHandler>
	...

08001644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <HAL_Init+0x28>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a07      	ldr	r2, [pc, #28]	@ (800166c <HAL_Init+0x28>)
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f001 fb71 	bl	8002d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165a:	200f      	movs	r0, #15
 800165c:	f7ff fea0 	bl	80013a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001660:	f7ff fd3c 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40022000 	.word	0x40022000

08001670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <HAL_IncTick+0x1c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_IncTick+0x20>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a03      	ldr	r2, [pc, #12]	@ (8001690 <HAL_IncTick+0x20>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	20000008 	.word	0x20000008
 8001690:	200004a8 	.word	0x200004a8

08001694 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;
 8001698:	4b02      	ldr	r3, [pc, #8]	@ (80016a4 <HAL_GetTick+0x10>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	200004a8 	.word	0x200004a8

080016a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff fff0 	bl	8001694 <HAL_GetTick>
 80016b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d005      	beq.n	80016ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_Delay+0x44>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ce:	bf00      	nop
 80016d0:	f7ff ffe0 	bl	8001694 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d8f7      	bhi.n	80016d0 <HAL_Delay+0x28>
  {
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008

080016f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e0be      	b.n	8001890 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171c:	2b00      	cmp	r3, #0
 800171e:	d109      	bne.n	8001734 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fd0c 	bl	800114c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 faf5 	bl	8001d24 <ADC_ConversionStop_Disable>
 800173a:	4603      	mov	r3, r0
 800173c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 8099 	bne.w	800187e <HAL_ADC_Init+0x18e>
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 8095 	bne.w	800187e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001758:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800175c:	f023 0302 	bic.w	r3, r3, #2
 8001760:	f043 0202 	orr.w	r2, r3, #2
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001770:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7b1b      	ldrb	r3, [r3, #12]
 8001776:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001778:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	4313      	orrs	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001788:	d003      	beq.n	8001792 <HAL_ADC_Init+0xa2>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d102      	bne.n	8001798 <HAL_ADC_Init+0xa8>
 8001792:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001796:	e000      	b.n	800179a <HAL_ADC_Init+0xaa>
 8001798:	2300      	movs	r3, #0
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7d1b      	ldrb	r3, [r3, #20]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d119      	bne.n	80017dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7b1b      	ldrb	r3, [r3, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d109      	bne.n	80017c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	035a      	lsls	r2, r3, #13
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	e00b      	b.n	80017dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c8:	f043 0220 	orr.w	r2, r3, #32
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	4b28      	ldr	r3, [pc, #160]	@ (8001898 <HAL_ADC_Init+0x1a8>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	68b9      	ldr	r1, [r7, #8]
 8001800:	430b      	orrs	r3, r1
 8001802:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800180c:	d003      	beq.n	8001816 <HAL_ADC_Init+0x126>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d104      	bne.n	8001820 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	3b01      	subs	r3, #1
 800181c:	051b      	lsls	r3, r3, #20
 800181e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001826:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	430a      	orrs	r2, r1
 8001832:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	4b18      	ldr	r3, [pc, #96]	@ (800189c <HAL_ADC_Init+0x1ac>)
 800183c:	4013      	ands	r3, r2
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	429a      	cmp	r2, r3
 8001842:	d10b      	bne.n	800185c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800185a:	e018      	b.n	800188e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001860:	f023 0312 	bic.w	r3, r3, #18
 8001864:	f043 0210 	orr.w	r2, r3, #16
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	f043 0201 	orr.w	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800187c:	e007      	b.n	800188e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001882:	f043 0210 	orr.w	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800188e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	ffe1f7fd 	.word	0xffe1f7fd
 800189c:	ff1f0efe 	.word	0xff1f0efe

080018a0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a64      	ldr	r2, [pc, #400]	@ (8001a48 <HAL_ADC_Start_DMA+0x1a8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d004      	beq.n	80018c4 <HAL_ADC_Start_DMA+0x24>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a63      	ldr	r2, [pc, #396]	@ (8001a4c <HAL_ADC_Start_DMA+0x1ac>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d106      	bne.n	80018d2 <HAL_ADC_Start_DMA+0x32>
 80018c4:	4b60      	ldr	r3, [pc, #384]	@ (8001a48 <HAL_ADC_Start_DMA+0x1a8>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f040 80b3 	bne.w	8001a38 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_Start_DMA+0x40>
 80018dc:	2302      	movs	r3, #2
 80018de:	e0ae      	b.n	8001a3e <HAL_ADC_Start_DMA+0x19e>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f9c1 	bl	8001c70 <ADC_Enable>
 80018ee:	4603      	mov	r3, r0
 80018f0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f040 809a 	bne.w	8001a2e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a4e      	ldr	r2, [pc, #312]	@ (8001a4c <HAL_ADC_Start_DMA+0x1ac>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d105      	bne.n	8001924 <HAL_ADC_Start_DMA+0x84>
 8001918:	4b4b      	ldr	r3, [pc, #300]	@ (8001a48 <HAL_ADC_Start_DMA+0x1a8>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d115      	bne.n	8001950 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800193a:	2b00      	cmp	r3, #0
 800193c:	d026      	beq.n	800198c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001942:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001946:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800194e:	e01d      	b.n	800198c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001954:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a39      	ldr	r2, [pc, #228]	@ (8001a48 <HAL_ADC_Start_DMA+0x1a8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d004      	beq.n	8001970 <HAL_ADC_Start_DMA+0xd0>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a38      	ldr	r2, [pc, #224]	@ (8001a4c <HAL_ADC_Start_DMA+0x1ac>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d10d      	bne.n	800198c <HAL_ADC_Start_DMA+0xec>
 8001970:	4b35      	ldr	r3, [pc, #212]	@ (8001a48 <HAL_ADC_Start_DMA+0x1a8>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d007      	beq.n	800198c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001984:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001990:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199c:	f023 0206 	bic.w	r2, r3, #6
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019a4:	e002      	b.n	80019ac <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a25      	ldr	r2, [pc, #148]	@ (8001a50 <HAL_ADC_Start_DMA+0x1b0>)
 80019ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a24      	ldr	r2, [pc, #144]	@ (8001a54 <HAL_ADC_Start_DMA+0x1b4>)
 80019c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4a23      	ldr	r2, [pc, #140]	@ (8001a58 <HAL_ADC_Start_DMA+0x1b8>)
 80019ca:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f06f 0202 	mvn.w	r2, #2
 80019d4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019e4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a18      	ldr	r0, [r3, #32]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	334c      	adds	r3, #76	@ 0x4c
 80019f0:	4619      	mov	r1, r3
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f001 fa31 	bl	8002e5c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a04:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a08:	d108      	bne.n	8001a1c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001a18:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a1a:	e00f      	b.n	8001a3c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001a2a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a2c:	e006      	b.n	8001a3c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001a36:	e001      	b.n	8001a3c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40012400 	.word	0x40012400
 8001a4c:	40012800 	.word	0x40012800
 8001a50:	08001da7 	.word	0x08001da7
 8001a54:	08001e23 	.word	0x08001e23
 8001a58:	08001e3f 	.word	0x08001e3f

08001a5c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x20>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e0dc      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x1da>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b06      	cmp	r3, #6
 8001aae:	d81c      	bhi.n	8001aea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b05      	subs	r3, #5
 8001ac2:	221f      	movs	r2, #31
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4019      	ands	r1, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	3b05      	subs	r3, #5
 8001adc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ae8:	e03c      	b.n	8001b64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	d81c      	bhi.n	8001b2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	3b23      	subs	r3, #35	@ 0x23
 8001b04:	221f      	movs	r2, #31
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	4019      	ands	r1, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3b23      	subs	r3, #35	@ 0x23
 8001b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b2a:	e01b      	b.n	8001b64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b41      	subs	r3, #65	@ 0x41
 8001b3e:	221f      	movs	r2, #31
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	4019      	ands	r1, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b41      	subs	r3, #65	@ 0x41
 8001b58:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	d91c      	bls.n	8001ba6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68d9      	ldr	r1, [r3, #12]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b1e      	subs	r3, #30
 8001b7e:	2207      	movs	r2, #7
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4019      	ands	r1, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	6898      	ldr	r0, [r3, #8]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	3b1e      	subs	r3, #30
 8001b98:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	e019      	b.n	8001bda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6919      	ldr	r1, [r3, #16]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	4019      	ands	r1, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6898      	ldr	r0, [r3, #8]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d003      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001be6:	2b11      	cmp	r3, #17
 8001be8:	d132      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1d      	ldr	r2, [pc, #116]	@ (8001c64 <HAL_ADC_ConfigChannel+0x1e4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d125      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d126      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c10:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b10      	cmp	r3, #16
 8001c18:	d11a      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c1a:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a13      	ldr	r2, [pc, #76]	@ (8001c6c <HAL_ADC_ConfigChannel+0x1ec>)
 8001c20:	fba2 2303 	umull	r2, r3, r2, r3
 8001c24:	0c9a      	lsrs	r2, r3, #18
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c30:	e002      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f9      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x1b2>
 8001c3e:	e007      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	f043 0220 	orr.w	r2, r3, #32
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40012400 	.word	0x40012400
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	431bde83 	.word	0x431bde83

08001c70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d040      	beq.n	8001d10 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d1c <ADC_Enable+0xac>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d20 <ADC_Enable+0xb0>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	0c9b      	lsrs	r3, r3, #18
 8001caa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cac:	e002      	b.n	8001cb4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f9      	bne.n	8001cae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cba:	f7ff fceb 	bl	8001694 <HAL_GetTick>
 8001cbe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cc0:	e01f      	b.n	8001d02 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cc2:	f7ff fce7 	bl	8001694 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d918      	bls.n	8001d02 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d011      	beq.n	8001d02 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce2:	f043 0210 	orr.w	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e007      	b.n	8001d12 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d1d8      	bne.n	8001cc2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	431bde83 	.word	0x431bde83

08001d24 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d12e      	bne.n	8001d9c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0201 	bic.w	r2, r2, #1
 8001d4c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d4e:	f7ff fca1 	bl	8001694 <HAL_GetTick>
 8001d52:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d54:	e01b      	b.n	8001d8e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d56:	f7ff fc9d 	bl	8001694 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d914      	bls.n	8001d8e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d10d      	bne.n	8001d8e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d76:	f043 0210 	orr.w	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e007      	b.n	8001d9e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d0dc      	beq.n	8001d56 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d127      	bne.n	8001e10 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001dd6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001dda:	d115      	bne.n	8001e08 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d111      	bne.n	8001e08 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e00:	f043 0201 	orr.w	r2, r3, #1
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f7fe ff77 	bl	8000cfc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e0e:	e004      	b.n	8001e1a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4798      	blx	r3
}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f7ff fe13 	bl	8001a5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5c:	f043 0204 	orr.w	r2, r3, #4
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f7ff fe02 	bl	8001a6e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0ed      	b.n	8002060 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff f9c5 	bl	8001220 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea6:	f7ff fbf5 	bl	8001694 <HAL_GetTick>
 8001eaa:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eac:	e012      	b.n	8001ed4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eae:	f7ff fbf1 	bl	8001694 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b0a      	cmp	r3, #10
 8001eba:	d90b      	bls.n	8001ed4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2205      	movs	r2, #5
 8001ecc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0c5      	b.n	8002060 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0e5      	beq.n	8001eae <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0202 	bic.w	r2, r2, #2
 8001ef0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef2:	f7ff fbcf 	bl	8001694 <HAL_GetTick>
 8001ef6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ef8:	e012      	b.n	8001f20 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001efa:	f7ff fbcb 	bl	8001694 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b0a      	cmp	r3, #10
 8001f06:	d90b      	bls.n	8001f20 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2205      	movs	r2, #5
 8001f18:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e09f      	b.n	8002060 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1e5      	bne.n	8001efa <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7e1b      	ldrb	r3, [r3, #24]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d108      	bne.n	8001f48 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e007      	b.n	8001f58 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	7e5b      	ldrb	r3, [r3, #25]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d108      	bne.n	8001f72 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e007      	b.n	8001f82 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7e9b      	ldrb	r3, [r3, #26]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d108      	bne.n	8001f9c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0220 	orr.w	r2, r2, #32
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	e007      	b.n	8001fac <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0220 	bic.w	r2, r2, #32
 8001faa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7edb      	ldrb	r3, [r3, #27]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d108      	bne.n	8001fc6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0210 	bic.w	r2, r2, #16
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e007      	b.n	8001fd6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0210 	orr.w	r2, r2, #16
 8001fd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7f1b      	ldrb	r3, [r3, #28]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d108      	bne.n	8001ff0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0208 	orr.w	r2, r2, #8
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e007      	b.n	8002000 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0208 	bic.w	r2, r2, #8
 8001ffe:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7f5b      	ldrb	r3, [r3, #29]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d108      	bne.n	800201a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0204 	orr.w	r2, r2, #4
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	e007      	b.n	800202a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0204 	bic.w	r2, r2, #4
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	ea42 0103 	orr.w	r1, r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	1e5a      	subs	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800207e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d003      	beq.n	800208e <HAL_CAN_ConfigFilter+0x26>
 8002086:	7cfb      	ldrb	r3, [r7, #19]
 8002088:	2b02      	cmp	r3, #2
 800208a:	f040 80aa 	bne.w	80021e2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	2201      	movs	r2, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	401a      	ands	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d123      	bne.n	8002110 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3248      	adds	r2, #72	@ 0x48
 80020f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002104:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002106:	6979      	ldr	r1, [r7, #20]
 8002108:	3348      	adds	r3, #72	@ 0x48
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d122      	bne.n	800215e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	431a      	orrs	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002138:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3248      	adds	r2, #72	@ 0x48
 800213e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002152:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002154:	6979      	ldr	r1, [r7, #20]
 8002156:	3348      	adds	r3, #72	@ 0x48
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	440b      	add	r3, r1
 800215c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	43db      	mvns	r3, r3
 8002170:	401a      	ands	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002178:	e007      	b.n	800218a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	431a      	orrs	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	43db      	mvns	r3, r3
 800219c:	401a      	ands	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80021a4:	e007      	b.n	80021b6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d107      	bne.n	80021ce <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021d4:	f023 0201 	bic.w	r2, r3, #1
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e006      	b.n	80021f0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
  }
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d12e      	bne.n	800226c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2202      	movs	r2, #2
 8002212:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0201 	bic.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002226:	f7ff fa35 	bl	8001694 <HAL_GetTick>
 800222a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800222c:	e012      	b.n	8002254 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800222e:	f7ff fa31 	bl	8001694 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b0a      	cmp	r3, #10
 800223a:	d90b      	bls.n	8002254 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2205      	movs	r2, #5
 800224c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e012      	b.n	800227a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1e5      	bne.n	800222e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	e006      	b.n	800227a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002270:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
  }
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d133      	bne.n	80022fe <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0201 	orr.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022a6:	f7ff f9f5 	bl	8001694 <HAL_GetTick>
 80022aa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022ac:	e012      	b.n	80022d4 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022ae:	f7ff f9f1 	bl	8001694 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b0a      	cmp	r3, #10
 80022ba:	d90b      	bls.n	80022d4 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2205      	movs	r2, #5
 80022cc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e01b      	b.n	800230c <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0e5      	beq.n	80022ae <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0202 	bic.w	r2, r2, #2
 80022f0:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e006      	b.n	800230c <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002302:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
  }
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	@ 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002328:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002332:	7ffb      	ldrb	r3, [r7, #31]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d003      	beq.n	8002340 <HAL_CAN_AddTxMessage+0x2c>
 8002338:	7ffb      	ldrb	r3, [r7, #31]
 800233a:	2b02      	cmp	r3, #2
 800233c:	f040 80ad 	bne.w	800249a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10a      	bne.n	8002360 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8095 	beq.w	800248a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	0e1b      	lsrs	r3, r3, #24
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800236a:	2201      	movs	r2, #1
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	409a      	lsls	r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10d      	bne.n	8002398 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002386:	68f9      	ldr	r1, [r7, #12]
 8002388:	6809      	ldr	r1, [r1, #0]
 800238a:	431a      	orrs	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3318      	adds	r3, #24
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	440b      	add	r3, r1
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	e00f      	b.n	80023b8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023a2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023a8:	68f9      	ldr	r1, [r7, #12]
 80023aa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80023ac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	3318      	adds	r3, #24
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	440b      	add	r3, r1
 80023b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6819      	ldr	r1, [r3, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	3318      	adds	r3, #24
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	440b      	add	r3, r1
 80023c8:	3304      	adds	r3, #4
 80023ca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	7d1b      	ldrb	r3, [r3, #20]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d111      	bne.n	80023f8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3318      	adds	r3, #24
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	4413      	add	r3, r2
 80023e0:	3304      	adds	r3, #4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	6811      	ldr	r1, [r2, #0]
 80023e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3318      	adds	r3, #24
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	440b      	add	r3, r1
 80023f4:	3304      	adds	r3, #4
 80023f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3307      	adds	r3, #7
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	061a      	lsls	r2, r3, #24
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3306      	adds	r3, #6
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	041b      	lsls	r3, r3, #16
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3305      	adds	r3, #5
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	4313      	orrs	r3, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	3204      	adds	r2, #4
 8002418:	7812      	ldrb	r2, [r2, #0]
 800241a:	4610      	mov	r0, r2
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	6811      	ldr	r1, [r2, #0]
 8002420:	ea43 0200 	orr.w	r2, r3, r0
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	440b      	add	r3, r1
 800242a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800242e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3303      	adds	r3, #3
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	061a      	lsls	r2, r3, #24
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3302      	adds	r3, #2
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	041b      	lsls	r3, r3, #16
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3301      	adds	r3, #1
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	4313      	orrs	r3, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	7812      	ldrb	r2, [r2, #0]
 8002450:	4610      	mov	r0, r2
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	6811      	ldr	r1, [r2, #0]
 8002456:	ea43 0200 	orr.w	r2, r3, r0
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	440b      	add	r3, r1
 8002460:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002464:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3318      	adds	r3, #24
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	4413      	add	r3, r2
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	6811      	ldr	r1, [r2, #0]
 8002478:	f043 0201 	orr.w	r2, r3, #1
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3318      	adds	r3, #24
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	440b      	add	r3, r1
 8002484:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e00e      	b.n	80024a8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e006      	b.n	80024a8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
  }
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3724      	adds	r7, #36	@ 0x24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80024b2:	b480      	push	{r7}
 80024b4:	b087      	sub	sp, #28
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d003      	beq.n	80024d6 <HAL_CAN_GetRxMessage+0x24>
 80024ce:	7dfb      	ldrb	r3, [r7, #23]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	f040 8103 	bne.w	80026dc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10e      	bne.n	80024fa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d116      	bne.n	8002518 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0f7      	b.n	80026ea <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0e8      	b.n	80026ea <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	331b      	adds	r3, #27
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	4413      	add	r3, r2
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0204 	and.w	r2, r3, #4
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10c      	bne.n	8002550 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	331b      	adds	r3, #27
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	4413      	add	r3, r2
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0d5b      	lsrs	r3, r3, #21
 8002546:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e00b      	b.n	8002568 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	331b      	adds	r3, #27
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	4413      	add	r3, r2
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	08db      	lsrs	r3, r3, #3
 8002560:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	331b      	adds	r3, #27
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	4413      	add	r3, r2
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0202 	and.w	r2, r3, #2
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	331b      	adds	r3, #27
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2208      	movs	r2, #8
 800259a:	611a      	str	r2, [r3, #16]
 800259c:	e00b      	b.n	80025b6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	331b      	adds	r3, #27
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	4413      	add	r3, r2
 80025aa:	3304      	adds	r3, #4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 020f 	and.w	r2, r3, #15
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	331b      	adds	r3, #27
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	4413      	add	r3, r2
 80025c2:	3304      	adds	r3, #4
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	331b      	adds	r3, #27
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	4413      	add	r3, r2
 80025da:	3304      	adds	r3, #4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0c1b      	lsrs	r3, r3, #16
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	4413      	add	r3, r2
 8002606:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0a1a      	lsrs	r2, r3, #8
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	4413      	add	r3, r2
 8002620:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	0c1a      	lsrs	r2, r3, #16
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	3302      	adds	r3, #2
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	4413      	add	r3, r2
 800263a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0e1a      	lsrs	r2, r3, #24
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	3303      	adds	r3, #3
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	4413      	add	r3, r2
 8002654:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	3304      	adds	r3, #4
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	4413      	add	r3, r2
 800266c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	0a1a      	lsrs	r2, r3, #8
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	3305      	adds	r3, #5
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	4413      	add	r3, r2
 8002686:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0c1a      	lsrs	r2, r3, #16
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	3306      	adds	r3, #6
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	4413      	add	r3, r2
 80026a0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	0e1a      	lsrs	r2, r3, #24
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	3307      	adds	r3, #7
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d108      	bne.n	80026c8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0220 	orr.w	r2, r2, #32
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	e007      	b.n	80026d8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0220 	orr.w	r2, r2, #32
 80026d6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	e006      	b.n	80026ea <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002708:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800270a:	7afb      	ldrb	r3, [r7, #11]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d002      	beq.n	8002716 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002710:	7afb      	ldrb	r3, [r7, #11]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d10f      	bne.n	8002736 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d106      	bne.n	800272a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e005      	b.n	8002736 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002752:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d002      	beq.n	8002760 <HAL_CAN_ActivateNotification+0x1e>
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d109      	bne.n	8002774 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6959      	ldr	r1, [r3, #20]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	e006      	b.n	8002782 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
  }
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	@ 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d07c      	beq.n	80028cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d023      	beq.n	8002824 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2201      	movs	r2, #1
 80027e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f983 	bl	8002afa <HAL_CAN_TxMailbox0CompleteCallback>
 80027f4:	e016      	b.n	8002824 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
 8002808:	e00c      	b.n	8002824 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
 800281c:	e002      	b.n	8002824 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f986 	bl	8002b30 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d024      	beq.n	8002878 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002836:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f962 	bl	8002b0c <HAL_CAN_TxMailbox1CompleteCallback>
 8002848:	e016      	b.n	8002878 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002850:	2b00      	cmp	r3, #0
 8002852:	d004      	beq.n	800285e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
 800285c:	e00c      	b.n	8002878 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002870:	e002      	b.n	8002878 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f965 	bl	8002b42 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d024      	beq.n	80028cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800288a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f941 	bl	8002b1e <HAL_CAN_TxMailbox2CompleteCallback>
 800289c:	e016      	b.n	80028cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b0:	e00c      	b.n	80028cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c4:	e002      	b.n	80028cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f944 	bl	8002b54 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00c      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2210      	movs	r2, #16
 80028ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d006      	beq.n	8002912 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2208      	movs	r2, #8
 800290a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f933 	bl	8002b78 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d009      	beq.n	8002930 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f91b 	bl	8002b66 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00c      	beq.n	8002954 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002946:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800294a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2210      	movs	r2, #16
 8002952:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d006      	beq.n	8002976 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2208      	movs	r2, #8
 800296e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f90a 	bl	8002b8a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fa9a 	bl	8000ec8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d006      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2210      	movs	r2, #16
 80029ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f8f3 	bl	8002b9c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2208      	movs	r2, #8
 80029d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f8eb 	bl	8002bae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d07b      	beq.n	8002ada <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d072      	beq.n	8002ad2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	f043 0304 	orr.w	r3, r3, #4
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d043      	beq.n	8002ad2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d03e      	beq.n	8002ad2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a5a:	2b60      	cmp	r3, #96	@ 0x60
 8002a5c:	d02b      	beq.n	8002ab6 <HAL_CAN_IRQHandler+0x32a>
 8002a5e:	2b60      	cmp	r3, #96	@ 0x60
 8002a60:	d82e      	bhi.n	8002ac0 <HAL_CAN_IRQHandler+0x334>
 8002a62:	2b50      	cmp	r3, #80	@ 0x50
 8002a64:	d022      	beq.n	8002aac <HAL_CAN_IRQHandler+0x320>
 8002a66:	2b50      	cmp	r3, #80	@ 0x50
 8002a68:	d82a      	bhi.n	8002ac0 <HAL_CAN_IRQHandler+0x334>
 8002a6a:	2b40      	cmp	r3, #64	@ 0x40
 8002a6c:	d019      	beq.n	8002aa2 <HAL_CAN_IRQHandler+0x316>
 8002a6e:	2b40      	cmp	r3, #64	@ 0x40
 8002a70:	d826      	bhi.n	8002ac0 <HAL_CAN_IRQHandler+0x334>
 8002a72:	2b30      	cmp	r3, #48	@ 0x30
 8002a74:	d010      	beq.n	8002a98 <HAL_CAN_IRQHandler+0x30c>
 8002a76:	2b30      	cmp	r3, #48	@ 0x30
 8002a78:	d822      	bhi.n	8002ac0 <HAL_CAN_IRQHandler+0x334>
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d002      	beq.n	8002a84 <HAL_CAN_IRQHandler+0x2f8>
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d005      	beq.n	8002a8e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a82:	e01d      	b.n	8002ac0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	f043 0308 	orr.w	r3, r3, #8
 8002a8a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a8c:	e019      	b.n	8002ac2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	f043 0310 	orr.w	r3, r3, #16
 8002a94:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a96:	e014      	b.n	8002ac2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	f043 0320 	orr.w	r3, r3, #32
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002aa0:	e00f      	b.n	8002ac2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002aaa:	e00a      	b.n	8002ac2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ab4:	e005      	b.n	8002ac2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002abe:	e000      	b.n	8002ac2 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ac0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699a      	ldr	r2, [r3, #24]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ad0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f867 	bl	8002bc0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002af2:	bf00      	nop
 8002af4:	3728      	adds	r7, #40	@ 0x28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1a:	4a04      	ldr	r2, [pc, #16]	@ (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	60d3      	str	r3, [r2, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c34:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <__NVIC_GetPriorityGrouping+0x18>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	f003 0307 	and.w	r3, r3, #7
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0b      	blt.n	8002c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4906      	ldr	r1, [pc, #24]	@ (8002c80 <__NVIC_EnableIRQ+0x34>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	e000e100 	.word	0xe000e100

08002c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	6039      	str	r1, [r7, #0]
 8002c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	db0a      	blt.n	8002cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	490c      	ldr	r1, [pc, #48]	@ (8002cd0 <__NVIC_SetPriority+0x4c>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	0112      	lsls	r2, r2, #4
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cac:	e00a      	b.n	8002cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4908      	ldr	r1, [pc, #32]	@ (8002cd4 <__NVIC_SetPriority+0x50>)
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	3b04      	subs	r3, #4
 8002cbc:	0112      	lsls	r2, r2, #4
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	761a      	strb	r2, [r3, #24]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000e100 	.word	0xe000e100
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	@ 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f1c3 0307 	rsb	r3, r3, #7
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	bf28      	it	cs
 8002cf6:	2304      	movcs	r3, #4
 8002cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d902      	bls.n	8002d08 <NVIC_EncodePriority+0x30>
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3b03      	subs	r3, #3
 8002d06:	e000      	b.n	8002d0a <NVIC_EncodePriority+0x32>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43da      	mvns	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d20:	f04f 31ff 	mov.w	r1, #4294967295
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	43d9      	mvns	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d30:	4313      	orrs	r3, r2
         );
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3724      	adds	r7, #36	@ 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff ff4f 	bl	8002be8 <__NVIC_SetPriorityGrouping>
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d64:	f7ff ff64 	bl	8002c30 <__NVIC_GetPriorityGrouping>
 8002d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	6978      	ldr	r0, [r7, #20]
 8002d70:	f7ff ffb2 	bl	8002cd8 <NVIC_EncodePriority>
 8002d74:	4602      	mov	r2, r0
 8002d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff81 	bl	8002c84 <__NVIC_SetPriority>
}
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff57 	bl	8002c4c <__NVIC_EnableIRQ>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e043      	b.n	8002e46 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4b22      	ldr	r3, [pc, #136]	@ (8002e50 <HAL_DMA_Init+0xa8>)
 8002dc6:	4413      	add	r3, r2
 8002dc8:	4a22      	ldr	r2, [pc, #136]	@ (8002e54 <HAL_DMA_Init+0xac>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	009a      	lsls	r2, r3, #2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e58 <HAL_DMA_Init+0xb0>)
 8002dda:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002df2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002df6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	bffdfff8 	.word	0xbffdfff8
 8002e54:	cccccccd 	.word	0xcccccccd
 8002e58:	40020000 	.word	0x40020000

08002e5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_DMA_Start_IT+0x20>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e04b      	b.n	8002f14 <HAL_DMA_Start_IT+0xb8>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d13a      	bne.n	8002f06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f9eb 	bl	8003290 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 020e 	orr.w	r2, r2, #14
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	e00f      	b.n	8002ef4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0204 	bic.w	r2, r2, #4
 8002ee2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 020a 	orr.w	r2, r2, #10
 8002ef2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	e005      	b.n	8002f12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d008      	beq.n	8002f46 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2204      	movs	r2, #4
 8002f38:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e020      	b.n	8002f88 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 020e 	bic.w	r2, r2, #14
 8002f54:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0201 	bic.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6e:	2101      	movs	r1, #1
 8002f70:	fa01 f202 	lsl.w	r2, r1, r2
 8002f74:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d005      	beq.n	8002fb8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
 8002fb6:	e051      	b.n	800305c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 020e 	bic.w	r2, r2, #14
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0201 	bic.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a22      	ldr	r2, [pc, #136]	@ (8003068 <HAL_DMA_Abort_IT+0xd4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d029      	beq.n	8003036 <HAL_DMA_Abort_IT+0xa2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a21      	ldr	r2, [pc, #132]	@ (800306c <HAL_DMA_Abort_IT+0xd8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d022      	beq.n	8003032 <HAL_DMA_Abort_IT+0x9e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8003070 <HAL_DMA_Abort_IT+0xdc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01a      	beq.n	800302c <HAL_DMA_Abort_IT+0x98>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8003074 <HAL_DMA_Abort_IT+0xe0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d012      	beq.n	8003026 <HAL_DMA_Abort_IT+0x92>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1c      	ldr	r2, [pc, #112]	@ (8003078 <HAL_DMA_Abort_IT+0xe4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00a      	beq.n	8003020 <HAL_DMA_Abort_IT+0x8c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1b      	ldr	r2, [pc, #108]	@ (800307c <HAL_DMA_Abort_IT+0xe8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d102      	bne.n	800301a <HAL_DMA_Abort_IT+0x86>
 8003014:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003018:	e00e      	b.n	8003038 <HAL_DMA_Abort_IT+0xa4>
 800301a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800301e:	e00b      	b.n	8003038 <HAL_DMA_Abort_IT+0xa4>
 8003020:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003024:	e008      	b.n	8003038 <HAL_DMA_Abort_IT+0xa4>
 8003026:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800302a:	e005      	b.n	8003038 <HAL_DMA_Abort_IT+0xa4>
 800302c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003030:	e002      	b.n	8003038 <HAL_DMA_Abort_IT+0xa4>
 8003032:	2310      	movs	r3, #16
 8003034:	e000      	b.n	8003038 <HAL_DMA_Abort_IT+0xa4>
 8003036:	2301      	movs	r3, #1
 8003038:	4a11      	ldr	r2, [pc, #68]	@ (8003080 <HAL_DMA_Abort_IT+0xec>)
 800303a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	4798      	blx	r3
    } 
  }
  return status;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40020008 	.word	0x40020008
 800306c:	4002001c 	.word	0x4002001c
 8003070:	40020030 	.word	0x40020030
 8003074:	40020044 	.word	0x40020044
 8003078:	40020058 	.word	0x40020058
 800307c:	4002006c 	.word	0x4002006c
 8003080:	40020000 	.word	0x40020000

08003084 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a0:	2204      	movs	r2, #4
 80030a2:	409a      	lsls	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d04f      	beq.n	800314c <HAL_DMA_IRQHandler+0xc8>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d04a      	beq.n	800314c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d107      	bne.n	80030d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0204 	bic.w	r2, r2, #4
 80030d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a66      	ldr	r2, [pc, #408]	@ (8003274 <HAL_DMA_IRQHandler+0x1f0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d029      	beq.n	8003132 <HAL_DMA_IRQHandler+0xae>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a65      	ldr	r2, [pc, #404]	@ (8003278 <HAL_DMA_IRQHandler+0x1f4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d022      	beq.n	800312e <HAL_DMA_IRQHandler+0xaa>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a63      	ldr	r2, [pc, #396]	@ (800327c <HAL_DMA_IRQHandler+0x1f8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01a      	beq.n	8003128 <HAL_DMA_IRQHandler+0xa4>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a62      	ldr	r2, [pc, #392]	@ (8003280 <HAL_DMA_IRQHandler+0x1fc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d012      	beq.n	8003122 <HAL_DMA_IRQHandler+0x9e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a60      	ldr	r2, [pc, #384]	@ (8003284 <HAL_DMA_IRQHandler+0x200>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00a      	beq.n	800311c <HAL_DMA_IRQHandler+0x98>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a5f      	ldr	r2, [pc, #380]	@ (8003288 <HAL_DMA_IRQHandler+0x204>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d102      	bne.n	8003116 <HAL_DMA_IRQHandler+0x92>
 8003110:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003114:	e00e      	b.n	8003134 <HAL_DMA_IRQHandler+0xb0>
 8003116:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800311a:	e00b      	b.n	8003134 <HAL_DMA_IRQHandler+0xb0>
 800311c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003120:	e008      	b.n	8003134 <HAL_DMA_IRQHandler+0xb0>
 8003122:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003126:	e005      	b.n	8003134 <HAL_DMA_IRQHandler+0xb0>
 8003128:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800312c:	e002      	b.n	8003134 <HAL_DMA_IRQHandler+0xb0>
 800312e:	2340      	movs	r3, #64	@ 0x40
 8003130:	e000      	b.n	8003134 <HAL_DMA_IRQHandler+0xb0>
 8003132:	2304      	movs	r3, #4
 8003134:	4a55      	ldr	r2, [pc, #340]	@ (800328c <HAL_DMA_IRQHandler+0x208>)
 8003136:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8094 	beq.w	800326a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800314a:	e08e      	b.n	800326a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	2202      	movs	r2, #2
 8003152:	409a      	lsls	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d056      	beq.n	800320a <HAL_DMA_IRQHandler+0x186>
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d051      	beq.n	800320a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10b      	bne.n	800318c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 020a 	bic.w	r2, r2, #10
 8003182:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a38      	ldr	r2, [pc, #224]	@ (8003274 <HAL_DMA_IRQHandler+0x1f0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d029      	beq.n	80031ea <HAL_DMA_IRQHandler+0x166>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a37      	ldr	r2, [pc, #220]	@ (8003278 <HAL_DMA_IRQHandler+0x1f4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d022      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x162>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a35      	ldr	r2, [pc, #212]	@ (800327c <HAL_DMA_IRQHandler+0x1f8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01a      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x15c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a34      	ldr	r2, [pc, #208]	@ (8003280 <HAL_DMA_IRQHandler+0x1fc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d012      	beq.n	80031da <HAL_DMA_IRQHandler+0x156>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a32      	ldr	r2, [pc, #200]	@ (8003284 <HAL_DMA_IRQHandler+0x200>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00a      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x150>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a31      	ldr	r2, [pc, #196]	@ (8003288 <HAL_DMA_IRQHandler+0x204>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d102      	bne.n	80031ce <HAL_DMA_IRQHandler+0x14a>
 80031c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80031cc:	e00e      	b.n	80031ec <HAL_DMA_IRQHandler+0x168>
 80031ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031d2:	e00b      	b.n	80031ec <HAL_DMA_IRQHandler+0x168>
 80031d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031d8:	e008      	b.n	80031ec <HAL_DMA_IRQHandler+0x168>
 80031da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031de:	e005      	b.n	80031ec <HAL_DMA_IRQHandler+0x168>
 80031e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031e4:	e002      	b.n	80031ec <HAL_DMA_IRQHandler+0x168>
 80031e6:	2320      	movs	r3, #32
 80031e8:	e000      	b.n	80031ec <HAL_DMA_IRQHandler+0x168>
 80031ea:	2302      	movs	r3, #2
 80031ec:	4a27      	ldr	r2, [pc, #156]	@ (800328c <HAL_DMA_IRQHandler+0x208>)
 80031ee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d034      	beq.n	800326a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003208:	e02f      	b.n	800326a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	2208      	movs	r2, #8
 8003210:	409a      	lsls	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d028      	beq.n	800326c <HAL_DMA_IRQHandler+0x1e8>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d023      	beq.n	800326c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 020e 	bic.w	r2, r2, #14
 8003232:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323c:	2101      	movs	r1, #1
 800323e:	fa01 f202 	lsl.w	r2, r1, r2
 8003242:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	2b00      	cmp	r3, #0
 8003260:	d004      	beq.n	800326c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	4798      	blx	r3
    }
  }
  return;
 800326a:	bf00      	nop
 800326c:	bf00      	nop
}
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40020008 	.word	0x40020008
 8003278:	4002001c 	.word	0x4002001c
 800327c:	40020030 	.word	0x40020030
 8003280:	40020044 	.word	0x40020044
 8003284:	40020058 	.word	0x40020058
 8003288:	4002006c 	.word	0x4002006c
 800328c:	40020000 	.word	0x40020000

08003290 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a6:	2101      	movs	r1, #1
 80032a8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d108      	bne.n	80032d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032ce:	e007      	b.n	80032e0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	60da      	str	r2, [r3, #12]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
	...

080032ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b08b      	sub	sp, #44	@ 0x2c
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032f6:	2300      	movs	r3, #0
 80032f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032fa:	2300      	movs	r3, #0
 80032fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032fe:	e169      	b.n	80035d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003300:	2201      	movs	r2, #1
 8003302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	429a      	cmp	r2, r3
 800331a:	f040 8158 	bne.w	80035ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4a9a      	ldr	r2, [pc, #616]	@ (800358c <HAL_GPIO_Init+0x2a0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d05e      	beq.n	80033e6 <HAL_GPIO_Init+0xfa>
 8003328:	4a98      	ldr	r2, [pc, #608]	@ (800358c <HAL_GPIO_Init+0x2a0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d875      	bhi.n	800341a <HAL_GPIO_Init+0x12e>
 800332e:	4a98      	ldr	r2, [pc, #608]	@ (8003590 <HAL_GPIO_Init+0x2a4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d058      	beq.n	80033e6 <HAL_GPIO_Init+0xfa>
 8003334:	4a96      	ldr	r2, [pc, #600]	@ (8003590 <HAL_GPIO_Init+0x2a4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d86f      	bhi.n	800341a <HAL_GPIO_Init+0x12e>
 800333a:	4a96      	ldr	r2, [pc, #600]	@ (8003594 <HAL_GPIO_Init+0x2a8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d052      	beq.n	80033e6 <HAL_GPIO_Init+0xfa>
 8003340:	4a94      	ldr	r2, [pc, #592]	@ (8003594 <HAL_GPIO_Init+0x2a8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d869      	bhi.n	800341a <HAL_GPIO_Init+0x12e>
 8003346:	4a94      	ldr	r2, [pc, #592]	@ (8003598 <HAL_GPIO_Init+0x2ac>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d04c      	beq.n	80033e6 <HAL_GPIO_Init+0xfa>
 800334c:	4a92      	ldr	r2, [pc, #584]	@ (8003598 <HAL_GPIO_Init+0x2ac>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d863      	bhi.n	800341a <HAL_GPIO_Init+0x12e>
 8003352:	4a92      	ldr	r2, [pc, #584]	@ (800359c <HAL_GPIO_Init+0x2b0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d046      	beq.n	80033e6 <HAL_GPIO_Init+0xfa>
 8003358:	4a90      	ldr	r2, [pc, #576]	@ (800359c <HAL_GPIO_Init+0x2b0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d85d      	bhi.n	800341a <HAL_GPIO_Init+0x12e>
 800335e:	2b12      	cmp	r3, #18
 8003360:	d82a      	bhi.n	80033b8 <HAL_GPIO_Init+0xcc>
 8003362:	2b12      	cmp	r3, #18
 8003364:	d859      	bhi.n	800341a <HAL_GPIO_Init+0x12e>
 8003366:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <HAL_GPIO_Init+0x80>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	080033e7 	.word	0x080033e7
 8003370:	080033c1 	.word	0x080033c1
 8003374:	080033d3 	.word	0x080033d3
 8003378:	08003415 	.word	0x08003415
 800337c:	0800341b 	.word	0x0800341b
 8003380:	0800341b 	.word	0x0800341b
 8003384:	0800341b 	.word	0x0800341b
 8003388:	0800341b 	.word	0x0800341b
 800338c:	0800341b 	.word	0x0800341b
 8003390:	0800341b 	.word	0x0800341b
 8003394:	0800341b 	.word	0x0800341b
 8003398:	0800341b 	.word	0x0800341b
 800339c:	0800341b 	.word	0x0800341b
 80033a0:	0800341b 	.word	0x0800341b
 80033a4:	0800341b 	.word	0x0800341b
 80033a8:	0800341b 	.word	0x0800341b
 80033ac:	0800341b 	.word	0x0800341b
 80033b0:	080033c9 	.word	0x080033c9
 80033b4:	080033dd 	.word	0x080033dd
 80033b8:	4a79      	ldr	r2, [pc, #484]	@ (80035a0 <HAL_GPIO_Init+0x2b4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033be:	e02c      	b.n	800341a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	623b      	str	r3, [r7, #32]
          break;
 80033c6:	e029      	b.n	800341c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	3304      	adds	r3, #4
 80033ce:	623b      	str	r3, [r7, #32]
          break;
 80033d0:	e024      	b.n	800341c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	3308      	adds	r3, #8
 80033d8:	623b      	str	r3, [r7, #32]
          break;
 80033da:	e01f      	b.n	800341c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	330c      	adds	r3, #12
 80033e2:	623b      	str	r3, [r7, #32]
          break;
 80033e4:	e01a      	b.n	800341c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033ee:	2304      	movs	r3, #4
 80033f0:	623b      	str	r3, [r7, #32]
          break;
 80033f2:	e013      	b.n	800341c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d105      	bne.n	8003408 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033fc:	2308      	movs	r3, #8
 80033fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	611a      	str	r2, [r3, #16]
          break;
 8003406:	e009      	b.n	800341c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003408:	2308      	movs	r3, #8
 800340a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	615a      	str	r2, [r3, #20]
          break;
 8003412:	e003      	b.n	800341c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003414:	2300      	movs	r3, #0
 8003416:	623b      	str	r3, [r7, #32]
          break;
 8003418:	e000      	b.n	800341c <HAL_GPIO_Init+0x130>
          break;
 800341a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2bff      	cmp	r3, #255	@ 0xff
 8003420:	d801      	bhi.n	8003426 <HAL_GPIO_Init+0x13a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	e001      	b.n	800342a <HAL_GPIO_Init+0x13e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3304      	adds	r3, #4
 800342a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2bff      	cmp	r3, #255	@ 0xff
 8003430:	d802      	bhi.n	8003438 <HAL_GPIO_Init+0x14c>
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	e002      	b.n	800343e <HAL_GPIO_Init+0x152>
 8003438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343a:	3b08      	subs	r3, #8
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	210f      	movs	r1, #15
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	401a      	ands	r2, r3
 8003450:	6a39      	ldr	r1, [r7, #32]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	fa01 f303 	lsl.w	r3, r1, r3
 8003458:	431a      	orrs	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80b1 	beq.w	80035ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800346c:	4b4d      	ldr	r3, [pc, #308]	@ (80035a4 <HAL_GPIO_Init+0x2b8>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	4a4c      	ldr	r2, [pc, #304]	@ (80035a4 <HAL_GPIO_Init+0x2b8>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6193      	str	r3, [r2, #24]
 8003478:	4b4a      	ldr	r3, [pc, #296]	@ (80035a4 <HAL_GPIO_Init+0x2b8>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003484:	4a48      	ldr	r2, [pc, #288]	@ (80035a8 <HAL_GPIO_Init+0x2bc>)
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	3302      	adds	r3, #2
 800348c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003490:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	220f      	movs	r2, #15
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4013      	ands	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a40      	ldr	r2, [pc, #256]	@ (80035ac <HAL_GPIO_Init+0x2c0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d013      	beq.n	80034d8 <HAL_GPIO_Init+0x1ec>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a3f      	ldr	r2, [pc, #252]	@ (80035b0 <HAL_GPIO_Init+0x2c4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00d      	beq.n	80034d4 <HAL_GPIO_Init+0x1e8>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a3e      	ldr	r2, [pc, #248]	@ (80035b4 <HAL_GPIO_Init+0x2c8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d007      	beq.n	80034d0 <HAL_GPIO_Init+0x1e4>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a3d      	ldr	r2, [pc, #244]	@ (80035b8 <HAL_GPIO_Init+0x2cc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <HAL_GPIO_Init+0x1e0>
 80034c8:	2303      	movs	r3, #3
 80034ca:	e006      	b.n	80034da <HAL_GPIO_Init+0x1ee>
 80034cc:	2304      	movs	r3, #4
 80034ce:	e004      	b.n	80034da <HAL_GPIO_Init+0x1ee>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e002      	b.n	80034da <HAL_GPIO_Init+0x1ee>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <HAL_GPIO_Init+0x1ee>
 80034d8:	2300      	movs	r3, #0
 80034da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034dc:	f002 0203 	and.w	r2, r2, #3
 80034e0:	0092      	lsls	r2, r2, #2
 80034e2:	4093      	lsls	r3, r2
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034ea:	492f      	ldr	r1, [pc, #188]	@ (80035a8 <HAL_GPIO_Init+0x2bc>)
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	089b      	lsrs	r3, r3, #2
 80034f0:	3302      	adds	r3, #2
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d006      	beq.n	8003512 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003504:	4b2d      	ldr	r3, [pc, #180]	@ (80035bc <HAL_GPIO_Init+0x2d0>)
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	492c      	ldr	r1, [pc, #176]	@ (80035bc <HAL_GPIO_Init+0x2d0>)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	4313      	orrs	r3, r2
 800350e:	608b      	str	r3, [r1, #8]
 8003510:	e006      	b.n	8003520 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003512:	4b2a      	ldr	r3, [pc, #168]	@ (80035bc <HAL_GPIO_Init+0x2d0>)
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	43db      	mvns	r3, r3
 800351a:	4928      	ldr	r1, [pc, #160]	@ (80035bc <HAL_GPIO_Init+0x2d0>)
 800351c:	4013      	ands	r3, r2
 800351e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d006      	beq.n	800353a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800352c:	4b23      	ldr	r3, [pc, #140]	@ (80035bc <HAL_GPIO_Init+0x2d0>)
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	4922      	ldr	r1, [pc, #136]	@ (80035bc <HAL_GPIO_Init+0x2d0>)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	4313      	orrs	r3, r2
 8003536:	60cb      	str	r3, [r1, #12]
 8003538:	e006      	b.n	8003548 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800353a:	4b20      	ldr	r3, [pc, #128]	@ (80035bc <HAL_GPIO_Init+0x2d0>)
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	43db      	mvns	r3, r3
 8003542:	491e      	ldr	r1, [pc, #120]	@ (80035bc <HAL_GPIO_Init+0x2d0>)
 8003544:	4013      	ands	r3, r2
 8003546:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d006      	beq.n	8003562 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003554:	4b19      	ldr	r3, [pc, #100]	@ (80035bc <HAL_GPIO_Init+0x2d0>)
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	4918      	ldr	r1, [pc, #96]	@ (80035bc <HAL_GPIO_Init+0x2d0>)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
 8003560:	e006      	b.n	8003570 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003562:	4b16      	ldr	r3, [pc, #88]	@ (80035bc <HAL_GPIO_Init+0x2d0>)
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	43db      	mvns	r3, r3
 800356a:	4914      	ldr	r1, [pc, #80]	@ (80035bc <HAL_GPIO_Init+0x2d0>)
 800356c:	4013      	ands	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d021      	beq.n	80035c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800357c:	4b0f      	ldr	r3, [pc, #60]	@ (80035bc <HAL_GPIO_Init+0x2d0>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	490e      	ldr	r1, [pc, #56]	@ (80035bc <HAL_GPIO_Init+0x2d0>)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
 8003588:	e021      	b.n	80035ce <HAL_GPIO_Init+0x2e2>
 800358a:	bf00      	nop
 800358c:	10320000 	.word	0x10320000
 8003590:	10310000 	.word	0x10310000
 8003594:	10220000 	.word	0x10220000
 8003598:	10210000 	.word	0x10210000
 800359c:	10120000 	.word	0x10120000
 80035a0:	10110000 	.word	0x10110000
 80035a4:	40021000 	.word	0x40021000
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40010800 	.word	0x40010800
 80035b0:	40010c00 	.word	0x40010c00
 80035b4:	40011000 	.word	0x40011000
 80035b8:	40011400 	.word	0x40011400
 80035bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <HAL_GPIO_Init+0x304>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	4909      	ldr	r1, [pc, #36]	@ (80035f0 <HAL_GPIO_Init+0x304>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	3301      	adds	r3, #1
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	fa22 f303 	lsr.w	r3, r2, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f47f ae8e 	bne.w	8003300 <HAL_GPIO_Init+0x14>
  }
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	372c      	adds	r7, #44	@ 0x2c
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	40010400 	.word	0x40010400

080035f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
 8003610:	e001      	b.n	8003616 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003612:	2300      	movs	r3, #0
 8003614:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003616:	7bfb      	ldrb	r3, [r7, #15]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	460b      	mov	r3, r1
 800362c:	807b      	strh	r3, [r7, #2]
 800362e:	4613      	mov	r3, r2
 8003630:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003632:	787b      	ldrb	r3, [r7, #1]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003638:	887a      	ldrh	r2, [r7, #2]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800363e:	e003      	b.n	8003648 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003640:	887b      	ldrh	r3, [r7, #2]
 8003642:	041a      	lsls	r2, r3, #16
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	611a      	str	r2, [r3, #16]
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
	...

08003654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800365e:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	4013      	ands	r3, r2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d006      	beq.n	8003678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800366a:	4a05      	ldr	r2, [pc, #20]	@ (8003680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fd fc90 	bl	8000f98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40010400 	.word	0x40010400

08003684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e272      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8087 	beq.w	80037b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036a4:	4b92      	ldr	r3, [pc, #584]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d00c      	beq.n	80036ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036b0:	4b8f      	ldr	r3, [pc, #572]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d112      	bne.n	80036e2 <HAL_RCC_OscConfig+0x5e>
 80036bc:	4b8c      	ldr	r3, [pc, #560]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c8:	d10b      	bne.n	80036e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ca:	4b89      	ldr	r3, [pc, #548]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d06c      	beq.n	80037b0 <HAL_RCC_OscConfig+0x12c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d168      	bne.n	80037b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e24c      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_OscConfig+0x76>
 80036ec:	4b80      	ldr	r3, [pc, #512]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a7f      	ldr	r2, [pc, #508]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80036f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	e02e      	b.n	8003758 <HAL_RCC_OscConfig+0xd4>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0x98>
 8003702:	4b7b      	ldr	r3, [pc, #492]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a7a      	ldr	r2, [pc, #488]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4b78      	ldr	r3, [pc, #480]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a77      	ldr	r2, [pc, #476]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003714:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e01d      	b.n	8003758 <HAL_RCC_OscConfig+0xd4>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0xbc>
 8003726:	4b72      	ldr	r3, [pc, #456]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a71      	ldr	r2, [pc, #452]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 800372c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b6f      	ldr	r3, [pc, #444]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a6e      	ldr	r2, [pc, #440]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e00b      	b.n	8003758 <HAL_RCC_OscConfig+0xd4>
 8003740:	4b6b      	ldr	r3, [pc, #428]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a6a      	ldr	r2, [pc, #424]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b68      	ldr	r3, [pc, #416]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a67      	ldr	r2, [pc, #412]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003752:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003756:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fd ff98 	bl	8001694 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003768:	f7fd ff94 	bl	8001694 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	@ 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e200      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377a:	4b5d      	ldr	r3, [pc, #372]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0xe4>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fd ff84 	bl	8001694 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003790:	f7fd ff80 	bl	8001694 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	@ 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e1ec      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a2:	4b53      	ldr	r3, [pc, #332]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x10c>
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d063      	beq.n	8003886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037be:	4b4c      	ldr	r3, [pc, #304]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00b      	beq.n	80037e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037ca:	4b49      	ldr	r3, [pc, #292]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d11c      	bne.n	8003810 <HAL_RCC_OscConfig+0x18c>
 80037d6:	4b46      	ldr	r3, [pc, #280]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d116      	bne.n	8003810 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e2:	4b43      	ldr	r3, [pc, #268]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <HAL_RCC_OscConfig+0x176>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e1c0      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fa:	4b3d      	ldr	r3, [pc, #244]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4939      	ldr	r1, [pc, #228]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380e:	e03a      	b.n	8003886 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d020      	beq.n	800385a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003818:	4b36      	ldr	r3, [pc, #216]	@ (80038f4 <HAL_RCC_OscConfig+0x270>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381e:	f7fd ff39 	bl	8001694 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003826:	f7fd ff35 	bl	8001694 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e1a1      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003838:	4b2d      	ldr	r3, [pc, #180]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003844:	4b2a      	ldr	r3, [pc, #168]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4927      	ldr	r1, [pc, #156]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 8003854:	4313      	orrs	r3, r2
 8003856:	600b      	str	r3, [r1, #0]
 8003858:	e015      	b.n	8003886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800385a:	4b26      	ldr	r3, [pc, #152]	@ (80038f4 <HAL_RCC_OscConfig+0x270>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fd ff18 	bl	8001694 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003868:	f7fd ff14 	bl	8001694 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e180      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387a:	4b1d      	ldr	r3, [pc, #116]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d03a      	beq.n	8003908 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d019      	beq.n	80038ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800389a:	4b17      	ldr	r3, [pc, #92]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a0:	f7fd fef8 	bl	8001694 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a8:	f7fd fef4 	bl	8001694 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e160      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ba:	4b0d      	ldr	r3, [pc, #52]	@ (80038f0 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038c6:	2001      	movs	r0, #1
 80038c8:	f000 fafe 	bl	8003ec8 <RCC_Delay>
 80038cc:	e01c      	b.n	8003908 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ce:	4b0a      	ldr	r3, [pc, #40]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d4:	f7fd fede 	bl	8001694 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038da:	e00f      	b.n	80038fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038dc:	f7fd feda 	bl	8001694 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d908      	bls.n	80038fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e146      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000
 80038f4:	42420000 	.word	0x42420000
 80038f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fc:	4b92      	ldr	r3, [pc, #584]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 80038fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e9      	bne.n	80038dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80a6 	beq.w	8003a62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003916:	2300      	movs	r3, #0
 8003918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800391a:	4b8b      	ldr	r3, [pc, #556]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10d      	bne.n	8003942 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003926:	4b88      	ldr	r3, [pc, #544]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	4a87      	ldr	r2, [pc, #540]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003930:	61d3      	str	r3, [r2, #28]
 8003932:	4b85      	ldr	r3, [pc, #532]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800393e:	2301      	movs	r3, #1
 8003940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003942:	4b82      	ldr	r3, [pc, #520]	@ (8003b4c <HAL_RCC_OscConfig+0x4c8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394a:	2b00      	cmp	r3, #0
 800394c:	d118      	bne.n	8003980 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b4c <HAL_RCC_OscConfig+0x4c8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a7e      	ldr	r2, [pc, #504]	@ (8003b4c <HAL_RCC_OscConfig+0x4c8>)
 8003954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395a:	f7fd fe9b 	bl	8001694 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003962:	f7fd fe97 	bl	8001694 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b64      	cmp	r3, #100	@ 0x64
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e103      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003974:	4b75      	ldr	r3, [pc, #468]	@ (8003b4c <HAL_RCC_OscConfig+0x4c8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d106      	bne.n	8003996 <HAL_RCC_OscConfig+0x312>
 8003988:	4b6f      	ldr	r3, [pc, #444]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4a6e      	ldr	r2, [pc, #440]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6213      	str	r3, [r2, #32]
 8003994:	e02d      	b.n	80039f2 <HAL_RCC_OscConfig+0x36e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x334>
 800399e:	4b6a      	ldr	r3, [pc, #424]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4a69      	ldr	r2, [pc, #420]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	f023 0301 	bic.w	r3, r3, #1
 80039a8:	6213      	str	r3, [r2, #32]
 80039aa:	4b67      	ldr	r3, [pc, #412]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4a66      	ldr	r2, [pc, #408]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	f023 0304 	bic.w	r3, r3, #4
 80039b4:	6213      	str	r3, [r2, #32]
 80039b6:	e01c      	b.n	80039f2 <HAL_RCC_OscConfig+0x36e>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	2b05      	cmp	r3, #5
 80039be:	d10c      	bne.n	80039da <HAL_RCC_OscConfig+0x356>
 80039c0:	4b61      	ldr	r3, [pc, #388]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	4a60      	ldr	r2, [pc, #384]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 80039c6:	f043 0304 	orr.w	r3, r3, #4
 80039ca:	6213      	str	r3, [r2, #32]
 80039cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	6213      	str	r3, [r2, #32]
 80039d8:	e00b      	b.n	80039f2 <HAL_RCC_OscConfig+0x36e>
 80039da:	4b5b      	ldr	r3, [pc, #364]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4a5a      	ldr	r2, [pc, #360]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	6213      	str	r3, [r2, #32]
 80039e6:	4b58      	ldr	r3, [pc, #352]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4a57      	ldr	r2, [pc, #348]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	f023 0304 	bic.w	r3, r3, #4
 80039f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d015      	beq.n	8003a26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fa:	f7fd fe4b 	bl	8001694 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a00:	e00a      	b.n	8003a18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a02:	f7fd fe47 	bl	8001694 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e0b1      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a18:	4b4b      	ldr	r3, [pc, #300]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0ee      	beq.n	8003a02 <HAL_RCC_OscConfig+0x37e>
 8003a24:	e014      	b.n	8003a50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a26:	f7fd fe35 	bl	8001694 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2c:	e00a      	b.n	8003a44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2e:	f7fd fe31 	bl	8001694 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e09b      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a44:	4b40      	ldr	r3, [pc, #256]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ee      	bne.n	8003a2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d105      	bne.n	8003a62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a56:	4b3c      	ldr	r3, [pc, #240]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	4a3b      	ldr	r2, [pc, #236]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8087 	beq.w	8003b7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a6c:	4b36      	ldr	r3, [pc, #216]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d061      	beq.n	8003b3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d146      	bne.n	8003b0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a80:	4b33      	ldr	r3, [pc, #204]	@ (8003b50 <HAL_RCC_OscConfig+0x4cc>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a86:	f7fd fe05 	bl	8001694 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fd fe01 	bl	8001694 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e06d      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa0:	4b29      	ldr	r3, [pc, #164]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f0      	bne.n	8003a8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab4:	d108      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ab6:	4b24      	ldr	r3, [pc, #144]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	4921      	ldr	r1, [pc, #132]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a19      	ldr	r1, [r3, #32]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	491b      	ldr	r1, [pc, #108]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b50 <HAL_RCC_OscConfig+0x4cc>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae6:	f7fd fdd5 	bl	8001694 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aee:	f7fd fdd1 	bl	8001694 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e03d      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b00:	4b11      	ldr	r3, [pc, #68]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x46a>
 8003b0c:	e035      	b.n	8003b7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0e:	4b10      	ldr	r3, [pc, #64]	@ (8003b50 <HAL_RCC_OscConfig+0x4cc>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fd fdbe 	bl	8001694 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1c:	f7fd fdba 	bl	8001694 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e026      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2e:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <HAL_RCC_OscConfig+0x4c4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x498>
 8003b3a:	e01e      	b.n	8003b7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d107      	bne.n	8003b54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e019      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_RCC_OscConfig+0x500>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d106      	bne.n	8003b76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d001      	beq.n	8003b7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000

08003b88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0d0      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d48 <HAL_RCC_ClockConfig+0x1c0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d910      	bls.n	8003bcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b67      	ldr	r3, [pc, #412]	@ (8003d48 <HAL_RCC_ClockConfig+0x1c0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 0207 	bic.w	r2, r3, #7
 8003bb2:	4965      	ldr	r1, [pc, #404]	@ (8003d48 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bba:	4b63      	ldr	r3, [pc, #396]	@ (8003d48 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0b8      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d020      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be4:	4b59      	ldr	r3, [pc, #356]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	4a58      	ldr	r2, [pc, #352]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003bea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003bee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bfc:	4b53      	ldr	r3, [pc, #332]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4a52      	ldr	r2, [pc, #328]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c08:	4b50      	ldr	r3, [pc, #320]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	494d      	ldr	r1, [pc, #308]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d040      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	4b47      	ldr	r3, [pc, #284]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d115      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e07f      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c46:	4b41      	ldr	r3, [pc, #260]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e073      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c56:	4b3d      	ldr	r3, [pc, #244]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e06b      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c66:	4b39      	ldr	r3, [pc, #228]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f023 0203 	bic.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4936      	ldr	r1, [pc, #216]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c78:	f7fd fd0c 	bl	8001694 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c80:	f7fd fd08 	bl	8001694 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e053      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	4b2d      	ldr	r3, [pc, #180]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 020c 	and.w	r2, r3, #12
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d1eb      	bne.n	8003c80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b27      	ldr	r3, [pc, #156]	@ (8003d48 <HAL_RCC_ClockConfig+0x1c0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d210      	bcs.n	8003cd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b24      	ldr	r3, [pc, #144]	@ (8003d48 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 0207 	bic.w	r2, r3, #7
 8003cbe:	4922      	ldr	r1, [pc, #136]	@ (8003d48 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b20      	ldr	r3, [pc, #128]	@ (8003d48 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e032      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce4:	4b19      	ldr	r3, [pc, #100]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4916      	ldr	r1, [pc, #88]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d02:	4b12      	ldr	r3, [pc, #72]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	490e      	ldr	r1, [pc, #56]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d16:	f000 f821 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	490a      	ldr	r1, [pc, #40]	@ (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003d28:	5ccb      	ldrb	r3, [r1, r3]
 8003d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2e:	4a09      	ldr	r2, [pc, #36]	@ (8003d54 <HAL_RCC_ClockConfig+0x1cc>)
 8003d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d32:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <HAL_RCC_ClockConfig+0x1d0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd fb32 	bl	80013a0 <HAL_InitTick>

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40022000 	.word	0x40022000
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	080070c8 	.word	0x080070c8
 8003d54:	20000000 	.word	0x20000000
 8003d58:	20000004 	.word	0x20000004

08003d5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d76:	4b1e      	ldr	r3, [pc, #120]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d002      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x30>
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d003      	beq.n	8003d92 <HAL_RCC_GetSysClockFreq+0x36>
 8003d8a:	e027      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d8c:	4b19      	ldr	r3, [pc, #100]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d8e:	613b      	str	r3, [r7, #16]
      break;
 8003d90:	e027      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	0c9b      	lsrs	r3, r3, #18
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	4a17      	ldr	r2, [pc, #92]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d9c:	5cd3      	ldrb	r3, [r2, r3]
 8003d9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d010      	beq.n	8003dcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003daa:	4b11      	ldr	r3, [pc, #68]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	0c5b      	lsrs	r3, r3, #17
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	4a11      	ldr	r2, [pc, #68]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003db6:	5cd3      	ldrb	r3, [r2, r3]
 8003db8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dbe:	fb03 f202 	mul.w	r2, r3, r2
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	e004      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a0c      	ldr	r2, [pc, #48]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dd0:	fb02 f303 	mul.w	r3, r2, r3
 8003dd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	613b      	str	r3, [r7, #16]
      break;
 8003dda:	e002      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ddc:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dde:	613b      	str	r3, [r7, #16]
      break;
 8003de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003de2:	693b      	ldr	r3, [r7, #16]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000
 8003df4:	007a1200 	.word	0x007a1200
 8003df8:	080070e0 	.word	0x080070e0
 8003dfc:	080070f0 	.word	0x080070f0
 8003e00:	003d0900 	.word	0x003d0900

08003e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e08:	4b02      	ldr	r3, [pc, #8]	@ (8003e14 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr
 8003e14:	20000000 	.word	0x20000000

08003e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e1c:	f7ff fff2 	bl	8003e04 <HAL_RCC_GetHCLKFreq>
 8003e20:	4602      	mov	r2, r0
 8003e22:	4b05      	ldr	r3, [pc, #20]	@ (8003e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	4903      	ldr	r1, [pc, #12]	@ (8003e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e2e:	5ccb      	ldrb	r3, [r1, r3]
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	080070d8 	.word	0x080070d8

08003e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e44:	f7ff ffde 	bl	8003e04 <HAL_RCC_GetHCLKFreq>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	4b05      	ldr	r3, [pc, #20]	@ (8003e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	0adb      	lsrs	r3, r3, #11
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	4903      	ldr	r1, [pc, #12]	@ (8003e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e56:	5ccb      	ldrb	r3, [r1, r3]
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000
 8003e64:	080070d8 	.word	0x080070d8

08003e68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	220f      	movs	r2, #15
 8003e76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e78:	4b11      	ldr	r3, [pc, #68]	@ (8003ec0 <HAL_RCC_GetClockConfig+0x58>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 0203 	and.w	r2, r3, #3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e84:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec0 <HAL_RCC_GetClockConfig+0x58>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_RCC_GetClockConfig+0x58>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e9c:	4b08      	ldr	r3, [pc, #32]	@ (8003ec0 <HAL_RCC_GetClockConfig+0x58>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	08db      	lsrs	r3, r3, #3
 8003ea2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003eaa:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0207 	and.w	r2, r3, #7
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40022000 	.word	0x40022000

08003ec8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8003efc <RCC_Delay+0x34>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8003f00 <RCC_Delay+0x38>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	0a5b      	lsrs	r3, r3, #9
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ee4:	bf00      	nop
  }
  while (Delay --);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1e5a      	subs	r2, r3, #1
 8003eea:	60fa      	str	r2, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f9      	bne.n	8003ee4 <RCC_Delay+0x1c>
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr
 8003efc:	20000000 	.word	0x20000000
 8003f00:	10624dd3 	.word	0x10624dd3

08003f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d07d      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f20:	2300      	movs	r3, #0
 8003f22:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f24:	4b4f      	ldr	r3, [pc, #316]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10d      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f30:	4b4c      	ldr	r3, [pc, #304]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	4a4b      	ldr	r2, [pc, #300]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f3a:	61d3      	str	r3, [r2, #28]
 8003f3c:	4b49      	ldr	r3, [pc, #292]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	4b46      	ldr	r3, [pc, #280]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d118      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f58:	4b43      	ldr	r3, [pc, #268]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a42      	ldr	r2, [pc, #264]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f64:	f7fd fb96 	bl	8001694 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6a:	e008      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6c:	f7fd fb92 	bl	8001694 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	@ 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e06d      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f8a:	4b36      	ldr	r3, [pc, #216]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02e      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d027      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb8:	4b2c      	ldr	r3, [pc, #176]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fbe:	4a29      	ldr	r2, [pc, #164]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d014      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fce:	f7fd fb61 	bl	8001694 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	e00a      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f7fd fb5d 	bl	8001694 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e036      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fec:	4b1d      	ldr	r3, [pc, #116]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0ee      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4917      	ldr	r1, [pc, #92]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004006:	4313      	orrs	r3, r2
 8004008:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800400a:	7dfb      	ldrb	r3, [r7, #23]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d105      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004010:	4b14      	ldr	r3, [pc, #80]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	4a13      	ldr	r2, [pc, #76]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800401a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004028:	4b0e      	ldr	r3, [pc, #56]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	490b      	ldr	r1, [pc, #44]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004036:	4313      	orrs	r3, r2
 8004038:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004046:	4b07      	ldr	r3, [pc, #28]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	4904      	ldr	r1, [pc, #16]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	40007000 	.word	0x40007000
 800406c:	42420440 	.word	0x42420440

08004070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e041      	b.n	8004106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f839 	bl	800410e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f000 f99c 	bl	80043ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	d001      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e03a      	b.n	80041ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a18      	ldr	r2, [pc, #96]	@ (80041b8 <HAL_TIM_Base_Start_IT+0x98>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x58>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004162:	d009      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x58>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a14      	ldr	r2, [pc, #80]	@ (80041bc <HAL_TIM_Base_Start_IT+0x9c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x58>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a13      	ldr	r2, [pc, #76]	@ (80041c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d111      	bne.n	800419c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b06      	cmp	r3, #6
 8004188:	d010      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0201 	orr.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419a:	e007      	b.n	80041ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40000800 	.word	0x40000800

080041c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d020      	beq.n	8004228 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01b      	beq.n	8004228 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0202 	mvn.w	r2, #2
 80041f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f8d1 	bl	80043b6 <HAL_TIM_IC_CaptureCallback>
 8004214:	e005      	b.n	8004222 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8c4 	bl	80043a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f8d3 	bl	80043c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	d020      	beq.n	8004274 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01b      	beq.n	8004274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0204 	mvn.w	r2, #4
 8004244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2202      	movs	r2, #2
 800424a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f8ab 	bl	80043b6 <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f89e 	bl	80043a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f8ad 	bl	80043c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d020      	beq.n	80042c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01b      	beq.n	80042c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0208 	mvn.w	r2, #8
 8004290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2204      	movs	r2, #4
 8004296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f885 	bl	80043b6 <HAL_TIM_IC_CaptureCallback>
 80042ac:	e005      	b.n	80042ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f878 	bl	80043a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f887 	bl	80043c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d020      	beq.n	800430c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0210 	mvn.w	r2, #16
 80042dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2208      	movs	r2, #8
 80042e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f85f 	bl	80043b6 <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f852 	bl	80043a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f861 	bl	80043c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00c      	beq.n	8004330 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d007      	beq.n	8004330 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0201 	mvn.w	r2, #1
 8004328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc febe 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00c      	beq.n	8004354 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800434c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8c3 	bl	80044da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00c      	beq.n	8004378 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d007      	beq.n	8004378 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f831 	bl	80043da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00c      	beq.n	800439c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d007      	beq.n	800439c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0220 	mvn.w	r2, #32
 8004394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f896 	bl	80044c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a2f      	ldr	r2, [pc, #188]	@ (80044bc <TIM_Base_SetConfig+0xd0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00b      	beq.n	800441c <TIM_Base_SetConfig+0x30>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800440a:	d007      	beq.n	800441c <TIM_Base_SetConfig+0x30>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a2c      	ldr	r2, [pc, #176]	@ (80044c0 <TIM_Base_SetConfig+0xd4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_Base_SetConfig+0x30>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a2b      	ldr	r2, [pc, #172]	@ (80044c4 <TIM_Base_SetConfig+0xd8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d108      	bne.n	800442e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a22      	ldr	r2, [pc, #136]	@ (80044bc <TIM_Base_SetConfig+0xd0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00b      	beq.n	800444e <TIM_Base_SetConfig+0x62>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800443c:	d007      	beq.n	800444e <TIM_Base_SetConfig+0x62>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a1f      	ldr	r2, [pc, #124]	@ (80044c0 <TIM_Base_SetConfig+0xd4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_Base_SetConfig+0x62>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a1e      	ldr	r2, [pc, #120]	@ (80044c4 <TIM_Base_SetConfig+0xd8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d108      	bne.n	8004460 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a0d      	ldr	r2, [pc, #52]	@ (80044bc <TIM_Base_SetConfig+0xd0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d103      	bne.n	8004494 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f023 0201 	bic.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	611a      	str	r2, [r3, #16]
  }
}
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40000800 	.word	0x40000800

080044c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr

080044da <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr

080044ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e042      	b.n	8004584 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fc fef0 	bl	80012f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2224      	movs	r2, #36	@ 0x24
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800452e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fd63 	bl	8004ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	@ 0x28
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d175      	bne.n	8004698 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_UART_Transmit+0x2c>
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e06e      	b.n	800469a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2221      	movs	r2, #33	@ 0x21
 80045c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ca:	f7fd f863 	bl	8001694 <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045e4:	d108      	bne.n	80045f8 <HAL_UART_Transmit+0x6c>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e003      	b.n	8004600 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004600:	e02e      	b.n	8004660 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2200      	movs	r2, #0
 800460a:	2180      	movs	r1, #128	@ 0x80
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fb01 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e03a      	b.n	800469a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004638:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	3302      	adds	r3, #2
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	e007      	b.n	8004652 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	3301      	adds	r3, #1
 8004650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1cb      	bne.n	8004602 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2200      	movs	r2, #0
 8004672:	2140      	movs	r1, #64	@ 0x40
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 facd 	bl	8004c14 <UART_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e006      	b.n	800469a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	e000      	b.n	800469a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004698:	2302      	movs	r3, #2
  }
}
 800469a:	4618      	mov	r0, r3
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b0ba      	sub	sp, #232	@ 0xe8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80046e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10f      	bne.n	800470a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <HAL_UART_IRQHandler+0x66>
 80046f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fbbc 	bl	8004e80 <UART_Receive_IT>
      return;
 8004708:	e25b      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800470a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 80de 	beq.w	80048d0 <HAL_UART_IRQHandler+0x22c>
 8004714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d106      	bne.n	800472e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004724:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80d1 	beq.w	80048d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800472e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00b      	beq.n	8004752 <HAL_UART_IRQHandler+0xae>
 800473a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800473e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474a:	f043 0201 	orr.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <HAL_UART_IRQHandler+0xd2>
 800475e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476e:	f043 0202 	orr.w	r2, r3, #2
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00b      	beq.n	800479a <HAL_UART_IRQHandler+0xf6>
 8004782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004792:	f043 0204 	orr.w	r2, r3, #4
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800479a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d011      	beq.n	80047ca <HAL_UART_IRQHandler+0x126>
 80047a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d105      	bne.n	80047be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c2:	f043 0208 	orr.w	r2, r3, #8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 81f2 	beq.w	8004bb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_UART_IRQHandler+0x14e>
 80047e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fb47 	bl	8004e80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf14      	ite	ne
 8004800:	2301      	movne	r3, #1
 8004802:	2300      	moveq	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d103      	bne.n	800481e <HAL_UART_IRQHandler+0x17a>
 8004816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d04f      	beq.n	80048be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa51 	bl	8004cc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d041      	beq.n	80048b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3314      	adds	r3, #20
 8004838:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004848:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800484c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3314      	adds	r3, #20
 800485a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800485e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004862:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800486a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1d9      	bne.n	8004832 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d013      	beq.n	80048ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a84 <HAL_UART_IRQHandler+0x3e0>)
 800488c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fb7e 	bl	8002f94 <HAL_DMA_Abort_IT>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d016      	beq.n	80048cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048a8:	4610      	mov	r0, r2
 80048aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ac:	e00e      	b.n	80048cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f99c 	bl	8004bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b4:	e00a      	b.n	80048cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f998 	bl	8004bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048bc:	e006      	b.n	80048cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f994 	bl	8004bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80048ca:	e175      	b.n	8004bb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048cc:	bf00      	nop
    return;
 80048ce:	e173      	b.n	8004bb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	f040 814f 	bne.w	8004b78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8148 	beq.w	8004b78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8141 	beq.w	8004b78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048f6:	2300      	movs	r3, #0
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80b6 	beq.w	8004a88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004928:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8145 	beq.w	8004bbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800493a:	429a      	cmp	r2, r3
 800493c:	f080 813e 	bcs.w	8004bbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004946:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b20      	cmp	r3, #32
 8004950:	f000 8088 	beq.w	8004a64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800496a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800496e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004972:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004980:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004984:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800498c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004998:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1d9      	bne.n	8004954 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3314      	adds	r3, #20
 80049a6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3314      	adds	r3, #20
 80049c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049c4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e1      	bne.n	80049a0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3314      	adds	r3, #20
 80049e2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3314      	adds	r3, #20
 80049fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a06:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e3      	bne.n	80049dc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	330c      	adds	r3, #12
 8004a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a34:	f023 0310 	bic.w	r3, r3, #16
 8004a38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	330c      	adds	r3, #12
 8004a42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a46:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a48:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e3      	bne.n	8004a22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe fa5c 	bl	8002f1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	4619      	mov	r1, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f8bf 	bl	8004bfe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a80:	e09c      	b.n	8004bbc <HAL_UART_IRQHandler+0x518>
 8004a82:	bf00      	nop
 8004a84:	08004d8b 	.word	0x08004d8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 808e 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8089 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	330c      	adds	r3, #12
 8004ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004ad2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ad4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ad8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e3      	bne.n	8004aae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3314      	adds	r3, #20
 8004aec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	623b      	str	r3, [r7, #32]
   return(result);
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3314      	adds	r3, #20
 8004b06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e3      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0310 	bic.w	r3, r3, #16
 8004b42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b50:	61fa      	str	r2, [r7, #28]
 8004b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	69b9      	ldr	r1, [r7, #24]
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e3      	bne.n	8004b2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f844 	bl	8004bfe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b76:	e023      	b.n	8004bc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <HAL_UART_IRQHandler+0x4f4>
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f90e 	bl	8004db2 <UART_Transmit_IT>
    return;
 8004b96:	e014      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00e      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
 8004ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f94d 	bl	8004e50 <UART_EndTransmit_IT>
    return;
 8004bb6:	e004      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004bb8:	bf00      	nop
 8004bba:	e002      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004bbc:	bf00      	nop
 8004bbe:	e000      	b.n	8004bc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004bc0:	bf00      	nop
  }
}
 8004bc2:	37e8      	adds	r7, #232	@ 0xe8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr

08004bda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr

08004bec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr

08004bfe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	460b      	mov	r3, r1
 8004c08:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	4613      	mov	r3, r2
 8004c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c24:	e03b      	b.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d037      	beq.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2e:	f7fc fd31 	bl	8001694 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	6a3a      	ldr	r2, [r7, #32]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d302      	bcc.n	8004c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e03a      	b.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d023      	beq.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b80      	cmp	r3, #128	@ 0x80
 8004c5a:	d020      	beq.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b40      	cmp	r3, #64	@ 0x40
 8004c60:	d01d      	beq.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d116      	bne.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 f81d 	bl	8004cc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2208      	movs	r2, #8
 8004c90:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e00f      	b.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	bf0c      	ite	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	2300      	movne	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d0b4      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b095      	sub	sp, #84	@ 0x54
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	330c      	adds	r3, #12
 8004cec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cee:	643a      	str	r2, [r7, #64]	@ 0x40
 8004cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e5      	bne.n	8004cce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3314      	adds	r3, #20
 8004d08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3314      	adds	r3, #20
 8004d20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e5      	bne.n	8004d02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d119      	bne.n	8004d72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	330c      	adds	r3, #12
 8004d44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f023 0310 	bic.w	r3, r3, #16
 8004d54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d5e:	61ba      	str	r2, [r7, #24]
 8004d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6979      	ldr	r1, [r7, #20]
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e5      	bne.n	8004d3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d80:	bf00      	nop
 8004d82:	3754      	adds	r7, #84	@ 0x54
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr

08004d8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff ff21 	bl	8004bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b21      	cmp	r3, #33	@ 0x21
 8004dc4:	d13e      	bne.n	8004e44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dce:	d114      	bne.n	8004dfa <UART_Transmit_IT+0x48>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d110      	bne.n	8004dfa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	1c9a      	adds	r2, r3, #2
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	621a      	str	r2, [r3, #32]
 8004df8:	e008      	b.n	8004e0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	1c59      	adds	r1, r3, #1
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6211      	str	r1, [r2, #32]
 8004e04:	781a      	ldrb	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10f      	bne.n	8004e40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr

08004e50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fea9 	bl	8004bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08c      	sub	sp, #48	@ 0x30
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b22      	cmp	r3, #34	@ 0x22
 8004e92:	f040 80ae 	bne.w	8004ff2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e9e:	d117      	bne.n	8004ed0 <UART_Receive_IT+0x50>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d113      	bne.n	8004ed0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	1c9a      	adds	r2, r3, #2
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ece:	e026      	b.n	8004f1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ee2:	d007      	beq.n	8004ef4 <UART_Receive_IT+0x74>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <UART_Receive_IT+0x82>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e008      	b.n	8004f14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d15d      	bne.n	8004fee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0220 	bic.w	r2, r2, #32
 8004f40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695a      	ldr	r2, [r3, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d135      	bne.n	8004fe4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	330c      	adds	r3, #12
 8004f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f023 0310 	bic.w	r3, r3, #16
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	330c      	adds	r3, #12
 8004f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9e:	623a      	str	r2, [r7, #32]
 8004fa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	69f9      	ldr	r1, [r7, #28]
 8004fa4:	6a3a      	ldr	r2, [r7, #32]
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e5      	bne.n	8004f7e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d10a      	bne.n	8004fd6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fda:	4619      	mov	r1, r3
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fe0e 	bl	8004bfe <HAL_UARTEx_RxEventCallback>
 8004fe2:	e002      	b.n	8004fea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7ff fdf8 	bl	8004bda <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	e002      	b.n	8004ff4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ff2:	2302      	movs	r3, #2
  }
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3730      	adds	r7, #48	@ 0x30
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005036:	f023 030c 	bic.w	r3, r3, #12
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	430b      	orrs	r3, r1
 8005042:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2c      	ldr	r2, [pc, #176]	@ (8005110 <UART_SetConfig+0x114>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d103      	bne.n	800506c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005064:	f7fe feec 	bl	8003e40 <HAL_RCC_GetPCLK2Freq>
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	e002      	b.n	8005072 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800506c:	f7fe fed4 	bl	8003e18 <HAL_RCC_GetPCLK1Freq>
 8005070:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009a      	lsls	r2, r3, #2
 800507c:	441a      	add	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	4a22      	ldr	r2, [pc, #136]	@ (8005114 <UART_SetConfig+0x118>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	0119      	lsls	r1, r3, #4
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	009a      	lsls	r2, r3, #2
 800509c:	441a      	add	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80050a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005114 <UART_SetConfig+0x118>)
 80050aa:	fba3 0302 	umull	r0, r3, r3, r2
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	2064      	movs	r0, #100	@ 0x64
 80050b2:	fb00 f303 	mul.w	r3, r0, r3
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	3332      	adds	r3, #50	@ 0x32
 80050bc:	4a15      	ldr	r2, [pc, #84]	@ (8005114 <UART_SetConfig+0x118>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050c8:	4419      	add	r1, r3
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009a      	lsls	r2, r3, #2
 80050d4:	441a      	add	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80050e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005114 <UART_SetConfig+0x118>)
 80050e2:	fba3 0302 	umull	r0, r3, r3, r2
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	2064      	movs	r0, #100	@ 0x64
 80050ea:	fb00 f303 	mul.w	r3, r0, r3
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	3332      	adds	r3, #50	@ 0x32
 80050f4:	4a07      	ldr	r2, [pc, #28]	@ (8005114 <UART_SetConfig+0x118>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	f003 020f 	and.w	r2, r3, #15
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	440a      	add	r2, r1
 8005106:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40013800 	.word	0x40013800
 8005114:	51eb851f 	.word	0x51eb851f

08005118 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800512a:	2b84      	cmp	r3, #132	@ 0x84
 800512c:	d005      	beq.n	800513a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800512e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4413      	add	r3, r2
 8005136:	3303      	adds	r3, #3
 8005138:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800513a:	68fb      	ldr	r3, [r7, #12]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr

08005146 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800514a:	f000 faf7 	bl	800573c <vTaskStartScheduler>
  
  return osOK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	bd80      	pop	{r7, pc}

08005154 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005156:	b089      	sub	sp, #36	@ 0x24
 8005158:	af04      	add	r7, sp, #16
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d020      	beq.n	80051a8 <osThreadCreate+0x54>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01c      	beq.n	80051a8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685c      	ldr	r4, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691e      	ldr	r6, [r3, #16]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff ffc9 	bl	8005118 <makeFreeRtosPriority>
 8005186:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005190:	9202      	str	r2, [sp, #8]
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	9100      	str	r1, [sp, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	4632      	mov	r2, r6
 800519a:	4629      	mov	r1, r5
 800519c:	4620      	mov	r0, r4
 800519e:	f000 f8e8 	bl	8005372 <xTaskCreateStatic>
 80051a2:	4603      	mov	r3, r0
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	e01c      	b.n	80051e2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685c      	ldr	r4, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051b4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff ffab 	bl	8005118 <makeFreeRtosPriority>
 80051c2:	4602      	mov	r2, r0
 80051c4:	f107 030c 	add.w	r3, r7, #12
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	9200      	str	r2, [sp, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	4632      	mov	r2, r6
 80051d0:	4629      	mov	r1, r5
 80051d2:	4620      	mov	r0, r4
 80051d4:	f000 f92d 	bl	8005432 <xTaskCreate>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d001      	beq.n	80051e2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	e000      	b.n	80051e4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80051e2:	68fb      	ldr	r3, [r7, #12]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <osDelay+0x16>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	e000      	b.n	8005204 <osDelay+0x18>
 8005202:	2301      	movs	r3, #1
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fa63 	bl	80056d0 <vTaskDelay>
  
  return osOK;
 800520a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f103 0208 	add.w	r2, r3, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f04f 32ff 	mov.w	r2, #4294967295
 800522c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f103 0208 	add.w	r2, r3, #8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f103 0208 	add.w	r2, r3, #8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr

0800526a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800526a:	b480      	push	{r7}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	601a      	str	r2, [r3, #0]
}
 80052a6:	bf00      	nop
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d103      	bne.n	80052d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	e00c      	b.n	80052ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3308      	adds	r3, #8
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	e002      	b.n	80052de <vListInsert+0x2e>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d2f6      	bcs.n	80052d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	601a      	str	r2, [r3, #0]
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6892      	ldr	r2, [r2, #8]
 8005336:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6852      	ldr	r2, [r2, #4]
 8005340:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	429a      	cmp	r2, r3
 800534a:	d103      	bne.n	8005354 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	1e5a      	subs	r2, r3, #1
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr

08005372 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005372:	b580      	push	{r7, lr}
 8005374:	b08e      	sub	sp, #56	@ 0x38
 8005376:	af04      	add	r7, sp, #16
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10b      	bne.n	800539e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005398:	bf00      	nop
 800539a:	bf00      	nop
 800539c:	e7fd      	b.n	800539a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800539e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10b      	bne.n	80053bc <xTaskCreateStatic+0x4a>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	61fb      	str	r3, [r7, #28]
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	e7fd      	b.n	80053b8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053bc:	23a0      	movs	r3, #160	@ 0xa0
 80053be:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80053c4:	d00b      	beq.n	80053de <xTaskCreateStatic+0x6c>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	61bb      	str	r3, [r7, #24]
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	e7fd      	b.n	80053da <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d01e      	beq.n	8005424 <xTaskCreateStatic+0xb2>
 80053e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01b      	beq.n	8005424 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ee:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053f4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053fe:	2300      	movs	r3, #0
 8005400:	9303      	str	r3, [sp, #12]
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	9302      	str	r3, [sp, #8]
 8005406:	f107 0314 	add.w	r3, r7, #20
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f850 	bl	80054bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800541c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800541e:	f000 f8ed 	bl	80055fc <prvAddNewTaskToReadyList>
 8005422:	e001      	b.n	8005428 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005428:	697b      	ldr	r3, [r7, #20]
	}
 800542a:	4618      	mov	r0, r3
 800542c:	3728      	adds	r7, #40	@ 0x28
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005432:	b580      	push	{r7, lr}
 8005434:	b08c      	sub	sp, #48	@ 0x30
 8005436:	af04      	add	r7, sp, #16
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	603b      	str	r3, [r7, #0]
 800543e:	4613      	mov	r3, r2
 8005440:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005442:	88fb      	ldrh	r3, [r7, #6]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fea2 	bl	8006190 <pvPortMalloc>
 800544c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00e      	beq.n	8005472 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005454:	20a0      	movs	r0, #160	@ 0xa0
 8005456:	f000 fe9b 	bl	8006190 <pvPortMalloc>
 800545a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	631a      	str	r2, [r3, #48]	@ 0x30
 8005468:	e005      	b.n	8005476 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800546a:	6978      	ldr	r0, [r7, #20]
 800546c:	f000 ff5e 	bl	800632c <vPortFree>
 8005470:	e001      	b.n	8005476 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d017      	beq.n	80054ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005484:	88fa      	ldrh	r2, [r7, #6]
 8005486:	2300      	movs	r3, #0
 8005488:	9303      	str	r3, [sp, #12]
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	9302      	str	r3, [sp, #8]
 800548e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f80e 	bl	80054bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054a0:	69f8      	ldr	r0, [r7, #28]
 80054a2:	f000 f8ab 	bl	80055fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054a6:	2301      	movs	r3, #1
 80054a8:	61bb      	str	r3, [r7, #24]
 80054aa:	e002      	b.n	80054b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054ac:	f04f 33ff 	mov.w	r3, #4294967295
 80054b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054b2:	69bb      	ldr	r3, [r7, #24]
	}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3720      	adds	r7, #32
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054d4:	3b01      	subs	r3, #1
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f023 0307 	bic.w	r3, r3, #7
 80054e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	617b      	str	r3, [r7, #20]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01f      	beq.n	800554c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800550c:	2300      	movs	r3, #0
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	e012      	b.n	8005538 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4413      	add	r3, r2
 8005518:	7819      	ldrb	r1, [r3, #0]
 800551a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	3334      	adds	r3, #52	@ 0x34
 8005522:	460a      	mov	r2, r1
 8005524:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	4413      	add	r3, r2
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d006      	beq.n	8005540 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	3301      	adds	r3, #1
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2b0f      	cmp	r3, #15
 800553c:	d9e9      	bls.n	8005512 <prvInitialiseNewTask+0x56>
 800553e:	e000      	b.n	8005542 <prvInitialiseNewTask+0x86>
			{
				break;
 8005540:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800554a:	e003      	b.n	8005554 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005556:	2b06      	cmp	r3, #6
 8005558:	d901      	bls.n	800555e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800555a:	2306      	movs	r3, #6
 800555c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005562:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005568:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800556a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556c:	2200      	movs	r2, #0
 800556e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	3304      	adds	r3, #4
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fe6c 	bl	8005252 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557c:	3318      	adds	r3, #24
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff fe67 	bl	8005252 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005588:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	f1c3 0207 	rsb	r2, r3, #7
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005598:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800559a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559c:	2200      	movs	r2, #0
 800559e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	334c      	adds	r3, #76	@ 0x4c
 80055ae:	224c      	movs	r2, #76	@ 0x4c
 80055b0:	2100      	movs	r1, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 f8ca 	bl	800674c <memset>
 80055b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ba:	4a0d      	ldr	r2, [pc, #52]	@ (80055f0 <prvInitialiseNewTask+0x134>)
 80055bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	4a0c      	ldr	r2, [pc, #48]	@ (80055f4 <prvInitialiseNewTask+0x138>)
 80055c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	4a0c      	ldr	r2, [pc, #48]	@ (80055f8 <prvInitialiseNewTask+0x13c>)
 80055c8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	68f9      	ldr	r1, [r7, #12]
 80055ce:	69b8      	ldr	r0, [r7, #24]
 80055d0:	f000 fc28 	bl	8005e24 <pxPortInitialiseStack>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e6:	bf00      	nop
 80055e8:	3720      	adds	r7, #32
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20001208 	.word	0x20001208
 80055f4:	20001270 	.word	0x20001270
 80055f8:	200012d8 	.word	0x200012d8

080055fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005604:	f000 fd02 	bl	800600c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005608:	4b2a      	ldr	r3, [pc, #168]	@ (80056b4 <prvAddNewTaskToReadyList+0xb8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	4a29      	ldr	r2, [pc, #164]	@ (80056b4 <prvAddNewTaskToReadyList+0xb8>)
 8005610:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005612:	4b29      	ldr	r3, [pc, #164]	@ (80056b8 <prvAddNewTaskToReadyList+0xbc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800561a:	4a27      	ldr	r2, [pc, #156]	@ (80056b8 <prvAddNewTaskToReadyList+0xbc>)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005620:	4b24      	ldr	r3, [pc, #144]	@ (80056b4 <prvAddNewTaskToReadyList+0xb8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d110      	bne.n	800564a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005628:	f000 fad2 	bl	8005bd0 <prvInitialiseTaskLists>
 800562c:	e00d      	b.n	800564a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800562e:	4b23      	ldr	r3, [pc, #140]	@ (80056bc <prvAddNewTaskToReadyList+0xc0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005636:	4b20      	ldr	r3, [pc, #128]	@ (80056b8 <prvAddNewTaskToReadyList+0xbc>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005640:	429a      	cmp	r2, r3
 8005642:	d802      	bhi.n	800564a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005644:	4a1c      	ldr	r2, [pc, #112]	@ (80056b8 <prvAddNewTaskToReadyList+0xbc>)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800564a:	4b1d      	ldr	r3, [pc, #116]	@ (80056c0 <prvAddNewTaskToReadyList+0xc4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	4a1b      	ldr	r2, [pc, #108]	@ (80056c0 <prvAddNewTaskToReadyList+0xc4>)
 8005652:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	2201      	movs	r2, #1
 800565a:	409a      	lsls	r2, r3
 800565c:	4b19      	ldr	r3, [pc, #100]	@ (80056c4 <prvAddNewTaskToReadyList+0xc8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4313      	orrs	r3, r2
 8005662:	4a18      	ldr	r2, [pc, #96]	@ (80056c4 <prvAddNewTaskToReadyList+0xc8>)
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4a15      	ldr	r2, [pc, #84]	@ (80056c8 <prvAddNewTaskToReadyList+0xcc>)
 8005674:	441a      	add	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3304      	adds	r3, #4
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f7ff fdf4 	bl	800526a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005682:	f000 fcf3 	bl	800606c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005686:	4b0d      	ldr	r3, [pc, #52]	@ (80056bc <prvAddNewTaskToReadyList+0xc0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00e      	beq.n	80056ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800568e:	4b0a      	ldr	r3, [pc, #40]	@ (80056b8 <prvAddNewTaskToReadyList+0xbc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005698:	429a      	cmp	r2, r3
 800569a:	d207      	bcs.n	80056ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800569c:	4b0b      	ldr	r3, [pc, #44]	@ (80056cc <prvAddNewTaskToReadyList+0xd0>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ac:	bf00      	nop
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	200005ac 	.word	0x200005ac
 80056b8:	200004ac 	.word	0x200004ac
 80056bc:	200005b8 	.word	0x200005b8
 80056c0:	200005c8 	.word	0x200005c8
 80056c4:	200005b4 	.word	0x200005b4
 80056c8:	200004b0 	.word	0x200004b0
 80056cc:	e000ed04 	.word	0xe000ed04

080056d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d018      	beq.n	8005714 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056e2:	4b14      	ldr	r3, [pc, #80]	@ (8005734 <vTaskDelay+0x64>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <vTaskDelay+0x32>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	60bb      	str	r3, [r7, #8]
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	e7fd      	b.n	80056fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005702:	f000 f885 	bl	8005810 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005706:	2100      	movs	r1, #0
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fb25 	bl	8005d58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800570e:	f000 f88d 	bl	800582c <xTaskResumeAll>
 8005712:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d107      	bne.n	800572a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800571a:	4b07      	ldr	r3, [pc, #28]	@ (8005738 <vTaskDelay+0x68>)
 800571c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800572a:	bf00      	nop
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	200005d4 	.word	0x200005d4
 8005738:	e000ed04 	.word	0xe000ed04

0800573c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	@ 0x28
 8005740:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005746:	2300      	movs	r3, #0
 8005748:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800574a:	463a      	mov	r2, r7
 800574c:	1d39      	adds	r1, r7, #4
 800574e:	f107 0308 	add.w	r3, r7, #8
 8005752:	4618      	mov	r0, r3
 8005754:	f7fa fe12 	bl	800037c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	9202      	str	r2, [sp, #8]
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	2300      	movs	r3, #0
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	2300      	movs	r3, #0
 8005768:	460a      	mov	r2, r1
 800576a:	4921      	ldr	r1, [pc, #132]	@ (80057f0 <vTaskStartScheduler+0xb4>)
 800576c:	4821      	ldr	r0, [pc, #132]	@ (80057f4 <vTaskStartScheduler+0xb8>)
 800576e:	f7ff fe00 	bl	8005372 <xTaskCreateStatic>
 8005772:	4603      	mov	r3, r0
 8005774:	4a20      	ldr	r2, [pc, #128]	@ (80057f8 <vTaskStartScheduler+0xbc>)
 8005776:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005778:	4b1f      	ldr	r3, [pc, #124]	@ (80057f8 <vTaskStartScheduler+0xbc>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005780:	2301      	movs	r3, #1
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	e001      	b.n	800578a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d11b      	bne.n	80057c8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	613b      	str	r3, [r7, #16]
}
 80057a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057a4:	4b15      	ldr	r3, [pc, #84]	@ (80057fc <vTaskStartScheduler+0xc0>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	334c      	adds	r3, #76	@ 0x4c
 80057aa:	4a15      	ldr	r2, [pc, #84]	@ (8005800 <vTaskStartScheduler+0xc4>)
 80057ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057ae:	4b15      	ldr	r3, [pc, #84]	@ (8005804 <vTaskStartScheduler+0xc8>)
 80057b0:	f04f 32ff 	mov.w	r2, #4294967295
 80057b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057b6:	4b14      	ldr	r3, [pc, #80]	@ (8005808 <vTaskStartScheduler+0xcc>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057bc:	4b13      	ldr	r3, [pc, #76]	@ (800580c <vTaskStartScheduler+0xd0>)
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057c2:	f000 fbb1 	bl	8005f28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057c6:	e00f      	b.n	80057e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d10b      	bne.n	80057e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	60fb      	str	r3, [r7, #12]
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	e7fd      	b.n	80057e4 <vTaskStartScheduler+0xa8>
}
 80057e8:	bf00      	nop
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	080070c0 	.word	0x080070c0
 80057f4:	08005ba1 	.word	0x08005ba1
 80057f8:	200005d0 	.word	0x200005d0
 80057fc:	200004ac 	.word	0x200004ac
 8005800:	20000010 	.word	0x20000010
 8005804:	200005cc 	.word	0x200005cc
 8005808:	200005b8 	.word	0x200005b8
 800580c:	200005b0 	.word	0x200005b0

08005810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005814:	4b04      	ldr	r3, [pc, #16]	@ (8005828 <vTaskSuspendAll+0x18>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	4a03      	ldr	r2, [pc, #12]	@ (8005828 <vTaskSuspendAll+0x18>)
 800581c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800581e:	bf00      	nop
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	200005d4 	.word	0x200005d4

0800582c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005836:	2300      	movs	r3, #0
 8005838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800583a:	4b42      	ldr	r3, [pc, #264]	@ (8005944 <xTaskResumeAll+0x118>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10b      	bne.n	800585a <xTaskResumeAll+0x2e>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	603b      	str	r3, [r7, #0]
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop
 8005858:	e7fd      	b.n	8005856 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800585a:	f000 fbd7 	bl	800600c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800585e:	4b39      	ldr	r3, [pc, #228]	@ (8005944 <xTaskResumeAll+0x118>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3b01      	subs	r3, #1
 8005864:	4a37      	ldr	r2, [pc, #220]	@ (8005944 <xTaskResumeAll+0x118>)
 8005866:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005868:	4b36      	ldr	r3, [pc, #216]	@ (8005944 <xTaskResumeAll+0x118>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d161      	bne.n	8005934 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005870:	4b35      	ldr	r3, [pc, #212]	@ (8005948 <xTaskResumeAll+0x11c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d05d      	beq.n	8005934 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005878:	e02e      	b.n	80058d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587a:	4b34      	ldr	r3, [pc, #208]	@ (800594c <xTaskResumeAll+0x120>)
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3318      	adds	r3, #24
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fd4a 	bl	8005320 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3304      	adds	r3, #4
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff fd45 	bl	8005320 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	2201      	movs	r2, #1
 800589c:	409a      	lsls	r2, r3
 800589e:	4b2c      	ldr	r3, [pc, #176]	@ (8005950 <xTaskResumeAll+0x124>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005950 <xTaskResumeAll+0x124>)
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4a27      	ldr	r2, [pc, #156]	@ (8005954 <xTaskResumeAll+0x128>)
 80058b6:	441a      	add	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f7ff fcd3 	bl	800526a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c8:	4b23      	ldr	r3, [pc, #140]	@ (8005958 <xTaskResumeAll+0x12c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d302      	bcc.n	80058d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80058d2:	4b22      	ldr	r3, [pc, #136]	@ (800595c <xTaskResumeAll+0x130>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058d8:	4b1c      	ldr	r3, [pc, #112]	@ (800594c <xTaskResumeAll+0x120>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1cc      	bne.n	800587a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058e6:	f000 fa17 	bl	8005d18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005960 <xTaskResumeAll+0x134>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d010      	beq.n	8005918 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058f6:	f000 f837 	bl	8005968 <xTaskIncrementTick>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005900:	4b16      	ldr	r3, [pc, #88]	@ (800595c <xTaskResumeAll+0x130>)
 8005902:	2201      	movs	r2, #1
 8005904:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3b01      	subs	r3, #1
 800590a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f1      	bne.n	80058f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005912:	4b13      	ldr	r3, [pc, #76]	@ (8005960 <xTaskResumeAll+0x134>)
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005918:	4b10      	ldr	r3, [pc, #64]	@ (800595c <xTaskResumeAll+0x130>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d009      	beq.n	8005934 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005924:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <xTaskResumeAll+0x138>)
 8005926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005934:	f000 fb9a 	bl	800606c <vPortExitCritical>

	return xAlreadyYielded;
 8005938:	68bb      	ldr	r3, [r7, #8]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	200005d4 	.word	0x200005d4
 8005948:	200005ac 	.word	0x200005ac
 800594c:	2000056c 	.word	0x2000056c
 8005950:	200005b4 	.word	0x200005b4
 8005954:	200004b0 	.word	0x200004b0
 8005958:	200004ac 	.word	0x200004ac
 800595c:	200005c0 	.word	0x200005c0
 8005960:	200005bc 	.word	0x200005bc
 8005964:	e000ed04 	.word	0xe000ed04

08005968 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005972:	4b4f      	ldr	r3, [pc, #316]	@ (8005ab0 <xTaskIncrementTick+0x148>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	f040 808f 	bne.w	8005a9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800597c:	4b4d      	ldr	r3, [pc, #308]	@ (8005ab4 <xTaskIncrementTick+0x14c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3301      	adds	r3, #1
 8005982:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005984:	4a4b      	ldr	r2, [pc, #300]	@ (8005ab4 <xTaskIncrementTick+0x14c>)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d121      	bne.n	80059d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005990:	4b49      	ldr	r3, [pc, #292]	@ (8005ab8 <xTaskIncrementTick+0x150>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00b      	beq.n	80059b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	603b      	str	r3, [r7, #0]
}
 80059ac:	bf00      	nop
 80059ae:	bf00      	nop
 80059b0:	e7fd      	b.n	80059ae <xTaskIncrementTick+0x46>
 80059b2:	4b41      	ldr	r3, [pc, #260]	@ (8005ab8 <xTaskIncrementTick+0x150>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	4b40      	ldr	r3, [pc, #256]	@ (8005abc <xTaskIncrementTick+0x154>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a3e      	ldr	r2, [pc, #248]	@ (8005ab8 <xTaskIncrementTick+0x150>)
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	4a3e      	ldr	r2, [pc, #248]	@ (8005abc <xTaskIncrementTick+0x154>)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ac0 <xTaskIncrementTick+0x158>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3301      	adds	r3, #1
 80059cc:	4a3c      	ldr	r2, [pc, #240]	@ (8005ac0 <xTaskIncrementTick+0x158>)
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	f000 f9a2 	bl	8005d18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059d4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ac4 <xTaskIncrementTick+0x15c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d348      	bcc.n	8005a70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059de:	4b36      	ldr	r3, [pc, #216]	@ (8005ab8 <xTaskIncrementTick+0x150>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059e8:	4b36      	ldr	r3, [pc, #216]	@ (8005ac4 <xTaskIncrementTick+0x15c>)
 80059ea:	f04f 32ff 	mov.w	r2, #4294967295
 80059ee:	601a      	str	r2, [r3, #0]
					break;
 80059f0:	e03e      	b.n	8005a70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f2:	4b31      	ldr	r3, [pc, #196]	@ (8005ab8 <xTaskIncrementTick+0x150>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d203      	bcs.n	8005a12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8005ac4 <xTaskIncrementTick+0x15c>)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a10:	e02e      	b.n	8005a70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	3304      	adds	r3, #4
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff fc82 	bl	8005320 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d004      	beq.n	8005a2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	3318      	adds	r3, #24
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fc79 	bl	8005320 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a32:	2201      	movs	r2, #1
 8005a34:	409a      	lsls	r2, r3
 8005a36:	4b24      	ldr	r3, [pc, #144]	@ (8005ac8 <xTaskIncrementTick+0x160>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	4a22      	ldr	r2, [pc, #136]	@ (8005ac8 <xTaskIncrementTick+0x160>)
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8005acc <xTaskIncrementTick+0x164>)
 8005a4e:	441a      	add	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4619      	mov	r1, r3
 8005a56:	4610      	mov	r0, r2
 8005a58:	f7ff fc07 	bl	800526a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a60:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad0 <xTaskIncrementTick+0x168>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d3b9      	bcc.n	80059de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a6e:	e7b6      	b.n	80059de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a70:	4b17      	ldr	r3, [pc, #92]	@ (8005ad0 <xTaskIncrementTick+0x168>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a76:	4915      	ldr	r1, [pc, #84]	@ (8005acc <xTaskIncrementTick+0x164>)
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d901      	bls.n	8005a8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a8c:	4b11      	ldr	r3, [pc, #68]	@ (8005ad4 <xTaskIncrementTick+0x16c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e004      	b.n	8005aa4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad8 <xTaskIncrementTick+0x170>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8005ad8 <xTaskIncrementTick+0x170>)
 8005aa2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005aa4:	697b      	ldr	r3, [r7, #20]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	200005d4 	.word	0x200005d4
 8005ab4:	200005b0 	.word	0x200005b0
 8005ab8:	20000564 	.word	0x20000564
 8005abc:	20000568 	.word	0x20000568
 8005ac0:	200005c4 	.word	0x200005c4
 8005ac4:	200005cc 	.word	0x200005cc
 8005ac8:	200005b4 	.word	0x200005b4
 8005acc:	200004b0 	.word	0x200004b0
 8005ad0:	200004ac 	.word	0x200004ac
 8005ad4:	200005c0 	.word	0x200005c0
 8005ad8:	200005bc 	.word	0x200005bc

08005adc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ae2:	4b29      	ldr	r3, [pc, #164]	@ (8005b88 <vTaskSwitchContext+0xac>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005aea:	4b28      	ldr	r3, [pc, #160]	@ (8005b8c <vTaskSwitchContext+0xb0>)
 8005aec:	2201      	movs	r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005af0:	e045      	b.n	8005b7e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005af2:	4b26      	ldr	r3, [pc, #152]	@ (8005b8c <vTaskSwitchContext+0xb0>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af8:	4b25      	ldr	r3, [pc, #148]	@ (8005b90 <vTaskSwitchContext+0xb4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	fab3 f383 	clz	r3, r3
 8005b04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b06:	7afb      	ldrb	r3, [r7, #11]
 8005b08:	f1c3 031f 	rsb	r3, r3, #31
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	4921      	ldr	r1, [pc, #132]	@ (8005b94 <vTaskSwitchContext+0xb8>)
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10b      	bne.n	8005b3a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	607b      	str	r3, [r7, #4]
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop
 8005b38:	e7fd      	b.n	8005b36 <vTaskSwitchContext+0x5a>
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4a13      	ldr	r2, [pc, #76]	@ (8005b94 <vTaskSwitchContext+0xb8>)
 8005b46:	4413      	add	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	605a      	str	r2, [r3, #4]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	3308      	adds	r3, #8
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d104      	bne.n	8005b6a <vTaskSwitchContext+0x8e>
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4a09      	ldr	r2, [pc, #36]	@ (8005b98 <vTaskSwitchContext+0xbc>)
 8005b72:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b74:	4b08      	ldr	r3, [pc, #32]	@ (8005b98 <vTaskSwitchContext+0xbc>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	334c      	adds	r3, #76	@ 0x4c
 8005b7a:	4a08      	ldr	r2, [pc, #32]	@ (8005b9c <vTaskSwitchContext+0xc0>)
 8005b7c:	6013      	str	r3, [r2, #0]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr
 8005b88:	200005d4 	.word	0x200005d4
 8005b8c:	200005c0 	.word	0x200005c0
 8005b90:	200005b4 	.word	0x200005b4
 8005b94:	200004b0 	.word	0x200004b0
 8005b98:	200004ac 	.word	0x200004ac
 8005b9c:	20000010 	.word	0x20000010

08005ba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ba8:	f000 f852 	bl	8005c50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bac:	4b06      	ldr	r3, [pc, #24]	@ (8005bc8 <prvIdleTask+0x28>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d9f9      	bls.n	8005ba8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bb4:	4b05      	ldr	r3, [pc, #20]	@ (8005bcc <prvIdleTask+0x2c>)
 8005bb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bc4:	e7f0      	b.n	8005ba8 <prvIdleTask+0x8>
 8005bc6:	bf00      	nop
 8005bc8:	200004b0 	.word	0x200004b0
 8005bcc:	e000ed04 	.word	0xe000ed04

08005bd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	607b      	str	r3, [r7, #4]
 8005bda:	e00c      	b.n	8005bf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4a12      	ldr	r2, [pc, #72]	@ (8005c30 <prvInitialiseTaskLists+0x60>)
 8005be8:	4413      	add	r3, r2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fb12 	bl	8005214 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	607b      	str	r3, [r7, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b06      	cmp	r3, #6
 8005bfa:	d9ef      	bls.n	8005bdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bfc:	480d      	ldr	r0, [pc, #52]	@ (8005c34 <prvInitialiseTaskLists+0x64>)
 8005bfe:	f7ff fb09 	bl	8005214 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c02:	480d      	ldr	r0, [pc, #52]	@ (8005c38 <prvInitialiseTaskLists+0x68>)
 8005c04:	f7ff fb06 	bl	8005214 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c08:	480c      	ldr	r0, [pc, #48]	@ (8005c3c <prvInitialiseTaskLists+0x6c>)
 8005c0a:	f7ff fb03 	bl	8005214 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c0e:	480c      	ldr	r0, [pc, #48]	@ (8005c40 <prvInitialiseTaskLists+0x70>)
 8005c10:	f7ff fb00 	bl	8005214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c14:	480b      	ldr	r0, [pc, #44]	@ (8005c44 <prvInitialiseTaskLists+0x74>)
 8005c16:	f7ff fafd 	bl	8005214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c48 <prvInitialiseTaskLists+0x78>)
 8005c1c:	4a05      	ldr	r2, [pc, #20]	@ (8005c34 <prvInitialiseTaskLists+0x64>)
 8005c1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c20:	4b0a      	ldr	r3, [pc, #40]	@ (8005c4c <prvInitialiseTaskLists+0x7c>)
 8005c22:	4a05      	ldr	r2, [pc, #20]	@ (8005c38 <prvInitialiseTaskLists+0x68>)
 8005c24:	601a      	str	r2, [r3, #0]
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	200004b0 	.word	0x200004b0
 8005c34:	2000053c 	.word	0x2000053c
 8005c38:	20000550 	.word	0x20000550
 8005c3c:	2000056c 	.word	0x2000056c
 8005c40:	20000580 	.word	0x20000580
 8005c44:	20000598 	.word	0x20000598
 8005c48:	20000564 	.word	0x20000564
 8005c4c:	20000568 	.word	0x20000568

08005c50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c56:	e019      	b.n	8005c8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c58:	f000 f9d8 	bl	800600c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c5c:	4b10      	ldr	r3, [pc, #64]	@ (8005ca0 <prvCheckTasksWaitingTermination+0x50>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff fb59 	bl	8005320 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca4 <prvCheckTasksWaitingTermination+0x54>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	4a0b      	ldr	r2, [pc, #44]	@ (8005ca4 <prvCheckTasksWaitingTermination+0x54>)
 8005c76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <prvCheckTasksWaitingTermination+0x58>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca8 <prvCheckTasksWaitingTermination+0x58>)
 8005c80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c82:	f000 f9f3 	bl	800606c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f810 	bl	8005cac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c8c:	4b06      	ldr	r3, [pc, #24]	@ (8005ca8 <prvCheckTasksWaitingTermination+0x58>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e1      	bne.n	8005c58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000580 	.word	0x20000580
 8005ca4:	200005ac 	.word	0x200005ac
 8005ca8:	20000594 	.word	0x20000594

08005cac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	334c      	adds	r3, #76	@ 0x4c
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fd4f 	bl	800675c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d108      	bne.n	8005cda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fb2d 	bl	800632c <vPortFree>
				vPortFree( pxTCB );
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fb2a 	bl	800632c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cd8:	e019      	b.n	8005d0e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d103      	bne.n	8005cec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fb21 	bl	800632c <vPortFree>
	}
 8005cea:	e010      	b.n	8005d0e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d00b      	beq.n	8005d0e <prvDeleteTCB+0x62>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	60fb      	str	r3, [r7, #12]
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop
 8005d0c:	e7fd      	b.n	8005d0a <prvDeleteTCB+0x5e>
	}
 8005d0e:	bf00      	nop
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d50 <prvResetNextTaskUnblockTime+0x38>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d28:	4b0a      	ldr	r3, [pc, #40]	@ (8005d54 <prvResetNextTaskUnblockTime+0x3c>)
 8005d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d30:	e008      	b.n	8005d44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d32:	4b07      	ldr	r3, [pc, #28]	@ (8005d50 <prvResetNextTaskUnblockTime+0x38>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	4a04      	ldr	r2, [pc, #16]	@ (8005d54 <prvResetNextTaskUnblockTime+0x3c>)
 8005d42:	6013      	str	r3, [r2, #0]
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20000564 	.word	0x20000564
 8005d54:	200005cc 	.word	0x200005cc

08005d58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d62:	4b29      	ldr	r3, [pc, #164]	@ (8005e08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d68:	4b28      	ldr	r3, [pc, #160]	@ (8005e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fad6 	bl	8005320 <uxListRemove>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10b      	bne.n	8005d92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d7a:	4b24      	ldr	r3, [pc, #144]	@ (8005e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	2201      	movs	r2, #1
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43da      	mvns	r2, r3
 8005d88:	4b21      	ldr	r3, [pc, #132]	@ (8005e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	4a20      	ldr	r2, [pc, #128]	@ (8005e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d98:	d10a      	bne.n	8005db0 <prvAddCurrentTaskToDelayedList+0x58>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005da0:	4b1a      	ldr	r3, [pc, #104]	@ (8005e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3304      	adds	r3, #4
 8005da6:	4619      	mov	r1, r3
 8005da8:	481a      	ldr	r0, [pc, #104]	@ (8005e14 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005daa:	f7ff fa5e 	bl	800526a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dae:	e026      	b.n	8005dfe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4413      	add	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005db8:	4b14      	ldr	r3, [pc, #80]	@ (8005e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d209      	bcs.n	8005ddc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dc8:	4b13      	ldr	r3, [pc, #76]	@ (8005e18 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	f7ff fa6b 	bl	80052b0 <vListInsert>
}
 8005dda:	e010      	b.n	8005dfe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	4b0a      	ldr	r3, [pc, #40]	@ (8005e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4619      	mov	r1, r3
 8005de8:	4610      	mov	r0, r2
 8005dea:	f7ff fa61 	bl	80052b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005dee:	4b0c      	ldr	r3, [pc, #48]	@ (8005e20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d202      	bcs.n	8005dfe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005df8:	4a09      	ldr	r2, [pc, #36]	@ (8005e20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6013      	str	r3, [r2, #0]
}
 8005dfe:	bf00      	nop
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	200005b0 	.word	0x200005b0
 8005e0c:	200004ac 	.word	0x200004ac
 8005e10:	200005b4 	.word	0x200005b4
 8005e14:	20000598 	.word	0x20000598
 8005e18:	20000568 	.word	0x20000568
 8005e1c:	20000564 	.word	0x20000564
 8005e20:	200005cc 	.word	0x200005cc

08005e24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3b04      	subs	r3, #4
 8005e34:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3b04      	subs	r3, #4
 8005e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f023 0201 	bic.w	r2, r3, #1
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3b04      	subs	r3, #4
 8005e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e54:	4a08      	ldr	r2, [pc, #32]	@ (8005e78 <pxPortInitialiseStack+0x54>)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3b14      	subs	r3, #20
 8005e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3b20      	subs	r3, #32
 8005e6a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr
 8005e78:	08005e7d 	.word	0x08005e7d

08005e7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e86:	4b12      	ldr	r3, [pc, #72]	@ (8005ed0 <prvTaskExitError+0x54>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8e:	d00b      	beq.n	8005ea8 <prvTaskExitError+0x2c>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	60fb      	str	r3, [r7, #12]
}
 8005ea2:	bf00      	nop
 8005ea4:	bf00      	nop
 8005ea6:	e7fd      	b.n	8005ea4 <prvTaskExitError+0x28>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	60bb      	str	r3, [r7, #8]
}
 8005eba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ebc:	bf00      	nop
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0fc      	beq.n	8005ebe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr
 8005ed0:	2000000c 	.word	0x2000000c
	...

08005ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ee0:	4b07      	ldr	r3, [pc, #28]	@ (8005f00 <pxCurrentTCBConst2>)
 8005ee2:	6819      	ldr	r1, [r3, #0]
 8005ee4:	6808      	ldr	r0, [r1, #0]
 8005ee6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005eea:	f380 8809 	msr	PSP, r0
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f04f 0000 	mov.w	r0, #0
 8005ef6:	f380 8811 	msr	BASEPRI, r0
 8005efa:	f04e 0e0d 	orr.w	lr, lr, #13
 8005efe:	4770      	bx	lr

08005f00 <pxCurrentTCBConst2>:
 8005f00:	200004ac 	.word	0x200004ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop

08005f08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005f08:	4806      	ldr	r0, [pc, #24]	@ (8005f24 <prvPortStartFirstTask+0x1c>)
 8005f0a:	6800      	ldr	r0, [r0, #0]
 8005f0c:	6800      	ldr	r0, [r0, #0]
 8005f0e:	f380 8808 	msr	MSP, r0
 8005f12:	b662      	cpsie	i
 8005f14:	b661      	cpsie	f
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	df00      	svc	0
 8005f20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f22:	bf00      	nop
 8005f24:	e000ed08 	.word	0xe000ed08

08005f28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f2e:	4b32      	ldr	r3, [pc, #200]	@ (8005ff8 <xPortStartScheduler+0xd0>)
 8005f30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	22ff      	movs	r2, #255	@ 0xff
 8005f3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	4b2a      	ldr	r3, [pc, #168]	@ (8005ffc <xPortStartScheduler+0xd4>)
 8005f54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f56:	4b2a      	ldr	r3, [pc, #168]	@ (8006000 <xPortStartScheduler+0xd8>)
 8005f58:	2207      	movs	r2, #7
 8005f5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f5c:	e009      	b.n	8005f72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005f5e:	4b28      	ldr	r3, [pc, #160]	@ (8006000 <xPortStartScheduler+0xd8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	4a26      	ldr	r2, [pc, #152]	@ (8006000 <xPortStartScheduler+0xd8>)
 8005f66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7a:	2b80      	cmp	r3, #128	@ 0x80
 8005f7c:	d0ef      	beq.n	8005f5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f7e:	4b20      	ldr	r3, [pc, #128]	@ (8006000 <xPortStartScheduler+0xd8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f1c3 0307 	rsb	r3, r3, #7
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d00b      	beq.n	8005fa2 <xPortStartScheduler+0x7a>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	60bb      	str	r3, [r7, #8]
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	e7fd      	b.n	8005f9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fa2:	4b17      	ldr	r3, [pc, #92]	@ (8006000 <xPortStartScheduler+0xd8>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	021b      	lsls	r3, r3, #8
 8005fa8:	4a15      	ldr	r2, [pc, #84]	@ (8006000 <xPortStartScheduler+0xd8>)
 8005faa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005fac:	4b14      	ldr	r3, [pc, #80]	@ (8006000 <xPortStartScheduler+0xd8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005fb4:	4a12      	ldr	r2, [pc, #72]	@ (8006000 <xPortStartScheduler+0xd8>)
 8005fb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fc0:	4b10      	ldr	r3, [pc, #64]	@ (8006004 <xPortStartScheduler+0xdc>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a0f      	ldr	r2, [pc, #60]	@ (8006004 <xPortStartScheduler+0xdc>)
 8005fc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005fca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8006004 <xPortStartScheduler+0xdc>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8006004 <xPortStartScheduler+0xdc>)
 8005fd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005fd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fd8:	f000 f8b8 	bl	800614c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8006008 <xPortStartScheduler+0xe0>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fe2:	f7ff ff91 	bl	8005f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fe6:	f7ff fd79 	bl	8005adc <vTaskSwitchContext>
	prvTaskExitError();
 8005fea:	f7ff ff47 	bl	8005e7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	e000e400 	.word	0xe000e400
 8005ffc:	200005d8 	.word	0x200005d8
 8006000:	200005dc 	.word	0x200005dc
 8006004:	e000ed20 	.word	0xe000ed20
 8006008:	2000000c 	.word	0x2000000c

0800600c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	607b      	str	r3, [r7, #4]
}
 8006024:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006026:	4b0f      	ldr	r3, [pc, #60]	@ (8006064 <vPortEnterCritical+0x58>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	4a0d      	ldr	r2, [pc, #52]	@ (8006064 <vPortEnterCritical+0x58>)
 800602e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006030:	4b0c      	ldr	r3, [pc, #48]	@ (8006064 <vPortEnterCritical+0x58>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d110      	bne.n	800605a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006038:	4b0b      	ldr	r3, [pc, #44]	@ (8006068 <vPortEnterCritical+0x5c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00b      	beq.n	800605a <vPortEnterCritical+0x4e>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	603b      	str	r3, [r7, #0]
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop
 8006058:	e7fd      	b.n	8006056 <vPortEnterCritical+0x4a>
	}
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr
 8006064:	2000000c 	.word	0x2000000c
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006072:	4b12      	ldr	r3, [pc, #72]	@ (80060bc <vPortExitCritical+0x50>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10b      	bne.n	8006092 <vPortExitCritical+0x26>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	607b      	str	r3, [r7, #4]
}
 800608c:	bf00      	nop
 800608e:	bf00      	nop
 8006090:	e7fd      	b.n	800608e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006092:	4b0a      	ldr	r3, [pc, #40]	@ (80060bc <vPortExitCritical+0x50>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3b01      	subs	r3, #1
 8006098:	4a08      	ldr	r2, [pc, #32]	@ (80060bc <vPortExitCritical+0x50>)
 800609a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800609c:	4b07      	ldr	r3, [pc, #28]	@ (80060bc <vPortExitCritical+0x50>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d105      	bne.n	80060b0 <vPortExitCritical+0x44>
 80060a4:	2300      	movs	r3, #0
 80060a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	2000000c 	.word	0x2000000c

080060c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060c0:	f3ef 8009 	mrs	r0, PSP
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006100 <pxCurrentTCBConst>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060d0:	6010      	str	r0, [r2, #0]
 80060d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80060d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80060da:	f380 8811 	msr	BASEPRI, r0
 80060de:	f7ff fcfd 	bl	8005adc <vTaskSwitchContext>
 80060e2:	f04f 0000 	mov.w	r0, #0
 80060e6:	f380 8811 	msr	BASEPRI, r0
 80060ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80060ee:	6819      	ldr	r1, [r3, #0]
 80060f0:	6808      	ldr	r0, [r1, #0]
 80060f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060f6:	f380 8809 	msr	PSP, r0
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	4770      	bx	lr

08006100 <pxCurrentTCBConst>:
 8006100:	200004ac 	.word	0x200004ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop

08006108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	607b      	str	r3, [r7, #4]
}
 8006120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006122:	f7ff fc21 	bl	8005968 <xTaskIncrementTick>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800612c:	4b06      	ldr	r3, [pc, #24]	@ (8006148 <SysTick_Handler+0x40>)
 800612e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	2300      	movs	r3, #0
 8006136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	f383 8811 	msr	BASEPRI, r3
}
 800613e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	e000ed04 	.word	0xe000ed04

0800614c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006150:	4b0a      	ldr	r3, [pc, #40]	@ (800617c <vPortSetupTimerInterrupt+0x30>)
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006156:	4b0a      	ldr	r3, [pc, #40]	@ (8006180 <vPortSetupTimerInterrupt+0x34>)
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800615c:	4b09      	ldr	r3, [pc, #36]	@ (8006184 <vPortSetupTimerInterrupt+0x38>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a09      	ldr	r2, [pc, #36]	@ (8006188 <vPortSetupTimerInterrupt+0x3c>)
 8006162:	fba2 2303 	umull	r2, r3, r2, r3
 8006166:	099b      	lsrs	r3, r3, #6
 8006168:	4a08      	ldr	r2, [pc, #32]	@ (800618c <vPortSetupTimerInterrupt+0x40>)
 800616a:	3b01      	subs	r3, #1
 800616c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800616e:	4b03      	ldr	r3, [pc, #12]	@ (800617c <vPortSetupTimerInterrupt+0x30>)
 8006170:	2207      	movs	r2, #7
 8006172:	601a      	str	r2, [r3, #0]
}
 8006174:	bf00      	nop
 8006176:	46bd      	mov	sp, r7
 8006178:	bc80      	pop	{r7}
 800617a:	4770      	bx	lr
 800617c:	e000e010 	.word	0xe000e010
 8006180:	e000e018 	.word	0xe000e018
 8006184:	20000000 	.word	0x20000000
 8006188:	10624dd3 	.word	0x10624dd3
 800618c:	e000e014 	.word	0xe000e014

08006190 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	@ 0x28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006198:	2300      	movs	r3, #0
 800619a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800619c:	f7ff fb38 	bl	8005810 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061a0:	4b5c      	ldr	r3, [pc, #368]	@ (8006314 <pvPortMalloc+0x184>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061a8:	f000 f924 	bl	80063f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061ac:	4b5a      	ldr	r3, [pc, #360]	@ (8006318 <pvPortMalloc+0x188>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4013      	ands	r3, r2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f040 8095 	bne.w	80062e4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01e      	beq.n	80061fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80061c0:	2208      	movs	r2, #8
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4413      	add	r3, r2
 80061c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d015      	beq.n	80061fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f023 0307 	bic.w	r3, r3, #7
 80061d8:	3308      	adds	r3, #8
 80061da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <pvPortMalloc+0x6e>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	617b      	str	r3, [r7, #20]
}
 80061f8:	bf00      	nop
 80061fa:	bf00      	nop
 80061fc:	e7fd      	b.n	80061fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d06f      	beq.n	80062e4 <pvPortMalloc+0x154>
 8006204:	4b45      	ldr	r3, [pc, #276]	@ (800631c <pvPortMalloc+0x18c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	429a      	cmp	r2, r3
 800620c:	d86a      	bhi.n	80062e4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800620e:	4b44      	ldr	r3, [pc, #272]	@ (8006320 <pvPortMalloc+0x190>)
 8006210:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006212:	4b43      	ldr	r3, [pc, #268]	@ (8006320 <pvPortMalloc+0x190>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006218:	e004      	b.n	8006224 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	429a      	cmp	r2, r3
 800622c:	d903      	bls.n	8006236 <pvPortMalloc+0xa6>
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f1      	bne.n	800621a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006236:	4b37      	ldr	r3, [pc, #220]	@ (8006314 <pvPortMalloc+0x184>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800623c:	429a      	cmp	r2, r3
 800623e:	d051      	beq.n	80062e4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2208      	movs	r2, #8
 8006246:	4413      	add	r3, r2
 8006248:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	1ad2      	subs	r2, r2, r3
 800625a:	2308      	movs	r3, #8
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	429a      	cmp	r2, r3
 8006260:	d920      	bls.n	80062a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4413      	add	r3, r2
 8006268:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00b      	beq.n	800628c <pvPortMalloc+0xfc>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	613b      	str	r3, [r7, #16]
}
 8006286:	bf00      	nop
 8006288:	bf00      	nop
 800628a:	e7fd      	b.n	8006288 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	1ad2      	subs	r2, r2, r3
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800629e:	69b8      	ldr	r0, [r7, #24]
 80062a0:	f000 f90a 	bl	80064b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062a4:	4b1d      	ldr	r3, [pc, #116]	@ (800631c <pvPortMalloc+0x18c>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	4a1b      	ldr	r2, [pc, #108]	@ (800631c <pvPortMalloc+0x18c>)
 80062b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062b2:	4b1a      	ldr	r3, [pc, #104]	@ (800631c <pvPortMalloc+0x18c>)
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006324 <pvPortMalloc+0x194>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d203      	bcs.n	80062c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062be:	4b17      	ldr	r3, [pc, #92]	@ (800631c <pvPortMalloc+0x18c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a18      	ldr	r2, [pc, #96]	@ (8006324 <pvPortMalloc+0x194>)
 80062c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	4b13      	ldr	r3, [pc, #76]	@ (8006318 <pvPortMalloc+0x188>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	431a      	orrs	r2, r3
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d6:	2200      	movs	r2, #0
 80062d8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062da:	4b13      	ldr	r3, [pc, #76]	@ (8006328 <pvPortMalloc+0x198>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3301      	adds	r3, #1
 80062e0:	4a11      	ldr	r2, [pc, #68]	@ (8006328 <pvPortMalloc+0x198>)
 80062e2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062e4:	f7ff faa2 	bl	800582c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00b      	beq.n	800630a <pvPortMalloc+0x17a>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60fb      	str	r3, [r7, #12]
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	e7fd      	b.n	8006306 <pvPortMalloc+0x176>
	return pvReturn;
 800630a:	69fb      	ldr	r3, [r7, #28]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3728      	adds	r7, #40	@ 0x28
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	200011e8 	.word	0x200011e8
 8006318:	200011fc 	.word	0x200011fc
 800631c:	200011ec 	.word	0x200011ec
 8006320:	200011e0 	.word	0x200011e0
 8006324:	200011f0 	.word	0x200011f0
 8006328:	200011f4 	.word	0x200011f4

0800632c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d04f      	beq.n	80063de <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800633e:	2308      	movs	r3, #8
 8006340:	425b      	negs	r3, r3
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	4413      	add	r3, r2
 8006346:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	4b25      	ldr	r3, [pc, #148]	@ (80063e8 <vPortFree+0xbc>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4013      	ands	r3, r2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10b      	bne.n	8006372 <vPortFree+0x46>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	60fb      	str	r3, [r7, #12]
}
 800636c:	bf00      	nop
 800636e:	bf00      	nop
 8006370:	e7fd      	b.n	800636e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00b      	beq.n	8006392 <vPortFree+0x66>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	60bb      	str	r3, [r7, #8]
}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	e7fd      	b.n	800638e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	4b14      	ldr	r3, [pc, #80]	@ (80063e8 <vPortFree+0xbc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4013      	ands	r3, r2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d01e      	beq.n	80063de <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d11a      	bne.n	80063de <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	4b0e      	ldr	r3, [pc, #56]	@ (80063e8 <vPortFree+0xbc>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	43db      	mvns	r3, r3
 80063b2:	401a      	ands	r2, r3
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063b8:	f7ff fa2a 	bl	8005810 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	4b0a      	ldr	r3, [pc, #40]	@ (80063ec <vPortFree+0xc0>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4413      	add	r3, r2
 80063c6:	4a09      	ldr	r2, [pc, #36]	@ (80063ec <vPortFree+0xc0>)
 80063c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063ca:	6938      	ldr	r0, [r7, #16]
 80063cc:	f000 f874 	bl	80064b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063d0:	4b07      	ldr	r3, [pc, #28]	@ (80063f0 <vPortFree+0xc4>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3301      	adds	r3, #1
 80063d6:	4a06      	ldr	r2, [pc, #24]	@ (80063f0 <vPortFree+0xc4>)
 80063d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063da:	f7ff fa27 	bl	800582c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063de:	bf00      	nop
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	200011fc 	.word	0x200011fc
 80063ec:	200011ec 	.word	0x200011ec
 80063f0:	200011f8 	.word	0x200011f8

080063f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80063fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006400:	4b27      	ldr	r3, [pc, #156]	@ (80064a0 <prvHeapInit+0xac>)
 8006402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00c      	beq.n	8006428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3307      	adds	r3, #7
 8006412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 0307 	bic.w	r3, r3, #7
 800641a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	4a1f      	ldr	r2, [pc, #124]	@ (80064a0 <prvHeapInit+0xac>)
 8006424:	4413      	add	r3, r2
 8006426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800642c:	4a1d      	ldr	r2, [pc, #116]	@ (80064a4 <prvHeapInit+0xb0>)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006432:	4b1c      	ldr	r3, [pc, #112]	@ (80064a4 <prvHeapInit+0xb0>)
 8006434:	2200      	movs	r2, #0
 8006436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	4413      	add	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006440:	2208      	movs	r2, #8
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	1a9b      	subs	r3, r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0307 	bic.w	r3, r3, #7
 800644e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4a15      	ldr	r2, [pc, #84]	@ (80064a8 <prvHeapInit+0xb4>)
 8006454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006456:	4b14      	ldr	r3, [pc, #80]	@ (80064a8 <prvHeapInit+0xb4>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2200      	movs	r2, #0
 800645c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800645e:	4b12      	ldr	r3, [pc, #72]	@ (80064a8 <prvHeapInit+0xb4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	1ad2      	subs	r2, r2, r3
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006474:	4b0c      	ldr	r3, [pc, #48]	@ (80064a8 <prvHeapInit+0xb4>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	4a0a      	ldr	r2, [pc, #40]	@ (80064ac <prvHeapInit+0xb8>)
 8006482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	4a09      	ldr	r2, [pc, #36]	@ (80064b0 <prvHeapInit+0xbc>)
 800648a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800648c:	4b09      	ldr	r3, [pc, #36]	@ (80064b4 <prvHeapInit+0xc0>)
 800648e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006492:	601a      	str	r2, [r3, #0]
}
 8006494:	bf00      	nop
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	bc80      	pop	{r7}
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	200005e0 	.word	0x200005e0
 80064a4:	200011e0 	.word	0x200011e0
 80064a8:	200011e8 	.word	0x200011e8
 80064ac:	200011f0 	.word	0x200011f0
 80064b0:	200011ec 	.word	0x200011ec
 80064b4:	200011fc 	.word	0x200011fc

080064b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064c0:	4b27      	ldr	r3, [pc, #156]	@ (8006560 <prvInsertBlockIntoFreeList+0xa8>)
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	e002      	b.n	80064cc <prvInsertBlockIntoFreeList+0x14>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d8f7      	bhi.n	80064c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	4413      	add	r3, r2
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d108      	bne.n	80064fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	441a      	add	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	441a      	add	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d118      	bne.n	8006540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	4b14      	ldr	r3, [pc, #80]	@ (8006564 <prvInsertBlockIntoFreeList+0xac>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d00d      	beq.n	8006536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	441a      	add	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	e008      	b.n	8006548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006536:	4b0b      	ldr	r3, [pc, #44]	@ (8006564 <prvInsertBlockIntoFreeList+0xac>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e003      	b.n	8006548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	429a      	cmp	r2, r3
 800654e:	d002      	beq.n	8006556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006556:	bf00      	nop
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr
 8006560:	200011e0 	.word	0x200011e0
 8006564:	200011e8 	.word	0x200011e8

08006568 <malloc>:
 8006568:	4b02      	ldr	r3, [pc, #8]	@ (8006574 <malloc+0xc>)
 800656a:	4601      	mov	r1, r0
 800656c:	6818      	ldr	r0, [r3, #0]
 800656e:	f000 b82d 	b.w	80065cc <_malloc_r>
 8006572:	bf00      	nop
 8006574:	20000010 	.word	0x20000010

08006578 <free>:
 8006578:	4b02      	ldr	r3, [pc, #8]	@ (8006584 <free+0xc>)
 800657a:	4601      	mov	r1, r0
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	f000 b98d 	b.w	800689c <_free_r>
 8006582:	bf00      	nop
 8006584:	20000010 	.word	0x20000010

08006588 <sbrk_aligned>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4e0f      	ldr	r6, [pc, #60]	@ (80065c8 <sbrk_aligned+0x40>)
 800658c:	460c      	mov	r4, r1
 800658e:	6831      	ldr	r1, [r6, #0]
 8006590:	4605      	mov	r5, r0
 8006592:	b911      	cbnz	r1, 800659a <sbrk_aligned+0x12>
 8006594:	f000 f938 	bl	8006808 <_sbrk_r>
 8006598:	6030      	str	r0, [r6, #0]
 800659a:	4621      	mov	r1, r4
 800659c:	4628      	mov	r0, r5
 800659e:	f000 f933 	bl	8006808 <_sbrk_r>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	d103      	bne.n	80065ae <sbrk_aligned+0x26>
 80065a6:	f04f 34ff 	mov.w	r4, #4294967295
 80065aa:	4620      	mov	r0, r4
 80065ac:	bd70      	pop	{r4, r5, r6, pc}
 80065ae:	1cc4      	adds	r4, r0, #3
 80065b0:	f024 0403 	bic.w	r4, r4, #3
 80065b4:	42a0      	cmp	r0, r4
 80065b6:	d0f8      	beq.n	80065aa <sbrk_aligned+0x22>
 80065b8:	1a21      	subs	r1, r4, r0
 80065ba:	4628      	mov	r0, r5
 80065bc:	f000 f924 	bl	8006808 <_sbrk_r>
 80065c0:	3001      	adds	r0, #1
 80065c2:	d1f2      	bne.n	80065aa <sbrk_aligned+0x22>
 80065c4:	e7ef      	b.n	80065a6 <sbrk_aligned+0x1e>
 80065c6:	bf00      	nop
 80065c8:	20001200 	.word	0x20001200

080065cc <_malloc_r>:
 80065cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d0:	1ccd      	adds	r5, r1, #3
 80065d2:	f025 0503 	bic.w	r5, r5, #3
 80065d6:	3508      	adds	r5, #8
 80065d8:	2d0c      	cmp	r5, #12
 80065da:	bf38      	it	cc
 80065dc:	250c      	movcc	r5, #12
 80065de:	2d00      	cmp	r5, #0
 80065e0:	4606      	mov	r6, r0
 80065e2:	db01      	blt.n	80065e8 <_malloc_r+0x1c>
 80065e4:	42a9      	cmp	r1, r5
 80065e6:	d904      	bls.n	80065f2 <_malloc_r+0x26>
 80065e8:	230c      	movs	r3, #12
 80065ea:	6033      	str	r3, [r6, #0]
 80065ec:	2000      	movs	r0, #0
 80065ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066c8 <_malloc_r+0xfc>
 80065f6:	f000 f869 	bl	80066cc <__malloc_lock>
 80065fa:	f8d8 3000 	ldr.w	r3, [r8]
 80065fe:	461c      	mov	r4, r3
 8006600:	bb44      	cbnz	r4, 8006654 <_malloc_r+0x88>
 8006602:	4629      	mov	r1, r5
 8006604:	4630      	mov	r0, r6
 8006606:	f7ff ffbf 	bl	8006588 <sbrk_aligned>
 800660a:	1c43      	adds	r3, r0, #1
 800660c:	4604      	mov	r4, r0
 800660e:	d158      	bne.n	80066c2 <_malloc_r+0xf6>
 8006610:	f8d8 4000 	ldr.w	r4, [r8]
 8006614:	4627      	mov	r7, r4
 8006616:	2f00      	cmp	r7, #0
 8006618:	d143      	bne.n	80066a2 <_malloc_r+0xd6>
 800661a:	2c00      	cmp	r4, #0
 800661c:	d04b      	beq.n	80066b6 <_malloc_r+0xea>
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	4639      	mov	r1, r7
 8006622:	4630      	mov	r0, r6
 8006624:	eb04 0903 	add.w	r9, r4, r3
 8006628:	f000 f8ee 	bl	8006808 <_sbrk_r>
 800662c:	4581      	cmp	r9, r0
 800662e:	d142      	bne.n	80066b6 <_malloc_r+0xea>
 8006630:	6821      	ldr	r1, [r4, #0]
 8006632:	4630      	mov	r0, r6
 8006634:	1a6d      	subs	r5, r5, r1
 8006636:	4629      	mov	r1, r5
 8006638:	f7ff ffa6 	bl	8006588 <sbrk_aligned>
 800663c:	3001      	adds	r0, #1
 800663e:	d03a      	beq.n	80066b6 <_malloc_r+0xea>
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	442b      	add	r3, r5
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	f8d8 3000 	ldr.w	r3, [r8]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	bb62      	cbnz	r2, 80066a8 <_malloc_r+0xdc>
 800664e:	f8c8 7000 	str.w	r7, [r8]
 8006652:	e00f      	b.n	8006674 <_malloc_r+0xa8>
 8006654:	6822      	ldr	r2, [r4, #0]
 8006656:	1b52      	subs	r2, r2, r5
 8006658:	d420      	bmi.n	800669c <_malloc_r+0xd0>
 800665a:	2a0b      	cmp	r2, #11
 800665c:	d917      	bls.n	800668e <_malloc_r+0xc2>
 800665e:	1961      	adds	r1, r4, r5
 8006660:	42a3      	cmp	r3, r4
 8006662:	6025      	str	r5, [r4, #0]
 8006664:	bf18      	it	ne
 8006666:	6059      	strne	r1, [r3, #4]
 8006668:	6863      	ldr	r3, [r4, #4]
 800666a:	bf08      	it	eq
 800666c:	f8c8 1000 	streq.w	r1, [r8]
 8006670:	5162      	str	r2, [r4, r5]
 8006672:	604b      	str	r3, [r1, #4]
 8006674:	4630      	mov	r0, r6
 8006676:	f000 f82f 	bl	80066d8 <__malloc_unlock>
 800667a:	f104 000b 	add.w	r0, r4, #11
 800667e:	1d23      	adds	r3, r4, #4
 8006680:	f020 0007 	bic.w	r0, r0, #7
 8006684:	1ac2      	subs	r2, r0, r3
 8006686:	bf1c      	itt	ne
 8006688:	1a1b      	subne	r3, r3, r0
 800668a:	50a3      	strne	r3, [r4, r2]
 800668c:	e7af      	b.n	80065ee <_malloc_r+0x22>
 800668e:	6862      	ldr	r2, [r4, #4]
 8006690:	42a3      	cmp	r3, r4
 8006692:	bf0c      	ite	eq
 8006694:	f8c8 2000 	streq.w	r2, [r8]
 8006698:	605a      	strne	r2, [r3, #4]
 800669a:	e7eb      	b.n	8006674 <_malloc_r+0xa8>
 800669c:	4623      	mov	r3, r4
 800669e:	6864      	ldr	r4, [r4, #4]
 80066a0:	e7ae      	b.n	8006600 <_malloc_r+0x34>
 80066a2:	463c      	mov	r4, r7
 80066a4:	687f      	ldr	r7, [r7, #4]
 80066a6:	e7b6      	b.n	8006616 <_malloc_r+0x4a>
 80066a8:	461a      	mov	r2, r3
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	42a3      	cmp	r3, r4
 80066ae:	d1fb      	bne.n	80066a8 <_malloc_r+0xdc>
 80066b0:	2300      	movs	r3, #0
 80066b2:	6053      	str	r3, [r2, #4]
 80066b4:	e7de      	b.n	8006674 <_malloc_r+0xa8>
 80066b6:	230c      	movs	r3, #12
 80066b8:	4630      	mov	r0, r6
 80066ba:	6033      	str	r3, [r6, #0]
 80066bc:	f000 f80c 	bl	80066d8 <__malloc_unlock>
 80066c0:	e794      	b.n	80065ec <_malloc_r+0x20>
 80066c2:	6005      	str	r5, [r0, #0]
 80066c4:	e7d6      	b.n	8006674 <_malloc_r+0xa8>
 80066c6:	bf00      	nop
 80066c8:	20001204 	.word	0x20001204

080066cc <__malloc_lock>:
 80066cc:	4801      	ldr	r0, [pc, #4]	@ (80066d4 <__malloc_lock+0x8>)
 80066ce:	f000 b8d5 	b.w	800687c <__retarget_lock_acquire_recursive>
 80066d2:	bf00      	nop
 80066d4:	20001344 	.word	0x20001344

080066d8 <__malloc_unlock>:
 80066d8:	4801      	ldr	r0, [pc, #4]	@ (80066e0 <__malloc_unlock+0x8>)
 80066da:	f000 b8d0 	b.w	800687e <__retarget_lock_release_recursive>
 80066de:	bf00      	nop
 80066e0:	20001344 	.word	0x20001344

080066e4 <sniprintf>:
 80066e4:	b40c      	push	{r2, r3}
 80066e6:	b530      	push	{r4, r5, lr}
 80066e8:	4b17      	ldr	r3, [pc, #92]	@ (8006748 <sniprintf+0x64>)
 80066ea:	1e0c      	subs	r4, r1, #0
 80066ec:	681d      	ldr	r5, [r3, #0]
 80066ee:	b09d      	sub	sp, #116	@ 0x74
 80066f0:	da08      	bge.n	8006704 <sniprintf+0x20>
 80066f2:	238b      	movs	r3, #139	@ 0x8b
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295
 80066f8:	602b      	str	r3, [r5, #0]
 80066fa:	b01d      	add	sp, #116	@ 0x74
 80066fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006700:	b002      	add	sp, #8
 8006702:	4770      	bx	lr
 8006704:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006708:	f8ad 3014 	strh.w	r3, [sp, #20]
 800670c:	bf0c      	ite	eq
 800670e:	4623      	moveq	r3, r4
 8006710:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006714:	9304      	str	r3, [sp, #16]
 8006716:	9307      	str	r3, [sp, #28]
 8006718:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800671c:	9002      	str	r0, [sp, #8]
 800671e:	9006      	str	r0, [sp, #24]
 8006720:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006724:	4628      	mov	r0, r5
 8006726:	ab21      	add	r3, sp, #132	@ 0x84
 8006728:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800672a:	a902      	add	r1, sp, #8
 800672c:	9301      	str	r3, [sp, #4]
 800672e:	f000 f959 	bl	80069e4 <_svfiprintf_r>
 8006732:	1c43      	adds	r3, r0, #1
 8006734:	bfbc      	itt	lt
 8006736:	238b      	movlt	r3, #139	@ 0x8b
 8006738:	602b      	strlt	r3, [r5, #0]
 800673a:	2c00      	cmp	r4, #0
 800673c:	d0dd      	beq.n	80066fa <sniprintf+0x16>
 800673e:	2200      	movs	r2, #0
 8006740:	9b02      	ldr	r3, [sp, #8]
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	e7d9      	b.n	80066fa <sniprintf+0x16>
 8006746:	bf00      	nop
 8006748:	20000010 	.word	0x20000010

0800674c <memset>:
 800674c:	4603      	mov	r3, r0
 800674e:	4402      	add	r2, r0
 8006750:	4293      	cmp	r3, r2
 8006752:	d100      	bne.n	8006756 <memset+0xa>
 8006754:	4770      	bx	lr
 8006756:	f803 1b01 	strb.w	r1, [r3], #1
 800675a:	e7f9      	b.n	8006750 <memset+0x4>

0800675c <_reclaim_reent>:
 800675c:	4b29      	ldr	r3, [pc, #164]	@ (8006804 <_reclaim_reent+0xa8>)
 800675e:	b570      	push	{r4, r5, r6, lr}
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4604      	mov	r4, r0
 8006764:	4283      	cmp	r3, r0
 8006766:	d04b      	beq.n	8006800 <_reclaim_reent+0xa4>
 8006768:	69c3      	ldr	r3, [r0, #28]
 800676a:	b1ab      	cbz	r3, 8006798 <_reclaim_reent+0x3c>
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	b16b      	cbz	r3, 800678c <_reclaim_reent+0x30>
 8006770:	2500      	movs	r5, #0
 8006772:	69e3      	ldr	r3, [r4, #28]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	5959      	ldr	r1, [r3, r5]
 8006778:	2900      	cmp	r1, #0
 800677a:	d13b      	bne.n	80067f4 <_reclaim_reent+0x98>
 800677c:	3504      	adds	r5, #4
 800677e:	2d80      	cmp	r5, #128	@ 0x80
 8006780:	d1f7      	bne.n	8006772 <_reclaim_reent+0x16>
 8006782:	69e3      	ldr	r3, [r4, #28]
 8006784:	4620      	mov	r0, r4
 8006786:	68d9      	ldr	r1, [r3, #12]
 8006788:	f000 f888 	bl	800689c <_free_r>
 800678c:	69e3      	ldr	r3, [r4, #28]
 800678e:	6819      	ldr	r1, [r3, #0]
 8006790:	b111      	cbz	r1, 8006798 <_reclaim_reent+0x3c>
 8006792:	4620      	mov	r0, r4
 8006794:	f000 f882 	bl	800689c <_free_r>
 8006798:	6961      	ldr	r1, [r4, #20]
 800679a:	b111      	cbz	r1, 80067a2 <_reclaim_reent+0x46>
 800679c:	4620      	mov	r0, r4
 800679e:	f000 f87d 	bl	800689c <_free_r>
 80067a2:	69e1      	ldr	r1, [r4, #28]
 80067a4:	b111      	cbz	r1, 80067ac <_reclaim_reent+0x50>
 80067a6:	4620      	mov	r0, r4
 80067a8:	f000 f878 	bl	800689c <_free_r>
 80067ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80067ae:	b111      	cbz	r1, 80067b6 <_reclaim_reent+0x5a>
 80067b0:	4620      	mov	r0, r4
 80067b2:	f000 f873 	bl	800689c <_free_r>
 80067b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067b8:	b111      	cbz	r1, 80067c0 <_reclaim_reent+0x64>
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 f86e 	bl	800689c <_free_r>
 80067c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80067c2:	b111      	cbz	r1, 80067ca <_reclaim_reent+0x6e>
 80067c4:	4620      	mov	r0, r4
 80067c6:	f000 f869 	bl	800689c <_free_r>
 80067ca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80067cc:	b111      	cbz	r1, 80067d4 <_reclaim_reent+0x78>
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 f864 	bl	800689c <_free_r>
 80067d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80067d6:	b111      	cbz	r1, 80067de <_reclaim_reent+0x82>
 80067d8:	4620      	mov	r0, r4
 80067da:	f000 f85f 	bl	800689c <_free_r>
 80067de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80067e0:	b111      	cbz	r1, 80067e8 <_reclaim_reent+0x8c>
 80067e2:	4620      	mov	r0, r4
 80067e4:	f000 f85a 	bl	800689c <_free_r>
 80067e8:	6a23      	ldr	r3, [r4, #32]
 80067ea:	b14b      	cbz	r3, 8006800 <_reclaim_reent+0xa4>
 80067ec:	4620      	mov	r0, r4
 80067ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80067f2:	4718      	bx	r3
 80067f4:	680e      	ldr	r6, [r1, #0]
 80067f6:	4620      	mov	r0, r4
 80067f8:	f000 f850 	bl	800689c <_free_r>
 80067fc:	4631      	mov	r1, r6
 80067fe:	e7bb      	b.n	8006778 <_reclaim_reent+0x1c>
 8006800:	bd70      	pop	{r4, r5, r6, pc}
 8006802:	bf00      	nop
 8006804:	20000010 	.word	0x20000010

08006808 <_sbrk_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	2300      	movs	r3, #0
 800680c:	4d05      	ldr	r5, [pc, #20]	@ (8006824 <_sbrk_r+0x1c>)
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fa feb4 	bl	8001580 <_sbrk>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_sbrk_r+0x1a>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_sbrk_r+0x1a>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	20001340 	.word	0x20001340

08006828 <__errno>:
 8006828:	4b01      	ldr	r3, [pc, #4]	@ (8006830 <__errno+0x8>)
 800682a:	6818      	ldr	r0, [r3, #0]
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20000010 	.word	0x20000010

08006834 <__libc_init_array>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	2600      	movs	r6, #0
 8006838:	4d0c      	ldr	r5, [pc, #48]	@ (800686c <__libc_init_array+0x38>)
 800683a:	4c0d      	ldr	r4, [pc, #52]	@ (8006870 <__libc_init_array+0x3c>)
 800683c:	1b64      	subs	r4, r4, r5
 800683e:	10a4      	asrs	r4, r4, #2
 8006840:	42a6      	cmp	r6, r4
 8006842:	d109      	bne.n	8006858 <__libc_init_array+0x24>
 8006844:	f000 fbba 	bl	8006fbc <_init>
 8006848:	2600      	movs	r6, #0
 800684a:	4d0a      	ldr	r5, [pc, #40]	@ (8006874 <__libc_init_array+0x40>)
 800684c:	4c0a      	ldr	r4, [pc, #40]	@ (8006878 <__libc_init_array+0x44>)
 800684e:	1b64      	subs	r4, r4, r5
 8006850:	10a4      	asrs	r4, r4, #2
 8006852:	42a6      	cmp	r6, r4
 8006854:	d105      	bne.n	8006862 <__libc_init_array+0x2e>
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	f855 3b04 	ldr.w	r3, [r5], #4
 800685c:	4798      	blx	r3
 800685e:	3601      	adds	r6, #1
 8006860:	e7ee      	b.n	8006840 <__libc_init_array+0xc>
 8006862:	f855 3b04 	ldr.w	r3, [r5], #4
 8006866:	4798      	blx	r3
 8006868:	3601      	adds	r6, #1
 800686a:	e7f2      	b.n	8006852 <__libc_init_array+0x1e>
 800686c:	08007130 	.word	0x08007130
 8006870:	08007130 	.word	0x08007130
 8006874:	08007130 	.word	0x08007130
 8006878:	08007134 	.word	0x08007134

0800687c <__retarget_lock_acquire_recursive>:
 800687c:	4770      	bx	lr

0800687e <__retarget_lock_release_recursive>:
 800687e:	4770      	bx	lr

08006880 <memcpy>:
 8006880:	440a      	add	r2, r1
 8006882:	4291      	cmp	r1, r2
 8006884:	f100 33ff 	add.w	r3, r0, #4294967295
 8006888:	d100      	bne.n	800688c <memcpy+0xc>
 800688a:	4770      	bx	lr
 800688c:	b510      	push	{r4, lr}
 800688e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006892:	4291      	cmp	r1, r2
 8006894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006898:	d1f9      	bne.n	800688e <memcpy+0xe>
 800689a:	bd10      	pop	{r4, pc}

0800689c <_free_r>:
 800689c:	b538      	push	{r3, r4, r5, lr}
 800689e:	4605      	mov	r5, r0
 80068a0:	2900      	cmp	r1, #0
 80068a2:	d040      	beq.n	8006926 <_free_r+0x8a>
 80068a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068a8:	1f0c      	subs	r4, r1, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	bfb8      	it	lt
 80068ae:	18e4      	addlt	r4, r4, r3
 80068b0:	f7ff ff0c 	bl	80066cc <__malloc_lock>
 80068b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006928 <_free_r+0x8c>)
 80068b6:	6813      	ldr	r3, [r2, #0]
 80068b8:	b933      	cbnz	r3, 80068c8 <_free_r+0x2c>
 80068ba:	6063      	str	r3, [r4, #4]
 80068bc:	6014      	str	r4, [r2, #0]
 80068be:	4628      	mov	r0, r5
 80068c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068c4:	f7ff bf08 	b.w	80066d8 <__malloc_unlock>
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	d908      	bls.n	80068de <_free_r+0x42>
 80068cc:	6820      	ldr	r0, [r4, #0]
 80068ce:	1821      	adds	r1, r4, r0
 80068d0:	428b      	cmp	r3, r1
 80068d2:	bf01      	itttt	eq
 80068d4:	6819      	ldreq	r1, [r3, #0]
 80068d6:	685b      	ldreq	r3, [r3, #4]
 80068d8:	1809      	addeq	r1, r1, r0
 80068da:	6021      	streq	r1, [r4, #0]
 80068dc:	e7ed      	b.n	80068ba <_free_r+0x1e>
 80068de:	461a      	mov	r2, r3
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	b10b      	cbz	r3, 80068e8 <_free_r+0x4c>
 80068e4:	42a3      	cmp	r3, r4
 80068e6:	d9fa      	bls.n	80068de <_free_r+0x42>
 80068e8:	6811      	ldr	r1, [r2, #0]
 80068ea:	1850      	adds	r0, r2, r1
 80068ec:	42a0      	cmp	r0, r4
 80068ee:	d10b      	bne.n	8006908 <_free_r+0x6c>
 80068f0:	6820      	ldr	r0, [r4, #0]
 80068f2:	4401      	add	r1, r0
 80068f4:	1850      	adds	r0, r2, r1
 80068f6:	4283      	cmp	r3, r0
 80068f8:	6011      	str	r1, [r2, #0]
 80068fa:	d1e0      	bne.n	80068be <_free_r+0x22>
 80068fc:	6818      	ldr	r0, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4408      	add	r0, r1
 8006902:	6010      	str	r0, [r2, #0]
 8006904:	6053      	str	r3, [r2, #4]
 8006906:	e7da      	b.n	80068be <_free_r+0x22>
 8006908:	d902      	bls.n	8006910 <_free_r+0x74>
 800690a:	230c      	movs	r3, #12
 800690c:	602b      	str	r3, [r5, #0]
 800690e:	e7d6      	b.n	80068be <_free_r+0x22>
 8006910:	6820      	ldr	r0, [r4, #0]
 8006912:	1821      	adds	r1, r4, r0
 8006914:	428b      	cmp	r3, r1
 8006916:	bf01      	itttt	eq
 8006918:	6819      	ldreq	r1, [r3, #0]
 800691a:	685b      	ldreq	r3, [r3, #4]
 800691c:	1809      	addeq	r1, r1, r0
 800691e:	6021      	streq	r1, [r4, #0]
 8006920:	6063      	str	r3, [r4, #4]
 8006922:	6054      	str	r4, [r2, #4]
 8006924:	e7cb      	b.n	80068be <_free_r+0x22>
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	20001204 	.word	0x20001204

0800692c <__ssputs_r>:
 800692c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006930:	461f      	mov	r7, r3
 8006932:	688e      	ldr	r6, [r1, #8]
 8006934:	4682      	mov	sl, r0
 8006936:	42be      	cmp	r6, r7
 8006938:	460c      	mov	r4, r1
 800693a:	4690      	mov	r8, r2
 800693c:	680b      	ldr	r3, [r1, #0]
 800693e:	d82d      	bhi.n	800699c <__ssputs_r+0x70>
 8006940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006948:	d026      	beq.n	8006998 <__ssputs_r+0x6c>
 800694a:	6965      	ldr	r5, [r4, #20]
 800694c:	6909      	ldr	r1, [r1, #16]
 800694e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006952:	eba3 0901 	sub.w	r9, r3, r1
 8006956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800695a:	1c7b      	adds	r3, r7, #1
 800695c:	444b      	add	r3, r9
 800695e:	106d      	asrs	r5, r5, #1
 8006960:	429d      	cmp	r5, r3
 8006962:	bf38      	it	cc
 8006964:	461d      	movcc	r5, r3
 8006966:	0553      	lsls	r3, r2, #21
 8006968:	d527      	bpl.n	80069ba <__ssputs_r+0x8e>
 800696a:	4629      	mov	r1, r5
 800696c:	f7ff fe2e 	bl	80065cc <_malloc_r>
 8006970:	4606      	mov	r6, r0
 8006972:	b360      	cbz	r0, 80069ce <__ssputs_r+0xa2>
 8006974:	464a      	mov	r2, r9
 8006976:	6921      	ldr	r1, [r4, #16]
 8006978:	f7ff ff82 	bl	8006880 <memcpy>
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006986:	81a3      	strh	r3, [r4, #12]
 8006988:	6126      	str	r6, [r4, #16]
 800698a:	444e      	add	r6, r9
 800698c:	6026      	str	r6, [r4, #0]
 800698e:	463e      	mov	r6, r7
 8006990:	6165      	str	r5, [r4, #20]
 8006992:	eba5 0509 	sub.w	r5, r5, r9
 8006996:	60a5      	str	r5, [r4, #8]
 8006998:	42be      	cmp	r6, r7
 800699a:	d900      	bls.n	800699e <__ssputs_r+0x72>
 800699c:	463e      	mov	r6, r7
 800699e:	4632      	mov	r2, r6
 80069a0:	4641      	mov	r1, r8
 80069a2:	6820      	ldr	r0, [r4, #0]
 80069a4:	f000 faac 	bl	8006f00 <memmove>
 80069a8:	2000      	movs	r0, #0
 80069aa:	68a3      	ldr	r3, [r4, #8]
 80069ac:	1b9b      	subs	r3, r3, r6
 80069ae:	60a3      	str	r3, [r4, #8]
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	4433      	add	r3, r6
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ba:	462a      	mov	r2, r5
 80069bc:	f000 fac8 	bl	8006f50 <_realloc_r>
 80069c0:	4606      	mov	r6, r0
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d1e0      	bne.n	8006988 <__ssputs_r+0x5c>
 80069c6:	4650      	mov	r0, sl
 80069c8:	6921      	ldr	r1, [r4, #16]
 80069ca:	f7ff ff67 	bl	800689c <_free_r>
 80069ce:	230c      	movs	r3, #12
 80069d0:	f8ca 3000 	str.w	r3, [sl]
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f04f 30ff 	mov.w	r0, #4294967295
 80069da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	e7e9      	b.n	80069b6 <__ssputs_r+0x8a>
	...

080069e4 <_svfiprintf_r>:
 80069e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	4698      	mov	r8, r3
 80069ea:	898b      	ldrh	r3, [r1, #12]
 80069ec:	4607      	mov	r7, r0
 80069ee:	061b      	lsls	r3, r3, #24
 80069f0:	460d      	mov	r5, r1
 80069f2:	4614      	mov	r4, r2
 80069f4:	b09d      	sub	sp, #116	@ 0x74
 80069f6:	d510      	bpl.n	8006a1a <_svfiprintf_r+0x36>
 80069f8:	690b      	ldr	r3, [r1, #16]
 80069fa:	b973      	cbnz	r3, 8006a1a <_svfiprintf_r+0x36>
 80069fc:	2140      	movs	r1, #64	@ 0x40
 80069fe:	f7ff fde5 	bl	80065cc <_malloc_r>
 8006a02:	6028      	str	r0, [r5, #0]
 8006a04:	6128      	str	r0, [r5, #16]
 8006a06:	b930      	cbnz	r0, 8006a16 <_svfiprintf_r+0x32>
 8006a08:	230c      	movs	r3, #12
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a10:	b01d      	add	sp, #116	@ 0x74
 8006a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a16:	2340      	movs	r3, #64	@ 0x40
 8006a18:	616b      	str	r3, [r5, #20]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a1e:	2320      	movs	r3, #32
 8006a20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a24:	2330      	movs	r3, #48	@ 0x30
 8006a26:	f04f 0901 	mov.w	r9, #1
 8006a2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a2e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006bc8 <_svfiprintf_r+0x1e4>
 8006a32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a36:	4623      	mov	r3, r4
 8006a38:	469a      	mov	sl, r3
 8006a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a3e:	b10a      	cbz	r2, 8006a44 <_svfiprintf_r+0x60>
 8006a40:	2a25      	cmp	r2, #37	@ 0x25
 8006a42:	d1f9      	bne.n	8006a38 <_svfiprintf_r+0x54>
 8006a44:	ebba 0b04 	subs.w	fp, sl, r4
 8006a48:	d00b      	beq.n	8006a62 <_svfiprintf_r+0x7e>
 8006a4a:	465b      	mov	r3, fp
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	4629      	mov	r1, r5
 8006a50:	4638      	mov	r0, r7
 8006a52:	f7ff ff6b 	bl	800692c <__ssputs_r>
 8006a56:	3001      	adds	r0, #1
 8006a58:	f000 80a7 	beq.w	8006baa <_svfiprintf_r+0x1c6>
 8006a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a5e:	445a      	add	r2, fp
 8006a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a62:	f89a 3000 	ldrb.w	r3, [sl]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 809f 	beq.w	8006baa <_svfiprintf_r+0x1c6>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a76:	f10a 0a01 	add.w	sl, sl, #1
 8006a7a:	9304      	str	r3, [sp, #16]
 8006a7c:	9307      	str	r3, [sp, #28]
 8006a7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a82:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a84:	4654      	mov	r4, sl
 8006a86:	2205      	movs	r2, #5
 8006a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8c:	484e      	ldr	r0, [pc, #312]	@ (8006bc8 <_svfiprintf_r+0x1e4>)
 8006a8e:	f000 fa51 	bl	8006f34 <memchr>
 8006a92:	9a04      	ldr	r2, [sp, #16]
 8006a94:	b9d8      	cbnz	r0, 8006ace <_svfiprintf_r+0xea>
 8006a96:	06d0      	lsls	r0, r2, #27
 8006a98:	bf44      	itt	mi
 8006a9a:	2320      	movmi	r3, #32
 8006a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aa0:	0711      	lsls	r1, r2, #28
 8006aa2:	bf44      	itt	mi
 8006aa4:	232b      	movmi	r3, #43	@ 0x2b
 8006aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8006aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ab0:	d015      	beq.n	8006ade <_svfiprintf_r+0xfa>
 8006ab2:	4654      	mov	r4, sl
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f04f 0c0a 	mov.w	ip, #10
 8006aba:	9a07      	ldr	r2, [sp, #28]
 8006abc:	4621      	mov	r1, r4
 8006abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ac2:	3b30      	subs	r3, #48	@ 0x30
 8006ac4:	2b09      	cmp	r3, #9
 8006ac6:	d94b      	bls.n	8006b60 <_svfiprintf_r+0x17c>
 8006ac8:	b1b0      	cbz	r0, 8006af8 <_svfiprintf_r+0x114>
 8006aca:	9207      	str	r2, [sp, #28]
 8006acc:	e014      	b.n	8006af8 <_svfiprintf_r+0x114>
 8006ace:	eba0 0308 	sub.w	r3, r0, r8
 8006ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	46a2      	mov	sl, r4
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	e7d2      	b.n	8006a84 <_svfiprintf_r+0xa0>
 8006ade:	9b03      	ldr	r3, [sp, #12]
 8006ae0:	1d19      	adds	r1, r3, #4
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	9103      	str	r1, [sp, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bfbb      	ittet	lt
 8006aea:	425b      	neglt	r3, r3
 8006aec:	f042 0202 	orrlt.w	r2, r2, #2
 8006af0:	9307      	strge	r3, [sp, #28]
 8006af2:	9307      	strlt	r3, [sp, #28]
 8006af4:	bfb8      	it	lt
 8006af6:	9204      	strlt	r2, [sp, #16]
 8006af8:	7823      	ldrb	r3, [r4, #0]
 8006afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8006afc:	d10a      	bne.n	8006b14 <_svfiprintf_r+0x130>
 8006afe:	7863      	ldrb	r3, [r4, #1]
 8006b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b02:	d132      	bne.n	8006b6a <_svfiprintf_r+0x186>
 8006b04:	9b03      	ldr	r3, [sp, #12]
 8006b06:	3402      	adds	r4, #2
 8006b08:	1d1a      	adds	r2, r3, #4
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	9203      	str	r2, [sp, #12]
 8006b0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006bcc <_svfiprintf_r+0x1e8>
 8006b18:	2203      	movs	r2, #3
 8006b1a:	4650      	mov	r0, sl
 8006b1c:	7821      	ldrb	r1, [r4, #0]
 8006b1e:	f000 fa09 	bl	8006f34 <memchr>
 8006b22:	b138      	cbz	r0, 8006b34 <_svfiprintf_r+0x150>
 8006b24:	2240      	movs	r2, #64	@ 0x40
 8006b26:	9b04      	ldr	r3, [sp, #16]
 8006b28:	eba0 000a 	sub.w	r0, r0, sl
 8006b2c:	4082      	lsls	r2, r0
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	3401      	adds	r4, #1
 8006b32:	9304      	str	r3, [sp, #16]
 8006b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b38:	2206      	movs	r2, #6
 8006b3a:	4825      	ldr	r0, [pc, #148]	@ (8006bd0 <_svfiprintf_r+0x1ec>)
 8006b3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b40:	f000 f9f8 	bl	8006f34 <memchr>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d036      	beq.n	8006bb6 <_svfiprintf_r+0x1d2>
 8006b48:	4b22      	ldr	r3, [pc, #136]	@ (8006bd4 <_svfiprintf_r+0x1f0>)
 8006b4a:	bb1b      	cbnz	r3, 8006b94 <_svfiprintf_r+0x1b0>
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	3307      	adds	r3, #7
 8006b50:	f023 0307 	bic.w	r3, r3, #7
 8006b54:	3308      	adds	r3, #8
 8006b56:	9303      	str	r3, [sp, #12]
 8006b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b5a:	4433      	add	r3, r6
 8006b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b5e:	e76a      	b.n	8006a36 <_svfiprintf_r+0x52>
 8006b60:	460c      	mov	r4, r1
 8006b62:	2001      	movs	r0, #1
 8006b64:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b68:	e7a8      	b.n	8006abc <_svfiprintf_r+0xd8>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f04f 0c0a 	mov.w	ip, #10
 8006b70:	4619      	mov	r1, r3
 8006b72:	3401      	adds	r4, #1
 8006b74:	9305      	str	r3, [sp, #20]
 8006b76:	4620      	mov	r0, r4
 8006b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b7c:	3a30      	subs	r2, #48	@ 0x30
 8006b7e:	2a09      	cmp	r2, #9
 8006b80:	d903      	bls.n	8006b8a <_svfiprintf_r+0x1a6>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0c6      	beq.n	8006b14 <_svfiprintf_r+0x130>
 8006b86:	9105      	str	r1, [sp, #20]
 8006b88:	e7c4      	b.n	8006b14 <_svfiprintf_r+0x130>
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b92:	e7f0      	b.n	8006b76 <_svfiprintf_r+0x192>
 8006b94:	ab03      	add	r3, sp, #12
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	462a      	mov	r2, r5
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd8 <_svfiprintf_r+0x1f4>)
 8006b9e:	a904      	add	r1, sp, #16
 8006ba0:	f3af 8000 	nop.w
 8006ba4:	1c42      	adds	r2, r0, #1
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	d1d6      	bne.n	8006b58 <_svfiprintf_r+0x174>
 8006baa:	89ab      	ldrh	r3, [r5, #12]
 8006bac:	065b      	lsls	r3, r3, #25
 8006bae:	f53f af2d 	bmi.w	8006a0c <_svfiprintf_r+0x28>
 8006bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bb4:	e72c      	b.n	8006a10 <_svfiprintf_r+0x2c>
 8006bb6:	ab03      	add	r3, sp, #12
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	462a      	mov	r2, r5
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	4b06      	ldr	r3, [pc, #24]	@ (8006bd8 <_svfiprintf_r+0x1f4>)
 8006bc0:	a904      	add	r1, sp, #16
 8006bc2:	f000 f87d 	bl	8006cc0 <_printf_i>
 8006bc6:	e7ed      	b.n	8006ba4 <_svfiprintf_r+0x1c0>
 8006bc8:	080070f2 	.word	0x080070f2
 8006bcc:	080070f8 	.word	0x080070f8
 8006bd0:	080070fc 	.word	0x080070fc
 8006bd4:	00000000 	.word	0x00000000
 8006bd8:	0800692d 	.word	0x0800692d

08006bdc <_printf_common>:
 8006bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	4616      	mov	r6, r2
 8006be2:	4698      	mov	r8, r3
 8006be4:	688a      	ldr	r2, [r1, #8]
 8006be6:	690b      	ldr	r3, [r1, #16]
 8006be8:	4607      	mov	r7, r0
 8006bea:	4293      	cmp	r3, r2
 8006bec:	bfb8      	it	lt
 8006bee:	4613      	movlt	r3, r2
 8006bf0:	6033      	str	r3, [r6, #0]
 8006bf2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bfc:	b10a      	cbz	r2, 8006c02 <_printf_common+0x26>
 8006bfe:	3301      	adds	r3, #1
 8006c00:	6033      	str	r3, [r6, #0]
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	0699      	lsls	r1, r3, #26
 8006c06:	bf42      	ittt	mi
 8006c08:	6833      	ldrmi	r3, [r6, #0]
 8006c0a:	3302      	addmi	r3, #2
 8006c0c:	6033      	strmi	r3, [r6, #0]
 8006c0e:	6825      	ldr	r5, [r4, #0]
 8006c10:	f015 0506 	ands.w	r5, r5, #6
 8006c14:	d106      	bne.n	8006c24 <_printf_common+0x48>
 8006c16:	f104 0a19 	add.w	sl, r4, #25
 8006c1a:	68e3      	ldr	r3, [r4, #12]
 8006c1c:	6832      	ldr	r2, [r6, #0]
 8006c1e:	1a9b      	subs	r3, r3, r2
 8006c20:	42ab      	cmp	r3, r5
 8006c22:	dc2b      	bgt.n	8006c7c <_printf_common+0xa0>
 8006c24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c28:	6822      	ldr	r2, [r4, #0]
 8006c2a:	3b00      	subs	r3, #0
 8006c2c:	bf18      	it	ne
 8006c2e:	2301      	movne	r3, #1
 8006c30:	0692      	lsls	r2, r2, #26
 8006c32:	d430      	bmi.n	8006c96 <_printf_common+0xba>
 8006c34:	4641      	mov	r1, r8
 8006c36:	4638      	mov	r0, r7
 8006c38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c3c:	47c8      	blx	r9
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d023      	beq.n	8006c8a <_printf_common+0xae>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	6922      	ldr	r2, [r4, #16]
 8006c46:	f003 0306 	and.w	r3, r3, #6
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	bf14      	ite	ne
 8006c4e:	2500      	movne	r5, #0
 8006c50:	6833      	ldreq	r3, [r6, #0]
 8006c52:	f04f 0600 	mov.w	r6, #0
 8006c56:	bf08      	it	eq
 8006c58:	68e5      	ldreq	r5, [r4, #12]
 8006c5a:	f104 041a 	add.w	r4, r4, #26
 8006c5e:	bf08      	it	eq
 8006c60:	1aed      	subeq	r5, r5, r3
 8006c62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006c66:	bf08      	it	eq
 8006c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	bfc4      	itt	gt
 8006c70:	1a9b      	subgt	r3, r3, r2
 8006c72:	18ed      	addgt	r5, r5, r3
 8006c74:	42b5      	cmp	r5, r6
 8006c76:	d11a      	bne.n	8006cae <_printf_common+0xd2>
 8006c78:	2000      	movs	r0, #0
 8006c7a:	e008      	b.n	8006c8e <_printf_common+0xb2>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	4652      	mov	r2, sl
 8006c80:	4641      	mov	r1, r8
 8006c82:	4638      	mov	r0, r7
 8006c84:	47c8      	blx	r9
 8006c86:	3001      	adds	r0, #1
 8006c88:	d103      	bne.n	8006c92 <_printf_common+0xb6>
 8006c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c92:	3501      	adds	r5, #1
 8006c94:	e7c1      	b.n	8006c1a <_printf_common+0x3e>
 8006c96:	2030      	movs	r0, #48	@ 0x30
 8006c98:	18e1      	adds	r1, r4, r3
 8006c9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ca4:	4422      	add	r2, r4
 8006ca6:	3302      	adds	r3, #2
 8006ca8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cac:	e7c2      	b.n	8006c34 <_printf_common+0x58>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	4641      	mov	r1, r8
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	47c8      	blx	r9
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d0e6      	beq.n	8006c8a <_printf_common+0xae>
 8006cbc:	3601      	adds	r6, #1
 8006cbe:	e7d9      	b.n	8006c74 <_printf_common+0x98>

08006cc0 <_printf_i>:
 8006cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc4:	7e0f      	ldrb	r7, [r1, #24]
 8006cc6:	4691      	mov	r9, r2
 8006cc8:	2f78      	cmp	r7, #120	@ 0x78
 8006cca:	4680      	mov	r8, r0
 8006ccc:	460c      	mov	r4, r1
 8006cce:	469a      	mov	sl, r3
 8006cd0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006cd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006cd6:	d807      	bhi.n	8006ce8 <_printf_i+0x28>
 8006cd8:	2f62      	cmp	r7, #98	@ 0x62
 8006cda:	d80a      	bhi.n	8006cf2 <_printf_i+0x32>
 8006cdc:	2f00      	cmp	r7, #0
 8006cde:	f000 80d3 	beq.w	8006e88 <_printf_i+0x1c8>
 8006ce2:	2f58      	cmp	r7, #88	@ 0x58
 8006ce4:	f000 80ba 	beq.w	8006e5c <_printf_i+0x19c>
 8006ce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006cf0:	e03a      	b.n	8006d68 <_printf_i+0xa8>
 8006cf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cf6:	2b15      	cmp	r3, #21
 8006cf8:	d8f6      	bhi.n	8006ce8 <_printf_i+0x28>
 8006cfa:	a101      	add	r1, pc, #4	@ (adr r1, 8006d00 <_printf_i+0x40>)
 8006cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d00:	08006d59 	.word	0x08006d59
 8006d04:	08006d6d 	.word	0x08006d6d
 8006d08:	08006ce9 	.word	0x08006ce9
 8006d0c:	08006ce9 	.word	0x08006ce9
 8006d10:	08006ce9 	.word	0x08006ce9
 8006d14:	08006ce9 	.word	0x08006ce9
 8006d18:	08006d6d 	.word	0x08006d6d
 8006d1c:	08006ce9 	.word	0x08006ce9
 8006d20:	08006ce9 	.word	0x08006ce9
 8006d24:	08006ce9 	.word	0x08006ce9
 8006d28:	08006ce9 	.word	0x08006ce9
 8006d2c:	08006e6f 	.word	0x08006e6f
 8006d30:	08006d97 	.word	0x08006d97
 8006d34:	08006e29 	.word	0x08006e29
 8006d38:	08006ce9 	.word	0x08006ce9
 8006d3c:	08006ce9 	.word	0x08006ce9
 8006d40:	08006e91 	.word	0x08006e91
 8006d44:	08006ce9 	.word	0x08006ce9
 8006d48:	08006d97 	.word	0x08006d97
 8006d4c:	08006ce9 	.word	0x08006ce9
 8006d50:	08006ce9 	.word	0x08006ce9
 8006d54:	08006e31 	.word	0x08006e31
 8006d58:	6833      	ldr	r3, [r6, #0]
 8006d5a:	1d1a      	adds	r2, r3, #4
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6032      	str	r2, [r6, #0]
 8006d60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e09e      	b.n	8006eaa <_printf_i+0x1ea>
 8006d6c:	6833      	ldr	r3, [r6, #0]
 8006d6e:	6820      	ldr	r0, [r4, #0]
 8006d70:	1d19      	adds	r1, r3, #4
 8006d72:	6031      	str	r1, [r6, #0]
 8006d74:	0606      	lsls	r6, r0, #24
 8006d76:	d501      	bpl.n	8006d7c <_printf_i+0xbc>
 8006d78:	681d      	ldr	r5, [r3, #0]
 8006d7a:	e003      	b.n	8006d84 <_printf_i+0xc4>
 8006d7c:	0645      	lsls	r5, r0, #25
 8006d7e:	d5fb      	bpl.n	8006d78 <_printf_i+0xb8>
 8006d80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d84:	2d00      	cmp	r5, #0
 8006d86:	da03      	bge.n	8006d90 <_printf_i+0xd0>
 8006d88:	232d      	movs	r3, #45	@ 0x2d
 8006d8a:	426d      	negs	r5, r5
 8006d8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d90:	230a      	movs	r3, #10
 8006d92:	4859      	ldr	r0, [pc, #356]	@ (8006ef8 <_printf_i+0x238>)
 8006d94:	e011      	b.n	8006dba <_printf_i+0xfa>
 8006d96:	6821      	ldr	r1, [r4, #0]
 8006d98:	6833      	ldr	r3, [r6, #0]
 8006d9a:	0608      	lsls	r0, r1, #24
 8006d9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006da0:	d402      	bmi.n	8006da8 <_printf_i+0xe8>
 8006da2:	0649      	lsls	r1, r1, #25
 8006da4:	bf48      	it	mi
 8006da6:	b2ad      	uxthmi	r5, r5
 8006da8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006daa:	6033      	str	r3, [r6, #0]
 8006dac:	bf14      	ite	ne
 8006dae:	230a      	movne	r3, #10
 8006db0:	2308      	moveq	r3, #8
 8006db2:	4851      	ldr	r0, [pc, #324]	@ (8006ef8 <_printf_i+0x238>)
 8006db4:	2100      	movs	r1, #0
 8006db6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006dba:	6866      	ldr	r6, [r4, #4]
 8006dbc:	2e00      	cmp	r6, #0
 8006dbe:	bfa8      	it	ge
 8006dc0:	6821      	ldrge	r1, [r4, #0]
 8006dc2:	60a6      	str	r6, [r4, #8]
 8006dc4:	bfa4      	itt	ge
 8006dc6:	f021 0104 	bicge.w	r1, r1, #4
 8006dca:	6021      	strge	r1, [r4, #0]
 8006dcc:	b90d      	cbnz	r5, 8006dd2 <_printf_i+0x112>
 8006dce:	2e00      	cmp	r6, #0
 8006dd0:	d04b      	beq.n	8006e6a <_printf_i+0x1aa>
 8006dd2:	4616      	mov	r6, r2
 8006dd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006dd8:	fb03 5711 	mls	r7, r3, r1, r5
 8006ddc:	5dc7      	ldrb	r7, [r0, r7]
 8006dde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006de2:	462f      	mov	r7, r5
 8006de4:	42bb      	cmp	r3, r7
 8006de6:	460d      	mov	r5, r1
 8006de8:	d9f4      	bls.n	8006dd4 <_printf_i+0x114>
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d10b      	bne.n	8006e06 <_printf_i+0x146>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	07df      	lsls	r7, r3, #31
 8006df2:	d508      	bpl.n	8006e06 <_printf_i+0x146>
 8006df4:	6923      	ldr	r3, [r4, #16]
 8006df6:	6861      	ldr	r1, [r4, #4]
 8006df8:	4299      	cmp	r1, r3
 8006dfa:	bfde      	ittt	le
 8006dfc:	2330      	movle	r3, #48	@ 0x30
 8006dfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e06:	1b92      	subs	r2, r2, r6
 8006e08:	6122      	str	r2, [r4, #16]
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	4640      	mov	r0, r8
 8006e10:	f8cd a000 	str.w	sl, [sp]
 8006e14:	aa03      	add	r2, sp, #12
 8006e16:	f7ff fee1 	bl	8006bdc <_printf_common>
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d14a      	bne.n	8006eb4 <_printf_i+0x1f4>
 8006e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e22:	b004      	add	sp, #16
 8006e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	f043 0320 	orr.w	r3, r3, #32
 8006e2e:	6023      	str	r3, [r4, #0]
 8006e30:	2778      	movs	r7, #120	@ 0x78
 8006e32:	4832      	ldr	r0, [pc, #200]	@ (8006efc <_printf_i+0x23c>)
 8006e34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	6831      	ldr	r1, [r6, #0]
 8006e3c:	061f      	lsls	r7, r3, #24
 8006e3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e42:	d402      	bmi.n	8006e4a <_printf_i+0x18a>
 8006e44:	065f      	lsls	r7, r3, #25
 8006e46:	bf48      	it	mi
 8006e48:	b2ad      	uxthmi	r5, r5
 8006e4a:	6031      	str	r1, [r6, #0]
 8006e4c:	07d9      	lsls	r1, r3, #31
 8006e4e:	bf44      	itt	mi
 8006e50:	f043 0320 	orrmi.w	r3, r3, #32
 8006e54:	6023      	strmi	r3, [r4, #0]
 8006e56:	b11d      	cbz	r5, 8006e60 <_printf_i+0x1a0>
 8006e58:	2310      	movs	r3, #16
 8006e5a:	e7ab      	b.n	8006db4 <_printf_i+0xf4>
 8006e5c:	4826      	ldr	r0, [pc, #152]	@ (8006ef8 <_printf_i+0x238>)
 8006e5e:	e7e9      	b.n	8006e34 <_printf_i+0x174>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	f023 0320 	bic.w	r3, r3, #32
 8006e66:	6023      	str	r3, [r4, #0]
 8006e68:	e7f6      	b.n	8006e58 <_printf_i+0x198>
 8006e6a:	4616      	mov	r6, r2
 8006e6c:	e7bd      	b.n	8006dea <_printf_i+0x12a>
 8006e6e:	6833      	ldr	r3, [r6, #0]
 8006e70:	6825      	ldr	r5, [r4, #0]
 8006e72:	1d18      	adds	r0, r3, #4
 8006e74:	6961      	ldr	r1, [r4, #20]
 8006e76:	6030      	str	r0, [r6, #0]
 8006e78:	062e      	lsls	r6, r5, #24
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	d501      	bpl.n	8006e82 <_printf_i+0x1c2>
 8006e7e:	6019      	str	r1, [r3, #0]
 8006e80:	e002      	b.n	8006e88 <_printf_i+0x1c8>
 8006e82:	0668      	lsls	r0, r5, #25
 8006e84:	d5fb      	bpl.n	8006e7e <_printf_i+0x1be>
 8006e86:	8019      	strh	r1, [r3, #0]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4616      	mov	r6, r2
 8006e8c:	6123      	str	r3, [r4, #16]
 8006e8e:	e7bc      	b.n	8006e0a <_printf_i+0x14a>
 8006e90:	6833      	ldr	r3, [r6, #0]
 8006e92:	2100      	movs	r1, #0
 8006e94:	1d1a      	adds	r2, r3, #4
 8006e96:	6032      	str	r2, [r6, #0]
 8006e98:	681e      	ldr	r6, [r3, #0]
 8006e9a:	6862      	ldr	r2, [r4, #4]
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f000 f849 	bl	8006f34 <memchr>
 8006ea2:	b108      	cbz	r0, 8006ea8 <_printf_i+0x1e8>
 8006ea4:	1b80      	subs	r0, r0, r6
 8006ea6:	6060      	str	r0, [r4, #4]
 8006ea8:	6863      	ldr	r3, [r4, #4]
 8006eaa:	6123      	str	r3, [r4, #16]
 8006eac:	2300      	movs	r3, #0
 8006eae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006eb2:	e7aa      	b.n	8006e0a <_printf_i+0x14a>
 8006eb4:	4632      	mov	r2, r6
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	4640      	mov	r0, r8
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	47d0      	blx	sl
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d0ad      	beq.n	8006e1e <_printf_i+0x15e>
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	079b      	lsls	r3, r3, #30
 8006ec6:	d413      	bmi.n	8006ef0 <_printf_i+0x230>
 8006ec8:	68e0      	ldr	r0, [r4, #12]
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	4298      	cmp	r0, r3
 8006ece:	bfb8      	it	lt
 8006ed0:	4618      	movlt	r0, r3
 8006ed2:	e7a6      	b.n	8006e22 <_printf_i+0x162>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	4632      	mov	r2, r6
 8006ed8:	4649      	mov	r1, r9
 8006eda:	4640      	mov	r0, r8
 8006edc:	47d0      	blx	sl
 8006ede:	3001      	adds	r0, #1
 8006ee0:	d09d      	beq.n	8006e1e <_printf_i+0x15e>
 8006ee2:	3501      	adds	r5, #1
 8006ee4:	68e3      	ldr	r3, [r4, #12]
 8006ee6:	9903      	ldr	r1, [sp, #12]
 8006ee8:	1a5b      	subs	r3, r3, r1
 8006eea:	42ab      	cmp	r3, r5
 8006eec:	dcf2      	bgt.n	8006ed4 <_printf_i+0x214>
 8006eee:	e7eb      	b.n	8006ec8 <_printf_i+0x208>
 8006ef0:	2500      	movs	r5, #0
 8006ef2:	f104 0619 	add.w	r6, r4, #25
 8006ef6:	e7f5      	b.n	8006ee4 <_printf_i+0x224>
 8006ef8:	08007103 	.word	0x08007103
 8006efc:	08007114 	.word	0x08007114

08006f00 <memmove>:
 8006f00:	4288      	cmp	r0, r1
 8006f02:	b510      	push	{r4, lr}
 8006f04:	eb01 0402 	add.w	r4, r1, r2
 8006f08:	d902      	bls.n	8006f10 <memmove+0x10>
 8006f0a:	4284      	cmp	r4, r0
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	d807      	bhi.n	8006f20 <memmove+0x20>
 8006f10:	1e43      	subs	r3, r0, #1
 8006f12:	42a1      	cmp	r1, r4
 8006f14:	d008      	beq.n	8006f28 <memmove+0x28>
 8006f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f1e:	e7f8      	b.n	8006f12 <memmove+0x12>
 8006f20:	4601      	mov	r1, r0
 8006f22:	4402      	add	r2, r0
 8006f24:	428a      	cmp	r2, r1
 8006f26:	d100      	bne.n	8006f2a <memmove+0x2a>
 8006f28:	bd10      	pop	{r4, pc}
 8006f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f32:	e7f7      	b.n	8006f24 <memmove+0x24>

08006f34 <memchr>:
 8006f34:	4603      	mov	r3, r0
 8006f36:	b510      	push	{r4, lr}
 8006f38:	b2c9      	uxtb	r1, r1
 8006f3a:	4402      	add	r2, r0
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	4618      	mov	r0, r3
 8006f40:	d101      	bne.n	8006f46 <memchr+0x12>
 8006f42:	2000      	movs	r0, #0
 8006f44:	e003      	b.n	8006f4e <memchr+0x1a>
 8006f46:	7804      	ldrb	r4, [r0, #0]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	428c      	cmp	r4, r1
 8006f4c:	d1f6      	bne.n	8006f3c <memchr+0x8>
 8006f4e:	bd10      	pop	{r4, pc}

08006f50 <_realloc_r>:
 8006f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f54:	4680      	mov	r8, r0
 8006f56:	4615      	mov	r5, r2
 8006f58:	460c      	mov	r4, r1
 8006f5a:	b921      	cbnz	r1, 8006f66 <_realloc_r+0x16>
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f62:	f7ff bb33 	b.w	80065cc <_malloc_r>
 8006f66:	b92a      	cbnz	r2, 8006f74 <_realloc_r+0x24>
 8006f68:	f7ff fc98 	bl	800689c <_free_r>
 8006f6c:	2400      	movs	r4, #0
 8006f6e:	4620      	mov	r0, r4
 8006f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f74:	f000 f81a 	bl	8006fac <_malloc_usable_size_r>
 8006f78:	4285      	cmp	r5, r0
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	d802      	bhi.n	8006f84 <_realloc_r+0x34>
 8006f7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006f82:	d8f4      	bhi.n	8006f6e <_realloc_r+0x1e>
 8006f84:	4629      	mov	r1, r5
 8006f86:	4640      	mov	r0, r8
 8006f88:	f7ff fb20 	bl	80065cc <_malloc_r>
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d0ec      	beq.n	8006f6c <_realloc_r+0x1c>
 8006f92:	42b5      	cmp	r5, r6
 8006f94:	462a      	mov	r2, r5
 8006f96:	4621      	mov	r1, r4
 8006f98:	bf28      	it	cs
 8006f9a:	4632      	movcs	r2, r6
 8006f9c:	f7ff fc70 	bl	8006880 <memcpy>
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	f7ff fc7a 	bl	800689c <_free_r>
 8006fa8:	463c      	mov	r4, r7
 8006faa:	e7e0      	b.n	8006f6e <_realloc_r+0x1e>

08006fac <_malloc_usable_size_r>:
 8006fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fb0:	1f18      	subs	r0, r3, #4
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	bfbc      	itt	lt
 8006fb6:	580b      	ldrlt	r3, [r1, r0]
 8006fb8:	18c0      	addlt	r0, r0, r3
 8006fba:	4770      	bx	lr

08006fbc <_init>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	bf00      	nop
 8006fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc2:	bc08      	pop	{r3}
 8006fc4:	469e      	mov	lr, r3
 8006fc6:	4770      	bx	lr

08006fc8 <_fini>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	bf00      	nop
 8006fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fce:	bc08      	pop	{r3}
 8006fd0:	469e      	mov	lr, r3
 8006fd2:	4770      	bx	lr
