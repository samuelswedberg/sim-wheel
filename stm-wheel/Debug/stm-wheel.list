
stm-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005390  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800549c  0800549c  0000649c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005574  08005574  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005574  08005574  00006574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800557c  0800557c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800557c  0800557c  0000657c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005580  08005580  00006580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005584  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000005c  080055e0  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080055e0  000072fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af0e  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec9  00000000  00000000  00011f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00013e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000794  00000000  00000000  00014848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e9d  00000000  00000000  00014fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdd3  00000000  00000000  0002ce79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a0c2  00000000  00000000  00038c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2d0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d5c  00000000  00000000  000c2d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c5ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005484 	.word	0x08005484

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005484 	.word	0x08005484

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037c:	f001 f854 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000380:	f000 f84c 	bl	800041c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000384:	f000 f99e 	bl	80006c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000388:	f000 f97e 	bl	8000688 <MX_DMA_Init>
  MX_CAN_Init();
 800038c:	f000 f904 	bl	8000598 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000390:	f000 f950 	bl	8000634 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000394:	f000 f896 	bl	80004c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000398:	481d      	ldr	r0, [pc, #116]	@ (8000410 <main+0x98>)
 800039a:	f001 fe50 	bl	800203e <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800039e:	2110      	movs	r1, #16
 80003a0:	481b      	ldr	r0, [pc, #108]	@ (8000410 <main+0x98>)
 80003a2:	f002 f8f0 	bl	8002586 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 80003a6:	2201      	movs	r2, #1
 80003a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003ac:	4819      	ldr	r0, [pc, #100]	@ (8000414 <main+0x9c>)
 80003ae:	f003 f888 	bl	80034c2 <HAL_GPIO_WritePin>
	telemetry_data.tRpm = 0;
 80003b2:	4b19      	ldr	r3, [pc, #100]	@ (8000418 <main+0xa0>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 80003b8:	4b17      	ldr	r3, [pc, #92]	@ (8000418 <main+0xa0>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 80003be:	4b16      	ldr	r3, [pc, #88]	@ (8000418 <main+0xa0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 80003c4:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <main+0xa0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 80003ca:	4b13      	ldr	r3, [pc, #76]	@ (8000418 <main+0xa0>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 80003d0:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <main+0xa0>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 80003d6:	4b10      	ldr	r3, [pc, #64]	@ (8000418 <main+0xa0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 80003dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000418 <main+0xa0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	61da      	str	r2, [r3, #28]

	Start_ADC_DMA();
 80003e2:	f000 fc2d 	bl	8000c40 <Start_ADC_DMA>
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003ec:	4809      	ldr	r0, [pc, #36]	@ (8000414 <main+0x9c>)
 80003ee:	f003 f868 	bl	80034c2 <HAL_GPIO_WritePin>

	  updateTelemetry();
 80003f2:	f000 f9fb 	bl	80007ec <updateTelemetry>
	  updateUserInput();
 80003f6:	f000 fb33 	bl	8000a60 <updateUserInput>

	  CAN_Transmit();
 80003fa:	f000 fca5 	bl	8000d48 <CAN_Transmit>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 80003fe:	2201      	movs	r2, #1
 8000400:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000404:	4803      	ldr	r0, [pc, #12]	@ (8000414 <main+0x9c>)
 8000406:	f003 f85c 	bl	80034c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 800040a:	bf00      	nop
 800040c:	e7eb      	b.n	80003e6 <main+0x6e>
 800040e:	bf00      	nop
 8000410:	2000011c 	.word	0x2000011c
 8000414:	40011000 	.word	0x40011000
 8000418:	20000078 	.word	0x20000078

0800041c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b094      	sub	sp, #80	@ 0x50
 8000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000426:	2228      	movs	r2, #40	@ 0x28
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f004 fc48 	bl	8004cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	f107 0314 	add.w	r3, r7, #20
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
 800043e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044c:	2302      	movs	r3, #2
 800044e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000450:	2301      	movs	r3, #1
 8000452:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000454:	2310      	movs	r3, #16
 8000456:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000458:	2302      	movs	r3, #2
 800045a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800045c:	2300      	movs	r3, #0
 800045e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000460:	2300      	movs	r3, #0
 8000462:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000464:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000468:	4618      	mov	r0, r3
 800046a:	f003 f85b 	bl	8003524 <HAL_RCC_OscConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000474:	f000 fd9a 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000478:	230f      	movs	r3, #15
 800047a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047c:	2302      	movs	r3, #2
 800047e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f003 fac8 	bl	8003a28 <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800049e:	f000 fd85 	bl	8000fac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004a2:	2302      	movs	r3, #2
 80004a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	4618      	mov	r0, r3
 80004ae:	f003 fc49 	bl	8003d44 <HAL_RCCEx_PeriphCLKConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80004b8:	f000 fd78 	bl	8000fac <Error_Handler>
  }
}
 80004bc:	bf00      	nop
 80004be:	3750      	adds	r7, #80	@ 0x50
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000590 <MX_ADC1_Init+0xcc>)
 80004d6:	4a2f      	ldr	r2, [pc, #188]	@ (8000594 <MX_ADC1_Init+0xd0>)
 80004d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004da:	4b2d      	ldr	r3, [pc, #180]	@ (8000590 <MX_ADC1_Init+0xcc>)
 80004dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000590 <MX_ADC1_Init+0xcc>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004e8:	4b29      	ldr	r3, [pc, #164]	@ (8000590 <MX_ADC1_Init+0xcc>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ee:	4b28      	ldr	r3, [pc, #160]	@ (8000590 <MX_ADC1_Init+0xcc>)
 80004f0:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80004f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004f6:	4b26      	ldr	r3, [pc, #152]	@ (8000590 <MX_ADC1_Init+0xcc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80004fc:	4b24      	ldr	r3, [pc, #144]	@ (8000590 <MX_ADC1_Init+0xcc>)
 80004fe:	2204      	movs	r2, #4
 8000500:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000502:	4823      	ldr	r0, [pc, #140]	@ (8000590 <MX_ADC1_Init+0xcc>)
 8000504:	f001 f816 	bl	8001534 <HAL_ADC_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800050e:	f000 fd4d 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000516:	2301      	movs	r3, #1
 8000518:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800051a:	2305      	movs	r3, #5
 800051c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4619      	mov	r1, r3
 8000522:	481b      	ldr	r0, [pc, #108]	@ (8000590 <MX_ADC1_Init+0xcc>)
 8000524:	f001 f9ce 	bl	80018c4 <HAL_ADC_ConfigChannel>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f000 fd3d 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000532:	2301      	movs	r3, #1
 8000534:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000536:	2302      	movs	r3, #2
 8000538:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4619      	mov	r1, r3
 800053e:	4814      	ldr	r0, [pc, #80]	@ (8000590 <MX_ADC1_Init+0xcc>)
 8000540:	f001 f9c0 	bl	80018c4 <HAL_ADC_ConfigChannel>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800054a:	f000 fd2f 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800054e:	2302      	movs	r3, #2
 8000550:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000552:	2303      	movs	r3, #3
 8000554:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4619      	mov	r1, r3
 800055a:	480d      	ldr	r0, [pc, #52]	@ (8000590 <MX_ADC1_Init+0xcc>)
 800055c:	f001 f9b2 	bl	80018c4 <HAL_ADC_ConfigChannel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000566:	f000 fd21 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800056a:	2303      	movs	r3, #3
 800056c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800056e:	2304      	movs	r3, #4
 8000570:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	4619      	mov	r1, r3
 8000576:	4806      	ldr	r0, [pc, #24]	@ (8000590 <MX_ADC1_Init+0xcc>)
 8000578:	f001 f9a4 	bl	80018c4 <HAL_ADC_ConfigChannel>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000582:	f000 fd13 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200000a8 	.word	0x200000a8
 8000594:	40012400 	.word	0x40012400

08000598 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	@ 0x28
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800059e:	4b23      	ldr	r3, [pc, #140]	@ (800062c <MX_CAN_Init+0x94>)
 80005a0:	4a23      	ldr	r2, [pc, #140]	@ (8000630 <MX_CAN_Init+0x98>)
 80005a2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 80005a4:	4b21      	ldr	r3, [pc, #132]	@ (800062c <MX_CAN_Init+0x94>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005aa:	4b20      	ldr	r3, [pc, #128]	@ (800062c <MX_CAN_Init+0x94>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005b0:	4b1e      	ldr	r3, [pc, #120]	@ (800062c <MX_CAN_Init+0x94>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	@ (800062c <MX_CAN_Init+0x94>)
 80005b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80005bc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005be:	4b1b      	ldr	r3, [pc, #108]	@ (800062c <MX_CAN_Init+0x94>)
 80005c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80005c4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005c6:	4b19      	ldr	r3, [pc, #100]	@ (800062c <MX_CAN_Init+0x94>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005cc:	4b17      	ldr	r3, [pc, #92]	@ (800062c <MX_CAN_Init+0x94>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005d2:	4b16      	ldr	r3, [pc, #88]	@ (800062c <MX_CAN_Init+0x94>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005d8:	4b14      	ldr	r3, [pc, #80]	@ (800062c <MX_CAN_Init+0x94>)
 80005da:	2200      	movs	r2, #0
 80005dc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005de:	4b13      	ldr	r3, [pc, #76]	@ (800062c <MX_CAN_Init+0x94>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005e4:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_CAN_Init+0x94>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005ea:	4810      	ldr	r0, [pc, #64]	@ (800062c <MX_CAN_Init+0x94>)
 80005ec:	f001 fb63 	bl	8001cb6 <HAL_CAN_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80005f6:	f000 fcd9 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005fe:	2300      	movs	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x100 << 5;       // Accept all IDs
 8000606:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800060a:	603b      	str	r3, [r7, #0]
  filterConfig.FilterMaskIdHigh = 0x700 << 5;;   // Accept all IDs
 800060c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000610:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;  // Assign to FIFO 1
 8000612:	2301      	movs	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 8000616:	2301      	movs	r3, #1
 8000618:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 800061a:	463b      	mov	r3, r7
 800061c:	4619      	mov	r1, r3
 800061e:	4803      	ldr	r0, [pc, #12]	@ (800062c <MX_CAN_Init+0x94>)
 8000620:	f001 fc44 	bl	8001eac <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	3728      	adds	r7, #40	@ 0x28
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000011c 	.word	0x2000011c
 8000630:	40006400 	.word	0x40006400

08000634 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <MX_USART1_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800063e:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000640:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800066c:	f003 fc20 	bl	8003eb0 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 fc99 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000144 	.word	0x20000144
 8000684:	40013800 	.word	0x40013800

08000688 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_DMA_Init+0x38>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a0b      	ldr	r2, [pc, #44]	@ (80006c0 <MX_DMA_Init+0x38>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6153      	str	r3, [r2, #20]
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_DMA_Init+0x38>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	200b      	movs	r0, #11
 80006ac:	f002 fa95 	bl	8002bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006b0:	200b      	movs	r0, #11
 80006b2:	f002 faae 	bl	8002c12 <HAL_NVIC_EnableIRQ>

}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d8:	4b3f      	ldr	r3, [pc, #252]	@ (80007d8 <MX_GPIO_Init+0x114>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a3e      	ldr	r2, [pc, #248]	@ (80007d8 <MX_GPIO_Init+0x114>)
 80006de:	f043 0310 	orr.w	r3, r3, #16
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b3c      	ldr	r3, [pc, #240]	@ (80007d8 <MX_GPIO_Init+0x114>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0310 	and.w	r3, r3, #16
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f0:	4b39      	ldr	r3, [pc, #228]	@ (80007d8 <MX_GPIO_Init+0x114>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a38      	ldr	r2, [pc, #224]	@ (80007d8 <MX_GPIO_Init+0x114>)
 80006f6:	f043 0320 	orr.w	r3, r3, #32
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b36      	ldr	r3, [pc, #216]	@ (80007d8 <MX_GPIO_Init+0x114>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0320 	and.w	r3, r3, #32
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b33      	ldr	r3, [pc, #204]	@ (80007d8 <MX_GPIO_Init+0x114>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a32      	ldr	r2, [pc, #200]	@ (80007d8 <MX_GPIO_Init+0x114>)
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b30      	ldr	r3, [pc, #192]	@ (80007d8 <MX_GPIO_Init+0x114>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0304 	and.w	r3, r3, #4
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000720:	4b2d      	ldr	r3, [pc, #180]	@ (80007d8 <MX_GPIO_Init+0x114>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a2c      	ldr	r2, [pc, #176]	@ (80007d8 <MX_GPIO_Init+0x114>)
 8000726:	f043 0308 	orr.w	r3, r3, #8
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <MX_GPIO_Init+0x114>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0308 	and.w	r3, r3, #8
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800073e:	4827      	ldr	r0, [pc, #156]	@ (80007dc <MX_GPIO_Init+0x118>)
 8000740:	f002 febf 	bl	80034c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000744:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2302      	movs	r3, #2
 8000754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	4619      	mov	r1, r3
 800075c:	481f      	ldr	r0, [pc, #124]	@ (80007dc <MX_GPIO_Init+0x118>)
 800075e:	f002 fd15 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000762:	f248 03f0 	movw	r3, #33008	@ 0x80f0
 8000766:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	4619      	mov	r1, r3
 8000776:	481a      	ldr	r0, [pc, #104]	@ (80007e0 <MX_GPIO_Init+0x11c>)
 8000778:	f002 fd08 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB4 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800077c:	f640 7357 	movw	r3, #3927	@ 0xf57
 8000780:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000786:	2301      	movs	r3, #1
 8000788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4619      	mov	r1, r3
 8000790:	4814      	ldr	r0, [pc, #80]	@ (80007e4 <MX_GPIO_Init+0x120>)
 8000792:	f002 fcfb 	bl	800318c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 8000796:	23a8      	movs	r3, #168	@ 0xa8
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_GPIO_Init+0x124>)
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079e:	2301      	movs	r3, #1
 80007a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	4619      	mov	r1, r3
 80007a8:	480e      	ldr	r0, [pc, #56]	@ (80007e4 <MX_GPIO_Init+0x120>)
 80007aa:	f002 fcef 	bl	800318c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	2009      	movs	r0, #9
 80007b4:	f002 fa11 	bl	8002bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80007b8:	2009      	movs	r0, #9
 80007ba:	f002 fa2a 	bl	8002c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	2017      	movs	r0, #23
 80007c4:	f002 fa09 	bl	8002bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007c8:	2017      	movs	r0, #23
 80007ca:	f002 fa22 	bl	8002c12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40011000 	.word	0x40011000
 80007e0:	40010800 	.word	0x40010800
 80007e4:	40010c00 	.word	0x40010c00
 80007e8:	10110000 	.word	0x10110000

080007ec <updateTelemetry>:
}

/*
 * NEXTION UART FUNCTIONS
 */
void updateTelemetry() {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
//	int mappedRpm = map_value(telemetry_data.tRpm, 0, telemetry_data.tMaxRpm, 0, 100);
	char *mappedRpm = int_to_string(telemetry_data.tRpm);
 80007f2:	4b31      	ldr	r3, [pc, #196]	@ (80008b8 <updateTelemetry+0xcc>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f90e 	bl	8000a18 <int_to_string>
 80007fc:	61f8      	str	r0, [r7, #28]
	char *mappedGear = map_gear(telemetry_data.tGear);
 80007fe:	4b2e      	ldr	r3, [pc, #184]	@ (80008b8 <updateTelemetry+0xcc>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f89a 	bl	800093c <map_gear>
 8000808:	61b8      	str	r0, [r7, #24]
	char *mappedSpeed = int_to_string(telemetry_data.tSpeedKmh);
 800080a:	4b2b      	ldr	r3, [pc, #172]	@ (80008b8 <updateTelemetry+0xcc>)
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f902 	bl	8000a18 <int_to_string>
 8000814:	6178      	str	r0, [r7, #20]
	char *mappedHasDrs = int_to_string(telemetry_data.tHasDRS);
 8000816:	4b28      	ldr	r3, [pc, #160]	@ (80008b8 <updateTelemetry+0xcc>)
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f8fc 	bl	8000a18 <int_to_string>
 8000820:	6138      	str	r0, [r7, #16]
	char *mappedPitLim = int_to_string(telemetry_data.tPitLim);
 8000822:	4b25      	ldr	r3, [pc, #148]	@ (80008b8 <updateTelemetry+0xcc>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f8f6 	bl	8000a18 <int_to_string>
 800082c:	60f8      	str	r0, [r7, #12]
	char *mappedFuel = int_to_string(telemetry_data.tFuel);
 800082e:	4b22      	ldr	r3, [pc, #136]	@ (80008b8 <updateTelemetry+0xcc>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f8f0 	bl	8000a18 <int_to_string>
 8000838:	60b8      	str	r0, [r7, #8]
	char *mappedBrakeBias = int_to_string(telemetry_data.tBrakeBias);
 800083a:	4b1f      	ldr	r3, [pc, #124]	@ (80008b8 <updateTelemetry+0xcc>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f8ea 	bl	8000a18 <int_to_string>
 8000844:	6078      	str	r0, [r7, #4]

//	send_int_to_nextion("rpmbar", mappedRpm);
	send__char_to_nextion("rpm", mappedRpm);
 8000846:	69f9      	ldr	r1, [r7, #28]
 8000848:	481c      	ldr	r0, [pc, #112]	@ (80008bc <updateTelemetry+0xd0>)
 800084a:	f000 f83f 	bl	80008cc <send__char_to_nextion>
	send__char_to_nextion("gear", mappedGear);
 800084e:	69b9      	ldr	r1, [r7, #24]
 8000850:	481b      	ldr	r0, [pc, #108]	@ (80008c0 <updateTelemetry+0xd4>)
 8000852:	f000 f83b 	bl	80008cc <send__char_to_nextion>
	send__char_to_nextion("speed", mappedSpeed);
 8000856:	6979      	ldr	r1, [r7, #20]
 8000858:	481a      	ldr	r0, [pc, #104]	@ (80008c4 <updateTelemetry+0xd8>)
 800085a:	f000 f837 	bl	80008cc <send__char_to_nextion>
	//send__char_to_nextion("mappedHasDrs", mappedHasDrs);
	//send_to_nextion("pitlim", telemetry_data.tPitLim);
	send__char_to_nextion("fuel", mappedFuel);
 800085e:	68b9      	ldr	r1, [r7, #8]
 8000860:	4819      	ldr	r0, [pc, #100]	@ (80008c8 <updateTelemetry+0xdc>)
 8000862:	f000 f833 	bl	80008cc <send__char_to_nextion>
	//send_to_nextion("gear", telemetry_data.tBrakeBias);

	if(mappedRpm) {
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d002      	beq.n	8000872 <updateTelemetry+0x86>
		free(mappedRpm);
 800086c:	69f8      	ldr	r0, [r7, #28]
 800086e:	f004 f93d 	bl	8004aec <free>
	}
	// dont do gear since thats not int to string
	if(mappedSpeed) {
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <updateTelemetry+0x92>
		free(mappedSpeed);
 8000878:	6978      	ldr	r0, [r7, #20]
 800087a:	f004 f937 	bl	8004aec <free>
	}
	if(mappedHasDrs) {
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d002      	beq.n	800088a <updateTelemetry+0x9e>
		free(mappedHasDrs);
 8000884:	6938      	ldr	r0, [r7, #16]
 8000886:	f004 f931 	bl	8004aec <free>
	}
	if(mappedPitLim) {
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d002      	beq.n	8000896 <updateTelemetry+0xaa>
		free(mappedPitLim);
 8000890:	68f8      	ldr	r0, [r7, #12]
 8000892:	f004 f92b 	bl	8004aec <free>
	}
	if(mappedFuel) {
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d002      	beq.n	80008a2 <updateTelemetry+0xb6>
		free(mappedFuel);
 800089c:	68b8      	ldr	r0, [r7, #8]
 800089e:	f004 f925 	bl	8004aec <free>
	}
	if(mappedBrakeBias) {
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d002      	beq.n	80008ae <updateTelemetry+0xc2>
		free(mappedBrakeBias);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f004 f91f 	bl	8004aec <free>
	}

}
 80008ae:	bf00      	nop
 80008b0:	3720      	adds	r7, #32
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000078 	.word	0x20000078
 80008bc:	0800549c 	.word	0x0800549c
 80008c0:	080054a0 	.word	0x080054a0
 80008c4:	080054a8 	.word	0x080054a8
 80008c8:	080054b0 	.word	0x080054b0

080008cc <send__char_to_nextion>:

	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
}

void send__char_to_nextion(const char *var_name, char *value) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	@ 0x38
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
	char command[32];
	snprintf(command, sizeof(command), "%s.txt=\"%s\"", var_name, value);
 80008d6:	f107 0010 	add.w	r0, r7, #16
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <send__char_to_nextion+0x64>)
 80008e2:	2120      	movs	r1, #32
 80008e4:	f004 f9b8 	bl	8004c58 <sniprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc2d 	bl	800014c <strlen>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	f107 0110 	add.w	r1, r7, #16
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	480d      	ldr	r0, [pc, #52]	@ (8000934 <send__char_to_nextion+0x68>)
 8000900:	f003 fb26 	bl	8003f50 <HAL_UART_Transmit>

	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
 8000904:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <send__char_to_nextion+0x6c>)
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	6812      	ldr	r2, [r2, #0]
 800090c:	4611      	mov	r1, r2
 800090e:	8019      	strh	r1, [r3, #0]
 8000910:	3302      	adds	r3, #2
 8000912:	0c12      	lsrs	r2, r2, #16
 8000914:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
 8000916:	f107 010c 	add.w	r1, r7, #12
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	2203      	movs	r2, #3
 8000920:	4804      	ldr	r0, [pc, #16]	@ (8000934 <send__char_to_nextion+0x68>)
 8000922:	f003 fb15 	bl	8003f50 <HAL_UART_Transmit>
}
 8000926:	bf00      	nop
 8000928:	3730      	adds	r7, #48	@ 0x30
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	080054c8 	.word	0x080054c8
 8000934:	20000144 	.word	0x20000144
 8000938:	080054c4 	.word	0x080054c4

0800093c <map_gear>:
    if (input > in_max) input = in_max;

    return (input - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

const char* map_gear(int value)  {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    if (value < 0 || value > 13) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	db02      	blt.n	8000950 <map_gear+0x14>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b0d      	cmp	r3, #13
 800094e:	dd01      	ble.n	8000954 <map_gear+0x18>
        return "X";
 8000950:	4b22      	ldr	r3, [pc, #136]	@ (80009dc <map_gear+0xa0>)
 8000952:	e03e      	b.n	80009d2 <map_gear+0x96>
    }

    switch (value) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b0d      	cmp	r3, #13
 8000958:	d83a      	bhi.n	80009d0 <map_gear+0x94>
 800095a:	a201      	add	r2, pc, #4	@ (adr r2, 8000960 <map_gear+0x24>)
 800095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000960:	08000999 	.word	0x08000999
 8000964:	0800099d 	.word	0x0800099d
 8000968:	080009a1 	.word	0x080009a1
 800096c:	080009a5 	.word	0x080009a5
 8000970:	080009a9 	.word	0x080009a9
 8000974:	080009ad 	.word	0x080009ad
 8000978:	080009b1 	.word	0x080009b1
 800097c:	080009b5 	.word	0x080009b5
 8000980:	080009b9 	.word	0x080009b9
 8000984:	080009bd 	.word	0x080009bd
 8000988:	080009c1 	.word	0x080009c1
 800098c:	080009c5 	.word	0x080009c5
 8000990:	080009c9 	.word	0x080009c9
 8000994:	080009cd 	.word	0x080009cd
        case 0: return "R";
 8000998:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <map_gear+0xa4>)
 800099a:	e01a      	b.n	80009d2 <map_gear+0x96>
        case 1: return "N";
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <map_gear+0xa8>)
 800099e:	e018      	b.n	80009d2 <map_gear+0x96>
        case 2: return "1";
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <map_gear+0xac>)
 80009a2:	e016      	b.n	80009d2 <map_gear+0x96>
        case 3: return "2";
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <map_gear+0xb0>)
 80009a6:	e014      	b.n	80009d2 <map_gear+0x96>
        case 4: return "3";
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <map_gear+0xb4>)
 80009aa:	e012      	b.n	80009d2 <map_gear+0x96>
        case 5: return "4";
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <map_gear+0xb8>)
 80009ae:	e010      	b.n	80009d2 <map_gear+0x96>
        case 6: return "5";
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <map_gear+0xbc>)
 80009b2:	e00e      	b.n	80009d2 <map_gear+0x96>
        case 7: return "6";
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <map_gear+0xc0>)
 80009b6:	e00c      	b.n	80009d2 <map_gear+0x96>
        case 8: return "7";
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <map_gear+0xc4>)
 80009ba:	e00a      	b.n	80009d2 <map_gear+0x96>
        case 9: return "8";
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <map_gear+0xc8>)
 80009be:	e008      	b.n	80009d2 <map_gear+0x96>
        case 10: return "9";
 80009c0:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <map_gear+0xcc>)
 80009c2:	e006      	b.n	80009d2 <map_gear+0x96>
        case 11: return "10";
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <map_gear+0xd0>)
 80009c6:	e004      	b.n	80009d2 <map_gear+0x96>
        case 12: return "11";
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <map_gear+0xd4>)
 80009ca:	e002      	b.n	80009d2 <map_gear+0x96>
        case 13: return "12";
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <map_gear+0xd8>)
 80009ce:	e000      	b.n	80009d2 <map_gear+0x96>

        default:
        	return "X";
 80009d0:	4b02      	ldr	r3, [pc, #8]	@ (80009dc <map_gear+0xa0>)
    }
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	080054d4 	.word	0x080054d4
 80009e0:	080054d8 	.word	0x080054d8
 80009e4:	080054dc 	.word	0x080054dc
 80009e8:	080054e0 	.word	0x080054e0
 80009ec:	080054e4 	.word	0x080054e4
 80009f0:	080054e8 	.word	0x080054e8
 80009f4:	080054ec 	.word	0x080054ec
 80009f8:	080054f0 	.word	0x080054f0
 80009fc:	080054f4 	.word	0x080054f4
 8000a00:	080054f8 	.word	0x080054f8
 8000a04:	080054fc 	.word	0x080054fc
 8000a08:	08005500 	.word	0x08005500
 8000a0c:	08005504 	.word	0x08005504
 8000a10:	08005508 	.word	0x08005508
 8000a14:	0800550c 	.word	0x0800550c

08000a18 <int_to_string>:

char* int_to_string(int value) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    // Determine required buffer size (including null terminator)
    size_t buffer_size = snprintf(NULL, 0, "%d", value) + 1;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a0e      	ldr	r2, [pc, #56]	@ (8000a5c <int_to_string+0x44>)
 8000a24:	2100      	movs	r1, #0
 8000a26:	2000      	movs	r0, #0
 8000a28:	f004 f916 	bl	8004c58 <sniprintf>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	3301      	adds	r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]

    // Allocate memory
    char *string = (char*)malloc(buffer_size);
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f004 f852 	bl	8004adc <malloc>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	60bb      	str	r3, [r7, #8]
    if (!string) {
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d101      	bne.n	8000a46 <int_to_string+0x2e>
        return NULL;  // Return NULL if allocation fails
 8000a42:	2300      	movs	r3, #0
 8000a44:	e006      	b.n	8000a54 <int_to_string+0x3c>
    }

    // Format the integer into the allocated string
    snprintf(string, buffer_size, "%d", value);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a04      	ldr	r2, [pc, #16]	@ (8000a5c <int_to_string+0x44>)
 8000a4a:	68f9      	ldr	r1, [r7, #12]
 8000a4c:	68b8      	ldr	r0, [r7, #8]
 8000a4e:	f004 f903 	bl	8004c58 <sniprintf>

    return string;  // Caller must free() this memory
 8000a52:	68bb      	ldr	r3, [r7, #8]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	08005510 	.word	0x08005510

08000a60 <updateUserInput>:

void updateUserInput() {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	user_input_data.buttons = 0; // Clear all bits initially
 8000a64:	4b6f      	ldr	r3, [pc, #444]	@ (8000c24 <updateUserInput+0x1c4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
	user_input_data.hall_analog_1 = 0;
 8000a6a:	4b6e      	ldr	r3, [pc, #440]	@ (8000c24 <updateUserInput+0x1c4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	711a      	strb	r2, [r3, #4]
	user_input_data.hall_analog_2 = 0;
 8000a70:	4b6c      	ldr	r3, [pc, #432]	@ (8000c24 <updateUserInput+0x1c4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	715a      	strb	r2, [r3, #5]
	// Buttons
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_1_PIN)) user_input_data.buttons |= (1 << 0);
 8000a76:	2110      	movs	r1, #16
 8000a78:	486b      	ldr	r0, [pc, #428]	@ (8000c28 <updateUserInput+0x1c8>)
 8000a7a:	f002 fd0b 	bl	8003494 <HAL_GPIO_ReadPin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d105      	bne.n	8000a90 <updateUserInput+0x30>
 8000a84:	4b67      	ldr	r3, [pc, #412]	@ (8000c24 <updateUserInput+0x1c4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	4a65      	ldr	r2, [pc, #404]	@ (8000c24 <updateUserInput+0x1c4>)
 8000a8e:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_2_PIN)) user_input_data.buttons |= (1 << 1);
 8000a90:	2120      	movs	r1, #32
 8000a92:	4865      	ldr	r0, [pc, #404]	@ (8000c28 <updateUserInput+0x1c8>)
 8000a94:	f002 fcfe 	bl	8003494 <HAL_GPIO_ReadPin>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d105      	bne.n	8000aaa <updateUserInput+0x4a>
 8000a9e:	4b61      	ldr	r3, [pc, #388]	@ (8000c24 <updateUserInput+0x1c4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f043 0302 	orr.w	r3, r3, #2
 8000aa6:	4a5f      	ldr	r2, [pc, #380]	@ (8000c24 <updateUserInput+0x1c4>)
 8000aa8:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_3_PIN)) user_input_data.buttons |= (1 << 2);
 8000aaa:	2140      	movs	r1, #64	@ 0x40
 8000aac:	485e      	ldr	r0, [pc, #376]	@ (8000c28 <updateUserInput+0x1c8>)
 8000aae:	f002 fcf1 	bl	8003494 <HAL_GPIO_ReadPin>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d105      	bne.n	8000ac4 <updateUserInput+0x64>
 8000ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8000c24 <updateUserInput+0x1c4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	4a58      	ldr	r2, [pc, #352]	@ (8000c24 <updateUserInput+0x1c4>)
 8000ac2:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_4_PIN)) user_input_data.buttons |= (1 << 3);
 8000ac4:	2180      	movs	r1, #128	@ 0x80
 8000ac6:	4858      	ldr	r0, [pc, #352]	@ (8000c28 <updateUserInput+0x1c8>)
 8000ac8:	f002 fce4 	bl	8003494 <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d105      	bne.n	8000ade <updateUserInput+0x7e>
 8000ad2:	4b54      	ldr	r3, [pc, #336]	@ (8000c24 <updateUserInput+0x1c4>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f043 0308 	orr.w	r3, r3, #8
 8000ada:	4a52      	ldr	r2, [pc, #328]	@ (8000c24 <updateUserInput+0x1c4>)
 8000adc:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_5_PIN)) user_input_data.buttons |= (1 << 4);
 8000ade:	2101      	movs	r1, #1
 8000ae0:	4852      	ldr	r0, [pc, #328]	@ (8000c2c <updateUserInput+0x1cc>)
 8000ae2:	f002 fcd7 	bl	8003494 <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d105      	bne.n	8000af8 <updateUserInput+0x98>
 8000aec:	4b4d      	ldr	r3, [pc, #308]	@ (8000c24 <updateUserInput+0x1c4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f043 0310 	orr.w	r3, r3, #16
 8000af4:	4a4b      	ldr	r2, [pc, #300]	@ (8000c24 <updateUserInput+0x1c4>)
 8000af6:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_6_PIN)) user_input_data.buttons |= (1 << 5);
 8000af8:	2102      	movs	r1, #2
 8000afa:	484c      	ldr	r0, [pc, #304]	@ (8000c2c <updateUserInput+0x1cc>)
 8000afc:	f002 fcca 	bl	8003494 <HAL_GPIO_ReadPin>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d105      	bne.n	8000b12 <updateUserInput+0xb2>
 8000b06:	4b47      	ldr	r3, [pc, #284]	@ (8000c24 <updateUserInput+0x1c4>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f043 0320 	orr.w	r3, r3, #32
 8000b0e:	4a45      	ldr	r2, [pc, #276]	@ (8000c24 <updateUserInput+0x1c4>)
 8000b10:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_7_PIN)) user_input_data.buttons |= (1 << 6);
 8000b12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b16:	4845      	ldr	r0, [pc, #276]	@ (8000c2c <updateUserInput+0x1cc>)
 8000b18:	f002 fcbc 	bl	8003494 <HAL_GPIO_ReadPin>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d105      	bne.n	8000b2e <updateUserInput+0xce>
 8000b22:	4b40      	ldr	r3, [pc, #256]	@ (8000c24 <updateUserInput+0x1c4>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b2a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c24 <updateUserInput+0x1c4>)
 8000b2c:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_8_PIN)) user_input_data.buttons |= (1 << 7);
 8000b2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b32:	483e      	ldr	r0, [pc, #248]	@ (8000c2c <updateUserInput+0x1cc>)
 8000b34:	f002 fcae 	bl	8003494 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d105      	bne.n	8000b4a <updateUserInput+0xea>
 8000b3e:	4b39      	ldr	r3, [pc, #228]	@ (8000c24 <updateUserInput+0x1c4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b46:	4a37      	ldr	r2, [pc, #220]	@ (8000c24 <updateUserInput+0x1c4>)
 8000b48:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_9_PIN)) user_input_data.buttons |= (1 << 8);
 8000b4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b4e:	4837      	ldr	r0, [pc, #220]	@ (8000c2c <updateUserInput+0x1cc>)
 8000b50:	f002 fca0 	bl	8003494 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d105      	bne.n	8000b66 <updateUserInput+0x106>
 8000b5a:	4b32      	ldr	r3, [pc, #200]	@ (8000c24 <updateUserInput+0x1c4>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b62:	4a30      	ldr	r2, [pc, #192]	@ (8000c24 <updateUserInput+0x1c4>)
 8000b64:	6013      	str	r3, [r2, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_10_PIN)) user_input_data.buttons |= (1 << 9);
 8000b66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b6a:	4830      	ldr	r0, [pc, #192]	@ (8000c2c <updateUserInput+0x1cc>)
 8000b6c:	f002 fc92 	bl	8003494 <HAL_GPIO_ReadPin>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d105      	bne.n	8000b82 <updateUserInput+0x122>
 8000b76:	4b2b      	ldr	r3, [pc, #172]	@ (8000c24 <updateUserInput+0x1c4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b7e:	4a29      	ldr	r2, [pc, #164]	@ (8000c24 <updateUserInput+0x1c4>)
 8000b80:	6013      	str	r3, [r2, #0]

	if(adc_data_ready) {
 8000b82:	4b2b      	ldr	r3, [pc, #172]	@ (8000c30 <updateUserInput+0x1d0>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <updateUserInput+0x130>
		processADC();
 8000b8c:	f000 f87c 	bl	8000c88 <processADC>
	}

	if (enc_l_flag == 1) user_input_data.buttons |= (1 << 12);
 8000b90:	4b28      	ldr	r3, [pc, #160]	@ (8000c34 <updateUserInput+0x1d4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d105      	bne.n	8000ba4 <updateUserInput+0x144>
 8000b98:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <updateUserInput+0x1c4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ba0:	4a20      	ldr	r2, [pc, #128]	@ (8000c24 <updateUserInput+0x1c4>)
 8000ba2:	6013      	str	r3, [r2, #0]
	if (enc_l_flag == -1) user_input_data.buttons |= (1 << 13);
 8000ba4:	4b23      	ldr	r3, [pc, #140]	@ (8000c34 <updateUserInput+0x1d4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bac:	d105      	bne.n	8000bba <updateUserInput+0x15a>
 8000bae:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <updateUserInput+0x1c4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c24 <updateUserInput+0x1c4>)
 8000bb8:	6013      	str	r3, [r2, #0]
	if (enc_c_flag == 1) user_input_data.buttons |= (1 << 14);
 8000bba:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <updateUserInput+0x1d8>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d105      	bne.n	8000bce <updateUserInput+0x16e>
 8000bc2:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <updateUserInput+0x1c4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bca:	4a16      	ldr	r2, [pc, #88]	@ (8000c24 <updateUserInput+0x1c4>)
 8000bcc:	6013      	str	r3, [r2, #0]
	if (enc_c_flag == -1) user_input_data.buttons |= (1 << 15);
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <updateUserInput+0x1d8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd6:	d105      	bne.n	8000be4 <updateUserInput+0x184>
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <updateUserInput+0x1c4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000be0:	4a10      	ldr	r2, [pc, #64]	@ (8000c24 <updateUserInput+0x1c4>)
 8000be2:	6013      	str	r3, [r2, #0]
	if (enc_r_flag == 1) user_input_data.buttons |= (1 << 16);
 8000be4:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <updateUserInput+0x1dc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d105      	bne.n	8000bf8 <updateUserInput+0x198>
 8000bec:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <updateUserInput+0x1c4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8000c24 <updateUserInput+0x1c4>)
 8000bf6:	6013      	str	r3, [r2, #0]
	if (enc_r_flag == -1) user_input_data.buttons |= (1 << 17);
 8000bf8:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <updateUserInput+0x1dc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c00:	d105      	bne.n	8000c0e <updateUserInput+0x1ae>
 8000c02:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <updateUserInput+0x1c4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c0a:	4a06      	ldr	r2, [pc, #24]	@ (8000c24 <updateUserInput+0x1c4>)
 8000c0c:	6013      	str	r3, [r2, #0]

	enc_l_flag = 0;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <updateUserInput+0x1d4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
	enc_c_flag = 0;
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <updateUserInput+0x1d8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
	enc_r_flag = 0;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <updateUserInput+0x1dc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200000a0 	.word	0x200000a0
 8000c28:	40010800 	.word	0x40010800
 8000c2c:	40010c00 	.word	0x40010c00
 8000c30:	200001a4 	.word	0x200001a4
 8000c34:	2000018c 	.word	0x2000018c
 8000c38:	20000190 	.word	0x20000190
 8000c3c:	20000194 	.word	0x20000194

08000c40 <Start_ADC_DMA>:

void Start_ADC_DMA() {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, ADC_CHANNEL_COUNT);
 8000c44:	2204      	movs	r2, #4
 8000c46:	4903      	ldr	r1, [pc, #12]	@ (8000c54 <Start_ADC_DMA+0x14>)
 8000c48:	4803      	ldr	r0, [pc, #12]	@ (8000c58 <Start_ADC_DMA+0x18>)
 8000c4a:	f000 fd4b 	bl	80016e4 <HAL_ADC_Start_DMA>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000019c 	.word	0x2000019c
 8000c58:	200000a8 	.word	0x200000a8

08000c5c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <HAL_ADC_ConvCpltCallback+0x24>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d102      	bne.n	8000c74 <HAL_ADC_ConvCpltCallback+0x18>
        adc_data_ready = 1;  // Set flag (do NOT process here)
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <HAL_ADC_ConvCpltCallback+0x28>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
    }
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40012400 	.word	0x40012400
 8000c84:	200001a4 	.word	0x200001a4

08000c88 <processADC>:

void processADC() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	adc_data_ready = 0;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <processADC+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]

	// Convert ADC values to 8-bit format
	user_input_data.hall_analog_1 = map_hall_sensor(adc_values[2]);
 8000c92:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <processADC+0x68>)
 8000c94:	889b      	ldrh	r3, [r3, #4]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f82e 	bl	8000cf8 <map_hall_sensor>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <processADC+0x6c>)
 8000ca2:	711a      	strb	r2, [r3, #4]
	user_input_data.hall_analog_2 = map_hall_sensor(adc_values[3]);
 8000ca4:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <processADC+0x68>)
 8000ca6:	88db      	ldrh	r3, [r3, #6]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f825 	bl	8000cf8 <map_hall_sensor>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <processADC+0x6c>)
 8000cb4:	715a      	strb	r2, [r3, #5]

	// Process hall button thresholds
	if (adc_values[0] > 2200) user_input_data.buttons |= (1 << 10);
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <processADC+0x68>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	f640 0298 	movw	r2, #2200	@ 0x898
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d905      	bls.n	8000cce <processADC+0x46>
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <processADC+0x6c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <processADC+0x6c>)
 8000ccc:	6013      	str	r3, [r2, #0]
	if (adc_values[1] > 2200) user_input_data.buttons |= (1 << 11);
 8000cce:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <processADC+0x68>)
 8000cd0:	885b      	ldrh	r3, [r3, #2]
 8000cd2:	f640 0298 	movw	r2, #2200	@ 0x898
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d905      	bls.n	8000ce6 <processADC+0x5e>
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <processADC+0x6c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ce2:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <processADC+0x6c>)
 8000ce4:	6013      	str	r3, [r2, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200001a4 	.word	0x200001a4
 8000cf0:	2000019c 	.word	0x2000019c
 8000cf4:	200000a0 	.word	0x200000a0

08000cf8 <map_hall_sensor>:
uint8_t map_hall_sensor(uint16_t adc_value) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
    if (adc_value < ADC_REST) adc_value = ADC_REST;
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000d08:	d202      	bcs.n	8000d10 <map_hall_sensor+0x18>
 8000d0a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d0e:	80fb      	strh	r3, [r7, #6]
    if (adc_value > ADC_MAX) adc_value = ADC_MAX;
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8000d16:	d902      	bls.n	8000d1e <map_hall_sensor+0x26>
 8000d18:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8000d1c:	80fb      	strh	r3, [r7, #6]

    return (uint8_t)(((adc_value - ADC_REST) * 255) / (ADC_MAX - ADC_REST));
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 8000d24:	4613      	mov	r3, r2
 8000d26:	021b      	lsls	r3, r3, #8
 8000d28:	1a9b      	subs	r3, r3, r2
 8000d2a:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <map_hall_sensor+0x4c>)
 8000d2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d30:	1212      	asrs	r2, r2, #8
 8000d32:	17db      	asrs	r3, r3, #31
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	b2db      	uxtb	r3, r3
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	51eb851f 	.word	0x51eb851f

08000d48 <CAN_Transmit>:
//			HAL_Delay(1);
//		}
//	}
//}

void CAN_Transmit() {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	uint32_t currentTime = HAL_GetTick();
 8000d4e:	f000 fbc3 	bl	80014d8 <HAL_GetTick>
 8000d52:	6078      	str	r0, [r7, #4]

	if(currentTime - lastSendTime >= 20) {
 8000d54:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <CAN_Transmit+0x58>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	2b13      	cmp	r3, #19
 8000d5e:	d91a      	bls.n	8000d96 <CAN_Transmit+0x4e>
		sendCANMessage(0x200, (int32_t)user_input_data.buttons);
 8000d60:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <CAN_Transmit+0x5c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d6a:	f000 f81d 	bl	8000da8 <sendCANMessage>
		sendCANMessage(0x201, (int32_t)user_input_data.hall_analog_1 & 0xFF);
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <CAN_Transmit+0x5c>)
 8000d70:	791b      	ldrb	r3, [r3, #4]
 8000d72:	4619      	mov	r1, r3
 8000d74:	f240 2001 	movw	r0, #513	@ 0x201
 8000d78:	f000 f816 	bl	8000da8 <sendCANMessage>
		sendCANMessage(0x202, (int32_t)user_input_data.hall_analog_2 & 0xFF);
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <CAN_Transmit+0x5c>)
 8000d7e:	795b      	ldrb	r3, [r3, #5]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f240 2002 	movw	r0, #514	@ 0x202
 8000d86:	f000 f80f 	bl	8000da8 <sendCANMessage>

		lastSendTime = currentTime;  // Update last transmission time
 8000d8a:	4a05      	ldr	r2, [pc, #20]	@ (8000da0 <CAN_Transmit+0x58>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6013      	str	r3, [r2, #0]
		HAL_Delay(1);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f000 fbab 	bl	80014ec <HAL_Delay>
	}
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000198 	.word	0x20000198
 8000da4:	200000a0 	.word	0x200000a0

08000da8 <sendCANMessage>:


void sendCANMessage(uint16_t canID, int32_t value) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	@ 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	80fb      	strh	r3, [r7, #6]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[4];  // 4-byte buffer

    // Ensure correct byte order in CAN message
    TxData[0] = (uint8_t)(value & 0xFF);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	743b      	strb	r3, [r7, #16]
    TxData[1] = (uint8_t)((value >> 8) & 0xFF);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	121b      	asrs	r3, r3, #8
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	747b      	strb	r3, [r7, #17]
    TxData[2] = (uint8_t)((value >> 16) & 0xFF);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	141b      	asrs	r3, r3, #16
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	74bb      	strb	r3, [r7, #18]
    TxData[3] = (uint8_t)((value >> 24) & 0xFF);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	161b      	asrs	r3, r3, #24
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	74fb      	strb	r3, [r7, #19]

    uint32_t TxMailbox;

    // Configure the CAN header
    TxHeader.StdId = canID;  // Set the ID
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	617b      	str	r3, [r7, #20]
    TxHeader.IDE = CAN_ID_STD;  // Standard 11-bit ID
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    TxHeader.RTR = CAN_RTR_DATA;  // Data frame, not remote request
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
    TxHeader.DLC = sizeof(value);  // Data Length = 4 bytes
 8000dde:	2304      	movs	r3, #4
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24

    // Copy integer value into TxData buffer (ensure correct byte order)
    memcpy(TxData, &value, sizeof(value));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	613b      	str	r3, [r7, #16]

    // Send the CAN message
    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	f107 0210 	add.w	r2, r7, #16
 8000dee:	f107 0114 	add.w	r1, r7, #20
 8000df2:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <sendCANMessage+0x7c>)
 8000df4:	f001 f9b0 	bl	8002158 <HAL_CAN_AddTxMessage>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00d      	beq.n	8000e1a <sendCANMessage+0x72>
    	 // Optionally log the state of CAN error counters
		uint32_t error = HAL_CAN_GetError(&hcan);
 8000dfe:	4809      	ldr	r0, [pc, #36]	@ (8000e24 <sendCANMessage+0x7c>)
 8000e00:	f001 fe09 	bl	8002a16 <HAL_CAN_GetError>
 8000e04:	62f8      	str	r0, [r7, #44]	@ 0x2c
		HAL_CAN_Stop(&hcan);  // Stop CAN
 8000e06:	4807      	ldr	r0, [pc, #28]	@ (8000e24 <sendCANMessage+0x7c>)
 8000e08:	f001 f95d 	bl	80020c6 <HAL_CAN_Stop>
		HAL_CAN_Start(&hcan); // Restart CAN
 8000e0c:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <sendCANMessage+0x7c>)
 8000e0e:	f001 f916 	bl	800203e <HAL_CAN_Start>

		// Optional: Clear error flags
		__HAL_CAN_CLEAR_FLAG(&hcan, CAN_FLAG_ERRI);
 8000e12:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <sendCANMessage+0x7c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2204      	movs	r2, #4
 8000e18:	605a      	str	r2, [r3, #4]
    }
}
 8000e1a:	bf00      	nop
 8000e1c:	3730      	adds	r7, #48	@ 0x30
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000011c 	.word	0x2000011c

08000e28 <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN receive interrupt callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	@ 0x30
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO1) > 0) {
 8000e30:	e053      	b.n	8000eda <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	f107 0214 	add.w	r2, r7, #20
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f001 fa5a 	bl	80022f6 <HAL_CAN_GetRxMessage>

		int32_t value;
		memcpy(&value, RxData, sizeof(value));
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	60bb      	str	r3, [r7, #8]

		switch (RxHeader.StdId) {
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000e4c:	2b09      	cmp	r3, #9
 8000e4e:	d843      	bhi.n	8000ed8 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>
 8000e50:	a201      	add	r2, pc, #4	@ (adr r2, 8000e58 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e56:	bf00      	nop
 8000e58:	08000e81 	.word	0x08000e81
 8000e5c:	08000e89 	.word	0x08000e89
 8000e60:	08000e91 	.word	0x08000e91
 8000e64:	08000e99 	.word	0x08000e99
 8000e68:	08000ea1 	.word	0x08000ea1
 8000e6c:	08000ea9 	.word	0x08000ea9
 8000e70:	08000eb1 	.word	0x08000eb1
 8000e74:	08000eb9 	.word	0x08000eb9
 8000e78:	08000ec1 	.word	0x08000ec1
 8000e7c:	08000ec9 	.word	0x08000ec9
			// Wheelbase
			case 0x100: telemetry_data.tRpm = value; break;
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e028      	b.n	8000eda <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x101: telemetry_data.tGear = value; break;
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000e8c:	6053      	str	r3, [r2, #4]
 8000e8e:	e024      	b.n	8000eda <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x102: telemetry_data.tSpeedKmh = value; break;
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4a18      	ldr	r2, [pc, #96]	@ (8000ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000e94:	6093      	str	r3, [r2, #8]
 8000e96:	e020      	b.n	8000eda <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x103: telemetry_data.tHasDRS = value; break;
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4a16      	ldr	r2, [pc, #88]	@ (8000ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000e9c:	60d3      	str	r3, [r2, #12]
 8000e9e:	e01c      	b.n	8000eda <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x104: telemetry_data.tDrs = value; break;
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000ea4:	6113      	str	r3, [r2, #16]
 8000ea6:	e018      	b.n	8000eda <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x105: telemetry_data.tPitLim = value; break;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4a12      	ldr	r2, [pc, #72]	@ (8000ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	e014      	b.n	8000eda <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x106: telemetry_data.tFuel = value; break;
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4a10      	ldr	r2, [pc, #64]	@ (8000ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000eb4:	6193      	str	r3, [r2, #24]
 8000eb6:	e010      	b.n	8000eda <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x107: telemetry_data.tBrakeBias = value; break;
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000ebc:	61d3      	str	r3, [r2, #28]
 8000ebe:	e00c      	b.n	8000eda <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x108: telemetry_data.tMaxRpm = value; break;
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000ec4:	6213      	str	r3, [r2, #32]
 8000ec6:	e008      	b.n	8000eda <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			case 0x109: telemetry_data.tForceFB = value; break;
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fa00 	bl	80002d0 <__aeabi_i2f>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8000ed4:	6253      	str	r3, [r2, #36]	@ 0x24
 8000ed6:	e000      	b.n	8000eda <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
			default: break;
 8000ed8:	bf00      	nop
	while (HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO1) > 0) {
 8000eda:	2101      	movs	r1, #1
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f001 fb2b 	bl	8002538 <HAL_CAN_GetRxFifoFillLevel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1a4      	bne.n	8000e32 <HAL_CAN_RxFifo1MsgPendingCallback+0xa>
		}
	}
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3730      	adds	r7, #48	@ 0x30
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000078 	.word	0x20000078

08000ef8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	80fb      	strh	r3, [r7, #6]
	uint32_t current_time = HAL_GetTick();  // Get system time in ms
 8000f02:	f000 fae9 	bl	80014d8 <HAL_GetTick>
 8000f06:	60f8      	str	r0, [r7, #12]
	if (current_time - last_enc_interrupt_time < 250) return;  // Debounce (5ms)
 8000f08:	4b22      	ldr	r3, [pc, #136]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2bf9      	cmp	r3, #249	@ 0xf9
 8000f12:	d93a      	bls.n	8000f8a <HAL_GPIO_EXTI_Callback+0x92>
	last_enc_interrupt_time = current_time;
 8000f14:	4a1f      	ldr	r2, [pc, #124]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6013      	str	r3, [r2, #0]
    if (GPIO_Pin == L_ENC_PIN_CLK) {
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	2b80      	cmp	r3, #128	@ 0x80
 8000f1e:	d10e      	bne.n	8000f3e <HAL_GPIO_EXTI_Callback+0x46>
        if (HAL_GPIO_ReadPin(GPIOB, L_ENC_PIN_DT) == GPIO_PIN_SET) {
 8000f20:	2140      	movs	r1, #64	@ 0x40
 8000f22:	481d      	ldr	r0, [pc, #116]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000f24:	f002 fab6 	bl	8003494 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d103      	bne.n	8000f36 <HAL_GPIO_EXTI_Callback+0x3e>
        	enc_l_flag = 1;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e003      	b.n	8000f3e <HAL_GPIO_EXTI_Callback+0x46>
        } else {
        	enc_l_flag = -1;
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	601a      	str	r2, [r3, #0]
        }
    }
    if (GPIO_Pin == C_ENC_PIN_CLK) {
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	2b20      	cmp	r3, #32
 8000f42:	d10e      	bne.n	8000f62 <HAL_GPIO_EXTI_Callback+0x6a>
		if (HAL_GPIO_ReadPin(GPIOB, C_ENC_PIN_DT) == GPIO_PIN_SET) {
 8000f44:	2110      	movs	r1, #16
 8000f46:	4814      	ldr	r0, [pc, #80]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000f48:	f002 faa4 	bl	8003494 <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d103      	bne.n	8000f5a <HAL_GPIO_EXTI_Callback+0x62>
			enc_c_flag = 1;
 8000f52:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e003      	b.n	8000f62 <HAL_GPIO_EXTI_Callback+0x6a>
		} else {
			enc_c_flag = -1;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	601a      	str	r2, [r3, #0]
		}
	}
    if (GPIO_Pin == R_ENC_PIN_CLK) {
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d111      	bne.n	8000f8c <HAL_GPIO_EXTI_Callback+0x94>
		if (HAL_GPIO_ReadPin(GPIOA, R_ENC_PIN_DT) == GPIO_PIN_SET) {
 8000f68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f6c:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <HAL_GPIO_EXTI_Callback+0xac>)
 8000f6e:	f002 fa91 	bl	8003494 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d103      	bne.n	8000f80 <HAL_GPIO_EXTI_Callback+0x88>
			enc_r_flag = 1;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e005      	b.n	8000f8c <HAL_GPIO_EXTI_Callback+0x94>
		} else {
			enc_r_flag = -1;
 8000f80:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f82:	f04f 32ff 	mov.w	r2, #4294967295
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e000      	b.n	8000f8c <HAL_GPIO_EXTI_Callback+0x94>
	if (current_time - last_enc_interrupt_time < 250) return;  // Debounce (5ms)
 8000f8a:	bf00      	nop
		}
	}
}
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200001a8 	.word	0x200001a8
 8000f98:	40010c00 	.word	0x40010c00
 8000f9c:	2000018c 	.word	0x2000018c
 8000fa0:	20000190 	.word	0x20000190
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	20000194 	.word	0x20000194

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <Error_Handler+0x8>

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fbe:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <HAL_MspInit+0x5c>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	4a14      	ldr	r2, [pc, #80]	@ (8001014 <HAL_MspInit+0x5c>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6193      	str	r3, [r2, #24]
 8000fca:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_MspInit+0x5c>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <HAL_MspInit+0x5c>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a0e      	ldr	r2, [pc, #56]	@ (8001014 <HAL_MspInit+0x5c>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <HAL_MspInit+0x5c>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <HAL_MspInit+0x60>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <HAL_MspInit+0x60>)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	40021000 	.word	0x40021000
 8001018:	40010000 	.word	0x40010000

0800101c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a29      	ldr	r2, [pc, #164]	@ (80010dc <HAL_ADC_MspInit+0xc0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d14a      	bne.n	80010d2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800103c:	4b28      	ldr	r3, [pc, #160]	@ (80010e0 <HAL_ADC_MspInit+0xc4>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a27      	ldr	r2, [pc, #156]	@ (80010e0 <HAL_ADC_MspInit+0xc4>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b25      	ldr	r3, [pc, #148]	@ (80010e0 <HAL_ADC_MspInit+0xc4>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <HAL_ADC_MspInit+0xc4>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a21      	ldr	r2, [pc, #132]	@ (80010e0 <HAL_ADC_MspInit+0xc4>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <HAL_ADC_MspInit+0xc4>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800106c:	230f      	movs	r3, #15
 800106e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001070:	2303      	movs	r3, #3
 8001072:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4619      	mov	r1, r3
 800107a:	481a      	ldr	r0, [pc, #104]	@ (80010e4 <HAL_ADC_MspInit+0xc8>)
 800107c:	f002 f886 	bl	800318c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001080:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_ADC_MspInit+0xcc>)
 8001082:	4a1a      	ldr	r2, [pc, #104]	@ (80010ec <HAL_ADC_MspInit+0xd0>)
 8001084:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <HAL_ADC_MspInit+0xcc>)
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <HAL_ADC_MspInit+0xcc>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_ADC_MspInit+0xcc>)
 8001094:	2280      	movs	r2, #128	@ 0x80
 8001096:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001098:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <HAL_ADC_MspInit+0xcc>)
 800109a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800109e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <HAL_ADC_MspInit+0xcc>)
 80010a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <HAL_ADC_MspInit+0xcc>)
 80010aa:	2220      	movs	r2, #32
 80010ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <HAL_ADC_MspInit+0xcc>)
 80010b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010b6:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <HAL_ADC_MspInit+0xcc>)
 80010b8:	f001 fdc6 	bl	8002c48 <HAL_DMA_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80010c2:	f7ff ff73 	bl	8000fac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a07      	ldr	r2, [pc, #28]	@ (80010e8 <HAL_ADC_MspInit+0xcc>)
 80010ca:	621a      	str	r2, [r3, #32]
 80010cc:	4a06      	ldr	r2, [pc, #24]	@ (80010e8 <HAL_ADC_MspInit+0xcc>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010d2:	bf00      	nop
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40012400 	.word	0x40012400
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010800 	.word	0x40010800
 80010e8:	200000d8 	.word	0x200000d8
 80010ec:	40020008 	.word	0x40020008

080010f0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a2c      	ldr	r2, [pc, #176]	@ (80011bc <HAL_CAN_MspInit+0xcc>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d151      	bne.n	80011b4 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001110:	4b2b      	ldr	r3, [pc, #172]	@ (80011c0 <HAL_CAN_MspInit+0xd0>)
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	4a2a      	ldr	r2, [pc, #168]	@ (80011c0 <HAL_CAN_MspInit+0xd0>)
 8001116:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800111a:	61d3      	str	r3, [r2, #28]
 800111c:	4b28      	ldr	r3, [pc, #160]	@ (80011c0 <HAL_CAN_MspInit+0xd0>)
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <HAL_CAN_MspInit+0xd0>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a24      	ldr	r2, [pc, #144]	@ (80011c0 <HAL_CAN_MspInit+0xd0>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <HAL_CAN_MspInit+0xd0>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001140:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001144:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	4619      	mov	r1, r3
 8001154:	481b      	ldr	r0, [pc, #108]	@ (80011c4 <HAL_CAN_MspInit+0xd4>)
 8001156:	f002 f819 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800115a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800115e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	4619      	mov	r1, r3
 800116e:	4815      	ldr	r0, [pc, #84]	@ (80011c4 <HAL_CAN_MspInit+0xd4>)
 8001170:	f002 f80c 	bl	800318c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2013      	movs	r0, #19
 800117a:	f001 fd2e 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800117e:	2013      	movs	r0, #19
 8001180:	f001 fd47 	bl	8002c12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	2014      	movs	r0, #20
 800118a:	f001 fd26 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800118e:	2014      	movs	r0, #20
 8001190:	f001 fd3f 	bl	8002c12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	2015      	movs	r0, #21
 800119a:	f001 fd1e 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800119e:	2015      	movs	r0, #21
 80011a0:	f001 fd37 	bl	8002c12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2016      	movs	r0, #22
 80011aa:	f001 fd16 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80011ae:	2016      	movs	r0, #22
 80011b0:	f001 fd2f 	bl	8002c12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40006400 	.word	0x40006400
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010800 	.word	0x40010800

080011c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a20      	ldr	r2, [pc, #128]	@ (8001264 <HAL_UART_MspInit+0x9c>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d139      	bne.n	800125c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <HAL_UART_MspInit+0xa0>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001268 <HAL_UART_MspInit+0xa0>)
 80011ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <HAL_UART_MspInit+0xa0>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <HAL_UART_MspInit+0xa0>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a18      	ldr	r2, [pc, #96]	@ (8001268 <HAL_UART_MspInit+0xa0>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <HAL_UART_MspInit+0xa0>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001218:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800121c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4619      	mov	r1, r3
 800122c:	480f      	ldr	r0, [pc, #60]	@ (800126c <HAL_UART_MspInit+0xa4>)
 800122e:	f001 ffad 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4619      	mov	r1, r3
 8001246:	4809      	ldr	r0, [pc, #36]	@ (800126c <HAL_UART_MspInit+0xa4>)
 8001248:	f001 ffa0 	bl	800318c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	2025      	movs	r0, #37	@ 0x25
 8001252:	f001 fcc2 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001256:	2025      	movs	r0, #37	@ 0x25
 8001258:	f001 fcdb 	bl	8002c12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40013800 	.word	0x40013800
 8001268:	40021000 	.word	0x40021000
 800126c:	40010800 	.word	0x40010800

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <NMI_Handler+0x4>

08001278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <MemManage_Handler+0x4>

08001288 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <UsageFault_Handler+0x4>

08001298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c0:	f000 f8f8 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80012cc:	2008      	movs	r0, #8
 80012ce:	f002 f911 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012dc:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <DMA1_Channel1_IRQHandler+0x10>)
 80012de:	f001 fe21 	bl	8002f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200000d8 	.word	0x200000d8

080012ec <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80012f0:	4802      	ldr	r0, [pc, #8]	@ (80012fc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80012f2:	f001 f96d 	bl	80025d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000011c 	.word	0x2000011c

08001300 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001306:	f001 f963 	bl	80025d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000011c 	.word	0x2000011c

08001314 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <CAN1_RX1_IRQHandler+0x10>)
 800131a:	f001 f959 	bl	80025d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000011c 	.word	0x2000011c

08001328 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <CAN1_SCE_IRQHandler+0x10>)
 800132e:	f001 f94f 	bl	80025d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000011c 	.word	0x2000011c

0800133c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001340:	2020      	movs	r0, #32
 8001342:	f002 f8d7 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001346:	2080      	movs	r0, #128	@ 0x80
 8001348:	f002 f8d4 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001354:	4802      	ldr	r0, [pc, #8]	@ (8001360 <USART1_IRQHandler+0x10>)
 8001356:	f002 fe87 	bl	8004068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000144 	.word	0x20000144

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	@ (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f003 fcac 	bl	8004cf0 <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20005000 	.word	0x20005000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	200001ac 	.word	0x200001ac
 80013cc:	20000300 	.word	0x20000300

080013d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013dc:	f7ff fff8 	bl	80013d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e0:	480b      	ldr	r0, [pc, #44]	@ (8001410 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013e2:	490c      	ldr	r1, [pc, #48]	@ (8001414 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001418 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a09      	ldr	r2, [pc, #36]	@ (800141c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013f8:	4c09      	ldr	r4, [pc, #36]	@ (8001420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001406:	f003 fc79 	bl	8004cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800140a:	f7fe ffb5 	bl	8000378 <main>
  bx lr
 800140e:	4770      	bx	lr
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001418:	08005584 	.word	0x08005584
  ldr r2, =_sbss
 800141c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001420:	200002fc 	.word	0x200002fc

08001424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC1_2_IRQHandler>
	...

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <HAL_Init+0x28>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	@ (8001450 <HAL_Init+0x28>)
 8001432:	f043 0310 	orr.w	r3, r3, #16
 8001436:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f001 fbc3 	bl	8002bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	200f      	movs	r0, #15
 8001440:	f000 f808 	bl	8001454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001444:	f7ff fdb8 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40022000 	.word	0x40022000

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <HAL_InitTick+0x54>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <HAL_InitTick+0x58>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800146a:	fbb3 f3f1 	udiv	r3, r3, r1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f001 fbdb 	bl	8002c2e <HAL_SYSTICK_Config>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e00e      	b.n	80014a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d80a      	bhi.n	800149e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f001 fba3 	bl	8002bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001494:	4a06      	ldr	r2, [pc, #24]	@ (80014b0 <HAL_InitTick+0x5c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e000      	b.n	80014a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <HAL_IncTick+0x1c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <HAL_IncTick+0x20>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a03      	ldr	r2, [pc, #12]	@ (80014d4 <HAL_IncTick+0x20>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	20000008 	.word	0x20000008
 80014d4:	200001b0 	.word	0x200001b0

080014d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b02      	ldr	r3, [pc, #8]	@ (80014e8 <HAL_GetTick+0x10>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	200001b0 	.word	0x200001b0

080014ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff fff0 	bl	80014d8 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d005      	beq.n	8001512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001506:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <HAL_Delay+0x44>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001512:	bf00      	nop
 8001514:	f7ff ffe0 	bl	80014d8 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8f7      	bhi.n	8001514 <HAL_Delay+0x28>
  {
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008

08001534 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0be      	b.n	80016d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001560:	2b00      	cmp	r3, #0
 8001562:	d109      	bne.n	8001578 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fd52 	bl	800101c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 faf5 	bl	8001b68 <ADC_ConversionStop_Disable>
 800157e:	4603      	mov	r3, r0
 8001580:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	2b00      	cmp	r3, #0
 800158c:	f040 8099 	bne.w	80016c2 <HAL_ADC_Init+0x18e>
 8001590:	7dfb      	ldrb	r3, [r7, #23]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 8095 	bne.w	80016c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015a0:	f023 0302 	bic.w	r3, r3, #2
 80015a4:	f043 0202 	orr.w	r2, r3, #2
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7b1b      	ldrb	r3, [r3, #12]
 80015ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015cc:	d003      	beq.n	80015d6 <HAL_ADC_Init+0xa2>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d102      	bne.n	80015dc <HAL_ADC_Init+0xa8>
 80015d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015da:	e000      	b.n	80015de <HAL_ADC_Init+0xaa>
 80015dc:	2300      	movs	r3, #0
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7d1b      	ldrb	r3, [r3, #20]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d119      	bne.n	8001620 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7b1b      	ldrb	r3, [r3, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d109      	bne.n	8001608 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	035a      	lsls	r2, r3, #13
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	e00b      	b.n	8001620 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160c:	f043 0220 	orr.w	r2, r3, #32
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001618:	f043 0201 	orr.w	r2, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	430a      	orrs	r2, r1
 8001632:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <HAL_ADC_Init+0x1a8>)
 800163c:	4013      	ands	r3, r2
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	430b      	orrs	r3, r1
 8001646:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001650:	d003      	beq.n	800165a <HAL_ADC_Init+0x126>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d104      	bne.n	8001664 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	3b01      	subs	r3, #1
 8001660:	051b      	lsls	r3, r3, #20
 8001662:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	430a      	orrs	r2, r1
 8001676:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <HAL_ADC_Init+0x1ac>)
 8001680:	4013      	ands	r3, r2
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	429a      	cmp	r2, r3
 8001686:	d10b      	bne.n	80016a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001692:	f023 0303 	bic.w	r3, r3, #3
 8001696:	f043 0201 	orr.w	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800169e:	e018      	b.n	80016d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a4:	f023 0312 	bic.w	r3, r3, #18
 80016a8:	f043 0210 	orr.w	r2, r3, #16
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b4:	f043 0201 	orr.w	r2, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016c0:	e007      	b.n	80016d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c6:	f043 0210 	orr.w	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	ffe1f7fd 	.word	0xffe1f7fd
 80016e0:	ff1f0efe 	.word	0xff1f0efe

080016e4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a64      	ldr	r2, [pc, #400]	@ (800188c <HAL_ADC_Start_DMA+0x1a8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d004      	beq.n	8001708 <HAL_ADC_Start_DMA+0x24>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a63      	ldr	r2, [pc, #396]	@ (8001890 <HAL_ADC_Start_DMA+0x1ac>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d106      	bne.n	8001716 <HAL_ADC_Start_DMA+0x32>
 8001708:	4b60      	ldr	r3, [pc, #384]	@ (800188c <HAL_ADC_Start_DMA+0x1a8>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001710:	2b00      	cmp	r3, #0
 8001712:	f040 80b3 	bne.w	800187c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_ADC_Start_DMA+0x40>
 8001720:	2302      	movs	r3, #2
 8001722:	e0ae      	b.n	8001882 <HAL_ADC_Start_DMA+0x19e>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f9c1 	bl	8001ab4 <ADC_Enable>
 8001732:	4603      	mov	r3, r0
 8001734:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f040 809a 	bne.w	8001872 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001742:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a4e      	ldr	r2, [pc, #312]	@ (8001890 <HAL_ADC_Start_DMA+0x1ac>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d105      	bne.n	8001768 <HAL_ADC_Start_DMA+0x84>
 800175c:	4b4b      	ldr	r3, [pc, #300]	@ (800188c <HAL_ADC_Start_DMA+0x1a8>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d115      	bne.n	8001794 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800177e:	2b00      	cmp	r3, #0
 8001780:	d026      	beq.n	80017d0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001786:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800178a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001792:	e01d      	b.n	80017d0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001798:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a39      	ldr	r2, [pc, #228]	@ (800188c <HAL_ADC_Start_DMA+0x1a8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d004      	beq.n	80017b4 <HAL_ADC_Start_DMA+0xd0>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a38      	ldr	r2, [pc, #224]	@ (8001890 <HAL_ADC_Start_DMA+0x1ac>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d10d      	bne.n	80017d0 <HAL_ADC_Start_DMA+0xec>
 80017b4:	4b35      	ldr	r3, [pc, #212]	@ (800188c <HAL_ADC_Start_DMA+0x1a8>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e0:	f023 0206 	bic.w	r2, r3, #6
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017e8:	e002      	b.n	80017f0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a25      	ldr	r2, [pc, #148]	@ (8001894 <HAL_ADC_Start_DMA+0x1b0>)
 80017fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	4a24      	ldr	r2, [pc, #144]	@ (8001898 <HAL_ADC_Start_DMA+0x1b4>)
 8001806:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a23      	ldr	r2, [pc, #140]	@ (800189c <HAL_ADC_Start_DMA+0x1b8>)
 800180e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f06f 0202 	mvn.w	r2, #2
 8001818:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001828:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a18      	ldr	r0, [r3, #32]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	334c      	adds	r3, #76	@ 0x4c
 8001834:	4619      	mov	r1, r3
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f001 fa5f 	bl	8002cfc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001848:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800184c:	d108      	bne.n	8001860 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800185c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800185e:	e00f      	b.n	8001880 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800186e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001870:	e006      	b.n	8001880 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800187a:	e001      	b.n	8001880 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001880:	7dfb      	ldrb	r3, [r7, #23]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40012400 	.word	0x40012400
 8001890:	40012800 	.word	0x40012800
 8001894:	08001beb 	.word	0x08001beb
 8001898:	08001c67 	.word	0x08001c67
 800189c:	08001c83 	.word	0x08001c83

080018a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x20>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e0dc      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x1da>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b06      	cmp	r3, #6
 80018f2:	d81c      	bhi.n	800192e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	3b05      	subs	r3, #5
 8001906:	221f      	movs	r2, #31
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	4019      	ands	r1, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	3b05      	subs	r3, #5
 8001920:	fa00 f203 	lsl.w	r2, r0, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	635a      	str	r2, [r3, #52]	@ 0x34
 800192c:	e03c      	b.n	80019a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b0c      	cmp	r3, #12
 8001934:	d81c      	bhi.n	8001970 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b23      	subs	r3, #35	@ 0x23
 8001948:	221f      	movs	r2, #31
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	4019      	ands	r1, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	3b23      	subs	r3, #35	@ 0x23
 8001962:	fa00 f203 	lsl.w	r2, r0, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	631a      	str	r2, [r3, #48]	@ 0x30
 800196e:	e01b      	b.n	80019a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	3b41      	subs	r3, #65	@ 0x41
 8001982:	221f      	movs	r2, #31
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	4019      	ands	r1, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	3b41      	subs	r3, #65	@ 0x41
 800199c:	fa00 f203 	lsl.w	r2, r0, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b09      	cmp	r3, #9
 80019ae:	d91c      	bls.n	80019ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68d9      	ldr	r1, [r3, #12]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	3b1e      	subs	r3, #30
 80019c2:	2207      	movs	r2, #7
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	4019      	ands	r1, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6898      	ldr	r0, [r3, #8]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	3b1e      	subs	r3, #30
 80019dc:	fa00 f203 	lsl.w	r2, r0, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	e019      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6919      	ldr	r1, [r3, #16]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	2207      	movs	r2, #7
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	4019      	ands	r1, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6898      	ldr	r0, [r3, #8]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	fa00 f203 	lsl.w	r2, r0, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b10      	cmp	r3, #16
 8001a24:	d003      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a2a:	2b11      	cmp	r3, #17
 8001a2c:	d132      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d125      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d126      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001a54:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	d11a      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a5e:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <HAL_ADC_ConfigChannel+0x1e8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a13      	ldr	r2, [pc, #76]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	0c9a      	lsrs	r2, r3, #18
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a74:	e002      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f9      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x1b2>
 8001a82:	e007      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a88:	f043 0220 	orr.w	r2, r3, #32
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	40012400 	.word	0x40012400
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d040      	beq.n	8001b54 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b60 <ADC_Enable+0xac>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b64 <ADC_Enable+0xb0>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	0c9b      	lsrs	r3, r3, #18
 8001aee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001af0:	e002      	b.n	8001af8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f9      	bne.n	8001af2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001afe:	f7ff fceb 	bl	80014d8 <HAL_GetTick>
 8001b02:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b04:	e01f      	b.n	8001b46 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b06:	f7ff fce7 	bl	80014d8 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d918      	bls.n	8001b46 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d011      	beq.n	8001b46 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b26:	f043 0210 	orr.w	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b32:	f043 0201 	orr.w	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e007      	b.n	8001b56 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d1d8      	bne.n	8001b06 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000000 	.word	0x20000000
 8001b64:	431bde83 	.word	0x431bde83

08001b68 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d12e      	bne.n	8001be0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0201 	bic.w	r2, r2, #1
 8001b90:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b92:	f7ff fca1 	bl	80014d8 <HAL_GetTick>
 8001b96:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b98:	e01b      	b.n	8001bd2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b9a:	f7ff fc9d 	bl	80014d8 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d914      	bls.n	8001bd2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d10d      	bne.n	8001bd2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bba:	f043 0210 	orr.w	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e007      	b.n	8001be2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d0dc      	beq.n	8001b9a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d127      	bne.n	8001c54 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c1a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c1e:	d115      	bne.n	8001c4c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d111      	bne.n	8001c4c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7ff f805 	bl	8000c5c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001c52:	e004      	b.n	8001c5e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	4798      	blx	r3
}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b084      	sub	sp, #16
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f7ff fe13 	bl	80018a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b084      	sub	sp, #16
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca0:	f043 0204 	orr.w	r2, r3, #4
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff fe02 	bl	80018b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0ed      	b.n	8001ea4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fa0b 	bl	80010f0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cea:	f7ff fbf5 	bl	80014d8 <HAL_GetTick>
 8001cee:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cf0:	e012      	b.n	8001d18 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cf2:	f7ff fbf1 	bl	80014d8 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b0a      	cmp	r3, #10
 8001cfe:	d90b      	bls.n	8001d18 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2205      	movs	r2, #5
 8001d10:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0c5      	b.n	8001ea4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0e5      	beq.n	8001cf2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0202 	bic.w	r2, r2, #2
 8001d34:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d36:	f7ff fbcf 	bl	80014d8 <HAL_GetTick>
 8001d3a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d3c:	e012      	b.n	8001d64 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d3e:	f7ff fbcb 	bl	80014d8 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b0a      	cmp	r3, #10
 8001d4a:	d90b      	bls.n	8001d64 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d50:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2205      	movs	r2, #5
 8001d5c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e09f      	b.n	8001ea4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1e5      	bne.n	8001d3e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7e1b      	ldrb	r3, [r3, #24]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d108      	bne.n	8001d8c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e007      	b.n	8001d9c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7e5b      	ldrb	r3, [r3, #25]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d108      	bne.n	8001db6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	e007      	b.n	8001dc6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7e9b      	ldrb	r3, [r3, #26]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d108      	bne.n	8001de0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0220 	orr.w	r2, r2, #32
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	e007      	b.n	8001df0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0220 	bic.w	r2, r2, #32
 8001dee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7edb      	ldrb	r3, [r3, #27]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d108      	bne.n	8001e0a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0210 	bic.w	r2, r2, #16
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e007      	b.n	8001e1a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0210 	orr.w	r2, r2, #16
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7f1b      	ldrb	r3, [r3, #28]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d108      	bne.n	8001e34 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0208 	orr.w	r2, r2, #8
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e007      	b.n	8001e44 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0208 	bic.w	r2, r2, #8
 8001e42:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7f5b      	ldrb	r3, [r3, #29]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d108      	bne.n	8001e5e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0204 	orr.w	r2, r2, #4
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e007      	b.n	8001e6e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0204 	bic.w	r2, r2, #4
 8001e6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	ea42 0103 	orr.w	r1, r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	1e5a      	subs	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d003      	beq.n	8001ed2 <HAL_CAN_ConfigFilter+0x26>
 8001eca:	7cfb      	ldrb	r3, [r7, #19]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	f040 80aa 	bne.w	8002026 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ed8:	f043 0201 	orr.w	r2, r3, #1
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	2201      	movs	r2, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	401a      	ands	r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d123      	bne.n	8001f54 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3248      	adds	r2, #72	@ 0x48
 8001f34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f4a:	6979      	ldr	r1, [r7, #20]
 8001f4c:	3348      	adds	r3, #72	@ 0x48
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	440b      	add	r3, r1
 8001f52:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d122      	bne.n	8001fa2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3248      	adds	r2, #72	@ 0x48
 8001f82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f98:	6979      	ldr	r1, [r7, #20]
 8001f9a:	3348      	adds	r3, #72	@ 0x48
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001fbc:	e007      	b.n	8001fce <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001fe8:	e007      	b.n	8001ffa <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d107      	bne.n	8002012 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	431a      	orrs	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002018:	f023 0201 	bic.w	r2, r3, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e006      	b.n	8002034 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
  }
}
 8002034:	4618      	mov	r0, r3
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d12e      	bne.n	80020b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2202      	movs	r2, #2
 8002056:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800206a:	f7ff fa35 	bl	80014d8 <HAL_GetTick>
 800206e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002070:	e012      	b.n	8002098 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002072:	f7ff fa31 	bl	80014d8 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b0a      	cmp	r3, #10
 800207e:	d90b      	bls.n	8002098 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2205      	movs	r2, #5
 8002090:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e012      	b.n	80020be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1e5      	bne.n	8002072 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e006      	b.n	80020be <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d133      	bne.n	8002142 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020ea:	f7ff f9f5 	bl	80014d8 <HAL_GetTick>
 80020ee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020f0:	e012      	b.n	8002118 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020f2:	f7ff f9f1 	bl	80014d8 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b0a      	cmp	r3, #10
 80020fe:	d90b      	bls.n	8002118 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2205      	movs	r2, #5
 8002110:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e01b      	b.n	8002150 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0e5      	beq.n	80020f2 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0202 	bic.w	r2, r2, #2
 8002134:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e006      	b.n	8002150 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
  }
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002176:	7ffb      	ldrb	r3, [r7, #31]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d003      	beq.n	8002184 <HAL_CAN_AddTxMessage+0x2c>
 800217c:	7ffb      	ldrb	r3, [r7, #31]
 800217e:	2b02      	cmp	r3, #2
 8002180:	f040 80ad 	bne.w	80022de <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8095 	beq.w	80022ce <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	0e1b      	lsrs	r3, r3, #24
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021ae:	2201      	movs	r2, #1
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10d      	bne.n	80021dc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021ca:	68f9      	ldr	r1, [r7, #12]
 80021cc:	6809      	ldr	r1, [r1, #0]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	3318      	adds	r3, #24
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	440b      	add	r3, r1
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e00f      	b.n	80021fc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021e6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021ec:	68f9      	ldr	r1, [r7, #12]
 80021ee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021f0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3318      	adds	r3, #24
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	440b      	add	r3, r1
 80021fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3318      	adds	r3, #24
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	440b      	add	r3, r1
 800220c:	3304      	adds	r3, #4
 800220e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	7d1b      	ldrb	r3, [r3, #20]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d111      	bne.n	800223c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3318      	adds	r3, #24
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	6811      	ldr	r1, [r2, #0]
 800222c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3318      	adds	r3, #24
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	440b      	add	r3, r1
 8002238:	3304      	adds	r3, #4
 800223a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3307      	adds	r3, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	061a      	lsls	r2, r3, #24
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3306      	adds	r3, #6
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3305      	adds	r3, #5
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	4313      	orrs	r3, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	3204      	adds	r2, #4
 800225c:	7812      	ldrb	r2, [r2, #0]
 800225e:	4610      	mov	r0, r2
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	6811      	ldr	r1, [r2, #0]
 8002264:	ea43 0200 	orr.w	r2, r3, r0
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	440b      	add	r3, r1
 800226e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002272:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3303      	adds	r3, #3
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	061a      	lsls	r2, r3, #24
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3302      	adds	r3, #2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3301      	adds	r3, #1
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	4313      	orrs	r3, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	7812      	ldrb	r2, [r2, #0]
 8002294:	4610      	mov	r0, r2
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	6811      	ldr	r1, [r2, #0]
 800229a:	ea43 0200 	orr.w	r2, r3, r0
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	440b      	add	r3, r1
 80022a4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80022a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3318      	adds	r3, #24
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	4413      	add	r3, r2
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	6811      	ldr	r1, [r2, #0]
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3318      	adds	r3, #24
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	440b      	add	r3, r1
 80022c8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e00e      	b.n	80022ec <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e006      	b.n	80022ec <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
  }
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3724      	adds	r7, #36	@ 0x24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022f6:	b480      	push	{r7}
 80022f8:	b087      	sub	sp, #28
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d003      	beq.n	800231a <HAL_CAN_GetRxMessage+0x24>
 8002312:	7dfb      	ldrb	r3, [r7, #23]
 8002314:	2b02      	cmp	r3, #2
 8002316:	f040 8103 	bne.w	8002520 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10e      	bne.n	800233e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d116      	bne.n	800235c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0f7      	b.n	800252e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d107      	bne.n	800235c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0e8      	b.n	800252e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	331b      	adds	r3, #27
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	4413      	add	r3, r2
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0204 	and.w	r2, r3, #4
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10c      	bne.n	8002394 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	331b      	adds	r3, #27
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	4413      	add	r3, r2
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0d5b      	lsrs	r3, r3, #21
 800238a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e00b      	b.n	80023ac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	331b      	adds	r3, #27
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4413      	add	r3, r2
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	08db      	lsrs	r3, r3, #3
 80023a4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	331b      	adds	r3, #27
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	4413      	add	r3, r2
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0202 	and.w	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	331b      	adds	r3, #27
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	4413      	add	r3, r2
 80023ce:	3304      	adds	r3, #4
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2208      	movs	r2, #8
 80023de:	611a      	str	r2, [r3, #16]
 80023e0:	e00b      	b.n	80023fa <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	331b      	adds	r3, #27
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	4413      	add	r3, r2
 80023ee:	3304      	adds	r3, #4
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 020f 	and.w	r2, r3, #15
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	331b      	adds	r3, #27
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	4413      	add	r3, r2
 8002406:	3304      	adds	r3, #4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	b2da      	uxtb	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	331b      	adds	r3, #27
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	4413      	add	r3, r2
 800241e:	3304      	adds	r3, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0c1b      	lsrs	r3, r3, #16
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	4413      	add	r3, r2
 8002434:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	4413      	add	r3, r2
 800244a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0a1a      	lsrs	r2, r3, #8
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	4413      	add	r3, r2
 8002464:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0c1a      	lsrs	r2, r3, #16
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	3302      	adds	r3, #2
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	4413      	add	r3, r2
 800247e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e1a      	lsrs	r2, r3, #24
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	3303      	adds	r3, #3
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	4413      	add	r3, r2
 8002498:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	3304      	adds	r3, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0a1a      	lsrs	r2, r3, #8
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3305      	adds	r3, #5
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0c1a      	lsrs	r2, r3, #16
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	3306      	adds	r3, #6
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	0e1a      	lsrs	r2, r3, #24
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	3307      	adds	r3, #7
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d108      	bne.n	800250c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0220 	orr.w	r2, r2, #32
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	e007      	b.n	800251c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0220 	orr.w	r2, r2, #32
 800251a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	e006      	b.n	800252e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
  }
}
 800252e:	4618      	mov	r0, r3
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800254e:	7afb      	ldrb	r3, [r7, #11]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d002      	beq.n	800255a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002554:	7afb      	ldrb	r3, [r7, #11]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d10f      	bne.n	800257a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d106      	bne.n	800256e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e005      	b.n	800257a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800257a:	68fb      	ldr	r3, [r7, #12]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002586:	b480      	push	{r7}
 8002588:	b085      	sub	sp, #20
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002596:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d002      	beq.n	80025a4 <HAL_CAN_ActivateNotification+0x1e>
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d109      	bne.n	80025b8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6959      	ldr	r1, [r3, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e006      	b.n	80025c6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
  }
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	@ 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d07c      	beq.n	8002710 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d023      	beq.n	8002668 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2201      	movs	r2, #1
 8002626:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f983 	bl	800293e <HAL_CAN_TxMailbox0CompleteCallback>
 8002638:	e016      	b.n	8002668 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800264a:	627b      	str	r3, [r7, #36]	@ 0x24
 800264c:	e00c      	b.n	8002668 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d004      	beq.n	8002662 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002660:	e002      	b.n	8002668 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f986 	bl	8002974 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d024      	beq.n	80026bc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800267a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f962 	bl	8002950 <HAL_CAN_TxMailbox1CompleteCallback>
 800268c:	e016      	b.n	80026bc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d004      	beq.n	80026a2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a0:	e00c      	b.n	80026bc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b4:	e002      	b.n	80026bc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f965 	bl	8002986 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d024      	beq.n	8002710 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f941 	bl	8002962 <HAL_CAN_TxMailbox2CompleteCallback>
 80026e0:	e016      	b.n	8002710 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f4:	e00c      	b.n	8002710 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
 8002708:	e002      	b.n	8002710 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f944 	bl	8002998 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2210      	movs	r2, #16
 8002732:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d006      	beq.n	8002756 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2208      	movs	r2, #8
 800274e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f933 	bl	80029bc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d009      	beq.n	8002774 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f91b 	bl	80029aa <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00c      	beq.n	8002798 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2210      	movs	r2, #16
 8002796:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d006      	beq.n	80027ba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2208      	movs	r2, #8
 80027b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f90a 	bl	80029ce <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d009      	beq.n	80027d8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe fb28 	bl	8000e28 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2210      	movs	r2, #16
 80027f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f8f3 	bl	80029e0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00b      	beq.n	800281c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d006      	beq.n	800281c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2208      	movs	r2, #8
 8002814:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8eb 	bl	80029f2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d07b      	beq.n	800291e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d072      	beq.n	8002916 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002862:	f043 0302 	orr.w	r3, r3, #2
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800288a:	2b00      	cmp	r3, #0
 800288c:	d043      	beq.n	8002916 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002894:	2b00      	cmp	r3, #0
 8002896:	d03e      	beq.n	8002916 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800289e:	2b60      	cmp	r3, #96	@ 0x60
 80028a0:	d02b      	beq.n	80028fa <HAL_CAN_IRQHandler+0x32a>
 80028a2:	2b60      	cmp	r3, #96	@ 0x60
 80028a4:	d82e      	bhi.n	8002904 <HAL_CAN_IRQHandler+0x334>
 80028a6:	2b50      	cmp	r3, #80	@ 0x50
 80028a8:	d022      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x320>
 80028aa:	2b50      	cmp	r3, #80	@ 0x50
 80028ac:	d82a      	bhi.n	8002904 <HAL_CAN_IRQHandler+0x334>
 80028ae:	2b40      	cmp	r3, #64	@ 0x40
 80028b0:	d019      	beq.n	80028e6 <HAL_CAN_IRQHandler+0x316>
 80028b2:	2b40      	cmp	r3, #64	@ 0x40
 80028b4:	d826      	bhi.n	8002904 <HAL_CAN_IRQHandler+0x334>
 80028b6:	2b30      	cmp	r3, #48	@ 0x30
 80028b8:	d010      	beq.n	80028dc <HAL_CAN_IRQHandler+0x30c>
 80028ba:	2b30      	cmp	r3, #48	@ 0x30
 80028bc:	d822      	bhi.n	8002904 <HAL_CAN_IRQHandler+0x334>
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d002      	beq.n	80028c8 <HAL_CAN_IRQHandler+0x2f8>
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	d005      	beq.n	80028d2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028c6:	e01d      	b.n	8002904 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	f043 0308 	orr.w	r3, r3, #8
 80028ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028d0:	e019      	b.n	8002906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	f043 0310 	orr.w	r3, r3, #16
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028da:	e014      	b.n	8002906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	f043 0320 	orr.w	r3, r3, #32
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028e4:	e00f      	b.n	8002906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028ee:	e00a      	b.n	8002906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028f8:	e005      	b.n	8002906 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002900:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002902:	e000      	b.n	8002906 <HAL_CAN_IRQHandler+0x336>
            break;
 8002904:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699a      	ldr	r2, [r3, #24]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002914:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2204      	movs	r2, #4
 800291c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f867 	bl	8002a04 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002936:	bf00      	nop
 8002938:	3728      	adds	r7, #40	@ 0x28
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60d3      	str	r3, [r2, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a78:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <__NVIC_GetPriorityGrouping+0x18>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0307 	and.w	r3, r3, #7
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db0b      	blt.n	8002aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	4906      	ldr	r1, [pc, #24]	@ (8002ac4 <__NVIC_EnableIRQ+0x34>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	e000e100 	.word	0xe000e100

08002ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db0a      	blt.n	8002af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	490c      	ldr	r1, [pc, #48]	@ (8002b14 <__NVIC_SetPriority+0x4c>)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	0112      	lsls	r2, r2, #4
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	440b      	add	r3, r1
 8002aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af0:	e00a      	b.n	8002b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4908      	ldr	r1, [pc, #32]	@ (8002b18 <__NVIC_SetPriority+0x50>)
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	3b04      	subs	r3, #4
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	440b      	add	r3, r1
 8002b06:	761a      	strb	r2, [r3, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	e000e100 	.word	0xe000e100
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	@ 0x24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f1c3 0307 	rsb	r3, r3, #7
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	bf28      	it	cs
 8002b3a:	2304      	movcs	r3, #4
 8002b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d902      	bls.n	8002b4c <NVIC_EncodePriority+0x30>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3b03      	subs	r3, #3
 8002b4a:	e000      	b.n	8002b4e <NVIC_EncodePriority+0x32>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	f04f 32ff 	mov.w	r2, #4294967295
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	401a      	ands	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b64:	f04f 31ff 	mov.w	r1, #4294967295
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	43d9      	mvns	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	4313      	orrs	r3, r2
         );
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3724      	adds	r7, #36	@ 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b90:	d301      	bcc.n	8002b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00f      	b.n	8002bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b96:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc0 <SysTick_Config+0x40>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b9e:	210f      	movs	r1, #15
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba4:	f7ff ff90 	bl	8002ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba8:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <SysTick_Config+0x40>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bae:	4b04      	ldr	r3, [pc, #16]	@ (8002bc0 <SysTick_Config+0x40>)
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	e000e010 	.word	0xe000e010

08002bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ff2d 	bl	8002a2c <__NVIC_SetPriorityGrouping>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4603      	mov	r3, r0
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bec:	f7ff ff42 	bl	8002a74 <__NVIC_GetPriorityGrouping>
 8002bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	6978      	ldr	r0, [r7, #20]
 8002bf8:	f7ff ff90 	bl	8002b1c <NVIC_EncodePriority>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff5f 	bl	8002ac8 <__NVIC_SetPriority>
}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	4603      	mov	r3, r0
 8002c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff35 	bl	8002a90 <__NVIC_EnableIRQ>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ffa2 	bl	8002b80 <SysTick_Config>
 8002c3c:	4603      	mov	r3, r0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e043      	b.n	8002ce6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	4b22      	ldr	r3, [pc, #136]	@ (8002cf0 <HAL_DMA_Init+0xa8>)
 8002c66:	4413      	add	r3, r2
 8002c68:	4a22      	ldr	r2, [pc, #136]	@ (8002cf4 <HAL_DMA_Init+0xac>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	009a      	lsls	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf8 <HAL_DMA_Init+0xb0>)
 8002c7a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c92:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002c96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr
 8002cf0:	bffdfff8 	.word	0xbffdfff8
 8002cf4:	cccccccd 	.word	0xcccccccd
 8002cf8:	40020000 	.word	0x40020000

08002cfc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_DMA_Start_IT+0x20>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e04b      	b.n	8002db4 <HAL_DMA_Start_IT+0xb8>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d13a      	bne.n	8002da6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0201 	bic.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f9eb 	bl	8003130 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 020e 	orr.w	r2, r2, #14
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	e00f      	b.n	8002d94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0204 	bic.w	r2, r2, #4
 8002d82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 020a 	orr.w	r2, r2, #10
 8002d92:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e005      	b.n	8002db2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
 8002db0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d008      	beq.n	8002de6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e020      	b.n	8002e28 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 020e 	bic.w	r2, r2, #14
 8002df4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0e:	2101      	movs	r1, #1
 8002e10:	fa01 f202 	lsl.w	r2, r1, r2
 8002e14:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d005      	beq.n	8002e58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
 8002e56:	e051      	b.n	8002efc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 020e 	bic.w	r2, r2, #14
 8002e66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a22      	ldr	r2, [pc, #136]	@ (8002f08 <HAL_DMA_Abort_IT+0xd4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d029      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0xa2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a21      	ldr	r2, [pc, #132]	@ (8002f0c <HAL_DMA_Abort_IT+0xd8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d022      	beq.n	8002ed2 <HAL_DMA_Abort_IT+0x9e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1f      	ldr	r2, [pc, #124]	@ (8002f10 <HAL_DMA_Abort_IT+0xdc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d01a      	beq.n	8002ecc <HAL_DMA_Abort_IT+0x98>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002f14 <HAL_DMA_Abort_IT+0xe0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d012      	beq.n	8002ec6 <HAL_DMA_Abort_IT+0x92>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8002f18 <HAL_DMA_Abort_IT+0xe4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x8c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1b      	ldr	r2, [pc, #108]	@ (8002f1c <HAL_DMA_Abort_IT+0xe8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d102      	bne.n	8002eba <HAL_DMA_Abort_IT+0x86>
 8002eb4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002eb8:	e00e      	b.n	8002ed8 <HAL_DMA_Abort_IT+0xa4>
 8002eba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ebe:	e00b      	b.n	8002ed8 <HAL_DMA_Abort_IT+0xa4>
 8002ec0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ec4:	e008      	b.n	8002ed8 <HAL_DMA_Abort_IT+0xa4>
 8002ec6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eca:	e005      	b.n	8002ed8 <HAL_DMA_Abort_IT+0xa4>
 8002ecc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ed0:	e002      	b.n	8002ed8 <HAL_DMA_Abort_IT+0xa4>
 8002ed2:	2310      	movs	r3, #16
 8002ed4:	e000      	b.n	8002ed8 <HAL_DMA_Abort_IT+0xa4>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	4a11      	ldr	r2, [pc, #68]	@ (8002f20 <HAL_DMA_Abort_IT+0xec>)
 8002eda:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
    } 
  }
  return status;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40020008 	.word	0x40020008
 8002f0c:	4002001c 	.word	0x4002001c
 8002f10:	40020030 	.word	0x40020030
 8002f14:	40020044 	.word	0x40020044
 8002f18:	40020058 	.word	0x40020058
 8002f1c:	4002006c 	.word	0x4002006c
 8002f20:	40020000 	.word	0x40020000

08002f24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	2204      	movs	r2, #4
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d04f      	beq.n	8002fec <HAL_DMA_IRQHandler+0xc8>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d04a      	beq.n	8002fec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d107      	bne.n	8002f74 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0204 	bic.w	r2, r2, #4
 8002f72:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a66      	ldr	r2, [pc, #408]	@ (8003114 <HAL_DMA_IRQHandler+0x1f0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d029      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0xae>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a65      	ldr	r2, [pc, #404]	@ (8003118 <HAL_DMA_IRQHandler+0x1f4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d022      	beq.n	8002fce <HAL_DMA_IRQHandler+0xaa>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a63      	ldr	r2, [pc, #396]	@ (800311c <HAL_DMA_IRQHandler+0x1f8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01a      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0xa4>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a62      	ldr	r2, [pc, #392]	@ (8003120 <HAL_DMA_IRQHandler+0x1fc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d012      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x9e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a60      	ldr	r2, [pc, #384]	@ (8003124 <HAL_DMA_IRQHandler+0x200>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00a      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x98>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a5f      	ldr	r2, [pc, #380]	@ (8003128 <HAL_DMA_IRQHandler+0x204>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d102      	bne.n	8002fb6 <HAL_DMA_IRQHandler+0x92>
 8002fb0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002fb4:	e00e      	b.n	8002fd4 <HAL_DMA_IRQHandler+0xb0>
 8002fb6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002fba:	e00b      	b.n	8002fd4 <HAL_DMA_IRQHandler+0xb0>
 8002fbc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002fc0:	e008      	b.n	8002fd4 <HAL_DMA_IRQHandler+0xb0>
 8002fc2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002fc6:	e005      	b.n	8002fd4 <HAL_DMA_IRQHandler+0xb0>
 8002fc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fcc:	e002      	b.n	8002fd4 <HAL_DMA_IRQHandler+0xb0>
 8002fce:	2340      	movs	r3, #64	@ 0x40
 8002fd0:	e000      	b.n	8002fd4 <HAL_DMA_IRQHandler+0xb0>
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	4a55      	ldr	r2, [pc, #340]	@ (800312c <HAL_DMA_IRQHandler+0x208>)
 8002fd6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8094 	beq.w	800310a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002fea:	e08e      	b.n	800310a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d056      	beq.n	80030aa <HAL_DMA_IRQHandler+0x186>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d051      	beq.n	80030aa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10b      	bne.n	800302c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 020a 	bic.w	r2, r2, #10
 8003022:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a38      	ldr	r2, [pc, #224]	@ (8003114 <HAL_DMA_IRQHandler+0x1f0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d029      	beq.n	800308a <HAL_DMA_IRQHandler+0x166>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a37      	ldr	r2, [pc, #220]	@ (8003118 <HAL_DMA_IRQHandler+0x1f4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d022      	beq.n	8003086 <HAL_DMA_IRQHandler+0x162>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a35      	ldr	r2, [pc, #212]	@ (800311c <HAL_DMA_IRQHandler+0x1f8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01a      	beq.n	8003080 <HAL_DMA_IRQHandler+0x15c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a34      	ldr	r2, [pc, #208]	@ (8003120 <HAL_DMA_IRQHandler+0x1fc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d012      	beq.n	800307a <HAL_DMA_IRQHandler+0x156>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a32      	ldr	r2, [pc, #200]	@ (8003124 <HAL_DMA_IRQHandler+0x200>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00a      	beq.n	8003074 <HAL_DMA_IRQHandler+0x150>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a31      	ldr	r2, [pc, #196]	@ (8003128 <HAL_DMA_IRQHandler+0x204>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d102      	bne.n	800306e <HAL_DMA_IRQHandler+0x14a>
 8003068:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800306c:	e00e      	b.n	800308c <HAL_DMA_IRQHandler+0x168>
 800306e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003072:	e00b      	b.n	800308c <HAL_DMA_IRQHandler+0x168>
 8003074:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003078:	e008      	b.n	800308c <HAL_DMA_IRQHandler+0x168>
 800307a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800307e:	e005      	b.n	800308c <HAL_DMA_IRQHandler+0x168>
 8003080:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003084:	e002      	b.n	800308c <HAL_DMA_IRQHandler+0x168>
 8003086:	2320      	movs	r3, #32
 8003088:	e000      	b.n	800308c <HAL_DMA_IRQHandler+0x168>
 800308a:	2302      	movs	r3, #2
 800308c:	4a27      	ldr	r2, [pc, #156]	@ (800312c <HAL_DMA_IRQHandler+0x208>)
 800308e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309c:	2b00      	cmp	r3, #0
 800309e:	d034      	beq.n	800310a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80030a8:	e02f      	b.n	800310a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	2208      	movs	r2, #8
 80030b0:	409a      	lsls	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d028      	beq.n	800310c <HAL_DMA_IRQHandler+0x1e8>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d023      	beq.n	800310c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 020e 	bic.w	r2, r2, #14
 80030d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030dc:	2101      	movs	r1, #1
 80030de:	fa01 f202 	lsl.w	r2, r1, r2
 80030e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4798      	blx	r3
    }
  }
  return;
 800310a:	bf00      	nop
 800310c:	bf00      	nop
}
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40020008 	.word	0x40020008
 8003118:	4002001c 	.word	0x4002001c
 800311c:	40020030 	.word	0x40020030
 8003120:	40020044 	.word	0x40020044
 8003124:	40020058 	.word	0x40020058
 8003128:	4002006c 	.word	0x4002006c
 800312c:	40020000 	.word	0x40020000

08003130 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003146:	2101      	movs	r1, #1
 8003148:	fa01 f202 	lsl.w	r2, r1, r2
 800314c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b10      	cmp	r3, #16
 800315c:	d108      	bne.n	8003170 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800316e:	e007      	b.n	8003180 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	60da      	str	r2, [r3, #12]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
	...

0800318c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800318c:	b480      	push	{r7}
 800318e:	b08b      	sub	sp, #44	@ 0x2c
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003196:	2300      	movs	r3, #0
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800319a:	2300      	movs	r3, #0
 800319c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800319e:	e169      	b.n	8003474 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031a0:	2201      	movs	r2, #1
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	f040 8158 	bne.w	800346e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4a9a      	ldr	r2, [pc, #616]	@ (800342c <HAL_GPIO_Init+0x2a0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d05e      	beq.n	8003286 <HAL_GPIO_Init+0xfa>
 80031c8:	4a98      	ldr	r2, [pc, #608]	@ (800342c <HAL_GPIO_Init+0x2a0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d875      	bhi.n	80032ba <HAL_GPIO_Init+0x12e>
 80031ce:	4a98      	ldr	r2, [pc, #608]	@ (8003430 <HAL_GPIO_Init+0x2a4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d058      	beq.n	8003286 <HAL_GPIO_Init+0xfa>
 80031d4:	4a96      	ldr	r2, [pc, #600]	@ (8003430 <HAL_GPIO_Init+0x2a4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d86f      	bhi.n	80032ba <HAL_GPIO_Init+0x12e>
 80031da:	4a96      	ldr	r2, [pc, #600]	@ (8003434 <HAL_GPIO_Init+0x2a8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d052      	beq.n	8003286 <HAL_GPIO_Init+0xfa>
 80031e0:	4a94      	ldr	r2, [pc, #592]	@ (8003434 <HAL_GPIO_Init+0x2a8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d869      	bhi.n	80032ba <HAL_GPIO_Init+0x12e>
 80031e6:	4a94      	ldr	r2, [pc, #592]	@ (8003438 <HAL_GPIO_Init+0x2ac>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d04c      	beq.n	8003286 <HAL_GPIO_Init+0xfa>
 80031ec:	4a92      	ldr	r2, [pc, #584]	@ (8003438 <HAL_GPIO_Init+0x2ac>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d863      	bhi.n	80032ba <HAL_GPIO_Init+0x12e>
 80031f2:	4a92      	ldr	r2, [pc, #584]	@ (800343c <HAL_GPIO_Init+0x2b0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d046      	beq.n	8003286 <HAL_GPIO_Init+0xfa>
 80031f8:	4a90      	ldr	r2, [pc, #576]	@ (800343c <HAL_GPIO_Init+0x2b0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d85d      	bhi.n	80032ba <HAL_GPIO_Init+0x12e>
 80031fe:	2b12      	cmp	r3, #18
 8003200:	d82a      	bhi.n	8003258 <HAL_GPIO_Init+0xcc>
 8003202:	2b12      	cmp	r3, #18
 8003204:	d859      	bhi.n	80032ba <HAL_GPIO_Init+0x12e>
 8003206:	a201      	add	r2, pc, #4	@ (adr r2, 800320c <HAL_GPIO_Init+0x80>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	08003287 	.word	0x08003287
 8003210:	08003261 	.word	0x08003261
 8003214:	08003273 	.word	0x08003273
 8003218:	080032b5 	.word	0x080032b5
 800321c:	080032bb 	.word	0x080032bb
 8003220:	080032bb 	.word	0x080032bb
 8003224:	080032bb 	.word	0x080032bb
 8003228:	080032bb 	.word	0x080032bb
 800322c:	080032bb 	.word	0x080032bb
 8003230:	080032bb 	.word	0x080032bb
 8003234:	080032bb 	.word	0x080032bb
 8003238:	080032bb 	.word	0x080032bb
 800323c:	080032bb 	.word	0x080032bb
 8003240:	080032bb 	.word	0x080032bb
 8003244:	080032bb 	.word	0x080032bb
 8003248:	080032bb 	.word	0x080032bb
 800324c:	080032bb 	.word	0x080032bb
 8003250:	08003269 	.word	0x08003269
 8003254:	0800327d 	.word	0x0800327d
 8003258:	4a79      	ldr	r2, [pc, #484]	@ (8003440 <HAL_GPIO_Init+0x2b4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800325e:	e02c      	b.n	80032ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	623b      	str	r3, [r7, #32]
          break;
 8003266:	e029      	b.n	80032bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	3304      	adds	r3, #4
 800326e:	623b      	str	r3, [r7, #32]
          break;
 8003270:	e024      	b.n	80032bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	3308      	adds	r3, #8
 8003278:	623b      	str	r3, [r7, #32]
          break;
 800327a:	e01f      	b.n	80032bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	330c      	adds	r3, #12
 8003282:	623b      	str	r3, [r7, #32]
          break;
 8003284:	e01a      	b.n	80032bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d102      	bne.n	8003294 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800328e:	2304      	movs	r3, #4
 8003290:	623b      	str	r3, [r7, #32]
          break;
 8003292:	e013      	b.n	80032bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800329c:	2308      	movs	r3, #8
 800329e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	611a      	str	r2, [r3, #16]
          break;
 80032a6:	e009      	b.n	80032bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032a8:	2308      	movs	r3, #8
 80032aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	615a      	str	r2, [r3, #20]
          break;
 80032b2:	e003      	b.n	80032bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032b4:	2300      	movs	r3, #0
 80032b6:	623b      	str	r3, [r7, #32]
          break;
 80032b8:	e000      	b.n	80032bc <HAL_GPIO_Init+0x130>
          break;
 80032ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2bff      	cmp	r3, #255	@ 0xff
 80032c0:	d801      	bhi.n	80032c6 <HAL_GPIO_Init+0x13a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	e001      	b.n	80032ca <HAL_GPIO_Init+0x13e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3304      	adds	r3, #4
 80032ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2bff      	cmp	r3, #255	@ 0xff
 80032d0:	d802      	bhi.n	80032d8 <HAL_GPIO_Init+0x14c>
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	e002      	b.n	80032de <HAL_GPIO_Init+0x152>
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	3b08      	subs	r3, #8
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	210f      	movs	r1, #15
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	401a      	ands	r2, r3
 80032f0:	6a39      	ldr	r1, [r7, #32]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	fa01 f303 	lsl.w	r3, r1, r3
 80032f8:	431a      	orrs	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80b1 	beq.w	800346e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800330c:	4b4d      	ldr	r3, [pc, #308]	@ (8003444 <HAL_GPIO_Init+0x2b8>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	4a4c      	ldr	r2, [pc, #304]	@ (8003444 <HAL_GPIO_Init+0x2b8>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6193      	str	r3, [r2, #24]
 8003318:	4b4a      	ldr	r3, [pc, #296]	@ (8003444 <HAL_GPIO_Init+0x2b8>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003324:	4a48      	ldr	r2, [pc, #288]	@ (8003448 <HAL_GPIO_Init+0x2bc>)
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	089b      	lsrs	r3, r3, #2
 800332a:	3302      	adds	r3, #2
 800332c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003330:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	220f      	movs	r2, #15
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4013      	ands	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a40      	ldr	r2, [pc, #256]	@ (800344c <HAL_GPIO_Init+0x2c0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d013      	beq.n	8003378 <HAL_GPIO_Init+0x1ec>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a3f      	ldr	r2, [pc, #252]	@ (8003450 <HAL_GPIO_Init+0x2c4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00d      	beq.n	8003374 <HAL_GPIO_Init+0x1e8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a3e      	ldr	r2, [pc, #248]	@ (8003454 <HAL_GPIO_Init+0x2c8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <HAL_GPIO_Init+0x1e4>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a3d      	ldr	r2, [pc, #244]	@ (8003458 <HAL_GPIO_Init+0x2cc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d101      	bne.n	800336c <HAL_GPIO_Init+0x1e0>
 8003368:	2303      	movs	r3, #3
 800336a:	e006      	b.n	800337a <HAL_GPIO_Init+0x1ee>
 800336c:	2304      	movs	r3, #4
 800336e:	e004      	b.n	800337a <HAL_GPIO_Init+0x1ee>
 8003370:	2302      	movs	r3, #2
 8003372:	e002      	b.n	800337a <HAL_GPIO_Init+0x1ee>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_GPIO_Init+0x1ee>
 8003378:	2300      	movs	r3, #0
 800337a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800337c:	f002 0203 	and.w	r2, r2, #3
 8003380:	0092      	lsls	r2, r2, #2
 8003382:	4093      	lsls	r3, r2
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800338a:	492f      	ldr	r1, [pc, #188]	@ (8003448 <HAL_GPIO_Init+0x2bc>)
 800338c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	3302      	adds	r3, #2
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d006      	beq.n	80033b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033a4:	4b2d      	ldr	r3, [pc, #180]	@ (800345c <HAL_GPIO_Init+0x2d0>)
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	492c      	ldr	r1, [pc, #176]	@ (800345c <HAL_GPIO_Init+0x2d0>)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	608b      	str	r3, [r1, #8]
 80033b0:	e006      	b.n	80033c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033b2:	4b2a      	ldr	r3, [pc, #168]	@ (800345c <HAL_GPIO_Init+0x2d0>)
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	4928      	ldr	r1, [pc, #160]	@ (800345c <HAL_GPIO_Init+0x2d0>)
 80033bc:	4013      	ands	r3, r2
 80033be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d006      	beq.n	80033da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033cc:	4b23      	ldr	r3, [pc, #140]	@ (800345c <HAL_GPIO_Init+0x2d0>)
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	4922      	ldr	r1, [pc, #136]	@ (800345c <HAL_GPIO_Init+0x2d0>)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60cb      	str	r3, [r1, #12]
 80033d8:	e006      	b.n	80033e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033da:	4b20      	ldr	r3, [pc, #128]	@ (800345c <HAL_GPIO_Init+0x2d0>)
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	491e      	ldr	r1, [pc, #120]	@ (800345c <HAL_GPIO_Init+0x2d0>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d006      	beq.n	8003402 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033f4:	4b19      	ldr	r3, [pc, #100]	@ (800345c <HAL_GPIO_Init+0x2d0>)
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4918      	ldr	r1, [pc, #96]	@ (800345c <HAL_GPIO_Init+0x2d0>)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
 8003400:	e006      	b.n	8003410 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003402:	4b16      	ldr	r3, [pc, #88]	@ (800345c <HAL_GPIO_Init+0x2d0>)
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	43db      	mvns	r3, r3
 800340a:	4914      	ldr	r1, [pc, #80]	@ (800345c <HAL_GPIO_Init+0x2d0>)
 800340c:	4013      	ands	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d021      	beq.n	8003460 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800341c:	4b0f      	ldr	r3, [pc, #60]	@ (800345c <HAL_GPIO_Init+0x2d0>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	490e      	ldr	r1, [pc, #56]	@ (800345c <HAL_GPIO_Init+0x2d0>)
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	600b      	str	r3, [r1, #0]
 8003428:	e021      	b.n	800346e <HAL_GPIO_Init+0x2e2>
 800342a:	bf00      	nop
 800342c:	10320000 	.word	0x10320000
 8003430:	10310000 	.word	0x10310000
 8003434:	10220000 	.word	0x10220000
 8003438:	10210000 	.word	0x10210000
 800343c:	10120000 	.word	0x10120000
 8003440:	10110000 	.word	0x10110000
 8003444:	40021000 	.word	0x40021000
 8003448:	40010000 	.word	0x40010000
 800344c:	40010800 	.word	0x40010800
 8003450:	40010c00 	.word	0x40010c00
 8003454:	40011000 	.word	0x40011000
 8003458:	40011400 	.word	0x40011400
 800345c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003460:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <HAL_GPIO_Init+0x304>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	43db      	mvns	r3, r3
 8003468:	4909      	ldr	r1, [pc, #36]	@ (8003490 <HAL_GPIO_Init+0x304>)
 800346a:	4013      	ands	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	3301      	adds	r3, #1
 8003472:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	fa22 f303 	lsr.w	r3, r2, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	f47f ae8e 	bne.w	80031a0 <HAL_GPIO_Init+0x14>
  }
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	372c      	adds	r7, #44	@ 0x2c
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	40010400 	.word	0x40010400

08003494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	887b      	ldrh	r3, [r7, #2]
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
 80034b0:	e001      	b.n	80034b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr

080034c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	807b      	strh	r3, [r7, #2]
 80034ce:	4613      	mov	r3, r2
 80034d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034d2:	787b      	ldrb	r3, [r7, #1]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d8:	887a      	ldrh	r2, [r7, #2]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034de:	e003      	b.n	80034e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034e0:	887b      	ldrh	r3, [r7, #2]
 80034e2:	041a      	lsls	r2, r3, #16
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	611a      	str	r2, [r3, #16]
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034fe:	4b08      	ldr	r3, [pc, #32]	@ (8003520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d006      	beq.n	8003518 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800350a:	4a05      	ldr	r2, [pc, #20]	@ (8003520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd fcf0 	bl	8000ef8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40010400 	.word	0x40010400

08003524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e272      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8087 	beq.w	8003652 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003544:	4b92      	ldr	r3, [pc, #584]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	2b04      	cmp	r3, #4
 800354e:	d00c      	beq.n	800356a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003550:	4b8f      	ldr	r3, [pc, #572]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d112      	bne.n	8003582 <HAL_RCC_OscConfig+0x5e>
 800355c:	4b8c      	ldr	r3, [pc, #560]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003568:	d10b      	bne.n	8003582 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356a:	4b89      	ldr	r3, [pc, #548]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d06c      	beq.n	8003650 <HAL_RCC_OscConfig+0x12c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d168      	bne.n	8003650 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e24c      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800358a:	d106      	bne.n	800359a <HAL_RCC_OscConfig+0x76>
 800358c:	4b80      	ldr	r3, [pc, #512]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a7f      	ldr	r2, [pc, #508]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	e02e      	b.n	80035f8 <HAL_RCC_OscConfig+0xd4>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10c      	bne.n	80035bc <HAL_RCC_OscConfig+0x98>
 80035a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a7a      	ldr	r2, [pc, #488]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	4b78      	ldr	r3, [pc, #480]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a77      	ldr	r2, [pc, #476]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e01d      	b.n	80035f8 <HAL_RCC_OscConfig+0xd4>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCC_OscConfig+0xbc>
 80035c6:	4b72      	ldr	r3, [pc, #456]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a71      	ldr	r2, [pc, #452]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	e00b      	b.n	80035f8 <HAL_RCC_OscConfig+0xd4>
 80035e0:	4b6b      	ldr	r3, [pc, #428]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4b68      	ldr	r3, [pc, #416]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a67      	ldr	r2, [pc, #412]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d013      	beq.n	8003628 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fd ff6a 	bl	80014d8 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003608:	f7fd ff66 	bl	80014d8 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	@ 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e200      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	4b5d      	ldr	r3, [pc, #372]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0xe4>
 8003626:	e014      	b.n	8003652 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fd ff56 	bl	80014d8 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003630:	f7fd ff52 	bl	80014d8 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	@ 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e1ec      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	4b53      	ldr	r3, [pc, #332]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x10c>
 800364e:	e000      	b.n	8003652 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d063      	beq.n	8003726 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800365e:	4b4c      	ldr	r3, [pc, #304]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800366a:	4b49      	ldr	r3, [pc, #292]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b08      	cmp	r3, #8
 8003674:	d11c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x18c>
 8003676:	4b46      	ldr	r3, [pc, #280]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d116      	bne.n	80036b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003682:	4b43      	ldr	r3, [pc, #268]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_RCC_OscConfig+0x176>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d001      	beq.n	800369a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e1c0      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369a:	4b3d      	ldr	r3, [pc, #244]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4939      	ldr	r1, [pc, #228]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ae:	e03a      	b.n	8003726 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d020      	beq.n	80036fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b8:	4b36      	ldr	r3, [pc, #216]	@ (8003794 <HAL_RCC_OscConfig+0x270>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fd ff0b 	bl	80014d8 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c6:	f7fd ff07 	bl	80014d8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e1a1      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4927      	ldr	r1, [pc, #156]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]
 80036f8:	e015      	b.n	8003726 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fa:	4b26      	ldr	r3, [pc, #152]	@ (8003794 <HAL_RCC_OscConfig+0x270>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fd feea 	bl	80014d8 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003708:	f7fd fee6 	bl	80014d8 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e180      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	4b1d      	ldr	r3, [pc, #116]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d03a      	beq.n	80037a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d019      	beq.n	800376e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373a:	4b17      	ldr	r3, [pc, #92]	@ (8003798 <HAL_RCC_OscConfig+0x274>)
 800373c:	2201      	movs	r2, #1
 800373e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003740:	f7fd feca 	bl	80014d8 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003748:	f7fd fec6 	bl	80014d8 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e160      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <HAL_RCC_OscConfig+0x26c>)
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003766:	2001      	movs	r0, #1
 8003768:	f000 face 	bl	8003d08 <RCC_Delay>
 800376c:	e01c      	b.n	80037a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376e:	4b0a      	ldr	r3, [pc, #40]	@ (8003798 <HAL_RCC_OscConfig+0x274>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003774:	f7fd feb0 	bl	80014d8 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800377a:	e00f      	b.n	800379c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377c:	f7fd feac 	bl	80014d8 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d908      	bls.n	800379c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e146      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	42420000 	.word	0x42420000
 8003798:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800379c:	4b92      	ldr	r3, [pc, #584]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e9      	bne.n	800377c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80a6 	beq.w	8003902 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b6:	2300      	movs	r3, #0
 80037b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ba:	4b8b      	ldr	r3, [pc, #556]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10d      	bne.n	80037e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c6:	4b88      	ldr	r3, [pc, #544]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	4a87      	ldr	r2, [pc, #540]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037d0:	61d3      	str	r3, [r2, #28]
 80037d2:	4b85      	ldr	r3, [pc, #532]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037de:	2301      	movs	r3, #1
 80037e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e2:	4b82      	ldr	r3, [pc, #520]	@ (80039ec <HAL_RCC_OscConfig+0x4c8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d118      	bne.n	8003820 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ee:	4b7f      	ldr	r3, [pc, #508]	@ (80039ec <HAL_RCC_OscConfig+0x4c8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a7e      	ldr	r2, [pc, #504]	@ (80039ec <HAL_RCC_OscConfig+0x4c8>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037fa:	f7fd fe6d 	bl	80014d8 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003802:	f7fd fe69 	bl	80014d8 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b64      	cmp	r3, #100	@ 0x64
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e103      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003814:	4b75      	ldr	r3, [pc, #468]	@ (80039ec <HAL_RCC_OscConfig+0x4c8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d106      	bne.n	8003836 <HAL_RCC_OscConfig+0x312>
 8003828:	4b6f      	ldr	r3, [pc, #444]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	4a6e      	ldr	r2, [pc, #440]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	6213      	str	r3, [r2, #32]
 8003834:	e02d      	b.n	8003892 <HAL_RCC_OscConfig+0x36e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10c      	bne.n	8003858 <HAL_RCC_OscConfig+0x334>
 800383e:	4b6a      	ldr	r3, [pc, #424]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4a69      	ldr	r2, [pc, #420]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	6213      	str	r3, [r2, #32]
 800384a:	4b67      	ldr	r3, [pc, #412]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4a66      	ldr	r2, [pc, #408]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 8003850:	f023 0304 	bic.w	r3, r3, #4
 8003854:	6213      	str	r3, [r2, #32]
 8003856:	e01c      	b.n	8003892 <HAL_RCC_OscConfig+0x36e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b05      	cmp	r3, #5
 800385e:	d10c      	bne.n	800387a <HAL_RCC_OscConfig+0x356>
 8003860:	4b61      	ldr	r3, [pc, #388]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	4a60      	ldr	r2, [pc, #384]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 8003866:	f043 0304 	orr.w	r3, r3, #4
 800386a:	6213      	str	r3, [r2, #32]
 800386c:	4b5e      	ldr	r3, [pc, #376]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	4a5d      	ldr	r2, [pc, #372]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 8003872:	f043 0301 	orr.w	r3, r3, #1
 8003876:	6213      	str	r3, [r2, #32]
 8003878:	e00b      	b.n	8003892 <HAL_RCC_OscConfig+0x36e>
 800387a:	4b5b      	ldr	r3, [pc, #364]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4a5a      	ldr	r2, [pc, #360]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	6213      	str	r3, [r2, #32]
 8003886:	4b58      	ldr	r3, [pc, #352]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4a57      	ldr	r2, [pc, #348]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	f023 0304 	bic.w	r3, r3, #4
 8003890:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d015      	beq.n	80038c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389a:	f7fd fe1d 	bl	80014d8 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7fd fe19 	bl	80014d8 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e0b1      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b8:	4b4b      	ldr	r3, [pc, #300]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ee      	beq.n	80038a2 <HAL_RCC_OscConfig+0x37e>
 80038c4:	e014      	b.n	80038f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c6:	f7fd fe07 	bl	80014d8 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038cc:	e00a      	b.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fd fe03 	bl	80014d8 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e09b      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e4:	4b40      	ldr	r3, [pc, #256]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1ee      	bne.n	80038ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d105      	bne.n	8003902 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f6:	4b3c      	ldr	r3, [pc, #240]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	4a3b      	ldr	r2, [pc, #236]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003900:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8087 	beq.w	8003a1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800390c:	4b36      	ldr	r3, [pc, #216]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 030c 	and.w	r3, r3, #12
 8003914:	2b08      	cmp	r3, #8
 8003916:	d061      	beq.n	80039dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d146      	bne.n	80039ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003920:	4b33      	ldr	r3, [pc, #204]	@ (80039f0 <HAL_RCC_OscConfig+0x4cc>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fd fdd7 	bl	80014d8 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392e:	f7fd fdd3 	bl	80014d8 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e06d      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003940:	4b29      	ldr	r3, [pc, #164]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003954:	d108      	bne.n	8003968 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003956:	4b24      	ldr	r3, [pc, #144]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	4921      	ldr	r1, [pc, #132]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003968:	4b1f      	ldr	r3, [pc, #124]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a19      	ldr	r1, [r3, #32]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003978:	430b      	orrs	r3, r1
 800397a:	491b      	ldr	r1, [pc, #108]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 800397c:	4313      	orrs	r3, r2
 800397e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003980:	4b1b      	ldr	r3, [pc, #108]	@ (80039f0 <HAL_RCC_OscConfig+0x4cc>)
 8003982:	2201      	movs	r2, #1
 8003984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003986:	f7fd fda7 	bl	80014d8 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398e:	f7fd fda3 	bl	80014d8 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e03d      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039a0:	4b11      	ldr	r3, [pc, #68]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCC_OscConfig+0x46a>
 80039ac:	e035      	b.n	8003a1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ae:	4b10      	ldr	r3, [pc, #64]	@ (80039f0 <HAL_RCC_OscConfig+0x4cc>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fd fd90 	bl	80014d8 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fd fd8c 	bl	80014d8 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e026      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <HAL_RCC_OscConfig+0x4c4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x498>
 80039da:	e01e      	b.n	8003a1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e019      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40007000 	.word	0x40007000
 80039f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <HAL_RCC_OscConfig+0x500>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d001      	beq.n	8003a1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000

08003a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0d0      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d910      	bls.n	8003a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b67      	ldr	r3, [pc, #412]	@ (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 0207 	bic.w	r2, r3, #7
 8003a52:	4965      	ldr	r1, [pc, #404]	@ (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b63      	ldr	r3, [pc, #396]	@ (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0b8      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d020      	beq.n	8003aba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a84:	4b59      	ldr	r3, [pc, #356]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a58      	ldr	r2, [pc, #352]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a9c:	4b53      	ldr	r3, [pc, #332]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a52      	ldr	r2, [pc, #328]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003aa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa8:	4b50      	ldr	r3, [pc, #320]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	494d      	ldr	r1, [pc, #308]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d040      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	4b47      	ldr	r3, [pc, #284]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d115      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e07f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d107      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae6:	4b41      	ldr	r3, [pc, #260]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e073      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af6:	4b3d      	ldr	r3, [pc, #244]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e06b      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b06:	4b39      	ldr	r3, [pc, #228]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f023 0203 	bic.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4936      	ldr	r1, [pc, #216]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b18:	f7fd fcde 	bl	80014d8 <HAL_GetTick>
 8003b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b20:	f7fd fcda 	bl	80014d8 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e053      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b36:	4b2d      	ldr	r3, [pc, #180]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 020c 	and.w	r2, r3, #12
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d1eb      	bne.n	8003b20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b48:	4b27      	ldr	r3, [pc, #156]	@ (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d210      	bcs.n	8003b78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b24      	ldr	r3, [pc, #144]	@ (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 0207 	bic.w	r2, r3, #7
 8003b5e:	4922      	ldr	r1, [pc, #136]	@ (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b20      	ldr	r3, [pc, #128]	@ (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e032      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b84:	4b19      	ldr	r3, [pc, #100]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4916      	ldr	r1, [pc, #88]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ba2:	4b12      	ldr	r3, [pc, #72]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	490e      	ldr	r1, [pc, #56]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bb6:	f000 f821 	bl	8003bfc <HAL_RCC_GetSysClockFreq>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	490a      	ldr	r1, [pc, #40]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	5ccb      	ldrb	r3, [r1, r3]
 8003bca:	fa22 f303 	lsr.w	r3, r2, r3
 8003bce:	4a09      	ldr	r2, [pc, #36]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1cc>)
 8003bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bd2:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1d0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd fc3c 	bl	8001454 <HAL_InitTick>

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40022000 	.word	0x40022000
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	08005514 	.word	0x08005514
 8003bf4:	20000000 	.word	0x20000000
 8003bf8:	20000004 	.word	0x20000004

08003bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c16:	4b1e      	ldr	r3, [pc, #120]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d002      	beq.n	8003c2c <HAL_RCC_GetSysClockFreq+0x30>
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d003      	beq.n	8003c32 <HAL_RCC_GetSysClockFreq+0x36>
 8003c2a:	e027      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c2c:	4b19      	ldr	r3, [pc, #100]	@ (8003c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c2e:	613b      	str	r3, [r7, #16]
      break;
 8003c30:	e027      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	0c9b      	lsrs	r3, r3, #18
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	4a17      	ldr	r2, [pc, #92]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c3c:	5cd3      	ldrb	r3, [r2, r3]
 8003c3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d010      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c4a:	4b11      	ldr	r3, [pc, #68]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	0c5b      	lsrs	r3, r3, #17
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	4a11      	ldr	r2, [pc, #68]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c56:	5cd3      	ldrb	r3, [r2, r3]
 8003c58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c5e:	fb03 f202 	mul.w	r2, r3, r2
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	e004      	b.n	8003c76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
 8003c74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	613b      	str	r3, [r7, #16]
      break;
 8003c7a:	e002      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c7c:	4b05      	ldr	r3, [pc, #20]	@ (8003c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c7e:	613b      	str	r3, [r7, #16]
      break;
 8003c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c82:	693b      	ldr	r3, [r7, #16]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000
 8003c94:	007a1200 	.word	0x007a1200
 8003c98:	0800552c 	.word	0x0800552c
 8003c9c:	0800553c 	.word	0x0800553c
 8003ca0:	003d0900 	.word	0x003d0900

08003ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca8:	4b02      	ldr	r3, [pc, #8]	@ (8003cb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr
 8003cb4:	20000000 	.word	0x20000000

08003cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cbc:	f7ff fff2 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b05      	ldr	r3, [pc, #20]	@ (8003cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	0a1b      	lsrs	r3, r3, #8
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4903      	ldr	r1, [pc, #12]	@ (8003cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	08005524 	.word	0x08005524

08003ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ce4:	f7ff ffde 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	4b05      	ldr	r3, [pc, #20]	@ (8003d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	0adb      	lsrs	r3, r3, #11
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	4903      	ldr	r1, [pc, #12]	@ (8003d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf6:	5ccb      	ldrb	r3, [r1, r3]
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40021000 	.word	0x40021000
 8003d04:	08005524 	.word	0x08005524

08003d08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d10:	4b0a      	ldr	r3, [pc, #40]	@ (8003d3c <RCC_Delay+0x34>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a0a      	ldr	r2, [pc, #40]	@ (8003d40 <RCC_Delay+0x38>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	0a5b      	lsrs	r3, r3, #9
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d24:	bf00      	nop
  }
  while (Delay --);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1e5a      	subs	r2, r3, #1
 8003d2a:	60fa      	str	r2, [r7, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f9      	bne.n	8003d24 <RCC_Delay+0x1c>
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	20000000 	.word	0x20000000
 8003d40:	10624dd3 	.word	0x10624dd3

08003d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d07d      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d60:	2300      	movs	r3, #0
 8003d62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d64:	4b4f      	ldr	r3, [pc, #316]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10d      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d70:	4b4c      	ldr	r3, [pc, #304]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	4a4b      	ldr	r2, [pc, #300]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d7a:	61d3      	str	r3, [r2, #28]
 8003d7c:	4b49      	ldr	r3, [pc, #292]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8c:	4b46      	ldr	r3, [pc, #280]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d118      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d98:	4b43      	ldr	r3, [pc, #268]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a42      	ldr	r2, [pc, #264]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da4:	f7fd fb98 	bl	80014d8 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003daa:	e008      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dac:	f7fd fb94 	bl	80014d8 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	@ 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e06d      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dca:	4b36      	ldr	r3, [pc, #216]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d02e      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d027      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003de8:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003df0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003df2:	4b2e      	ldr	r3, [pc, #184]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003df8:	4b2c      	ldr	r3, [pc, #176]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dfe:	4a29      	ldr	r2, [pc, #164]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d014      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0e:	f7fd fb63 	bl	80014d8 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e14:	e00a      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fd fb5f 	bl	80014d8 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e036      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ee      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e38:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4917      	ldr	r1, [pc, #92]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e4a:	7dfb      	ldrb	r3, [r7, #23]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e50:	4b14      	ldr	r3, [pc, #80]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	4a13      	ldr	r2, [pc, #76]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e68:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	490b      	ldr	r1, [pc, #44]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e86:	4b07      	ldr	r3, [pc, #28]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	4904      	ldr	r1, [pc, #16]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	42420440 	.word	0x42420440

08003eb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e042      	b.n	8003f48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd f976 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2224      	movs	r2, #36	@ 0x24
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ef2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fd63 	bl	80049c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	@ 0x28
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d175      	bne.n	800405c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_UART_Transmit+0x2c>
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e06e      	b.n	800405e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2221      	movs	r2, #33	@ 0x21
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f8e:	f7fd faa3 	bl	80014d8 <HAL_GetTick>
 8003f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	88fa      	ldrh	r2, [r7, #6]
 8003f98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	88fa      	ldrh	r2, [r7, #6]
 8003f9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa8:	d108      	bne.n	8003fbc <HAL_UART_Transmit+0x6c>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d104      	bne.n	8003fbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	e003      	b.n	8003fc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fc4:	e02e      	b.n	8004024 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2180      	movs	r1, #128	@ 0x80
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fb01 	bl	80045d8 <UART_WaitOnFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e03a      	b.n	800405e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10b      	bne.n	8004006 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ffc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	3302      	adds	r3, #2
 8004002:	61bb      	str	r3, [r7, #24]
 8004004:	e007      	b.n	8004016 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	781a      	ldrb	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	3301      	adds	r3, #1
 8004014:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1cb      	bne.n	8003fc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2200      	movs	r2, #0
 8004036:	2140      	movs	r1, #64	@ 0x40
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 facd 	bl	80045d8 <UART_WaitOnFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e006      	b.n	800405e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	e000      	b.n	800405e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800405c:	2302      	movs	r3, #2
  }
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b0ba      	sub	sp, #232	@ 0xe8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800408e:	2300      	movs	r3, #0
 8004090:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800409a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80040a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10f      	bne.n	80040ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d009      	beq.n	80040ce <HAL_UART_IRQHandler+0x66>
 80040ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fbbc 	bl	8004844 <UART_Receive_IT>
      return;
 80040cc:	e25b      	b.n	8004586 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80de 	beq.w	8004294 <HAL_UART_IRQHandler+0x22c>
 80040d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80d1 	beq.w	8004294 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00b      	beq.n	8004116 <HAL_UART_IRQHandler+0xae>
 80040fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410e:	f043 0201 	orr.w	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_UART_IRQHandler+0xd2>
 8004122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	f043 0202 	orr.w	r2, r3, #2
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800413a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <HAL_UART_IRQHandler+0xf6>
 8004146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	f043 0204 	orr.w	r2, r3, #4
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800415e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d011      	beq.n	800418e <HAL_UART_IRQHandler+0x126>
 800416a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d105      	bne.n	8004182 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d005      	beq.n	800418e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004186:	f043 0208 	orr.w	r2, r3, #8
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 81f2 	beq.w	800457c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_UART_IRQHandler+0x14e>
 80041a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fb47 	bl	8004844 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d103      	bne.n	80041e2 <HAL_UART_IRQHandler+0x17a>
 80041da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d04f      	beq.n	8004282 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fa51 	bl	800468a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d041      	beq.n	800427a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3314      	adds	r3, #20
 80041fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004204:	e853 3f00 	ldrex	r3, [r3]
 8004208:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800420c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004210:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3314      	adds	r3, #20
 800421e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004222:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004226:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800422e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800423a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1d9      	bne.n	80041f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d013      	beq.n	8004272 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424e:	4a7e      	ldr	r2, [pc, #504]	@ (8004448 <HAL_UART_IRQHandler+0x3e0>)
 8004250:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe fdec 	bl	8002e34 <HAL_DMA_Abort_IT>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d016      	beq.n	8004290 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800426c:	4610      	mov	r0, r2
 800426e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004270:	e00e      	b.n	8004290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f99c 	bl	80045b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004278:	e00a      	b.n	8004290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f998 	bl	80045b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004280:	e006      	b.n	8004290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f994 	bl	80045b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800428e:	e175      	b.n	800457c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004290:	bf00      	nop
    return;
 8004292:	e173      	b.n	800457c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004298:	2b01      	cmp	r3, #1
 800429a:	f040 814f 	bne.w	800453c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800429e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 8148 	beq.w	800453c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 8141 	beq.w	800453c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80b6 	beq.w	800444c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8145 	beq.w	8004580 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042fe:	429a      	cmp	r2, r3
 8004300:	f080 813e 	bcs.w	8004580 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800430a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b20      	cmp	r3, #32
 8004314:	f000 8088 	beq.w	8004428 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800432e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004332:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004336:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	330c      	adds	r3, #12
 8004340:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004344:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004348:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004350:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800435c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1d9      	bne.n	8004318 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3314      	adds	r3, #20
 800436a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004374:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3314      	adds	r3, #20
 8004384:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004388:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800438c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004390:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800439a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e1      	bne.n	8004364 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3314      	adds	r3, #20
 80043a6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80043b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3314      	adds	r3, #20
 80043c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80043c4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80043c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80043cc:	e841 2300 	strex	r3, r2, [r1]
 80043d0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80043d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e3      	bne.n	80043a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043f8:	f023 0310 	bic.w	r3, r3, #16
 80043fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	330c      	adds	r3, #12
 8004406:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800440a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800440c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004410:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e3      	bne.n	80043e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fcca 	bl	8002dbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004436:	b29b      	uxth	r3, r3
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	b29b      	uxth	r3, r3
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f8bf 	bl	80045c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004444:	e09c      	b.n	8004580 <HAL_UART_IRQHandler+0x518>
 8004446:	bf00      	nop
 8004448:	0800474f 	.word	0x0800474f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004454:	b29b      	uxth	r3, r3
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 808e 	beq.w	8004584 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8089 	beq.w	8004584 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	330c      	adds	r3, #12
 8004478:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004488:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	330c      	adds	r3, #12
 8004492:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004496:	647a      	str	r2, [r7, #68]	@ 0x44
 8004498:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800449c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e3      	bne.n	8004472 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3314      	adds	r3, #20
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	623b      	str	r3, [r7, #32]
   return(result);
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3314      	adds	r3, #20
 80044ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80044d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e3      	bne.n	80044aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0310 	bic.w	r3, r3, #16
 8004506:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	330c      	adds	r3, #12
 8004510:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004514:	61fa      	str	r2, [r7, #28]
 8004516:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	69b9      	ldr	r1, [r7, #24]
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	617b      	str	r3, [r7, #20]
   return(result);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e3      	bne.n	80044f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800452e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004532:	4619      	mov	r1, r3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f844 	bl	80045c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800453a:	e023      	b.n	8004584 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800453c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004544:	2b00      	cmp	r3, #0
 8004546:	d009      	beq.n	800455c <HAL_UART_IRQHandler+0x4f4>
 8004548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800454c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f90e 	bl	8004776 <UART_Transmit_IT>
    return;
 800455a:	e014      	b.n	8004586 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800455c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00e      	beq.n	8004586 <HAL_UART_IRQHandler+0x51e>
 8004568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800456c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f94d 	bl	8004814 <UART_EndTransmit_IT>
    return;
 800457a:	e004      	b.n	8004586 <HAL_UART_IRQHandler+0x51e>
    return;
 800457c:	bf00      	nop
 800457e:	e002      	b.n	8004586 <HAL_UART_IRQHandler+0x51e>
      return;
 8004580:	bf00      	nop
 8004582:	e000      	b.n	8004586 <HAL_UART_IRQHandler+0x51e>
      return;
 8004584:	bf00      	nop
  }
}
 8004586:	37e8      	adds	r7, #232	@ 0xe8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr

080045c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	460b      	mov	r3, r1
 80045cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr

080045d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e8:	e03b      	b.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d037      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f2:	f7fc ff71 	bl	80014d8 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	6a3a      	ldr	r2, [r7, #32]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <UART_WaitOnFlagUntilTimeout+0x30>
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e03a      	b.n	8004682 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d023      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b80      	cmp	r3, #128	@ 0x80
 800461e:	d020      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b40      	cmp	r3, #64	@ 0x40
 8004624:	d01d      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b08      	cmp	r3, #8
 8004632:	d116      	bne.n	8004662 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f81d 	bl	800468a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2208      	movs	r2, #8
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e00f      	b.n	8004682 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4013      	ands	r3, r2
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	bf0c      	ite	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2300      	movne	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	429a      	cmp	r2, r3
 800467e:	d0b4      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800468a:	b480      	push	{r7}
 800468c:	b095      	sub	sp, #84	@ 0x54
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	330c      	adds	r3, #12
 80046b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80046b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e5      	bne.n	8004692 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3314      	adds	r3, #20
 80046cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e5      	bne.n	80046c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d119      	bne.n	8004736 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	60bb      	str	r3, [r7, #8]
   return(result);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	647b      	str	r3, [r7, #68]	@ 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004722:	61ba      	str	r2, [r7, #24]
 8004724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	613b      	str	r3, [r7, #16]
   return(result);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e5      	bne.n	8004702 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004744:	bf00      	nop
 8004746:	3754      	adds	r7, #84	@ 0x54
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr

0800474e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff ff21 	bl	80045b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b21      	cmp	r3, #33	@ 0x21
 8004788:	d13e      	bne.n	8004808 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004792:	d114      	bne.n	80047be <UART_Transmit_IT+0x48>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d110      	bne.n	80047be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	1c9a      	adds	r2, r3, #2
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	621a      	str	r2, [r3, #32]
 80047bc:	e008      	b.n	80047d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	1c59      	adds	r1, r3, #1
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6211      	str	r1, [r2, #32]
 80047c8:	781a      	ldrb	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29b      	uxth	r3, r3
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	4619      	mov	r1, r3
 80047de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10f      	bne.n	8004804 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004802:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800482a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff fea9 	bl	800458c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08c      	sub	sp, #48	@ 0x30
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b22      	cmp	r3, #34	@ 0x22
 8004856:	f040 80ae 	bne.w	80049b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004862:	d117      	bne.n	8004894 <UART_Receive_IT+0x50>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d113      	bne.n	8004894 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004874:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	b29b      	uxth	r3, r3
 800487e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004882:	b29a      	uxth	r2, r3
 8004884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004886:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488c:	1c9a      	adds	r2, r3, #2
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	629a      	str	r2, [r3, #40]	@ 0x28
 8004892:	e026      	b.n	80048e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004898:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a6:	d007      	beq.n	80048b8 <UART_Receive_IT+0x74>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <UART_Receive_IT+0x82>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d106      	bne.n	80048c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	e008      	b.n	80048d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	4619      	mov	r1, r3
 80048f0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d15d      	bne.n	80049b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0220 	bic.w	r2, r2, #32
 8004904:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004914:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	2b01      	cmp	r3, #1
 800493a:	d135      	bne.n	80049a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	613b      	str	r3, [r7, #16]
   return(result);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f023 0310 	bic.w	r3, r3, #16
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004962:	623a      	str	r2, [r7, #32]
 8004964:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	69f9      	ldr	r1, [r7, #28]
 8004968:	6a3a      	ldr	r2, [r7, #32]
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e5      	bne.n	8004942 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b10      	cmp	r3, #16
 8004982:	d10a      	bne.n	800499a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800499e:	4619      	mov	r1, r3
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff fe0e 	bl	80045c2 <HAL_UARTEx_RxEventCallback>
 80049a6:	e002      	b.n	80049ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff fdf8 	bl	800459e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e002      	b.n	80049b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e000      	b.n	80049b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
  }
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3730      	adds	r7, #48	@ 0x30
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80049fa:	f023 030c 	bic.w	r3, r3, #12
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	68b9      	ldr	r1, [r7, #8]
 8004a04:	430b      	orrs	r3, r1
 8004a06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a2c      	ldr	r2, [pc, #176]	@ (8004ad4 <UART_SetConfig+0x114>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d103      	bne.n	8004a30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a28:	f7ff f95a 	bl	8003ce0 <HAL_RCC_GetPCLK2Freq>
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	e002      	b.n	8004a36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a30:	f7ff f942 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 8004a34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009a      	lsls	r2, r3, #2
 8004a40:	441a      	add	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	4a22      	ldr	r2, [pc, #136]	@ (8004ad8 <UART_SetConfig+0x118>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	0119      	lsls	r1, r3, #4
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009a      	lsls	r2, r3, #2
 8004a60:	441a      	add	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad8 <UART_SetConfig+0x118>)
 8004a6e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	2064      	movs	r0, #100	@ 0x64
 8004a76:	fb00 f303 	mul.w	r3, r0, r3
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	3332      	adds	r3, #50	@ 0x32
 8004a80:	4a15      	ldr	r2, [pc, #84]	@ (8004ad8 <UART_SetConfig+0x118>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a8c:	4419      	add	r1, r3
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	009a      	lsls	r2, r3, #2
 8004a98:	441a      	add	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad8 <UART_SetConfig+0x118>)
 8004aa6:	fba3 0302 	umull	r0, r3, r3, r2
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	2064      	movs	r0, #100	@ 0x64
 8004aae:	fb00 f303 	mul.w	r3, r0, r3
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	3332      	adds	r3, #50	@ 0x32
 8004ab8:	4a07      	ldr	r2, [pc, #28]	@ (8004ad8 <UART_SetConfig+0x118>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	f003 020f 	and.w	r2, r3, #15
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	440a      	add	r2, r1
 8004aca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40013800 	.word	0x40013800
 8004ad8:	51eb851f 	.word	0x51eb851f

08004adc <malloc>:
 8004adc:	4b02      	ldr	r3, [pc, #8]	@ (8004ae8 <malloc+0xc>)
 8004ade:	4601      	mov	r1, r0
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	f000 b82d 	b.w	8004b40 <_malloc_r>
 8004ae6:	bf00      	nop
 8004ae8:	2000000c 	.word	0x2000000c

08004aec <free>:
 8004aec:	4b02      	ldr	r3, [pc, #8]	@ (8004af8 <free+0xc>)
 8004aee:	4601      	mov	r1, r0
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	f000 b929 	b.w	8004d48 <_free_r>
 8004af6:	bf00      	nop
 8004af8:	2000000c 	.word	0x2000000c

08004afc <sbrk_aligned>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	4e0f      	ldr	r6, [pc, #60]	@ (8004b3c <sbrk_aligned+0x40>)
 8004b00:	460c      	mov	r4, r1
 8004b02:	6831      	ldr	r1, [r6, #0]
 8004b04:	4605      	mov	r5, r0
 8004b06:	b911      	cbnz	r1, 8004b0e <sbrk_aligned+0x12>
 8004b08:	f000 f8e2 	bl	8004cd0 <_sbrk_r>
 8004b0c:	6030      	str	r0, [r6, #0]
 8004b0e:	4621      	mov	r1, r4
 8004b10:	4628      	mov	r0, r5
 8004b12:	f000 f8dd 	bl	8004cd0 <_sbrk_r>
 8004b16:	1c43      	adds	r3, r0, #1
 8004b18:	d103      	bne.n	8004b22 <sbrk_aligned+0x26>
 8004b1a:	f04f 34ff 	mov.w	r4, #4294967295
 8004b1e:	4620      	mov	r0, r4
 8004b20:	bd70      	pop	{r4, r5, r6, pc}
 8004b22:	1cc4      	adds	r4, r0, #3
 8004b24:	f024 0403 	bic.w	r4, r4, #3
 8004b28:	42a0      	cmp	r0, r4
 8004b2a:	d0f8      	beq.n	8004b1e <sbrk_aligned+0x22>
 8004b2c:	1a21      	subs	r1, r4, r0
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f000 f8ce 	bl	8004cd0 <_sbrk_r>
 8004b34:	3001      	adds	r0, #1
 8004b36:	d1f2      	bne.n	8004b1e <sbrk_aligned+0x22>
 8004b38:	e7ef      	b.n	8004b1a <sbrk_aligned+0x1e>
 8004b3a:	bf00      	nop
 8004b3c:	200001b4 	.word	0x200001b4

08004b40 <_malloc_r>:
 8004b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b44:	1ccd      	adds	r5, r1, #3
 8004b46:	f025 0503 	bic.w	r5, r5, #3
 8004b4a:	3508      	adds	r5, #8
 8004b4c:	2d0c      	cmp	r5, #12
 8004b4e:	bf38      	it	cc
 8004b50:	250c      	movcc	r5, #12
 8004b52:	2d00      	cmp	r5, #0
 8004b54:	4606      	mov	r6, r0
 8004b56:	db01      	blt.n	8004b5c <_malloc_r+0x1c>
 8004b58:	42a9      	cmp	r1, r5
 8004b5a:	d904      	bls.n	8004b66 <_malloc_r+0x26>
 8004b5c:	230c      	movs	r3, #12
 8004b5e:	6033      	str	r3, [r6, #0]
 8004b60:	2000      	movs	r0, #0
 8004b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c3c <_malloc_r+0xfc>
 8004b6a:	f000 f869 	bl	8004c40 <__malloc_lock>
 8004b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b72:	461c      	mov	r4, r3
 8004b74:	bb44      	cbnz	r4, 8004bc8 <_malloc_r+0x88>
 8004b76:	4629      	mov	r1, r5
 8004b78:	4630      	mov	r0, r6
 8004b7a:	f7ff ffbf 	bl	8004afc <sbrk_aligned>
 8004b7e:	1c43      	adds	r3, r0, #1
 8004b80:	4604      	mov	r4, r0
 8004b82:	d158      	bne.n	8004c36 <_malloc_r+0xf6>
 8004b84:	f8d8 4000 	ldr.w	r4, [r8]
 8004b88:	4627      	mov	r7, r4
 8004b8a:	2f00      	cmp	r7, #0
 8004b8c:	d143      	bne.n	8004c16 <_malloc_r+0xd6>
 8004b8e:	2c00      	cmp	r4, #0
 8004b90:	d04b      	beq.n	8004c2a <_malloc_r+0xea>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	4639      	mov	r1, r7
 8004b96:	4630      	mov	r0, r6
 8004b98:	eb04 0903 	add.w	r9, r4, r3
 8004b9c:	f000 f898 	bl	8004cd0 <_sbrk_r>
 8004ba0:	4581      	cmp	r9, r0
 8004ba2:	d142      	bne.n	8004c2a <_malloc_r+0xea>
 8004ba4:	6821      	ldr	r1, [r4, #0]
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	1a6d      	subs	r5, r5, r1
 8004baa:	4629      	mov	r1, r5
 8004bac:	f7ff ffa6 	bl	8004afc <sbrk_aligned>
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d03a      	beq.n	8004c2a <_malloc_r+0xea>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	442b      	add	r3, r5
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	f8d8 3000 	ldr.w	r3, [r8]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	bb62      	cbnz	r2, 8004c1c <_malloc_r+0xdc>
 8004bc2:	f8c8 7000 	str.w	r7, [r8]
 8004bc6:	e00f      	b.n	8004be8 <_malloc_r+0xa8>
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	1b52      	subs	r2, r2, r5
 8004bcc:	d420      	bmi.n	8004c10 <_malloc_r+0xd0>
 8004bce:	2a0b      	cmp	r2, #11
 8004bd0:	d917      	bls.n	8004c02 <_malloc_r+0xc2>
 8004bd2:	1961      	adds	r1, r4, r5
 8004bd4:	42a3      	cmp	r3, r4
 8004bd6:	6025      	str	r5, [r4, #0]
 8004bd8:	bf18      	it	ne
 8004bda:	6059      	strne	r1, [r3, #4]
 8004bdc:	6863      	ldr	r3, [r4, #4]
 8004bde:	bf08      	it	eq
 8004be0:	f8c8 1000 	streq.w	r1, [r8]
 8004be4:	5162      	str	r2, [r4, r5]
 8004be6:	604b      	str	r3, [r1, #4]
 8004be8:	4630      	mov	r0, r6
 8004bea:	f000 f82f 	bl	8004c4c <__malloc_unlock>
 8004bee:	f104 000b 	add.w	r0, r4, #11
 8004bf2:	1d23      	adds	r3, r4, #4
 8004bf4:	f020 0007 	bic.w	r0, r0, #7
 8004bf8:	1ac2      	subs	r2, r0, r3
 8004bfa:	bf1c      	itt	ne
 8004bfc:	1a1b      	subne	r3, r3, r0
 8004bfe:	50a3      	strne	r3, [r4, r2]
 8004c00:	e7af      	b.n	8004b62 <_malloc_r+0x22>
 8004c02:	6862      	ldr	r2, [r4, #4]
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	bf0c      	ite	eq
 8004c08:	f8c8 2000 	streq.w	r2, [r8]
 8004c0c:	605a      	strne	r2, [r3, #4]
 8004c0e:	e7eb      	b.n	8004be8 <_malloc_r+0xa8>
 8004c10:	4623      	mov	r3, r4
 8004c12:	6864      	ldr	r4, [r4, #4]
 8004c14:	e7ae      	b.n	8004b74 <_malloc_r+0x34>
 8004c16:	463c      	mov	r4, r7
 8004c18:	687f      	ldr	r7, [r7, #4]
 8004c1a:	e7b6      	b.n	8004b8a <_malloc_r+0x4a>
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	d1fb      	bne.n	8004c1c <_malloc_r+0xdc>
 8004c24:	2300      	movs	r3, #0
 8004c26:	6053      	str	r3, [r2, #4]
 8004c28:	e7de      	b.n	8004be8 <_malloc_r+0xa8>
 8004c2a:	230c      	movs	r3, #12
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	6033      	str	r3, [r6, #0]
 8004c30:	f000 f80c 	bl	8004c4c <__malloc_unlock>
 8004c34:	e794      	b.n	8004b60 <_malloc_r+0x20>
 8004c36:	6005      	str	r5, [r0, #0]
 8004c38:	e7d6      	b.n	8004be8 <_malloc_r+0xa8>
 8004c3a:	bf00      	nop
 8004c3c:	200001b8 	.word	0x200001b8

08004c40 <__malloc_lock>:
 8004c40:	4801      	ldr	r0, [pc, #4]	@ (8004c48 <__malloc_lock+0x8>)
 8004c42:	f000 b87f 	b.w	8004d44 <__retarget_lock_acquire_recursive>
 8004c46:	bf00      	nop
 8004c48:	200002f8 	.word	0x200002f8

08004c4c <__malloc_unlock>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	@ (8004c54 <__malloc_unlock+0x8>)
 8004c4e:	f000 b87a 	b.w	8004d46 <__retarget_lock_release_recursive>
 8004c52:	bf00      	nop
 8004c54:	200002f8 	.word	0x200002f8

08004c58 <sniprintf>:
 8004c58:	b40c      	push	{r2, r3}
 8004c5a:	b530      	push	{r4, r5, lr}
 8004c5c:	4b17      	ldr	r3, [pc, #92]	@ (8004cbc <sniprintf+0x64>)
 8004c5e:	1e0c      	subs	r4, r1, #0
 8004c60:	681d      	ldr	r5, [r3, #0]
 8004c62:	b09d      	sub	sp, #116	@ 0x74
 8004c64:	da08      	bge.n	8004c78 <sniprintf+0x20>
 8004c66:	238b      	movs	r3, #139	@ 0x8b
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6c:	602b      	str	r3, [r5, #0]
 8004c6e:	b01d      	add	sp, #116	@ 0x74
 8004c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c74:	b002      	add	sp, #8
 8004c76:	4770      	bx	lr
 8004c78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004c7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c80:	bf0c      	ite	eq
 8004c82:	4623      	moveq	r3, r4
 8004c84:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c88:	9304      	str	r3, [sp, #16]
 8004c8a:	9307      	str	r3, [sp, #28]
 8004c8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c90:	9002      	str	r0, [sp, #8]
 8004c92:	9006      	str	r0, [sp, #24]
 8004c94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c98:	4628      	mov	r0, r5
 8004c9a:	ab21      	add	r3, sp, #132	@ 0x84
 8004c9c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c9e:	a902      	add	r1, sp, #8
 8004ca0:	9301      	str	r3, [sp, #4]
 8004ca2:	f000 f8f5 	bl	8004e90 <_svfiprintf_r>
 8004ca6:	1c43      	adds	r3, r0, #1
 8004ca8:	bfbc      	itt	lt
 8004caa:	238b      	movlt	r3, #139	@ 0x8b
 8004cac:	602b      	strlt	r3, [r5, #0]
 8004cae:	2c00      	cmp	r4, #0
 8004cb0:	d0dd      	beq.n	8004c6e <sniprintf+0x16>
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	9b02      	ldr	r3, [sp, #8]
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	e7d9      	b.n	8004c6e <sniprintf+0x16>
 8004cba:	bf00      	nop
 8004cbc:	2000000c 	.word	0x2000000c

08004cc0 <memset>:
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	4402      	add	r2, r0
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d100      	bne.n	8004cca <memset+0xa>
 8004cc8:	4770      	bx	lr
 8004cca:	f803 1b01 	strb.w	r1, [r3], #1
 8004cce:	e7f9      	b.n	8004cc4 <memset+0x4>

08004cd0 <_sbrk_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	4d05      	ldr	r5, [pc, #20]	@ (8004cec <_sbrk_r+0x1c>)
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	4608      	mov	r0, r1
 8004cda:	602b      	str	r3, [r5, #0]
 8004cdc:	f7fc fb42 	bl	8001364 <_sbrk>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_sbrk_r+0x1a>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_sbrk_r+0x1a>
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	200002f4 	.word	0x200002f4

08004cf0 <__errno>:
 8004cf0:	4b01      	ldr	r3, [pc, #4]	@ (8004cf8 <__errno+0x8>)
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	2000000c 	.word	0x2000000c

08004cfc <__libc_init_array>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	2600      	movs	r6, #0
 8004d00:	4d0c      	ldr	r5, [pc, #48]	@ (8004d34 <__libc_init_array+0x38>)
 8004d02:	4c0d      	ldr	r4, [pc, #52]	@ (8004d38 <__libc_init_array+0x3c>)
 8004d04:	1b64      	subs	r4, r4, r5
 8004d06:	10a4      	asrs	r4, r4, #2
 8004d08:	42a6      	cmp	r6, r4
 8004d0a:	d109      	bne.n	8004d20 <__libc_init_array+0x24>
 8004d0c:	f000 fbba 	bl	8005484 <_init>
 8004d10:	2600      	movs	r6, #0
 8004d12:	4d0a      	ldr	r5, [pc, #40]	@ (8004d3c <__libc_init_array+0x40>)
 8004d14:	4c0a      	ldr	r4, [pc, #40]	@ (8004d40 <__libc_init_array+0x44>)
 8004d16:	1b64      	subs	r4, r4, r5
 8004d18:	10a4      	asrs	r4, r4, #2
 8004d1a:	42a6      	cmp	r6, r4
 8004d1c:	d105      	bne.n	8004d2a <__libc_init_array+0x2e>
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d24:	4798      	blx	r3
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7ee      	b.n	8004d08 <__libc_init_array+0xc>
 8004d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2e:	4798      	blx	r3
 8004d30:	3601      	adds	r6, #1
 8004d32:	e7f2      	b.n	8004d1a <__libc_init_array+0x1e>
 8004d34:	0800557c 	.word	0x0800557c
 8004d38:	0800557c 	.word	0x0800557c
 8004d3c:	0800557c 	.word	0x0800557c
 8004d40:	08005580 	.word	0x08005580

08004d44 <__retarget_lock_acquire_recursive>:
 8004d44:	4770      	bx	lr

08004d46 <__retarget_lock_release_recursive>:
 8004d46:	4770      	bx	lr

08004d48 <_free_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	2900      	cmp	r1, #0
 8004d4e:	d040      	beq.n	8004dd2 <_free_r+0x8a>
 8004d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d54:	1f0c      	subs	r4, r1, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bfb8      	it	lt
 8004d5a:	18e4      	addlt	r4, r4, r3
 8004d5c:	f7ff ff70 	bl	8004c40 <__malloc_lock>
 8004d60:	4a1c      	ldr	r2, [pc, #112]	@ (8004dd4 <_free_r+0x8c>)
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	b933      	cbnz	r3, 8004d74 <_free_r+0x2c>
 8004d66:	6063      	str	r3, [r4, #4]
 8004d68:	6014      	str	r4, [r2, #0]
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d70:	f7ff bf6c 	b.w	8004c4c <__malloc_unlock>
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	d908      	bls.n	8004d8a <_free_r+0x42>
 8004d78:	6820      	ldr	r0, [r4, #0]
 8004d7a:	1821      	adds	r1, r4, r0
 8004d7c:	428b      	cmp	r3, r1
 8004d7e:	bf01      	itttt	eq
 8004d80:	6819      	ldreq	r1, [r3, #0]
 8004d82:	685b      	ldreq	r3, [r3, #4]
 8004d84:	1809      	addeq	r1, r1, r0
 8004d86:	6021      	streq	r1, [r4, #0]
 8004d88:	e7ed      	b.n	8004d66 <_free_r+0x1e>
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	b10b      	cbz	r3, 8004d94 <_free_r+0x4c>
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	d9fa      	bls.n	8004d8a <_free_r+0x42>
 8004d94:	6811      	ldr	r1, [r2, #0]
 8004d96:	1850      	adds	r0, r2, r1
 8004d98:	42a0      	cmp	r0, r4
 8004d9a:	d10b      	bne.n	8004db4 <_free_r+0x6c>
 8004d9c:	6820      	ldr	r0, [r4, #0]
 8004d9e:	4401      	add	r1, r0
 8004da0:	1850      	adds	r0, r2, r1
 8004da2:	4283      	cmp	r3, r0
 8004da4:	6011      	str	r1, [r2, #0]
 8004da6:	d1e0      	bne.n	8004d6a <_free_r+0x22>
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	4408      	add	r0, r1
 8004dae:	6010      	str	r0, [r2, #0]
 8004db0:	6053      	str	r3, [r2, #4]
 8004db2:	e7da      	b.n	8004d6a <_free_r+0x22>
 8004db4:	d902      	bls.n	8004dbc <_free_r+0x74>
 8004db6:	230c      	movs	r3, #12
 8004db8:	602b      	str	r3, [r5, #0]
 8004dba:	e7d6      	b.n	8004d6a <_free_r+0x22>
 8004dbc:	6820      	ldr	r0, [r4, #0]
 8004dbe:	1821      	adds	r1, r4, r0
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	bf01      	itttt	eq
 8004dc4:	6819      	ldreq	r1, [r3, #0]
 8004dc6:	685b      	ldreq	r3, [r3, #4]
 8004dc8:	1809      	addeq	r1, r1, r0
 8004dca:	6021      	streq	r1, [r4, #0]
 8004dcc:	6063      	str	r3, [r4, #4]
 8004dce:	6054      	str	r4, [r2, #4]
 8004dd0:	e7cb      	b.n	8004d6a <_free_r+0x22>
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
 8004dd4:	200001b8 	.word	0x200001b8

08004dd8 <__ssputs_r>:
 8004dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ddc:	461f      	mov	r7, r3
 8004dde:	688e      	ldr	r6, [r1, #8]
 8004de0:	4682      	mov	sl, r0
 8004de2:	42be      	cmp	r6, r7
 8004de4:	460c      	mov	r4, r1
 8004de6:	4690      	mov	r8, r2
 8004de8:	680b      	ldr	r3, [r1, #0]
 8004dea:	d82d      	bhi.n	8004e48 <__ssputs_r+0x70>
 8004dec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004df0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004df4:	d026      	beq.n	8004e44 <__ssputs_r+0x6c>
 8004df6:	6965      	ldr	r5, [r4, #20]
 8004df8:	6909      	ldr	r1, [r1, #16]
 8004dfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dfe:	eba3 0901 	sub.w	r9, r3, r1
 8004e02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e06:	1c7b      	adds	r3, r7, #1
 8004e08:	444b      	add	r3, r9
 8004e0a:	106d      	asrs	r5, r5, #1
 8004e0c:	429d      	cmp	r5, r3
 8004e0e:	bf38      	it	cc
 8004e10:	461d      	movcc	r5, r3
 8004e12:	0553      	lsls	r3, r2, #21
 8004e14:	d527      	bpl.n	8004e66 <__ssputs_r+0x8e>
 8004e16:	4629      	mov	r1, r5
 8004e18:	f7ff fe92 	bl	8004b40 <_malloc_r>
 8004e1c:	4606      	mov	r6, r0
 8004e1e:	b360      	cbz	r0, 8004e7a <__ssputs_r+0xa2>
 8004e20:	464a      	mov	r2, r9
 8004e22:	6921      	ldr	r1, [r4, #16]
 8004e24:	f000 faea 	bl	80053fc <memcpy>
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	6126      	str	r6, [r4, #16]
 8004e36:	444e      	add	r6, r9
 8004e38:	6026      	str	r6, [r4, #0]
 8004e3a:	463e      	mov	r6, r7
 8004e3c:	6165      	str	r5, [r4, #20]
 8004e3e:	eba5 0509 	sub.w	r5, r5, r9
 8004e42:	60a5      	str	r5, [r4, #8]
 8004e44:	42be      	cmp	r6, r7
 8004e46:	d900      	bls.n	8004e4a <__ssputs_r+0x72>
 8004e48:	463e      	mov	r6, r7
 8004e4a:	4632      	mov	r2, r6
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	6820      	ldr	r0, [r4, #0]
 8004e50:	f000 faac 	bl	80053ac <memmove>
 8004e54:	2000      	movs	r0, #0
 8004e56:	68a3      	ldr	r3, [r4, #8]
 8004e58:	1b9b      	subs	r3, r3, r6
 8004e5a:	60a3      	str	r3, [r4, #8]
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	4433      	add	r3, r6
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e66:	462a      	mov	r2, r5
 8004e68:	f000 fad6 	bl	8005418 <_realloc_r>
 8004e6c:	4606      	mov	r6, r0
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	d1e0      	bne.n	8004e34 <__ssputs_r+0x5c>
 8004e72:	4650      	mov	r0, sl
 8004e74:	6921      	ldr	r1, [r4, #16]
 8004e76:	f7ff ff67 	bl	8004d48 <_free_r>
 8004e7a:	230c      	movs	r3, #12
 8004e7c:	f8ca 3000 	str.w	r3, [sl]
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	f04f 30ff 	mov.w	r0, #4294967295
 8004e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e8a:	81a3      	strh	r3, [r4, #12]
 8004e8c:	e7e9      	b.n	8004e62 <__ssputs_r+0x8a>
	...

08004e90 <_svfiprintf_r>:
 8004e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e94:	4698      	mov	r8, r3
 8004e96:	898b      	ldrh	r3, [r1, #12]
 8004e98:	4607      	mov	r7, r0
 8004e9a:	061b      	lsls	r3, r3, #24
 8004e9c:	460d      	mov	r5, r1
 8004e9e:	4614      	mov	r4, r2
 8004ea0:	b09d      	sub	sp, #116	@ 0x74
 8004ea2:	d510      	bpl.n	8004ec6 <_svfiprintf_r+0x36>
 8004ea4:	690b      	ldr	r3, [r1, #16]
 8004ea6:	b973      	cbnz	r3, 8004ec6 <_svfiprintf_r+0x36>
 8004ea8:	2140      	movs	r1, #64	@ 0x40
 8004eaa:	f7ff fe49 	bl	8004b40 <_malloc_r>
 8004eae:	6028      	str	r0, [r5, #0]
 8004eb0:	6128      	str	r0, [r5, #16]
 8004eb2:	b930      	cbnz	r0, 8004ec2 <_svfiprintf_r+0x32>
 8004eb4:	230c      	movs	r3, #12
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebc:	b01d      	add	sp, #116	@ 0x74
 8004ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec2:	2340      	movs	r3, #64	@ 0x40
 8004ec4:	616b      	str	r3, [r5, #20]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eca:	2320      	movs	r3, #32
 8004ecc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ed0:	2330      	movs	r3, #48	@ 0x30
 8004ed2:	f04f 0901 	mov.w	r9, #1
 8004ed6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eda:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005074 <_svfiprintf_r+0x1e4>
 8004ede:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ee2:	4623      	mov	r3, r4
 8004ee4:	469a      	mov	sl, r3
 8004ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eea:	b10a      	cbz	r2, 8004ef0 <_svfiprintf_r+0x60>
 8004eec:	2a25      	cmp	r2, #37	@ 0x25
 8004eee:	d1f9      	bne.n	8004ee4 <_svfiprintf_r+0x54>
 8004ef0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ef4:	d00b      	beq.n	8004f0e <_svfiprintf_r+0x7e>
 8004ef6:	465b      	mov	r3, fp
 8004ef8:	4622      	mov	r2, r4
 8004efa:	4629      	mov	r1, r5
 8004efc:	4638      	mov	r0, r7
 8004efe:	f7ff ff6b 	bl	8004dd8 <__ssputs_r>
 8004f02:	3001      	adds	r0, #1
 8004f04:	f000 80a7 	beq.w	8005056 <_svfiprintf_r+0x1c6>
 8004f08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f0a:	445a      	add	r2, fp
 8004f0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 809f 	beq.w	8005056 <_svfiprintf_r+0x1c6>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f22:	f10a 0a01 	add.w	sl, sl, #1
 8004f26:	9304      	str	r3, [sp, #16]
 8004f28:	9307      	str	r3, [sp, #28]
 8004f2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f30:	4654      	mov	r4, sl
 8004f32:	2205      	movs	r2, #5
 8004f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f38:	484e      	ldr	r0, [pc, #312]	@ (8005074 <_svfiprintf_r+0x1e4>)
 8004f3a:	f000 fa51 	bl	80053e0 <memchr>
 8004f3e:	9a04      	ldr	r2, [sp, #16]
 8004f40:	b9d8      	cbnz	r0, 8004f7a <_svfiprintf_r+0xea>
 8004f42:	06d0      	lsls	r0, r2, #27
 8004f44:	bf44      	itt	mi
 8004f46:	2320      	movmi	r3, #32
 8004f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f4c:	0711      	lsls	r1, r2, #28
 8004f4e:	bf44      	itt	mi
 8004f50:	232b      	movmi	r3, #43	@ 0x2b
 8004f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f56:	f89a 3000 	ldrb.w	r3, [sl]
 8004f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f5c:	d015      	beq.n	8004f8a <_svfiprintf_r+0xfa>
 8004f5e:	4654      	mov	r4, sl
 8004f60:	2000      	movs	r0, #0
 8004f62:	f04f 0c0a 	mov.w	ip, #10
 8004f66:	9a07      	ldr	r2, [sp, #28]
 8004f68:	4621      	mov	r1, r4
 8004f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f6e:	3b30      	subs	r3, #48	@ 0x30
 8004f70:	2b09      	cmp	r3, #9
 8004f72:	d94b      	bls.n	800500c <_svfiprintf_r+0x17c>
 8004f74:	b1b0      	cbz	r0, 8004fa4 <_svfiprintf_r+0x114>
 8004f76:	9207      	str	r2, [sp, #28]
 8004f78:	e014      	b.n	8004fa4 <_svfiprintf_r+0x114>
 8004f7a:	eba0 0308 	sub.w	r3, r0, r8
 8004f7e:	fa09 f303 	lsl.w	r3, r9, r3
 8004f82:	4313      	orrs	r3, r2
 8004f84:	46a2      	mov	sl, r4
 8004f86:	9304      	str	r3, [sp, #16]
 8004f88:	e7d2      	b.n	8004f30 <_svfiprintf_r+0xa0>
 8004f8a:	9b03      	ldr	r3, [sp, #12]
 8004f8c:	1d19      	adds	r1, r3, #4
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	9103      	str	r1, [sp, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bfbb      	ittet	lt
 8004f96:	425b      	neglt	r3, r3
 8004f98:	f042 0202 	orrlt.w	r2, r2, #2
 8004f9c:	9307      	strge	r3, [sp, #28]
 8004f9e:	9307      	strlt	r3, [sp, #28]
 8004fa0:	bfb8      	it	lt
 8004fa2:	9204      	strlt	r2, [sp, #16]
 8004fa4:	7823      	ldrb	r3, [r4, #0]
 8004fa6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fa8:	d10a      	bne.n	8004fc0 <_svfiprintf_r+0x130>
 8004faa:	7863      	ldrb	r3, [r4, #1]
 8004fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fae:	d132      	bne.n	8005016 <_svfiprintf_r+0x186>
 8004fb0:	9b03      	ldr	r3, [sp, #12]
 8004fb2:	3402      	adds	r4, #2
 8004fb4:	1d1a      	adds	r2, r3, #4
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	9203      	str	r2, [sp, #12]
 8004fba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004fbe:	9305      	str	r3, [sp, #20]
 8004fc0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005078 <_svfiprintf_r+0x1e8>
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	4650      	mov	r0, sl
 8004fc8:	7821      	ldrb	r1, [r4, #0]
 8004fca:	f000 fa09 	bl	80053e0 <memchr>
 8004fce:	b138      	cbz	r0, 8004fe0 <_svfiprintf_r+0x150>
 8004fd0:	2240      	movs	r2, #64	@ 0x40
 8004fd2:	9b04      	ldr	r3, [sp, #16]
 8004fd4:	eba0 000a 	sub.w	r0, r0, sl
 8004fd8:	4082      	lsls	r2, r0
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	3401      	adds	r4, #1
 8004fde:	9304      	str	r3, [sp, #16]
 8004fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe4:	2206      	movs	r2, #6
 8004fe6:	4825      	ldr	r0, [pc, #148]	@ (800507c <_svfiprintf_r+0x1ec>)
 8004fe8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fec:	f000 f9f8 	bl	80053e0 <memchr>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d036      	beq.n	8005062 <_svfiprintf_r+0x1d2>
 8004ff4:	4b22      	ldr	r3, [pc, #136]	@ (8005080 <_svfiprintf_r+0x1f0>)
 8004ff6:	bb1b      	cbnz	r3, 8005040 <_svfiprintf_r+0x1b0>
 8004ff8:	9b03      	ldr	r3, [sp, #12]
 8004ffa:	3307      	adds	r3, #7
 8004ffc:	f023 0307 	bic.w	r3, r3, #7
 8005000:	3308      	adds	r3, #8
 8005002:	9303      	str	r3, [sp, #12]
 8005004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005006:	4433      	add	r3, r6
 8005008:	9309      	str	r3, [sp, #36]	@ 0x24
 800500a:	e76a      	b.n	8004ee2 <_svfiprintf_r+0x52>
 800500c:	460c      	mov	r4, r1
 800500e:	2001      	movs	r0, #1
 8005010:	fb0c 3202 	mla	r2, ip, r2, r3
 8005014:	e7a8      	b.n	8004f68 <_svfiprintf_r+0xd8>
 8005016:	2300      	movs	r3, #0
 8005018:	f04f 0c0a 	mov.w	ip, #10
 800501c:	4619      	mov	r1, r3
 800501e:	3401      	adds	r4, #1
 8005020:	9305      	str	r3, [sp, #20]
 8005022:	4620      	mov	r0, r4
 8005024:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005028:	3a30      	subs	r2, #48	@ 0x30
 800502a:	2a09      	cmp	r2, #9
 800502c:	d903      	bls.n	8005036 <_svfiprintf_r+0x1a6>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0c6      	beq.n	8004fc0 <_svfiprintf_r+0x130>
 8005032:	9105      	str	r1, [sp, #20]
 8005034:	e7c4      	b.n	8004fc0 <_svfiprintf_r+0x130>
 8005036:	4604      	mov	r4, r0
 8005038:	2301      	movs	r3, #1
 800503a:	fb0c 2101 	mla	r1, ip, r1, r2
 800503e:	e7f0      	b.n	8005022 <_svfiprintf_r+0x192>
 8005040:	ab03      	add	r3, sp, #12
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	462a      	mov	r2, r5
 8005046:	4638      	mov	r0, r7
 8005048:	4b0e      	ldr	r3, [pc, #56]	@ (8005084 <_svfiprintf_r+0x1f4>)
 800504a:	a904      	add	r1, sp, #16
 800504c:	f3af 8000 	nop.w
 8005050:	1c42      	adds	r2, r0, #1
 8005052:	4606      	mov	r6, r0
 8005054:	d1d6      	bne.n	8005004 <_svfiprintf_r+0x174>
 8005056:	89ab      	ldrh	r3, [r5, #12]
 8005058:	065b      	lsls	r3, r3, #25
 800505a:	f53f af2d 	bmi.w	8004eb8 <_svfiprintf_r+0x28>
 800505e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005060:	e72c      	b.n	8004ebc <_svfiprintf_r+0x2c>
 8005062:	ab03      	add	r3, sp, #12
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	462a      	mov	r2, r5
 8005068:	4638      	mov	r0, r7
 800506a:	4b06      	ldr	r3, [pc, #24]	@ (8005084 <_svfiprintf_r+0x1f4>)
 800506c:	a904      	add	r1, sp, #16
 800506e:	f000 f87d 	bl	800516c <_printf_i>
 8005072:	e7ed      	b.n	8005050 <_svfiprintf_r+0x1c0>
 8005074:	0800553e 	.word	0x0800553e
 8005078:	08005544 	.word	0x08005544
 800507c:	08005548 	.word	0x08005548
 8005080:	00000000 	.word	0x00000000
 8005084:	08004dd9 	.word	0x08004dd9

08005088 <_printf_common>:
 8005088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800508c:	4616      	mov	r6, r2
 800508e:	4698      	mov	r8, r3
 8005090:	688a      	ldr	r2, [r1, #8]
 8005092:	690b      	ldr	r3, [r1, #16]
 8005094:	4607      	mov	r7, r0
 8005096:	4293      	cmp	r3, r2
 8005098:	bfb8      	it	lt
 800509a:	4613      	movlt	r3, r2
 800509c:	6033      	str	r3, [r6, #0]
 800509e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050a2:	460c      	mov	r4, r1
 80050a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050a8:	b10a      	cbz	r2, 80050ae <_printf_common+0x26>
 80050aa:	3301      	adds	r3, #1
 80050ac:	6033      	str	r3, [r6, #0]
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	0699      	lsls	r1, r3, #26
 80050b2:	bf42      	ittt	mi
 80050b4:	6833      	ldrmi	r3, [r6, #0]
 80050b6:	3302      	addmi	r3, #2
 80050b8:	6033      	strmi	r3, [r6, #0]
 80050ba:	6825      	ldr	r5, [r4, #0]
 80050bc:	f015 0506 	ands.w	r5, r5, #6
 80050c0:	d106      	bne.n	80050d0 <_printf_common+0x48>
 80050c2:	f104 0a19 	add.w	sl, r4, #25
 80050c6:	68e3      	ldr	r3, [r4, #12]
 80050c8:	6832      	ldr	r2, [r6, #0]
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	42ab      	cmp	r3, r5
 80050ce:	dc2b      	bgt.n	8005128 <_printf_common+0xa0>
 80050d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050d4:	6822      	ldr	r2, [r4, #0]
 80050d6:	3b00      	subs	r3, #0
 80050d8:	bf18      	it	ne
 80050da:	2301      	movne	r3, #1
 80050dc:	0692      	lsls	r2, r2, #26
 80050de:	d430      	bmi.n	8005142 <_printf_common+0xba>
 80050e0:	4641      	mov	r1, r8
 80050e2:	4638      	mov	r0, r7
 80050e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050e8:	47c8      	blx	r9
 80050ea:	3001      	adds	r0, #1
 80050ec:	d023      	beq.n	8005136 <_printf_common+0xae>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	6922      	ldr	r2, [r4, #16]
 80050f2:	f003 0306 	and.w	r3, r3, #6
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	bf14      	ite	ne
 80050fa:	2500      	movne	r5, #0
 80050fc:	6833      	ldreq	r3, [r6, #0]
 80050fe:	f04f 0600 	mov.w	r6, #0
 8005102:	bf08      	it	eq
 8005104:	68e5      	ldreq	r5, [r4, #12]
 8005106:	f104 041a 	add.w	r4, r4, #26
 800510a:	bf08      	it	eq
 800510c:	1aed      	subeq	r5, r5, r3
 800510e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005112:	bf08      	it	eq
 8005114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005118:	4293      	cmp	r3, r2
 800511a:	bfc4      	itt	gt
 800511c:	1a9b      	subgt	r3, r3, r2
 800511e:	18ed      	addgt	r5, r5, r3
 8005120:	42b5      	cmp	r5, r6
 8005122:	d11a      	bne.n	800515a <_printf_common+0xd2>
 8005124:	2000      	movs	r0, #0
 8005126:	e008      	b.n	800513a <_printf_common+0xb2>
 8005128:	2301      	movs	r3, #1
 800512a:	4652      	mov	r2, sl
 800512c:	4641      	mov	r1, r8
 800512e:	4638      	mov	r0, r7
 8005130:	47c8      	blx	r9
 8005132:	3001      	adds	r0, #1
 8005134:	d103      	bne.n	800513e <_printf_common+0xb6>
 8005136:	f04f 30ff 	mov.w	r0, #4294967295
 800513a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513e:	3501      	adds	r5, #1
 8005140:	e7c1      	b.n	80050c6 <_printf_common+0x3e>
 8005142:	2030      	movs	r0, #48	@ 0x30
 8005144:	18e1      	adds	r1, r4, r3
 8005146:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005150:	4422      	add	r2, r4
 8005152:	3302      	adds	r3, #2
 8005154:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005158:	e7c2      	b.n	80050e0 <_printf_common+0x58>
 800515a:	2301      	movs	r3, #1
 800515c:	4622      	mov	r2, r4
 800515e:	4641      	mov	r1, r8
 8005160:	4638      	mov	r0, r7
 8005162:	47c8      	blx	r9
 8005164:	3001      	adds	r0, #1
 8005166:	d0e6      	beq.n	8005136 <_printf_common+0xae>
 8005168:	3601      	adds	r6, #1
 800516a:	e7d9      	b.n	8005120 <_printf_common+0x98>

0800516c <_printf_i>:
 800516c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	7e0f      	ldrb	r7, [r1, #24]
 8005172:	4691      	mov	r9, r2
 8005174:	2f78      	cmp	r7, #120	@ 0x78
 8005176:	4680      	mov	r8, r0
 8005178:	460c      	mov	r4, r1
 800517a:	469a      	mov	sl, r3
 800517c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800517e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005182:	d807      	bhi.n	8005194 <_printf_i+0x28>
 8005184:	2f62      	cmp	r7, #98	@ 0x62
 8005186:	d80a      	bhi.n	800519e <_printf_i+0x32>
 8005188:	2f00      	cmp	r7, #0
 800518a:	f000 80d3 	beq.w	8005334 <_printf_i+0x1c8>
 800518e:	2f58      	cmp	r7, #88	@ 0x58
 8005190:	f000 80ba 	beq.w	8005308 <_printf_i+0x19c>
 8005194:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005198:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800519c:	e03a      	b.n	8005214 <_printf_i+0xa8>
 800519e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051a2:	2b15      	cmp	r3, #21
 80051a4:	d8f6      	bhi.n	8005194 <_printf_i+0x28>
 80051a6:	a101      	add	r1, pc, #4	@ (adr r1, 80051ac <_printf_i+0x40>)
 80051a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051ac:	08005205 	.word	0x08005205
 80051b0:	08005219 	.word	0x08005219
 80051b4:	08005195 	.word	0x08005195
 80051b8:	08005195 	.word	0x08005195
 80051bc:	08005195 	.word	0x08005195
 80051c0:	08005195 	.word	0x08005195
 80051c4:	08005219 	.word	0x08005219
 80051c8:	08005195 	.word	0x08005195
 80051cc:	08005195 	.word	0x08005195
 80051d0:	08005195 	.word	0x08005195
 80051d4:	08005195 	.word	0x08005195
 80051d8:	0800531b 	.word	0x0800531b
 80051dc:	08005243 	.word	0x08005243
 80051e0:	080052d5 	.word	0x080052d5
 80051e4:	08005195 	.word	0x08005195
 80051e8:	08005195 	.word	0x08005195
 80051ec:	0800533d 	.word	0x0800533d
 80051f0:	08005195 	.word	0x08005195
 80051f4:	08005243 	.word	0x08005243
 80051f8:	08005195 	.word	0x08005195
 80051fc:	08005195 	.word	0x08005195
 8005200:	080052dd 	.word	0x080052dd
 8005204:	6833      	ldr	r3, [r6, #0]
 8005206:	1d1a      	adds	r2, r3, #4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6032      	str	r2, [r6, #0]
 800520c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005210:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005214:	2301      	movs	r3, #1
 8005216:	e09e      	b.n	8005356 <_printf_i+0x1ea>
 8005218:	6833      	ldr	r3, [r6, #0]
 800521a:	6820      	ldr	r0, [r4, #0]
 800521c:	1d19      	adds	r1, r3, #4
 800521e:	6031      	str	r1, [r6, #0]
 8005220:	0606      	lsls	r6, r0, #24
 8005222:	d501      	bpl.n	8005228 <_printf_i+0xbc>
 8005224:	681d      	ldr	r5, [r3, #0]
 8005226:	e003      	b.n	8005230 <_printf_i+0xc4>
 8005228:	0645      	lsls	r5, r0, #25
 800522a:	d5fb      	bpl.n	8005224 <_printf_i+0xb8>
 800522c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005230:	2d00      	cmp	r5, #0
 8005232:	da03      	bge.n	800523c <_printf_i+0xd0>
 8005234:	232d      	movs	r3, #45	@ 0x2d
 8005236:	426d      	negs	r5, r5
 8005238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800523c:	230a      	movs	r3, #10
 800523e:	4859      	ldr	r0, [pc, #356]	@ (80053a4 <_printf_i+0x238>)
 8005240:	e011      	b.n	8005266 <_printf_i+0xfa>
 8005242:	6821      	ldr	r1, [r4, #0]
 8005244:	6833      	ldr	r3, [r6, #0]
 8005246:	0608      	lsls	r0, r1, #24
 8005248:	f853 5b04 	ldr.w	r5, [r3], #4
 800524c:	d402      	bmi.n	8005254 <_printf_i+0xe8>
 800524e:	0649      	lsls	r1, r1, #25
 8005250:	bf48      	it	mi
 8005252:	b2ad      	uxthmi	r5, r5
 8005254:	2f6f      	cmp	r7, #111	@ 0x6f
 8005256:	6033      	str	r3, [r6, #0]
 8005258:	bf14      	ite	ne
 800525a:	230a      	movne	r3, #10
 800525c:	2308      	moveq	r3, #8
 800525e:	4851      	ldr	r0, [pc, #324]	@ (80053a4 <_printf_i+0x238>)
 8005260:	2100      	movs	r1, #0
 8005262:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005266:	6866      	ldr	r6, [r4, #4]
 8005268:	2e00      	cmp	r6, #0
 800526a:	bfa8      	it	ge
 800526c:	6821      	ldrge	r1, [r4, #0]
 800526e:	60a6      	str	r6, [r4, #8]
 8005270:	bfa4      	itt	ge
 8005272:	f021 0104 	bicge.w	r1, r1, #4
 8005276:	6021      	strge	r1, [r4, #0]
 8005278:	b90d      	cbnz	r5, 800527e <_printf_i+0x112>
 800527a:	2e00      	cmp	r6, #0
 800527c:	d04b      	beq.n	8005316 <_printf_i+0x1aa>
 800527e:	4616      	mov	r6, r2
 8005280:	fbb5 f1f3 	udiv	r1, r5, r3
 8005284:	fb03 5711 	mls	r7, r3, r1, r5
 8005288:	5dc7      	ldrb	r7, [r0, r7]
 800528a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800528e:	462f      	mov	r7, r5
 8005290:	42bb      	cmp	r3, r7
 8005292:	460d      	mov	r5, r1
 8005294:	d9f4      	bls.n	8005280 <_printf_i+0x114>
 8005296:	2b08      	cmp	r3, #8
 8005298:	d10b      	bne.n	80052b2 <_printf_i+0x146>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	07df      	lsls	r7, r3, #31
 800529e:	d508      	bpl.n	80052b2 <_printf_i+0x146>
 80052a0:	6923      	ldr	r3, [r4, #16]
 80052a2:	6861      	ldr	r1, [r4, #4]
 80052a4:	4299      	cmp	r1, r3
 80052a6:	bfde      	ittt	le
 80052a8:	2330      	movle	r3, #48	@ 0x30
 80052aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052b2:	1b92      	subs	r2, r2, r6
 80052b4:	6122      	str	r2, [r4, #16]
 80052b6:	464b      	mov	r3, r9
 80052b8:	4621      	mov	r1, r4
 80052ba:	4640      	mov	r0, r8
 80052bc:	f8cd a000 	str.w	sl, [sp]
 80052c0:	aa03      	add	r2, sp, #12
 80052c2:	f7ff fee1 	bl	8005088 <_printf_common>
 80052c6:	3001      	adds	r0, #1
 80052c8:	d14a      	bne.n	8005360 <_printf_i+0x1f4>
 80052ca:	f04f 30ff 	mov.w	r0, #4294967295
 80052ce:	b004      	add	sp, #16
 80052d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	f043 0320 	orr.w	r3, r3, #32
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	2778      	movs	r7, #120	@ 0x78
 80052de:	4832      	ldr	r0, [pc, #200]	@ (80053a8 <_printf_i+0x23c>)
 80052e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	6831      	ldr	r1, [r6, #0]
 80052e8:	061f      	lsls	r7, r3, #24
 80052ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80052ee:	d402      	bmi.n	80052f6 <_printf_i+0x18a>
 80052f0:	065f      	lsls	r7, r3, #25
 80052f2:	bf48      	it	mi
 80052f4:	b2ad      	uxthmi	r5, r5
 80052f6:	6031      	str	r1, [r6, #0]
 80052f8:	07d9      	lsls	r1, r3, #31
 80052fa:	bf44      	itt	mi
 80052fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005300:	6023      	strmi	r3, [r4, #0]
 8005302:	b11d      	cbz	r5, 800530c <_printf_i+0x1a0>
 8005304:	2310      	movs	r3, #16
 8005306:	e7ab      	b.n	8005260 <_printf_i+0xf4>
 8005308:	4826      	ldr	r0, [pc, #152]	@ (80053a4 <_printf_i+0x238>)
 800530a:	e7e9      	b.n	80052e0 <_printf_i+0x174>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	f023 0320 	bic.w	r3, r3, #32
 8005312:	6023      	str	r3, [r4, #0]
 8005314:	e7f6      	b.n	8005304 <_printf_i+0x198>
 8005316:	4616      	mov	r6, r2
 8005318:	e7bd      	b.n	8005296 <_printf_i+0x12a>
 800531a:	6833      	ldr	r3, [r6, #0]
 800531c:	6825      	ldr	r5, [r4, #0]
 800531e:	1d18      	adds	r0, r3, #4
 8005320:	6961      	ldr	r1, [r4, #20]
 8005322:	6030      	str	r0, [r6, #0]
 8005324:	062e      	lsls	r6, r5, #24
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	d501      	bpl.n	800532e <_printf_i+0x1c2>
 800532a:	6019      	str	r1, [r3, #0]
 800532c:	e002      	b.n	8005334 <_printf_i+0x1c8>
 800532e:	0668      	lsls	r0, r5, #25
 8005330:	d5fb      	bpl.n	800532a <_printf_i+0x1be>
 8005332:	8019      	strh	r1, [r3, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	4616      	mov	r6, r2
 8005338:	6123      	str	r3, [r4, #16]
 800533a:	e7bc      	b.n	80052b6 <_printf_i+0x14a>
 800533c:	6833      	ldr	r3, [r6, #0]
 800533e:	2100      	movs	r1, #0
 8005340:	1d1a      	adds	r2, r3, #4
 8005342:	6032      	str	r2, [r6, #0]
 8005344:	681e      	ldr	r6, [r3, #0]
 8005346:	6862      	ldr	r2, [r4, #4]
 8005348:	4630      	mov	r0, r6
 800534a:	f000 f849 	bl	80053e0 <memchr>
 800534e:	b108      	cbz	r0, 8005354 <_printf_i+0x1e8>
 8005350:	1b80      	subs	r0, r0, r6
 8005352:	6060      	str	r0, [r4, #4]
 8005354:	6863      	ldr	r3, [r4, #4]
 8005356:	6123      	str	r3, [r4, #16]
 8005358:	2300      	movs	r3, #0
 800535a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800535e:	e7aa      	b.n	80052b6 <_printf_i+0x14a>
 8005360:	4632      	mov	r2, r6
 8005362:	4649      	mov	r1, r9
 8005364:	4640      	mov	r0, r8
 8005366:	6923      	ldr	r3, [r4, #16]
 8005368:	47d0      	blx	sl
 800536a:	3001      	adds	r0, #1
 800536c:	d0ad      	beq.n	80052ca <_printf_i+0x15e>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	079b      	lsls	r3, r3, #30
 8005372:	d413      	bmi.n	800539c <_printf_i+0x230>
 8005374:	68e0      	ldr	r0, [r4, #12]
 8005376:	9b03      	ldr	r3, [sp, #12]
 8005378:	4298      	cmp	r0, r3
 800537a:	bfb8      	it	lt
 800537c:	4618      	movlt	r0, r3
 800537e:	e7a6      	b.n	80052ce <_printf_i+0x162>
 8005380:	2301      	movs	r3, #1
 8005382:	4632      	mov	r2, r6
 8005384:	4649      	mov	r1, r9
 8005386:	4640      	mov	r0, r8
 8005388:	47d0      	blx	sl
 800538a:	3001      	adds	r0, #1
 800538c:	d09d      	beq.n	80052ca <_printf_i+0x15e>
 800538e:	3501      	adds	r5, #1
 8005390:	68e3      	ldr	r3, [r4, #12]
 8005392:	9903      	ldr	r1, [sp, #12]
 8005394:	1a5b      	subs	r3, r3, r1
 8005396:	42ab      	cmp	r3, r5
 8005398:	dcf2      	bgt.n	8005380 <_printf_i+0x214>
 800539a:	e7eb      	b.n	8005374 <_printf_i+0x208>
 800539c:	2500      	movs	r5, #0
 800539e:	f104 0619 	add.w	r6, r4, #25
 80053a2:	e7f5      	b.n	8005390 <_printf_i+0x224>
 80053a4:	0800554f 	.word	0x0800554f
 80053a8:	08005560 	.word	0x08005560

080053ac <memmove>:
 80053ac:	4288      	cmp	r0, r1
 80053ae:	b510      	push	{r4, lr}
 80053b0:	eb01 0402 	add.w	r4, r1, r2
 80053b4:	d902      	bls.n	80053bc <memmove+0x10>
 80053b6:	4284      	cmp	r4, r0
 80053b8:	4623      	mov	r3, r4
 80053ba:	d807      	bhi.n	80053cc <memmove+0x20>
 80053bc:	1e43      	subs	r3, r0, #1
 80053be:	42a1      	cmp	r1, r4
 80053c0:	d008      	beq.n	80053d4 <memmove+0x28>
 80053c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053ca:	e7f8      	b.n	80053be <memmove+0x12>
 80053cc:	4601      	mov	r1, r0
 80053ce:	4402      	add	r2, r0
 80053d0:	428a      	cmp	r2, r1
 80053d2:	d100      	bne.n	80053d6 <memmove+0x2a>
 80053d4:	bd10      	pop	{r4, pc}
 80053d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053de:	e7f7      	b.n	80053d0 <memmove+0x24>

080053e0 <memchr>:
 80053e0:	4603      	mov	r3, r0
 80053e2:	b510      	push	{r4, lr}
 80053e4:	b2c9      	uxtb	r1, r1
 80053e6:	4402      	add	r2, r0
 80053e8:	4293      	cmp	r3, r2
 80053ea:	4618      	mov	r0, r3
 80053ec:	d101      	bne.n	80053f2 <memchr+0x12>
 80053ee:	2000      	movs	r0, #0
 80053f0:	e003      	b.n	80053fa <memchr+0x1a>
 80053f2:	7804      	ldrb	r4, [r0, #0]
 80053f4:	3301      	adds	r3, #1
 80053f6:	428c      	cmp	r4, r1
 80053f8:	d1f6      	bne.n	80053e8 <memchr+0x8>
 80053fa:	bd10      	pop	{r4, pc}

080053fc <memcpy>:
 80053fc:	440a      	add	r2, r1
 80053fe:	4291      	cmp	r1, r2
 8005400:	f100 33ff 	add.w	r3, r0, #4294967295
 8005404:	d100      	bne.n	8005408 <memcpy+0xc>
 8005406:	4770      	bx	lr
 8005408:	b510      	push	{r4, lr}
 800540a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800540e:	4291      	cmp	r1, r2
 8005410:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005414:	d1f9      	bne.n	800540a <memcpy+0xe>
 8005416:	bd10      	pop	{r4, pc}

08005418 <_realloc_r>:
 8005418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800541c:	4680      	mov	r8, r0
 800541e:	4615      	mov	r5, r2
 8005420:	460c      	mov	r4, r1
 8005422:	b921      	cbnz	r1, 800542e <_realloc_r+0x16>
 8005424:	4611      	mov	r1, r2
 8005426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800542a:	f7ff bb89 	b.w	8004b40 <_malloc_r>
 800542e:	b92a      	cbnz	r2, 800543c <_realloc_r+0x24>
 8005430:	f7ff fc8a 	bl	8004d48 <_free_r>
 8005434:	2400      	movs	r4, #0
 8005436:	4620      	mov	r0, r4
 8005438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800543c:	f000 f81a 	bl	8005474 <_malloc_usable_size_r>
 8005440:	4285      	cmp	r5, r0
 8005442:	4606      	mov	r6, r0
 8005444:	d802      	bhi.n	800544c <_realloc_r+0x34>
 8005446:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800544a:	d8f4      	bhi.n	8005436 <_realloc_r+0x1e>
 800544c:	4629      	mov	r1, r5
 800544e:	4640      	mov	r0, r8
 8005450:	f7ff fb76 	bl	8004b40 <_malloc_r>
 8005454:	4607      	mov	r7, r0
 8005456:	2800      	cmp	r0, #0
 8005458:	d0ec      	beq.n	8005434 <_realloc_r+0x1c>
 800545a:	42b5      	cmp	r5, r6
 800545c:	462a      	mov	r2, r5
 800545e:	4621      	mov	r1, r4
 8005460:	bf28      	it	cs
 8005462:	4632      	movcs	r2, r6
 8005464:	f7ff ffca 	bl	80053fc <memcpy>
 8005468:	4621      	mov	r1, r4
 800546a:	4640      	mov	r0, r8
 800546c:	f7ff fc6c 	bl	8004d48 <_free_r>
 8005470:	463c      	mov	r4, r7
 8005472:	e7e0      	b.n	8005436 <_realloc_r+0x1e>

08005474 <_malloc_usable_size_r>:
 8005474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005478:	1f18      	subs	r0, r3, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	bfbc      	itt	lt
 800547e:	580b      	ldrlt	r3, [r1, r0]
 8005480:	18c0      	addlt	r0, r0, r3
 8005482:	4770      	bx	lr

08005484 <_init>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	bf00      	nop
 8005488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548a:	bc08      	pop	{r3}
 800548c:	469e      	mov	lr, r3
 800548e:	4770      	bx	lr

08005490 <_fini>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	bf00      	nop
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr
