
stm-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080046cc  080046cc  000056cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d8  080047d8  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  080047d8  080047d8  000057d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047e0  080047e0  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e0  080047e0  000057e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047e4  080047e4  000057e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080047e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000070  08004858  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004858  000062a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b88  00000000  00000000  00006099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c41  00000000  00000000  0000fc21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  00011868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c4  00000000  00000000  00012150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f52  00000000  00000000  00012814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a605  00000000  00000000  0002a766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000868ad  00000000  00000000  00034d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb618  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d00  00000000  00000000  000bb65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000be35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080046b4 	.word	0x080046b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080046b4 	.word	0x080046b4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08c      	sub	sp, #48	@ 0x30
 8000160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fcd1 	bl	8000b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f85b 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f911 	bl	8000390 <MX_GPIO_Init>
  MX_CAN_Init();
 800016e:	f000 f897 	bl	80002a0 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8e3 	bl	800033c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000176:	4826      	ldr	r0, [pc, #152]	@ (8000210 <main+0xb4>)
 8000178:	f000 ff10 	bl	8000f9c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800017c:	2110      	movs	r1, #16
 800017e:	4824      	ldr	r0, [pc, #144]	@ (8000210 <main+0xb4>)
 8000180:	f001 f940 	bl	8001404 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 8000184:	2201      	movs	r2, #1
 8000186:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800018a:	4822      	ldr	r0, [pc, #136]	@ (8000214 <main+0xb8>)
 800018c:	f001 fed2 	bl	8001f34 <HAL_GPIO_WritePin>
	telemetry_data.tRpm = 0;
 8000190:	4b21      	ldr	r3, [pc, #132]	@ (8000218 <main+0xbc>)
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 8000196:	4b20      	ldr	r3, [pc, #128]	@ (8000218 <main+0xbc>)
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 800019c:	4b1e      	ldr	r3, [pc, #120]	@ (8000218 <main+0xbc>)
 800019e:	2200      	movs	r2, #0
 80001a0:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 80001a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000218 <main+0xbc>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 80001a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000218 <main+0xbc>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 80001ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000218 <main+0xbc>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 80001b4:	4b18      	ldr	r3, [pc, #96]	@ (8000218 <main+0xbc>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 80001ba:	4b17      	ldr	r3, [pc, #92]	@ (8000218 <main+0xbc>)
 80001bc:	2200      	movs	r2, #0
 80001be:	61da      	str	r2, [r3, #28]
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c6:	4813      	ldr	r0, [pc, #76]	@ (8000214 <main+0xb8>)
 80001c8:	f001 feb4 	bl	8001f34 <HAL_GPIO_WritePin>
	  int oscillated_value = oscillate_value();
 80001cc:	f000 f954 	bl	8000478 <oscillate_value>
 80001d0:	6278      	str	r0, [r7, #36]	@ 0x24

	  int rpm = map_value(telemetry_data.tRpm, 0, 12000, 0, 100);
 80001d2:	4b11      	ldr	r3, [pc, #68]	@ (8000218 <main+0xbc>)
 80001d4:	6818      	ldr	r0, [r3, #0]
 80001d6:	2364      	movs	r3, #100	@ 0x64
 80001d8:	9300      	str	r3, [sp, #0]
 80001da:	2300      	movs	r3, #0
 80001dc:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80001e0:	2100      	movs	r1, #0
 80001e2:	f000 f96f 	bl	80004c4 <map_value>
 80001e6:	6238      	str	r0, [r7, #32]
	  char command[32];
	  snprintf(command, sizeof(command), "rpmbar.val=%d", rpm);
 80001e8:	4638      	mov	r0, r7
 80001ea:	6a3b      	ldr	r3, [r7, #32]
 80001ec:	4a0b      	ldr	r2, [pc, #44]	@ (800021c <main+0xc0>)
 80001ee:	2120      	movs	r1, #32
 80001f0:	f003 fa10 	bl	8003614 <sniprintf>

	  // Send the command to the Nextion display
	  send_to_nextion(command);
 80001f4:	463b      	mov	r3, r7
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 f916 	bl	8000428 <send_to_nextion>

	  CAN_Transmit();
 80001fc:	f000 f98a 	bl	8000514 <CAN_Transmit>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000206:	4803      	ldr	r0, [pc, #12]	@ (8000214 <main+0xb8>)
 8000208:	f001 fe94 	bl	8001f34 <HAL_GPIO_WritePin>
  {
 800020c:	bf00      	nop
 800020e:	e7d7      	b.n	80001c0 <main+0x64>
 8000210:	200000b0 	.word	0x200000b0
 8000214:	40011000 	.word	0x40011000
 8000218:	2000008c 	.word	0x2000008c
 800021c:	080046cc 	.word	0x080046cc

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	@ 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	@ 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f003 fafc 	bl	800382c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	2310      	movs	r3, #16
 800024c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000252:	2300      	movs	r3, #0
 8000254:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000256:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800025a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4618      	mov	r0, r3
 8000262:	f001 fe7f 	bl	8001f64 <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800026c:	f000 fa2a 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000274:	2302      	movs	r3, #2
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2101      	movs	r1, #1
 8000288:	4618      	mov	r0, r3
 800028a:	f002 f8ed 	bl	8002468 <HAL_RCC_ClockConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000294:	f000 fa16 	bl	80006c4 <Error_Handler>
  }
}
 8000298:	bf00      	nop
 800029a:	3740      	adds	r7, #64	@ 0x40
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	@ 0x28
 80002a4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002a6:	4b23      	ldr	r3, [pc, #140]	@ (8000334 <MX_CAN_Init+0x94>)
 80002a8:	4a23      	ldr	r2, [pc, #140]	@ (8000338 <MX_CAN_Init+0x98>)
 80002aa:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80002ac:	4b21      	ldr	r3, [pc, #132]	@ (8000334 <MX_CAN_Init+0x94>)
 80002ae:	2203      	movs	r2, #3
 80002b0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002b2:	4b20      	ldr	r3, [pc, #128]	@ (8000334 <MX_CAN_Init+0x94>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000334 <MX_CAN_Init+0x94>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80002be:	4b1d      	ldr	r3, [pc, #116]	@ (8000334 <MX_CAN_Init+0x94>)
 80002c0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80002c4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80002c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000334 <MX_CAN_Init+0x94>)
 80002c8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80002cc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002ce:	4b19      	ldr	r3, [pc, #100]	@ (8000334 <MX_CAN_Init+0x94>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002d4:	4b17      	ldr	r3, [pc, #92]	@ (8000334 <MX_CAN_Init+0x94>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002da:	4b16      	ldr	r3, [pc, #88]	@ (8000334 <MX_CAN_Init+0x94>)
 80002dc:	2200      	movs	r2, #0
 80002de:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002e0:	4b14      	ldr	r3, [pc, #80]	@ (8000334 <MX_CAN_Init+0x94>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002e6:	4b13      	ldr	r3, [pc, #76]	@ (8000334 <MX_CAN_Init+0x94>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002ec:	4b11      	ldr	r3, [pc, #68]	@ (8000334 <MX_CAN_Init+0x94>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002f2:	4810      	ldr	r0, [pc, #64]	@ (8000334 <MX_CAN_Init+0x94>)
 80002f4:	f000 fc8e 	bl	8000c14 <HAL_CAN_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80002fe:	f000 f9e1 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000306:	2300      	movs	r3, #0
 8000308:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800030a:	2301      	movs	r3, #1
 800030c:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x100 << 5;       // Accept all IDs
 800030e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000312:	603b      	str	r3, [r7, #0]
  filterConfig.FilterMaskIdHigh = 0x7FF << 5;;   // Accept all IDs
 8000314:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000318:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;  // Assign to FIFO 1
 800031a:	2301      	movs	r3, #1
 800031c:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 800031e:	2301      	movs	r3, #1
 8000320:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 8000322:	463b      	mov	r3, r7
 8000324:	4619      	mov	r1, r3
 8000326:	4803      	ldr	r0, [pc, #12]	@ (8000334 <MX_CAN_Init+0x94>)
 8000328:	f000 fd6f 	bl	8000e0a <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	3728      	adds	r7, #40	@ 0x28
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	200000b0 	.word	0x200000b0
 8000338:	40006400 	.word	0x40006400

0800033c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000342:	4a12      	ldr	r2, [pc, #72]	@ (800038c <MX_USART1_UART_Init+0x50>)
 8000344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000348:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800034c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000374:	f002 fa06 	bl	8002784 <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800037e:	f000 f9a1 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200000d8 	.word	0x200000d8
 800038c:	40013800 	.word	0x40013800

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0310 	and.w	r3, r3, #16
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003bc:	4b18      	ldr	r3, [pc, #96]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a17      	ldr	r2, [pc, #92]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b15      	ldr	r3, [pc, #84]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0320 	and.w	r3, r3, #32
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b12      	ldr	r3, [pc, #72]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a11      	ldr	r2, [pc, #68]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0304 	and.w	r3, r3, #4
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003f2:	480c      	ldr	r0, [pc, #48]	@ (8000424 <MX_GPIO_Init+0x94>)
 80003f4:	f001 fd9e 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2302      	movs	r3, #2
 8000408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	4804      	ldr	r0, [pc, #16]	@ (8000424 <MX_GPIO_Init+0x94>)
 8000412:	f001 fc0b 	bl	8001c2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	40011000 	.word	0x40011000

08000428 <send_to_nextion>:
}

/*
 * NEXTION UART FUNCTIONS
 */
void send_to_nextion(const char *command) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	// Send the command string
	HAL_UART_Transmit(&huart1, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f7ff fe8b 	bl	800014c <strlen>
 8000436:	4603      	mov	r3, r0
 8000438:	b29a      	uxth	r2, r3
 800043a:	f04f 33ff 	mov.w	r3, #4294967295
 800043e:	6879      	ldr	r1, [r7, #4]
 8000440:	480b      	ldr	r0, [pc, #44]	@ (8000470 <send_to_nextion+0x48>)
 8000442:	f002 f9ef 	bl	8002824 <HAL_UART_Transmit>

	// Send the termination bytes (0xFF 0xFF 0xFF)
	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
 8000446:	4a0b      	ldr	r2, [pc, #44]	@ (8000474 <send_to_nextion+0x4c>)
 8000448:	f107 030c 	add.w	r3, r7, #12
 800044c:	6812      	ldr	r2, [r2, #0]
 800044e:	4611      	mov	r1, r2
 8000450:	8019      	strh	r1, [r3, #0]
 8000452:	3302      	adds	r3, #2
 8000454:	0c12      	lsrs	r2, r2, #16
 8000456:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
 8000458:	f107 010c 	add.w	r1, r7, #12
 800045c:	f04f 33ff 	mov.w	r3, #4294967295
 8000460:	2203      	movs	r2, #3
 8000462:	4803      	ldr	r0, [pc, #12]	@ (8000470 <send_to_nextion+0x48>)
 8000464:	f002 f9de 	bl	8002824 <HAL_UART_Transmit>
}
 8000468:	bf00      	nop
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	200000d8 	.word	0x200000d8
 8000474:	080046dc 	.word	0x080046dc

08000478 <oscillate_value>:

int oscillate_value() {
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
    // Update value based on direction
    value += direction * step;
 800047c:	4b0e      	ldr	r3, [pc, #56]	@ (80004b8 <oscillate_value+0x40>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a0e      	ldr	r2, [pc, #56]	@ (80004bc <oscillate_value+0x44>)
 8000482:	6812      	ldr	r2, [r2, #0]
 8000484:	fb03 f202 	mul.w	r2, r3, r2
 8000488:	4b0d      	ldr	r3, [pc, #52]	@ (80004c0 <oscillate_value+0x48>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4413      	add	r3, r2
 800048e:	4a0c      	ldr	r2, [pc, #48]	@ (80004c0 <oscillate_value+0x48>)
 8000490:	6013      	str	r3, [r2, #0]

    // Reverse direction at boundaries
    if (value >= 100 || value <= 0) {
 8000492:	4b0b      	ldr	r3, [pc, #44]	@ (80004c0 <oscillate_value+0x48>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b63      	cmp	r3, #99	@ 0x63
 8000498:	dc03      	bgt.n	80004a2 <oscillate_value+0x2a>
 800049a:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <oscillate_value+0x48>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	dc04      	bgt.n	80004ac <oscillate_value+0x34>
        direction *= -1;
 80004a2:	4b05      	ldr	r3, [pc, #20]	@ (80004b8 <oscillate_value+0x40>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	425b      	negs	r3, r3
 80004a8:	4a03      	ldr	r2, [pc, #12]	@ (80004b8 <oscillate_value+0x40>)
 80004aa:	6013      	str	r3, [r2, #0]
    }

    return value;
 80004ac:	4b04      	ldr	r3, [pc, #16]	@ (80004c0 <oscillate_value+0x48>)
 80004ae:	681b      	ldr	r3, [r3, #0]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	20000000 	.word	0x20000000
 80004bc:	20000004 	.word	0x20000004
 80004c0:	20000120 	.word	0x20000120

080004c4 <map_value>:
 * @param in_max: The maximum of the input range.
 * @param out_min: The minimum of the output range.
 * @param out_max: The maximum of the output range.
 * @return The mapped value in the output range.
 */
int32_t map_value(int32_t input, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max) {
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
 80004d0:	603b      	str	r3, [r7, #0]
    if (input < in_min) input = in_min;
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	da01      	bge.n	80004de <map_value+0x1a>
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	60fb      	str	r3, [r7, #12]
    if (input > in_max) input = in_max;
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	dd01      	ble.n	80004ea <map_value+0x26>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	60fb      	str	r3, [r7, #12]

    return (input - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	69b9      	ldr	r1, [r7, #24]
 80004f2:	683a      	ldr	r2, [r7, #0]
 80004f4:	1a8a      	subs	r2, r1, r2
 80004f6:	fb03 f202 	mul.w	r2, r3, r2
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	1acb      	subs	r3, r1, r3
 8000500:	fb92 f2f3 	sdiv	r2, r2, r3
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	4413      	add	r3, r2
}
 8000508:	4618      	mov	r0, r3
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
	...

08000514 <CAN_Transmit>:
//		uint32_t error = HAL_CAN_GetError(&hcan);
//		printf("CAN Error Code: 0x%08lx\n", error);
//	}
//}

void CAN_Transmit() {
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	@ 0x50
 8000518:	af00      	add	r7, sp, #0
	uint32_t currentTime = HAL_GetTick();
 800051a:	f000 fb4d 	bl	8000bb8 <HAL_GetTick>
 800051e:	64b8      	str	r0, [r7, #72]	@ 0x48

	if(currentTime - lastSendTime >= 10) {
 8000520:	4b3c      	ldr	r3, [pc, #240]	@ (8000614 <CAN_Transmit+0x100>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	2b09      	cmp	r3, #9
 800052a:	d96e      	bls.n	800060a <CAN_Transmit+0xf6>
		CAN_TxHeaderTypeDef TxHeader;
		uint32_t TxMailbox;

		// Create a telemetry_packet instance and initialize its fields
		user_input_data_t dataToSend;
		dataToSend.buttons = 0x0F0F;         // Example: Buttons pressed
 800052c:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8000530:	81bb      	strh	r3, [r7, #12]
		dataToSend.hall_analog_1 = 100;      // Example: Hall sensor 1 value
 8000532:	2364      	movs	r3, #100	@ 0x64
 8000534:	73bb      	strb	r3, [r7, #14]
		dataToSend.hall_analog_2 = 200;      // Example: Hall sensor 2 value
 8000536:	23c8      	movs	r3, #200	@ 0xc8
 8000538:	73fb      	strb	r3, [r7, #15]
		dataToSend.encoder_1 = 1000;         // Example: Encoder 1 value
 800053a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800053e:	823b      	strh	r3, [r7, #16]
		dataToSend.encoder_2 = -2000;        // Example: Encoder 2 value
 8000540:	f64f 0330 	movw	r3, #63536	@ 0xf830
 8000544:	827b      	strh	r3, [r7, #18]
		dataToSend.encoder_3 = 5000;         // Example: Encoder 3 value
 8000546:	f241 3388 	movw	r3, #5000	@ 0x1388
 800054a:	82bb      	strh	r3, [r7, #20]

		uint8_t* rawData = (uint8_t*)&dataToSend;
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	647b      	str	r3, [r7, #68]	@ 0x44

		// Initialize CAN Header
		TxHeader.StdId = 0x101;           // CAN ID for the message
 8000552:	f240 1301 	movw	r3, #257	@ 0x101
 8000556:	61fb      	str	r3, [r7, #28]
		TxHeader.ExtId = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	623b      	str	r3, [r7, #32]
		TxHeader.IDE = CAN_ID_STD;        // Use Standard ID
 800055c:	2300      	movs	r3, #0
 800055e:	627b      	str	r3, [r7, #36]	@ 0x24
		TxHeader.RTR = CAN_RTR_DATA;      // Data frame
 8000560:	2300      	movs	r3, #0
 8000562:	62bb      	str	r3, [r7, #40]	@ 0x28
		TxHeader.DLC = 8;                 // Maximum data length for each CAN frame
 8000564:	2308      	movs	r3, #8
 8000566:	62fb      	str	r3, [r7, #44]	@ 0x2c

		uint8_t frameData[8];             // Temporary buffer for each CAN frame

		// Calculate the size of the telemetry_packet struct
		int totalSize = sizeof(user_input_data_t);
 8000568:	230a      	movs	r3, #10
 800056a:	643b      	str	r3, [r7, #64]	@ 0x40

		// Split the telemetry_packet into CAN frames
		for (int i = 0; i < totalSize; i += 8) {
 800056c:	2300      	movs	r3, #0
 800056e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000570:	e047      	b.n	8000602 <CAN_Transmit+0xee>
			// Calculate the size of the current chunk (for the last frame)
			int chunkSize = (totalSize - i >= 8) ? 8 : (totalSize - i);
 8000572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000576:	1ad3      	subs	r3, r2, r3
 8000578:	2b08      	cmp	r3, #8
 800057a:	bfa8      	it	ge
 800057c:	2308      	movge	r3, #8
 800057e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			// Copy the next chunk of data into the frame buffer
			memcpy(frameData, &rawData[i], chunkSize);
 8000580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000582:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000584:	18d1      	adds	r1, r2, r3
 8000586:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	4618      	mov	r0, r3
 800058c:	f003 f9c9 	bl	8003922 <memcpy>

			// Adjust DLC for the last frame
			TxHeader.DLC = chunkSize;
 8000590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000592:	62fb      	str	r3, [r7, #44]	@ 0x2c

			HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, frameData, &TxMailbox);
 8000594:	f107 0318 	add.w	r3, r7, #24
 8000598:	1d3a      	adds	r2, r7, #4
 800059a:	f107 011c 	add.w	r1, r7, #28
 800059e:	481e      	ldr	r0, [pc, #120]	@ (8000618 <CAN_Transmit+0x104>)
 80005a0:	f000 fd40 	bl	8001024 <HAL_CAN_AddTxMessage>
 80005a4:	4603      	mov	r3, r0
 80005a6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			if (status != HAL_OK) {
 80005aa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d01e      	beq.n	80005f0 <CAN_Transmit+0xdc>
				// Inspect the error
				if (status == HAL_ERROR) {
 80005b2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d103      	bne.n	80005c2 <CAN_Transmit+0xae>
					printf("HAL_CAN_AddTxMessage failed: HAL_ERROR\n");
 80005ba:	4818      	ldr	r0, [pc, #96]	@ (800061c <CAN_Transmit+0x108>)
 80005bc:	f003 f822 	bl	8003604 <puts>
 80005c0:	e00e      	b.n	80005e0 <CAN_Transmit+0xcc>
				} else if (status == HAL_BUSY) {
 80005c2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d103      	bne.n	80005d2 <CAN_Transmit+0xbe>
					printf("HAL_CAN_AddTxMessage failed: HAL_BUSY\n");
 80005ca:	4815      	ldr	r0, [pc, #84]	@ (8000620 <CAN_Transmit+0x10c>)
 80005cc:	f003 f81a 	bl	8003604 <puts>
 80005d0:	e006      	b.n	80005e0 <CAN_Transmit+0xcc>
				} else if (status == HAL_TIMEOUT) {
 80005d2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	d102      	bne.n	80005e0 <CAN_Transmit+0xcc>
					printf("HAL_CAN_AddTxMessage failed: HAL_TIMEOUT\n");
 80005da:	4812      	ldr	r0, [pc, #72]	@ (8000624 <CAN_Transmit+0x110>)
 80005dc:	f003 f812 	bl	8003604 <puts>
				}

				// Optionally log the state of CAN error counters
				uint32_t error = HAL_CAN_GetError(&hcan);
 80005e0:	480d      	ldr	r0, [pc, #52]	@ (8000618 <CAN_Transmit+0x104>)
 80005e2:	f001 f957 	bl	8001894 <HAL_CAN_GetError>
 80005e6:	6378      	str	r0, [r7, #52]	@ 0x34
				printf("CAN Error Code: 0x%08lx\n", error); // Only if you decide to stop execution
 80005e8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80005ea:	480f      	ldr	r0, [pc, #60]	@ (8000628 <CAN_Transmit+0x114>)
 80005ec:	f002 ffa2 	bl	8003534 <iprintf>
			}
			lastSendTime = currentTime;  // Update last transmission time
 80005f0:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <CAN_Transmit+0x100>)
 80005f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80005f4:	6013      	str	r3, [r2, #0]
			HAL_Delay(1);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 fae8 	bl	8000bcc <HAL_Delay>
		for (int i = 0; i < totalSize; i += 8) {
 80005fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80005fe:	3308      	adds	r3, #8
 8000600:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000602:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000606:	429a      	cmp	r2, r3
 8000608:	dbb3      	blt.n	8000572 <CAN_Transmit+0x5e>
		}
	}
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	@ 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000124 	.word	0x20000124
 8000618:	200000b0 	.word	0x200000b0
 800061c:	080046e0 	.word	0x080046e0
 8000620:	08004708 	.word	0x08004708
 8000624:	08004730 	.word	0x08004730
 8000628:	0800475c 	.word	0x0800475c

0800062c <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN receive interrupt callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b08c      	sub	sp, #48	@ 0x30
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8]; // Max CAN frame size is 8 bytes

    // Receive the message
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rxHeader, rxData) == HAL_OK) {
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	f107 0210 	add.w	r2, r7, #16
 800063c:	2101      	movs	r1, #1
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 fdbf 	bl	80011c2 <HAL_CAN_GetRxMessage>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d132      	bne.n	80006b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x84>
    	 // Check if the message ID matches 0x100
		if (rxHeader.StdId == 0x100) {
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000650:	d12e      	bne.n	80006b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x84>
			static uint8_t buffer[sizeof(telemetry_packet)];
			static uint8_t offset = 0;

			// Copy received data into buffer
			uint8_t bytesToCopy = (rxHeader.DLC < sizeof(telemetry_packet) - offset) ? rxHeader.DLC : sizeof(telemetry_packet) - offset;
 8000652:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	f1c3 0224 	rsb	r2, r3, #36	@ 0x24
 800065a:	6a3b      	ldr	r3, [r7, #32]
 800065c:	4293      	cmp	r3, r2
 800065e:	bf28      	it	cs
 8000660:	4613      	movcs	r3, r2
 8000662:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			memcpy(&buffer[offset], rxData, bytesToCopy);
 8000666:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 800066e:	4413      	add	r3, r2
 8000670:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000674:	f107 0108 	add.w	r1, r7, #8
 8000678:	4618      	mov	r0, r3
 800067a:	f003 f952 	bl	8003922 <memcpy>
			offset += bytesToCopy;
 800067e:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000686:	4413      	add	r3, r2
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 800068c:	701a      	strb	r2, [r3, #0]

			// Check if the entire packet has been received
			if (offset >= sizeof(telemetry_packet)) {
 800068e:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b23      	cmp	r3, #35	@ 0x23
 8000694:	d90c      	bls.n	80006b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x84>
				// Copy buffer into the telemetry_packet struct
				memcpy(&telemetry_data, buffer, sizeof(telemetry_packet));
 8000696:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 8000698:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 800069a:	4614      	mov	r4, r2
 800069c:	461d      	mov	r5, r3
 800069e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a6:	682b      	ldr	r3, [r5, #0]
 80006a8:	6023      	str	r3, [r4, #0]
				offset = 0; // Reset offset for the next packet
 80006aa:	4b03      	ldr	r3, [pc, #12]	@ (80006b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
			}
		}
    }
}
 80006b0:	bf00      	nop
 80006b2:	3730      	adds	r7, #48	@ 0x30
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bdb0      	pop	{r4, r5, r7, pc}
 80006b8:	20000128 	.word	0x20000128
 80006bc:	2000012c 	.word	0x2000012c
 80006c0:	2000008c 	.word	0x2000008c

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <Error_Handler+0x8>

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006d6:	4b15      	ldr	r3, [pc, #84]	@ (800072c <HAL_MspInit+0x5c>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4a14      	ldr	r2, [pc, #80]	@ (800072c <HAL_MspInit+0x5c>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6193      	str	r3, [r2, #24]
 80006e2:	4b12      	ldr	r3, [pc, #72]	@ (800072c <HAL_MspInit+0x5c>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <HAL_MspInit+0x5c>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a0e      	ldr	r2, [pc, #56]	@ (800072c <HAL_MspInit+0x5c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <HAL_MspInit+0x5c>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000706:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <HAL_MspInit+0x60>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	4a04      	ldr	r2, [pc, #16]	@ (8000730 <HAL_MspInit+0x60>)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	40021000 	.word	0x40021000
 8000730:	40010000 	.word	0x40010000

08000734 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a2c      	ldr	r2, [pc, #176]	@ (8000800 <HAL_CAN_MspInit+0xcc>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d151      	bne.n	80007f8 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000754:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <HAL_CAN_MspInit+0xd0>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	4a2a      	ldr	r2, [pc, #168]	@ (8000804 <HAL_CAN_MspInit+0xd0>)
 800075a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800075e:	61d3      	str	r3, [r2, #28]
 8000760:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <HAL_CAN_MspInit+0xd0>)
 8000762:	69db      	ldr	r3, [r3, #28]
 8000764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b25      	ldr	r3, [pc, #148]	@ (8000804 <HAL_CAN_MspInit+0xd0>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a24      	ldr	r2, [pc, #144]	@ (8000804 <HAL_CAN_MspInit+0xd0>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <HAL_CAN_MspInit+0xd0>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000784:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000788:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	481b      	ldr	r0, [pc, #108]	@ (8000808 <HAL_CAN_MspInit+0xd4>)
 800079a:	f001 fa47 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800079e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	4815      	ldr	r0, [pc, #84]	@ (8000808 <HAL_CAN_MspInit+0xd4>)
 80007b4:	f001 fa3a 	bl	8001c2c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	2013      	movs	r0, #19
 80007be:	f001 f94c 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80007c2:	2013      	movs	r0, #19
 80007c4:	f001 f965 	bl	8001a92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2100      	movs	r1, #0
 80007cc:	2014      	movs	r0, #20
 80007ce:	f001 f944 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80007d2:	2014      	movs	r0, #20
 80007d4:	f001 f95d 	bl	8001a92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	2015      	movs	r0, #21
 80007de:	f001 f93c 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80007e2:	2015      	movs	r0, #21
 80007e4:	f001 f955 	bl	8001a92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2100      	movs	r1, #0
 80007ec:	2016      	movs	r0, #22
 80007ee:	f001 f934 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80007f2:	2016      	movs	r0, #22
 80007f4:	f001 f94d 	bl	8001a92 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40006400 	.word	0x40006400
 8000804:	40021000 	.word	0x40021000
 8000808:	40010800 	.word	0x40010800

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a20      	ldr	r2, [pc, #128]	@ (80008a8 <HAL_UART_MspInit+0x9c>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d139      	bne.n	80008a0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <HAL_UART_MspInit+0xa0>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a1e      	ldr	r2, [pc, #120]	@ (80008ac <HAL_UART_MspInit+0xa0>)
 8000832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <HAL_UART_MspInit+0xa0>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <HAL_UART_MspInit+0xa0>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a18      	ldr	r2, [pc, #96]	@ (80008ac <HAL_UART_MspInit+0xa0>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <HAL_UART_MspInit+0xa0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800085c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000860:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	4619      	mov	r1, r3
 8000870:	480f      	ldr	r0, [pc, #60]	@ (80008b0 <HAL_UART_MspInit+0xa4>)
 8000872:	f001 f9db 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800087a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <HAL_UART_MspInit+0xa4>)
 800088c:	f001 f9ce 	bl	8001c2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	2025      	movs	r0, #37	@ 0x25
 8000896:	f001 f8e0 	bl	8001a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800089a:	2025      	movs	r0, #37	@ 0x25
 800089c:	f001 f8f9 	bl	8001a92 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40013800 	.word	0x40013800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010800 	.word	0x40010800

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <NMI_Handler+0x4>

080008bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <MemManage_Handler+0x4>

080008cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <UsageFault_Handler+0x4>

080008dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f946 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000910:	4802      	ldr	r0, [pc, #8]	@ (800091c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000912:	f000 fd9c 	bl	800144e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000b0 	.word	0x200000b0

08000920 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000926:	f000 fd92 	bl	800144e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000b0 	.word	0x200000b0

08000934 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000938:	4802      	ldr	r0, [pc, #8]	@ (8000944 <CAN1_RX1_IRQHandler+0x10>)
 800093a:	f000 fd88 	bl	800144e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000b0 	.word	0x200000b0

08000948 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <CAN1_SCE_IRQHandler+0x10>)
 800094e:	f000 fd7e 	bl	800144e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000b0 	.word	0x200000b0

0800095c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000960:	4802      	ldr	r0, [pc, #8]	@ (800096c <USART1_IRQHandler+0x10>)
 8000962:	f001 ffeb 	bl	800293c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000d8 	.word	0x200000d8

08000970 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e00a      	b.n	8000998 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000982:	f3af 8000 	nop.w
 8000986:	4601      	mov	r1, r0
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	60ba      	str	r2, [r7, #8]
 800098e:	b2ca      	uxtb	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf0      	blt.n	8000982 <_read+0x12>
  }

  return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e009      	b.n	80009d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf1      	blt.n	80009bc <_write+0x12>
  }
  return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_close>:

int _close(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a08:	605a      	str	r2, [r3, #4]
  return 0;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <_isatty>:

int _isatty(int file)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr

08000a2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b085      	sub	sp, #20
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
	...

08000a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a4c:	4a14      	ldr	r2, [pc, #80]	@ (8000aa0 <_sbrk+0x5c>)
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <_sbrk+0x60>)
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a58:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <_sbrk+0x64>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	@ (8000aac <_sbrk+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d207      	bcs.n	8000a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a74:	f002 ff28 	bl	80038c8 <__errno>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	e009      	b.n	8000a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a05      	ldr	r2, [pc, #20]	@ (8000aa8 <_sbrk+0x64>)
 8000a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20005000 	.word	0x20005000
 8000aa4:	00000400 	.word	0x00000400
 8000aa8:	20000150 	.word	0x20000150
 8000aac:	200002a8 	.word	0x200002a8

08000ab0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000abc:	f7ff fff8 	bl	8000ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ac2:	490c      	ldr	r1, [pc, #48]	@ (8000af4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8000af8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a09      	ldr	r2, [pc, #36]	@ (8000afc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ad8:	4c09      	ldr	r4, [pc, #36]	@ (8000b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f002 fef5 	bl	80038d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aea:	f7ff fb37 	bl	800015c <main>
  bx lr
 8000aee:	4770      	bx	lr
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000af8:	080047e8 	.word	0x080047e8
  ldr r2, =_sbss
 8000afc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b00:	200002a4 	.word	0x200002a4

08000b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC1_2_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <HAL_Init+0x28>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a07      	ldr	r2, [pc, #28]	@ (8000b30 <HAL_Init+0x28>)
 8000b12:	f043 0310 	orr.w	r3, r3, #16
 8000b16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 ff93 	bl	8001a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1e:	200f      	movs	r0, #15
 8000b20:	f000 f808 	bl	8000b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b24:	f7ff fdd4 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40022000 	.word	0x40022000

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <HAL_InitTick+0x54>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <HAL_InitTick+0x58>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 ffab 	bl	8001aae <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 ff73 	bl	8001a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	@ (8000b90 <HAL_InitTick+0x5c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000010 	.word	0x20000010
 8000b90:	2000000c 	.word	0x2000000c

08000b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <HAL_IncTick+0x1c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <HAL_IncTick+0x20>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a03      	ldr	r2, [pc, #12]	@ (8000bb4 <HAL_IncTick+0x20>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	20000010 	.word	0x20000010
 8000bb4:	20000154 	.word	0x20000154

08000bb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b02      	ldr	r3, [pc, #8]	@ (8000bc8 <HAL_GetTick+0x10>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	20000154 	.word	0x20000154

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff fff0 	bl	8000bb8 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <HAL_Delay+0x44>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffe0 	bl	8000bb8 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000010 	.word	0x20000010

08000c14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e0ed      	b.n	8000e02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d102      	bne.n	8000c38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fd7e 	bl	8000734 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f042 0201 	orr.w	r2, r2, #1
 8000c46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c48:	f7ff ffb6 	bl	8000bb8 <HAL_GetTick>
 8000c4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c4e:	e012      	b.n	8000c76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c50:	f7ff ffb2 	bl	8000bb8 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b0a      	cmp	r3, #10
 8000c5c:	d90b      	bls.n	8000c76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2205      	movs	r2, #5
 8000c6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e0c5      	b.n	8000e02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0e5      	beq.n	8000c50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 0202 	bic.w	r2, r2, #2
 8000c92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c94:	f7ff ff90 	bl	8000bb8 <HAL_GetTick>
 8000c98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c9a:	e012      	b.n	8000cc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c9c:	f7ff ff8c 	bl	8000bb8 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b0a      	cmp	r3, #10
 8000ca8:	d90b      	bls.n	8000cc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2205      	movs	r2, #5
 8000cba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e09f      	b.n	8000e02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1e5      	bne.n	8000c9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7e1b      	ldrb	r3, [r3, #24]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d108      	bne.n	8000cea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	e007      	b.n	8000cfa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7e5b      	ldrb	r3, [r3, #25]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d108      	bne.n	8000d14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e007      	b.n	8000d24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7e9b      	ldrb	r3, [r3, #26]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d108      	bne.n	8000d3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f042 0220 	orr.w	r2, r2, #32
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	e007      	b.n	8000d4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 0220 	bic.w	r2, r2, #32
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7edb      	ldrb	r3, [r3, #27]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d108      	bne.n	8000d68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0210 	bic.w	r2, r2, #16
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e007      	b.n	8000d78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0210 	orr.w	r2, r2, #16
 8000d76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	7f1b      	ldrb	r3, [r3, #28]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d108      	bne.n	8000d92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f042 0208 	orr.w	r2, r2, #8
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	e007      	b.n	8000da2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f022 0208 	bic.w	r2, r2, #8
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7f5b      	ldrb	r3, [r3, #29]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d108      	bne.n	8000dbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f042 0204 	orr.w	r2, r2, #4
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	e007      	b.n	8000dcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 0204 	bic.w	r2, r2, #4
 8000dca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	ea42 0103 	orr.w	r1, r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b087      	sub	sp, #28
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e20:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e22:	7cfb      	ldrb	r3, [r7, #19]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d003      	beq.n	8000e30 <HAL_CAN_ConfigFilter+0x26>
 8000e28:	7cfb      	ldrb	r3, [r7, #19]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	f040 80aa 	bne.w	8000f84 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e36:	f043 0201 	orr.w	r2, r3, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	2201      	movs	r2, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d123      	bne.n	8000eb2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	401a      	ands	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3248      	adds	r2, #72	@ 0x48
 8000e92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ea6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ea8:	6979      	ldr	r1, [r7, #20]
 8000eaa:	3348      	adds	r3, #72	@ 0x48
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	440b      	add	r3, r1
 8000eb0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d122      	bne.n	8000f00 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000eda:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3248      	adds	r2, #72	@ 0x48
 8000ee0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ef4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ef6:	6979      	ldr	r1, [r7, #20]
 8000ef8:	3348      	adds	r3, #72	@ 0x48
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	440b      	add	r3, r1
 8000efe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d109      	bne.n	8000f1c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000f1a:	e007      	b.n	8000f2c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d109      	bne.n	8000f48 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000f46:	e007      	b.n	8000f58 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	431a      	orrs	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d107      	bne.n	8000f70 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f76:	f023 0201 	bic.w	r2, r3, #1
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e006      	b.n	8000f92 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
  }
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	371c      	adds	r7, #28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d12e      	bne.n	800100e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0201 	bic.w	r2, r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fc8:	f7ff fdf6 	bl	8000bb8 <HAL_GetTick>
 8000fcc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fce:	e012      	b.n	8000ff6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fd0:	f7ff fdf2 	bl	8000bb8 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b0a      	cmp	r3, #10
 8000fdc:	d90b      	bls.n	8000ff6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2205      	movs	r2, #5
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e012      	b.n	800101c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1e5      	bne.n	8000fd0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e006      	b.n	800101c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001012:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
  }
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	@ 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001038:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001042:	7ffb      	ldrb	r3, [r7, #31]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d003      	beq.n	8001050 <HAL_CAN_AddTxMessage+0x2c>
 8001048:	7ffb      	ldrb	r3, [r7, #31]
 800104a:	2b02      	cmp	r3, #2
 800104c:	f040 80ad 	bne.w	80011aa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10a      	bne.n	8001070 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001060:	2b00      	cmp	r3, #0
 8001062:	d105      	bne.n	8001070 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 8095 	beq.w	800119a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	0e1b      	lsrs	r3, r3, #24
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800107a:	2201      	movs	r2, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10d      	bne.n	80010a8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001096:	68f9      	ldr	r1, [r7, #12]
 8001098:	6809      	ldr	r1, [r1, #0]
 800109a:	431a      	orrs	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3318      	adds	r3, #24
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	440b      	add	r3, r1
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e00f      	b.n	80010c8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010b2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010b8:	68f9      	ldr	r1, [r7, #12]
 80010ba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010bc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3318      	adds	r3, #24
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	440b      	add	r3, r1
 80010c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6819      	ldr	r1, [r3, #0]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3318      	adds	r3, #24
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	440b      	add	r3, r1
 80010d8:	3304      	adds	r3, #4
 80010da:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	7d1b      	ldrb	r3, [r3, #20]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d111      	bne.n	8001108 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3318      	adds	r3, #24
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	3304      	adds	r3, #4
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	6811      	ldr	r1, [r2, #0]
 80010f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3318      	adds	r3, #24
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	440b      	add	r3, r1
 8001104:	3304      	adds	r3, #4
 8001106:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3307      	adds	r3, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	061a      	lsls	r2, r3, #24
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3306      	adds	r3, #6
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	041b      	lsls	r3, r3, #16
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3305      	adds	r3, #5
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	4313      	orrs	r3, r2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	3204      	adds	r2, #4
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	4610      	mov	r0, r2
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	6811      	ldr	r1, [r2, #0]
 8001130:	ea43 0200 	orr.w	r2, r3, r0
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	440b      	add	r3, r1
 800113a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800113e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3303      	adds	r3, #3
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	061a      	lsls	r2, r3, #24
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3302      	adds	r3, #2
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	041b      	lsls	r3, r3, #16
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3301      	adds	r3, #1
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	4313      	orrs	r3, r2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	7812      	ldrb	r2, [r2, #0]
 8001160:	4610      	mov	r0, r2
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	6811      	ldr	r1, [r2, #0]
 8001166:	ea43 0200 	orr.w	r2, r3, r0
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	440b      	add	r3, r1
 8001170:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001174:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3318      	adds	r3, #24
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	4413      	add	r3, r2
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	6811      	ldr	r1, [r2, #0]
 8001188:	f043 0201 	orr.w	r2, r3, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	3318      	adds	r3, #24
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	440b      	add	r3, r1
 8001194:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e00e      	b.n	80011b8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e006      	b.n	80011b8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
  }
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3724      	adds	r7, #36	@ 0x24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011c2:	b480      	push	{r7}
 80011c4:	b087      	sub	sp, #28
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d003      	beq.n	80011e6 <HAL_CAN_GetRxMessage+0x24>
 80011de:	7dfb      	ldrb	r3, [r7, #23]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	f040 8103 	bne.w	80013ec <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10e      	bne.n	800120a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d116      	bne.n	8001228 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e0f7      	b.n	80013fa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d107      	bne.n	8001228 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e0e8      	b.n	80013fa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	331b      	adds	r3, #27
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4413      	add	r3, r2
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0204 	and.w	r2, r3, #4
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10c      	bne.n	8001260 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	331b      	adds	r3, #27
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4413      	add	r3, r2
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	0d5b      	lsrs	r3, r3, #21
 8001256:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	e00b      	b.n	8001278 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	331b      	adds	r3, #27
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	4413      	add	r3, r2
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	08db      	lsrs	r3, r3, #3
 8001270:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	331b      	adds	r3, #27
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4413      	add	r3, r2
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0202 	and.w	r2, r3, #2
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	331b      	adds	r3, #27
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	4413      	add	r3, r2
 800129a:	3304      	adds	r3, #4
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2208      	movs	r2, #8
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	e00b      	b.n	80012c6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	331b      	adds	r3, #27
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	4413      	add	r3, r2
 80012ba:	3304      	adds	r3, #4
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 020f 	and.w	r2, r3, #15
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	331b      	adds	r3, #27
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	4413      	add	r3, r2
 80012d2:	3304      	adds	r3, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	331b      	adds	r3, #27
 80012e6:	011b      	lsls	r3, r3, #4
 80012e8:	4413      	add	r3, r2
 80012ea:	3304      	adds	r3, #4
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	0c1b      	lsrs	r3, r3, #16
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	4413      	add	r3, r2
 8001300:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	4413      	add	r3, r2
 8001316:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	0a1a      	lsrs	r2, r3, #8
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	4413      	add	r3, r2
 8001330:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	0c1a      	lsrs	r2, r3, #16
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	3302      	adds	r3, #2
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	4413      	add	r3, r2
 800134a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	0e1a      	lsrs	r2, r3, #24
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	3303      	adds	r3, #3
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	4413      	add	r3, r2
 8001364:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	3304      	adds	r3, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	4413      	add	r3, r2
 800137c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	0a1a      	lsrs	r2, r3, #8
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	3305      	adds	r3, #5
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	4413      	add	r3, r2
 8001396:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	0c1a      	lsrs	r2, r3, #16
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	3306      	adds	r3, #6
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	4413      	add	r3, r2
 80013b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	0e1a      	lsrs	r2, r3, #24
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	3307      	adds	r3, #7
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d108      	bne.n	80013d8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0220 	orr.w	r2, r2, #32
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	e007      	b.n	80013e8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0220 	orr.w	r2, r2, #32
 80013e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	e006      	b.n	80013fa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
  }
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	371c      	adds	r7, #28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001414:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d002      	beq.n	8001422 <HAL_CAN_ActivateNotification+0x1e>
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d109      	bne.n	8001436 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6959      	ldr	r1, [r3, #20]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e006      	b.n	8001444 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
  }
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b08a      	sub	sp, #40	@ 0x28
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d07c      	beq.n	800158e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d023      	beq.n	80014e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2201      	movs	r2, #1
 80014a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f983 	bl	80017bc <HAL_CAN_TxMailbox0CompleteCallback>
 80014b6:	e016      	b.n	80014e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ca:	e00c      	b.n	80014e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d004      	beq.n	80014e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80014de:	e002      	b.n	80014e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f986 	bl	80017f2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d024      	beq.n	800153a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f962 	bl	80017ce <HAL_CAN_TxMailbox1CompleteCallback>
 800150a:	e016      	b.n	800153a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001512:	2b00      	cmp	r3, #0
 8001514:	d004      	beq.n	8001520 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
 800151e:	e00c      	b.n	800153a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
 8001532:	e002      	b.n	800153a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f965 	bl	8001804 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d024      	beq.n	800158e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800154c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f941 	bl	80017e0 <HAL_CAN_TxMailbox2CompleteCallback>
 800155e:	e016      	b.n	800158e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d004      	beq.n	8001574 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
 8001572:	e00c      	b.n	800158e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d004      	beq.n	8001588 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
 8001586:	e002      	b.n	800158e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f944 	bl	8001816 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00c      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2210      	movs	r2, #16
 80015b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00b      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2208      	movs	r2, #8
 80015cc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f933 	bl	800183a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d009      	beq.n	80015f2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f91b 	bl	8001828 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00c      	beq.n	8001616 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	2b00      	cmp	r3, #0
 8001604:	d007      	beq.n	8001616 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2210      	movs	r2, #16
 8001614:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00b      	beq.n	8001638 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2208      	movs	r2, #8
 8001630:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f90a 	bl	800184c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d009      	beq.n	8001656 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7fe ffeb 	bl	800062c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00b      	beq.n	8001678 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2210      	movs	r2, #16
 8001670:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f8f3 	bl	800185e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00b      	beq.n	800169a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d006      	beq.n	800169a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2208      	movs	r2, #8
 8001692:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f8eb 	bl	8001870 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d07b      	beq.n	800179c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d072      	beq.n	8001794 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001708:	2b00      	cmp	r3, #0
 800170a:	d043      	beq.n	8001794 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001712:	2b00      	cmp	r3, #0
 8001714:	d03e      	beq.n	8001794 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800171c:	2b60      	cmp	r3, #96	@ 0x60
 800171e:	d02b      	beq.n	8001778 <HAL_CAN_IRQHandler+0x32a>
 8001720:	2b60      	cmp	r3, #96	@ 0x60
 8001722:	d82e      	bhi.n	8001782 <HAL_CAN_IRQHandler+0x334>
 8001724:	2b50      	cmp	r3, #80	@ 0x50
 8001726:	d022      	beq.n	800176e <HAL_CAN_IRQHandler+0x320>
 8001728:	2b50      	cmp	r3, #80	@ 0x50
 800172a:	d82a      	bhi.n	8001782 <HAL_CAN_IRQHandler+0x334>
 800172c:	2b40      	cmp	r3, #64	@ 0x40
 800172e:	d019      	beq.n	8001764 <HAL_CAN_IRQHandler+0x316>
 8001730:	2b40      	cmp	r3, #64	@ 0x40
 8001732:	d826      	bhi.n	8001782 <HAL_CAN_IRQHandler+0x334>
 8001734:	2b30      	cmp	r3, #48	@ 0x30
 8001736:	d010      	beq.n	800175a <HAL_CAN_IRQHandler+0x30c>
 8001738:	2b30      	cmp	r3, #48	@ 0x30
 800173a:	d822      	bhi.n	8001782 <HAL_CAN_IRQHandler+0x334>
 800173c:	2b10      	cmp	r3, #16
 800173e:	d002      	beq.n	8001746 <HAL_CAN_IRQHandler+0x2f8>
 8001740:	2b20      	cmp	r3, #32
 8001742:	d005      	beq.n	8001750 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001744:	e01d      	b.n	8001782 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800174e:	e019      	b.n	8001784 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	f043 0310 	orr.w	r3, r3, #16
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001758:	e014      	b.n	8001784 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	f043 0320 	orr.w	r3, r3, #32
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001762:	e00f      	b.n	8001784 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800176c:	e00a      	b.n	8001784 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001776:	e005      	b.n	8001784 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001780:	e000      	b.n	8001784 <HAL_CAN_IRQHandler+0x336>
            break;
 8001782:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699a      	ldr	r2, [r3, #24]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001792:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2204      	movs	r2, #4
 800179a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f867 	bl	8001882 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	@ 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
	...

080018ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	@ (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	db0b      	blt.n	800193a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	4906      	ldr	r1, [pc, #24]	@ (8001944 <__NVIC_EnableIRQ+0x34>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	2001      	movs	r0, #1
 8001932:	fa00 f202 	lsl.w	r2, r0, r2
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	@ (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	@ (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	@ 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	@ 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a10:	d301      	bcc.n	8001a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00f      	b.n	8001a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a16:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <SysTick_Config+0x40>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1e:	210f      	movs	r1, #15
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f7ff ff90 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <SysTick_Config+0x40>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2e:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <SysTick_Config+0x40>)
 8001a30:	2207      	movs	r2, #7
 8001a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff2d 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6c:	f7ff ff42 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f7ff ff90 	bl	800199c <NVIC_EncodePriority>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff5f 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff35 	bl	8001910 <__NVIC_EnableIRQ>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ffa2 	bl	8001a00 <SysTick_Config>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d008      	beq.n	8001af0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e020      	b.n	8001b32 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 020e 	bic.w	r2, r2, #14
 8001afe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0201 	bic.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b18:	2101      	movs	r1, #1
 8001b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d005      	beq.n	8001b60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2204      	movs	r2, #4
 8001b58:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	e051      	b.n	8001c04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 020e 	bic.w	r2, r2, #14
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a22      	ldr	r2, [pc, #136]	@ (8001c10 <HAL_DMA_Abort_IT+0xd4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d029      	beq.n	8001bde <HAL_DMA_Abort_IT+0xa2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a21      	ldr	r2, [pc, #132]	@ (8001c14 <HAL_DMA_Abort_IT+0xd8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d022      	beq.n	8001bda <HAL_DMA_Abort_IT+0x9e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1f      	ldr	r2, [pc, #124]	@ (8001c18 <HAL_DMA_Abort_IT+0xdc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d01a      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x98>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c1c <HAL_DMA_Abort_IT+0xe0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d012      	beq.n	8001bce <HAL_DMA_Abort_IT+0x92>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1c      	ldr	r2, [pc, #112]	@ (8001c20 <HAL_DMA_Abort_IT+0xe4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00a      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0x8c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c24 <HAL_DMA_Abort_IT+0xe8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d102      	bne.n	8001bc2 <HAL_DMA_Abort_IT+0x86>
 8001bbc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001bc0:	e00e      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bc6:	e00b      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bcc:	e008      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bd2:	e005      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bd8:	e002      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bda:	2310      	movs	r3, #16
 8001bdc:	e000      	b.n	8001be0 <HAL_DMA_Abort_IT+0xa4>
 8001bde:	2301      	movs	r3, #1
 8001be0:	4a11      	ldr	r2, [pc, #68]	@ (8001c28 <HAL_DMA_Abort_IT+0xec>)
 8001be2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
    } 
  }
  return status;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40020008 	.word	0x40020008
 8001c14:	4002001c 	.word	0x4002001c
 8001c18:	40020030 	.word	0x40020030
 8001c1c:	40020044 	.word	0x40020044
 8001c20:	40020058 	.word	0x40020058
 8001c24:	4002006c 	.word	0x4002006c
 8001c28:	40020000 	.word	0x40020000

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b08b      	sub	sp, #44	@ 0x2c
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3e:	e169      	b.n	8001f14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c40:	2201      	movs	r2, #1
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 8158 	bne.w	8001f0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4a9a      	ldr	r2, [pc, #616]	@ (8001ecc <HAL_GPIO_Init+0x2a0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d05e      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c68:	4a98      	ldr	r2, [pc, #608]	@ (8001ecc <HAL_GPIO_Init+0x2a0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d875      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c6e:	4a98      	ldr	r2, [pc, #608]	@ (8001ed0 <HAL_GPIO_Init+0x2a4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d058      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c74:	4a96      	ldr	r2, [pc, #600]	@ (8001ed0 <HAL_GPIO_Init+0x2a4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d86f      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c7a:	4a96      	ldr	r2, [pc, #600]	@ (8001ed4 <HAL_GPIO_Init+0x2a8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d052      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c80:	4a94      	ldr	r2, [pc, #592]	@ (8001ed4 <HAL_GPIO_Init+0x2a8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d869      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c86:	4a94      	ldr	r2, [pc, #592]	@ (8001ed8 <HAL_GPIO_Init+0x2ac>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d04c      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c8c:	4a92      	ldr	r2, [pc, #584]	@ (8001ed8 <HAL_GPIO_Init+0x2ac>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d863      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c92:	4a92      	ldr	r2, [pc, #584]	@ (8001edc <HAL_GPIO_Init+0x2b0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d046      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c98:	4a90      	ldr	r2, [pc, #576]	@ (8001edc <HAL_GPIO_Init+0x2b0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d85d      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c9e:	2b12      	cmp	r3, #18
 8001ca0:	d82a      	bhi.n	8001cf8 <HAL_GPIO_Init+0xcc>
 8001ca2:	2b12      	cmp	r3, #18
 8001ca4:	d859      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cac <HAL_GPIO_Init+0x80>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001d27 	.word	0x08001d27
 8001cb0:	08001d01 	.word	0x08001d01
 8001cb4:	08001d13 	.word	0x08001d13
 8001cb8:	08001d55 	.word	0x08001d55
 8001cbc:	08001d5b 	.word	0x08001d5b
 8001cc0:	08001d5b 	.word	0x08001d5b
 8001cc4:	08001d5b 	.word	0x08001d5b
 8001cc8:	08001d5b 	.word	0x08001d5b
 8001ccc:	08001d5b 	.word	0x08001d5b
 8001cd0:	08001d5b 	.word	0x08001d5b
 8001cd4:	08001d5b 	.word	0x08001d5b
 8001cd8:	08001d5b 	.word	0x08001d5b
 8001cdc:	08001d5b 	.word	0x08001d5b
 8001ce0:	08001d5b 	.word	0x08001d5b
 8001ce4:	08001d5b 	.word	0x08001d5b
 8001ce8:	08001d5b 	.word	0x08001d5b
 8001cec:	08001d5b 	.word	0x08001d5b
 8001cf0:	08001d09 	.word	0x08001d09
 8001cf4:	08001d1d 	.word	0x08001d1d
 8001cf8:	4a79      	ldr	r2, [pc, #484]	@ (8001ee0 <HAL_GPIO_Init+0x2b4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cfe:	e02c      	b.n	8001d5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	623b      	str	r3, [r7, #32]
          break;
 8001d06:	e029      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	623b      	str	r3, [r7, #32]
          break;
 8001d10:	e024      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	3308      	adds	r3, #8
 8001d18:	623b      	str	r3, [r7, #32]
          break;
 8001d1a:	e01f      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	330c      	adds	r3, #12
 8001d22:	623b      	str	r3, [r7, #32]
          break;
 8001d24:	e01a      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d102      	bne.n	8001d34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	623b      	str	r3, [r7, #32]
          break;
 8001d32:	e013      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d105      	bne.n	8001d48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	611a      	str	r2, [r3, #16]
          break;
 8001d46:	e009      	b.n	8001d5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d48:	2308      	movs	r3, #8
 8001d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	615a      	str	r2, [r3, #20]
          break;
 8001d52:	e003      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
          break;
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          break;
 8001d5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2bff      	cmp	r3, #255	@ 0xff
 8001d60:	d801      	bhi.n	8001d66 <HAL_GPIO_Init+0x13a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	e001      	b.n	8001d6a <HAL_GPIO_Init+0x13e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2bff      	cmp	r3, #255	@ 0xff
 8001d70:	d802      	bhi.n	8001d78 <HAL_GPIO_Init+0x14c>
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	e002      	b.n	8001d7e <HAL_GPIO_Init+0x152>
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	3b08      	subs	r3, #8
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	210f      	movs	r1, #15
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	401a      	ands	r2, r3
 8001d90:	6a39      	ldr	r1, [r7, #32]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80b1 	beq.w	8001f0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dac:	4b4d      	ldr	r3, [pc, #308]	@ (8001ee4 <HAL_GPIO_Init+0x2b8>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee4 <HAL_GPIO_Init+0x2b8>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee4 <HAL_GPIO_Init+0x2b8>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dc4:	4a48      	ldr	r2, [pc, #288]	@ (8001ee8 <HAL_GPIO_Init+0x2bc>)
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a40      	ldr	r2, [pc, #256]	@ (8001eec <HAL_GPIO_Init+0x2c0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d013      	beq.n	8001e18 <HAL_GPIO_Init+0x1ec>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ef0 <HAL_GPIO_Init+0x2c4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00d      	beq.n	8001e14 <HAL_GPIO_Init+0x1e8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3e      	ldr	r2, [pc, #248]	@ (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d007      	beq.n	8001e10 <HAL_GPIO_Init+0x1e4>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a3d      	ldr	r2, [pc, #244]	@ (8001ef8 <HAL_GPIO_Init+0x2cc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d101      	bne.n	8001e0c <HAL_GPIO_Init+0x1e0>
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e006      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	e004      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e002      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e1c:	f002 0203 	and.w	r2, r2, #3
 8001e20:	0092      	lsls	r2, r2, #2
 8001e22:	4093      	lsls	r3, r2
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e2a:	492f      	ldr	r1, [pc, #188]	@ (8001ee8 <HAL_GPIO_Init+0x2bc>)
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e44:	4b2d      	ldr	r3, [pc, #180]	@ (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	492c      	ldr	r1, [pc, #176]	@ (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	608b      	str	r3, [r1, #8]
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e52:	4b2a      	ldr	r3, [pc, #168]	@ (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	4928      	ldr	r1, [pc, #160]	@ (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e6c:	4b23      	ldr	r3, [pc, #140]	@ (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	4922      	ldr	r1, [pc, #136]	@ (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60cb      	str	r3, [r1, #12]
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	491e      	ldr	r1, [pc, #120]	@ (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e94:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	4918      	ldr	r1, [pc, #96]	@ (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ea2:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <HAL_GPIO_Init+0x2d0>)
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4914      	ldr	r1, [pc, #80]	@ (8001efc <HAL_GPIO_Init+0x2d0>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d021      	beq.n	8001f00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <HAL_GPIO_Init+0x2d0>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	490e      	ldr	r1, [pc, #56]	@ (8001efc <HAL_GPIO_Init+0x2d0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
 8001ec8:	e021      	b.n	8001f0e <HAL_GPIO_Init+0x2e2>
 8001eca:	bf00      	nop
 8001ecc:	10320000 	.word	0x10320000
 8001ed0:	10310000 	.word	0x10310000
 8001ed4:	10220000 	.word	0x10220000
 8001ed8:	10210000 	.word	0x10210000
 8001edc:	10120000 	.word	0x10120000
 8001ee0:	10110000 	.word	0x10110000
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40010800 	.word	0x40010800
 8001ef0:	40010c00 	.word	0x40010c00
 8001ef4:	40011000 	.word	0x40011000
 8001ef8:	40011400 	.word	0x40011400
 8001efc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f00:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	4909      	ldr	r1, [pc, #36]	@ (8001f30 <HAL_GPIO_Init+0x304>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	3301      	adds	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f47f ae8e 	bne.w	8001c40 <HAL_GPIO_Init+0x14>
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	372c      	adds	r7, #44	@ 0x2c
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40010400 	.word	0x40010400

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f50:	e003      	b.n	8001f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	041a      	lsls	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	611a      	str	r2, [r3, #16]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e272      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8087 	beq.w	8002092 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f84:	4b92      	ldr	r3, [pc, #584]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d00c      	beq.n	8001faa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f90:	4b8f      	ldr	r3, [pc, #572]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d112      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x5e>
 8001f9c:	4b8c      	ldr	r3, [pc, #560]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001faa:	4b89      	ldr	r3, [pc, #548]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d06c      	beq.n	8002090 <HAL_RCC_OscConfig+0x12c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d168      	bne.n	8002090 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e24c      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x76>
 8001fcc:	4b80      	ldr	r3, [pc, #512]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a7f      	ldr	r2, [pc, #508]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	e02e      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x98>
 8001fe2:	4b7b      	ldr	r3, [pc, #492]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7a      	ldr	r2, [pc, #488]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b78      	ldr	r3, [pc, #480]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a77      	ldr	r2, [pc, #476]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e01d      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0xbc>
 8002006:	4b72      	ldr	r3, [pc, #456]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a71      	ldr	r2, [pc, #452]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800200c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b6f      	ldr	r3, [pc, #444]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6e      	ldr	r2, [pc, #440]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8002020:	4b6b      	ldr	r3, [pc, #428]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a6a      	ldr	r2, [pc, #424]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b68      	ldr	r3, [pc, #416]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a67      	ldr	r2, [pc, #412]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002036:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d013      	beq.n	8002068 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7fe fdba 	bl	8000bb8 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002048:	f7fe fdb6 	bl	8000bb8 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	@ 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e200      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b5d      	ldr	r3, [pc, #372]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0xe4>
 8002066:	e014      	b.n	8002092 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7fe fda6 	bl	8000bb8 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002070:	f7fe fda2 	bl	8000bb8 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	@ 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e1ec      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	4b53      	ldr	r3, [pc, #332]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x10c>
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d063      	beq.n	8002166 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800209e:	4b4c      	ldr	r3, [pc, #304]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020aa:	4b49      	ldr	r3, [pc, #292]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d11c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x18c>
 80020b6:	4b46      	ldr	r3, [pc, #280]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d116      	bne.n	80020f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	4b43      	ldr	r3, [pc, #268]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_RCC_OscConfig+0x176>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e1c0      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020da:	4b3d      	ldr	r3, [pc, #244]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4939      	ldr	r1, [pc, #228]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	e03a      	b.n	8002166 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f8:	4b36      	ldr	r3, [pc, #216]	@ (80021d4 <HAL_RCC_OscConfig+0x270>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7fe fd5b 	bl	8000bb8 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002106:	f7fe fd57 	bl	8000bb8 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e1a1      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	4b2d      	ldr	r3, [pc, #180]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002124:	4b2a      	ldr	r3, [pc, #168]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4927      	ldr	r1, [pc, #156]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
 8002138:	e015      	b.n	8002166 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213a:	4b26      	ldr	r3, [pc, #152]	@ (80021d4 <HAL_RCC_OscConfig+0x270>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7fe fd3a 	bl	8000bb8 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7fe fd36 	bl	8000bb8 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e180      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d03a      	beq.n	80021e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d019      	beq.n	80021ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217a:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <HAL_RCC_OscConfig+0x274>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7fe fd1a 	bl	8000bb8 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002188:	f7fe fd16 	bl	8000bb8 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e160      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	4b0d      	ldr	r3, [pc, #52]	@ (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f000 face 	bl	8002748 <RCC_Delay>
 80021ac:	e01c      	b.n	80021e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ae:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <HAL_RCC_OscConfig+0x274>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b4:	f7fe fd00 	bl	8000bb8 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ba:	e00f      	b.n	80021dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021bc:	f7fe fcfc 	bl	8000bb8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d908      	bls.n	80021dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e146      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	42420000 	.word	0x42420000
 80021d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	4b92      	ldr	r3, [pc, #584]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1e9      	bne.n	80021bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80a6 	beq.w	8002342 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10d      	bne.n	8002222 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b88      	ldr	r3, [pc, #544]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	4a87      	ldr	r2, [pc, #540]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002210:	61d3      	str	r3, [r2, #28]
 8002212:	4b85      	ldr	r3, [pc, #532]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b82      	ldr	r3, [pc, #520]	@ (800242c <HAL_RCC_OscConfig+0x4c8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d118      	bne.n	8002260 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222e:	4b7f      	ldr	r3, [pc, #508]	@ (800242c <HAL_RCC_OscConfig+0x4c8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a7e      	ldr	r2, [pc, #504]	@ (800242c <HAL_RCC_OscConfig+0x4c8>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7fe fcbd 	bl	8000bb8 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7fe fcb9 	bl	8000bb8 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	@ 0x64
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e103      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b75      	ldr	r3, [pc, #468]	@ (800242c <HAL_RCC_OscConfig+0x4c8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x312>
 8002268:	4b6f      	ldr	r3, [pc, #444]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a6e      	ldr	r2, [pc, #440]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	e02d      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x334>
 800227e:	4b6a      	ldr	r3, [pc, #424]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a69      	ldr	r2, [pc, #420]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6213      	str	r3, [r2, #32]
 800228a:	4b67      	ldr	r3, [pc, #412]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a66      	ldr	r2, [pc, #408]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	f023 0304 	bic.w	r3, r3, #4
 8002294:	6213      	str	r3, [r2, #32]
 8002296:	e01c      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b05      	cmp	r3, #5
 800229e:	d10c      	bne.n	80022ba <HAL_RCC_OscConfig+0x356>
 80022a0:	4b61      	ldr	r3, [pc, #388]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4a60      	ldr	r2, [pc, #384]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	6213      	str	r3, [r2, #32]
 80022ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	e00b      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 80022ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4a5a      	ldr	r2, [pc, #360]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	6213      	str	r3, [r2, #32]
 80022c6:	4b58      	ldr	r3, [pc, #352]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4a57      	ldr	r2, [pc, #348]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d015      	beq.n	8002306 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022da:	f7fe fc6d 	bl	8000bb8 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7fe fc69 	bl	8000bb8 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0b1      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ee      	beq.n	80022e2 <HAL_RCC_OscConfig+0x37e>
 8002304:	e014      	b.n	8002330 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7fe fc57 	bl	8000bb8 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe fc53 	bl	8000bb8 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e09b      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002324:	4b40      	ldr	r3, [pc, #256]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1ee      	bne.n	800230e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d105      	bne.n	8002342 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002336:	4b3c      	ldr	r3, [pc, #240]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a3b      	ldr	r2, [pc, #236]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002340:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8087 	beq.w	800245a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800234c:	4b36      	ldr	r3, [pc, #216]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b08      	cmp	r3, #8
 8002356:	d061      	beq.n	800241c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d146      	bne.n	80023ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002360:	4b33      	ldr	r3, [pc, #204]	@ (8002430 <HAL_RCC_OscConfig+0x4cc>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7fe fc27 	bl	8000bb8 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236e:	f7fe fc23 	bl	8000bb8 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e06d      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002380:	4b29      	ldr	r3, [pc, #164]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002394:	d108      	bne.n	80023a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002396:	4b24      	ldr	r3, [pc, #144]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	4921      	ldr	r1, [pc, #132]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a19      	ldr	r1, [r3, #32]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	430b      	orrs	r3, r1
 80023ba:	491b      	ldr	r1, [pc, #108]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <HAL_RCC_OscConfig+0x4cc>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fbf7 	bl	8000bb8 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fbf3 	bl	8000bb8 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e03d      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x46a>
 80023ec:	e035      	b.n	800245a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <HAL_RCC_OscConfig+0x4cc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fbe0 	bl	8000bb8 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe fbdc 	bl	8000bb8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e026      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x498>
 800241a:	e01e      	b.n	800245a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e019      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
 8002428:	40021000 	.word	0x40021000
 800242c:	40007000 	.word	0x40007000
 8002430:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <HAL_RCC_OscConfig+0x500>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	429a      	cmp	r2, r3
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000

08002468 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0d0      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	4b6a      	ldr	r3, [pc, #424]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d910      	bls.n	80024ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b67      	ldr	r3, [pc, #412]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	4965      	ldr	r1, [pc, #404]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b63      	ldr	r3, [pc, #396]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0b8      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d020      	beq.n	80024fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c4:	4b59      	ldr	r3, [pc, #356]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a58      	ldr	r2, [pc, #352]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024dc:	4b53      	ldr	r3, [pc, #332]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4a52      	ldr	r2, [pc, #328]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e8:	4b50      	ldr	r3, [pc, #320]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	494d      	ldr	r1, [pc, #308]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d040      	beq.n	8002588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	4b47      	ldr	r3, [pc, #284]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d115      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e07f      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002526:	4b41      	ldr	r3, [pc, #260]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e073      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002536:	4b3d      	ldr	r3, [pc, #244]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06b      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002546:	4b39      	ldr	r3, [pc, #228]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f023 0203 	bic.w	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4936      	ldr	r1, [pc, #216]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002558:	f7fe fb2e 	bl	8000bb8 <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	e00a      	b.n	8002576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002560:	f7fe fb2a 	bl	8000bb8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e053      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	4b2d      	ldr	r3, [pc, #180]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 020c 	and.w	r2, r3, #12
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	429a      	cmp	r2, r3
 8002586:	d1eb      	bne.n	8002560 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002588:	4b27      	ldr	r3, [pc, #156]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d210      	bcs.n	80025b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 0207 	bic.w	r2, r3, #7
 800259e:	4922      	ldr	r1, [pc, #136]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b20      	ldr	r3, [pc, #128]	@ (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e032      	b.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c4:	4b19      	ldr	r3, [pc, #100]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	4916      	ldr	r1, [pc, #88]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025e2:	4b12      	ldr	r3, [pc, #72]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	490e      	ldr	r1, [pc, #56]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025f6:	f000 f821 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80025fa:	4602      	mov	r2, r0
 80025fc:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	490a      	ldr	r1, [pc, #40]	@ (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	5ccb      	ldrb	r3, [r1, r3]
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	4a09      	ldr	r2, [pc, #36]	@ (8002634 <HAL_RCC_ClockConfig+0x1cc>)
 8002610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_RCC_ClockConfig+0x1d0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fa8c 	bl	8000b34 <HAL_InitTick>

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40022000 	.word	0x40022000
 800262c:	40021000 	.word	0x40021000
 8002630:	08004778 	.word	0x08004778
 8002634:	20000008 	.word	0x20000008
 8002638:	2000000c 	.word	0x2000000c

0800263c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002656:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b04      	cmp	r3, #4
 8002664:	d002      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x30>
 8002666:	2b08      	cmp	r3, #8
 8002668:	d003      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0x36>
 800266a:	e027      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800266c:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800266e:	613b      	str	r3, [r7, #16]
      break;
 8002670:	e027      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	0c9b      	lsrs	r3, r3, #18
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	4a17      	ldr	r2, [pc, #92]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800267c:	5cd3      	ldrb	r3, [r2, r3]
 800267e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800268a:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0c5b      	lsrs	r3, r3, #17
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	4a11      	ldr	r2, [pc, #68]	@ (80026dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002696:	5cd3      	ldrb	r3, [r2, r3]
 8002698:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a0d      	ldr	r2, [pc, #52]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800269e:	fb03 f202 	mul.w	r2, r3, r2
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e004      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a0c      	ldr	r2, [pc, #48]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026b0:	fb02 f303 	mul.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	613b      	str	r3, [r7, #16]
      break;
 80026ba:	e002      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026be:	613b      	str	r3, [r7, #16]
      break;
 80026c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c2:	693b      	ldr	r3, [r7, #16]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	371c      	adds	r7, #28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	007a1200 	.word	0x007a1200
 80026d8:	08004790 	.word	0x08004790
 80026dc:	080047a0 	.word	0x080047a0
 80026e0:	003d0900 	.word	0x003d0900

080026e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e8:	4b02      	ldr	r3, [pc, #8]	@ (80026f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	20000008 	.word	0x20000008

080026f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026fc:	f7ff fff2 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	0a1b      	lsrs	r3, r3, #8
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4903      	ldr	r1, [pc, #12]	@ (800271c <HAL_RCC_GetPCLK1Freq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	08004788 	.word	0x08004788

08002720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002724:	f7ff ffde 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	0adb      	lsrs	r3, r3, #11
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4903      	ldr	r1, [pc, #12]	@ (8002744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	08004788 	.word	0x08004788

08002748 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002750:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <RCC_Delay+0x34>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0a      	ldr	r2, [pc, #40]	@ (8002780 <RCC_Delay+0x38>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0a5b      	lsrs	r3, r3, #9
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002764:	bf00      	nop
  }
  while (Delay --);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1e5a      	subs	r2, r3, #1
 800276a:	60fa      	str	r2, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f9      	bne.n	8002764 <RCC_Delay+0x1c>
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	20000008 	.word	0x20000008
 8002780:	10624dd3 	.word	0x10624dd3

08002784 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e042      	b.n	800281c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe f82e 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2224      	movs	r2, #36	@ 0x24
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fd63 	bl	8003294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	@ 0x28
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b20      	cmp	r3, #32
 8002842:	d175      	bne.n	8002930 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_UART_Transmit+0x2c>
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e06e      	b.n	8002932 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2221      	movs	r2, #33	@ 0x21
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002862:	f7fe f9a9 	bl	8000bb8 <HAL_GetTick>
 8002866:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	88fa      	ldrh	r2, [r7, #6]
 8002872:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800287c:	d108      	bne.n	8002890 <HAL_UART_Transmit+0x6c>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d104      	bne.n	8002890 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	e003      	b.n	8002898 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002898:	e02e      	b.n	80028f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2200      	movs	r2, #0
 80028a2:	2180      	movs	r1, #128	@ 0x80
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fb01 	bl	8002eac <UART_WaitOnFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e03a      	b.n	8002932 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10b      	bne.n	80028da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	3302      	adds	r3, #2
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	e007      	b.n	80028ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	3301      	adds	r3, #1
 80028e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1cb      	bne.n	800289a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	2140      	movs	r1, #64	@ 0x40
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 facd 	bl	8002eac <UART_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e006      	b.n	8002932 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	e000      	b.n	8002932 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002930:	2302      	movs	r3, #2
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b0ba      	sub	sp, #232	@ 0xe8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002962:	2300      	movs	r3, #0
 8002964:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002968:	2300      	movs	r3, #0
 800296a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800296e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800297a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10f      	bne.n	80029a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_UART_IRQHandler+0x66>
 800298e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fbbc 	bl	8003118 <UART_Receive_IT>
      return;
 80029a0:	e25b      	b.n	8002e5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 80de 	beq.w	8002b68 <HAL_UART_IRQHandler+0x22c>
 80029ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80d1 	beq.w	8002b68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <HAL_UART_IRQHandler+0xae>
 80029d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_UART_IRQHandler+0xd2>
 80029f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a06:	f043 0202 	orr.w	r2, r3, #2
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_UART_IRQHandler+0xf6>
 8002a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2a:	f043 0204 	orr.w	r2, r3, #4
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d011      	beq.n	8002a62 <HAL_UART_IRQHandler+0x126>
 8002a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5a:	f043 0208 	orr.w	r2, r3, #8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 81f2 	beq.w	8002e50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_UART_IRQHandler+0x14e>
 8002a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 fb47 	bl	8003118 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d103      	bne.n	8002ab6 <HAL_UART_IRQHandler+0x17a>
 8002aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d04f      	beq.n	8002b56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fa51 	bl	8002f5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d041      	beq.n	8002b4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3314      	adds	r3, #20
 8002ad0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ad8:	e853 3f00 	ldrex	r3, [r3]
 8002adc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3314      	adds	r3, #20
 8002af2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002af6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002afa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b06:	e841 2300 	strex	r3, r2, [r1]
 8002b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1d9      	bne.n	8002aca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d013      	beq.n	8002b46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b22:	4a7e      	ldr	r2, [pc, #504]	@ (8002d1c <HAL_UART_IRQHandler+0x3e0>)
 8002b24:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff f806 	bl	8001b3c <HAL_DMA_Abort_IT>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d016      	beq.n	8002b64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b40:	4610      	mov	r0, r2
 8002b42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b44:	e00e      	b.n	8002b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f99c 	bl	8002e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4c:	e00a      	b.n	8002b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f998 	bl	8002e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b54:	e006      	b.n	8002b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f994 	bl	8002e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002b62:	e175      	b.n	8002e50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b64:	bf00      	nop
    return;
 8002b66:	e173      	b.n	8002e50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	f040 814f 	bne.w	8002e10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 8148 	beq.w	8002e10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8141 	beq.w	8002e10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80b6 	beq.w	8002d20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8145 	beq.w	8002e54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	f080 813e 	bcs.w	8002e54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bde:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	f000 8088 	beq.w	8002cfc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bfa:	e853 3f00 	ldrex	r3, [r3]
 8002bfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c18:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c24:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c28:	e841 2300 	strex	r3, r2, [r1]
 8002c2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1d9      	bne.n	8002bec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3314      	adds	r3, #20
 8002c3e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c42:	e853 3f00 	ldrex	r3, [r3]
 8002c46:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3314      	adds	r3, #20
 8002c58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c5c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c60:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c62:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c64:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c68:	e841 2300 	strex	r3, r2, [r1]
 8002c6c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e1      	bne.n	8002c38 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3314      	adds	r3, #20
 8002c7a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c7e:	e853 3f00 	ldrex	r3, [r3]
 8002c82:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3314      	adds	r3, #20
 8002c94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c98:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c9e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ca6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e3      	bne.n	8002c74 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	330c      	adds	r3, #12
 8002cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ccc:	f023 0310 	bic.w	r3, r3, #16
 8002cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002cde:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ce0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ce4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ce6:	e841 2300 	strex	r3, r2, [r1]
 8002cea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002cec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e3      	bne.n	8002cba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fee5 	bl	8001ac6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	4619      	mov	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8bf 	bl	8002e96 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d18:	e09c      	b.n	8002e54 <HAL_UART_IRQHandler+0x518>
 8002d1a:	bf00      	nop
 8002d1c:	08003023 	.word	0x08003023
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 808e 	beq.w	8002e58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8089 	beq.w	8002e58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d50:	e853 3f00 	ldrex	r3, [r3]
 8002d54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	330c      	adds	r3, #12
 8002d66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002d6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d72:	e841 2300 	strex	r3, r2, [r1]
 8002d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1e3      	bne.n	8002d46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3314      	adds	r3, #20
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	e853 3f00 	ldrex	r3, [r3]
 8002d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3314      	adds	r3, #20
 8002d9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002da2:	633a      	str	r2, [r7, #48]	@ 0x30
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002daa:	e841 2300 	strex	r3, r2, [r1]
 8002dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1e3      	bne.n	8002d7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0310 	bic.w	r3, r3, #16
 8002dda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	330c      	adds	r3, #12
 8002de4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002de8:	61fa      	str	r2, [r7, #28]
 8002dea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	69b9      	ldr	r1, [r7, #24]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	617b      	str	r3, [r7, #20]
   return(result);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e3      	bne.n	8002dc4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e06:	4619      	mov	r1, r3
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f844 	bl	8002e96 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e0e:	e023      	b.n	8002e58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d009      	beq.n	8002e30 <HAL_UART_IRQHandler+0x4f4>
 8002e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f90e 	bl	800304a <UART_Transmit_IT>
    return;
 8002e2e:	e014      	b.n	8002e5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00e      	beq.n	8002e5a <HAL_UART_IRQHandler+0x51e>
 8002e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f94d 	bl	80030e8 <UART_EndTransmit_IT>
    return;
 8002e4e:	e004      	b.n	8002e5a <HAL_UART_IRQHandler+0x51e>
    return;
 8002e50:	bf00      	nop
 8002e52:	e002      	b.n	8002e5a <HAL_UART_IRQHandler+0x51e>
      return;
 8002e54:	bf00      	nop
 8002e56:	e000      	b.n	8002e5a <HAL_UART_IRQHandler+0x51e>
      return;
 8002e58:	bf00      	nop
  }
}
 8002e5a:	37e8      	adds	r7, #232	@ 0xe8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr

08002e72 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebc:	e03b      	b.n	8002f36 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d037      	beq.n	8002f36 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec6:	f7fd fe77 	bl	8000bb8 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	6a3a      	ldr	r2, [r7, #32]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <UART_WaitOnFlagUntilTimeout+0x30>
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e03a      	b.n	8002f56 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d023      	beq.n	8002f36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b80      	cmp	r3, #128	@ 0x80
 8002ef2:	d020      	beq.n	8002f36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b40      	cmp	r3, #64	@ 0x40
 8002ef8:	d01d      	beq.n	8002f36 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d116      	bne.n	8002f36 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f81d 	bl	8002f5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2208      	movs	r2, #8
 8002f28:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e00f      	b.n	8002f56 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	bf0c      	ite	eq
 8002f46:	2301      	moveq	r3, #1
 8002f48:	2300      	movne	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d0b4      	beq.n	8002ebe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b095      	sub	sp, #84	@ 0x54
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	330c      	adds	r3, #12
 8002f6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	330c      	adds	r3, #12
 8002f84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f86:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e5      	bne.n	8002f66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	e853 3f00 	ldrex	r3, [r3]
 8002fa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3314      	adds	r3, #20
 8002fb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc2:	e841 2300 	strex	r3, r2, [r1]
 8002fc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1e5      	bne.n	8002f9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d119      	bne.n	800300a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	330c      	adds	r3, #12
 8002fdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	e853 3f00 	ldrex	r3, [r3]
 8002fe4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f023 0310 	bic.w	r3, r3, #16
 8002fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	330c      	adds	r3, #12
 8002ff4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ff6:	61ba      	str	r2, [r7, #24]
 8002ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffa:	6979      	ldr	r1, [r7, #20]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	e841 2300 	strex	r3, r2, [r1]
 8003002:	613b      	str	r3, [r7, #16]
   return(result);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e5      	bne.n	8002fd6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003018:	bf00      	nop
 800301a:	3754      	adds	r7, #84	@ 0x54
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7ff ff21 	bl	8002e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003042:	bf00      	nop
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b21      	cmp	r3, #33	@ 0x21
 800305c:	d13e      	bne.n	80030dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003066:	d114      	bne.n	8003092 <UART_Transmit_IT+0x48>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d110      	bne.n	8003092 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003084:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	1c9a      	adds	r2, r3, #2
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	621a      	str	r2, [r3, #32]
 8003090:	e008      	b.n	80030a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	1c59      	adds	r1, r3, #1
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6211      	str	r1, [r2, #32]
 800309c:	781a      	ldrb	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4619      	mov	r1, r3
 80030b2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10f      	bne.n	80030d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e000      	b.n	80030de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030dc:	2302      	movs	r3, #2
  }
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff fea9 	bl	8002e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	@ 0x30
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b22      	cmp	r3, #34	@ 0x22
 800312a:	f040 80ae 	bne.w	800328a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003136:	d117      	bne.n	8003168 <UART_Receive_IT+0x50>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d113      	bne.n	8003168 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003140:	2300      	movs	r3, #0
 8003142:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	b29b      	uxth	r3, r3
 8003152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003156:	b29a      	uxth	r2, r3
 8003158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003160:	1c9a      	adds	r2, r3, #2
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	629a      	str	r2, [r3, #40]	@ 0x28
 8003166:	e026      	b.n	80031b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800316e:	2300      	movs	r3, #0
 8003170:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800317a:	d007      	beq.n	800318c <UART_Receive_IT+0x74>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10a      	bne.n	800319a <UART_Receive_IT+0x82>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d106      	bne.n	800319a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	b2da      	uxtb	r2, r3
 8003194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	e008      	b.n	80031ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29b      	uxth	r3, r3
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4619      	mov	r1, r3
 80031c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d15d      	bne.n	8003286 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0220 	bic.w	r2, r2, #32
 80031d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0201 	bic.w	r2, r2, #1
 80031f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	2b01      	cmp	r3, #1
 800320e:	d135      	bne.n	800327c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	330c      	adds	r3, #12
 800321c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	e853 3f00 	ldrex	r3, [r3]
 8003224:	613b      	str	r3, [r7, #16]
   return(result);
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f023 0310 	bic.w	r3, r3, #16
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003236:	623a      	str	r2, [r7, #32]
 8003238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323a:	69f9      	ldr	r1, [r7, #28]
 800323c:	6a3a      	ldr	r2, [r7, #32]
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	61bb      	str	r3, [r7, #24]
   return(result);
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e5      	bne.n	8003216 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b10      	cmp	r3, #16
 8003256:	d10a      	bne.n	800326e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003272:	4619      	mov	r1, r3
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff fe0e 	bl	8002e96 <HAL_UARTEx_RxEventCallback>
 800327a:	e002      	b.n	8003282 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff fdf8 	bl	8002e72 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e002      	b.n	800328c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	e000      	b.n	800328c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800328a:	2302      	movs	r3, #2
  }
}
 800328c:	4618      	mov	r0, r3
 800328e:	3730      	adds	r7, #48	@ 0x30
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80032ce:	f023 030c 	bic.w	r3, r3, #12
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	430b      	orrs	r3, r1
 80032da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2c      	ldr	r2, [pc, #176]	@ (80033a8 <UART_SetConfig+0x114>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d103      	bne.n	8003304 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032fc:	f7ff fa10 	bl	8002720 <HAL_RCC_GetPCLK2Freq>
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	e002      	b.n	800330a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003304:	f7ff f9f8 	bl	80026f8 <HAL_RCC_GetPCLK1Freq>
 8003308:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009a      	lsls	r2, r3, #2
 8003314:	441a      	add	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	4a22      	ldr	r2, [pc, #136]	@ (80033ac <UART_SetConfig+0x118>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	0119      	lsls	r1, r3, #4
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	009a      	lsls	r2, r3, #2
 8003334:	441a      	add	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003340:	4b1a      	ldr	r3, [pc, #104]	@ (80033ac <UART_SetConfig+0x118>)
 8003342:	fba3 0302 	umull	r0, r3, r3, r2
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	2064      	movs	r0, #100	@ 0x64
 800334a:	fb00 f303 	mul.w	r3, r0, r3
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	3332      	adds	r3, #50	@ 0x32
 8003354:	4a15      	ldr	r2, [pc, #84]	@ (80033ac <UART_SetConfig+0x118>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003360:	4419      	add	r1, r3
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009a      	lsls	r2, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	fbb2 f2f3 	udiv	r2, r2, r3
 8003378:	4b0c      	ldr	r3, [pc, #48]	@ (80033ac <UART_SetConfig+0x118>)
 800337a:	fba3 0302 	umull	r0, r3, r3, r2
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2064      	movs	r0, #100	@ 0x64
 8003382:	fb00 f303 	mul.w	r3, r0, r3
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	3332      	adds	r3, #50	@ 0x32
 800338c:	4a07      	ldr	r2, [pc, #28]	@ (80033ac <UART_SetConfig+0x118>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	f003 020f 	and.w	r2, r3, #15
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	440a      	add	r2, r1
 800339e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40013800 	.word	0x40013800
 80033ac:	51eb851f 	.word	0x51eb851f

080033b0 <std>:
 80033b0:	2300      	movs	r3, #0
 80033b2:	b510      	push	{r4, lr}
 80033b4:	4604      	mov	r4, r0
 80033b6:	e9c0 3300 	strd	r3, r3, [r0]
 80033ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033be:	6083      	str	r3, [r0, #8]
 80033c0:	8181      	strh	r1, [r0, #12]
 80033c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80033c4:	81c2      	strh	r2, [r0, #14]
 80033c6:	6183      	str	r3, [r0, #24]
 80033c8:	4619      	mov	r1, r3
 80033ca:	2208      	movs	r2, #8
 80033cc:	305c      	adds	r0, #92	@ 0x5c
 80033ce:	f000 fa2d 	bl	800382c <memset>
 80033d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003408 <std+0x58>)
 80033d4:	6224      	str	r4, [r4, #32]
 80033d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80033d8:	4b0c      	ldr	r3, [pc, #48]	@ (800340c <std+0x5c>)
 80033da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80033dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003410 <std+0x60>)
 80033de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80033e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <std+0x64>)
 80033e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80033e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003418 <std+0x68>)
 80033e6:	429c      	cmp	r4, r3
 80033e8:	d006      	beq.n	80033f8 <std+0x48>
 80033ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80033ee:	4294      	cmp	r4, r2
 80033f0:	d002      	beq.n	80033f8 <std+0x48>
 80033f2:	33d0      	adds	r3, #208	@ 0xd0
 80033f4:	429c      	cmp	r4, r3
 80033f6:	d105      	bne.n	8003404 <std+0x54>
 80033f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80033fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003400:	f000 ba8c 	b.w	800391c <__retarget_lock_init_recursive>
 8003404:	bd10      	pop	{r4, pc}
 8003406:	bf00      	nop
 8003408:	0800367d 	.word	0x0800367d
 800340c:	0800369f 	.word	0x0800369f
 8003410:	080036d7 	.word	0x080036d7
 8003414:	080036fb 	.word	0x080036fb
 8003418:	20000158 	.word	0x20000158

0800341c <stdio_exit_handler>:
 800341c:	4a02      	ldr	r2, [pc, #8]	@ (8003428 <stdio_exit_handler+0xc>)
 800341e:	4903      	ldr	r1, [pc, #12]	@ (800342c <stdio_exit_handler+0x10>)
 8003420:	4803      	ldr	r0, [pc, #12]	@ (8003430 <stdio_exit_handler+0x14>)
 8003422:	f000 b869 	b.w	80034f8 <_fwalk_sglue>
 8003426:	bf00      	nop
 8003428:	20000014 	.word	0x20000014
 800342c:	08004481 	.word	0x08004481
 8003430:	20000024 	.word	0x20000024

08003434 <cleanup_stdio>:
 8003434:	6841      	ldr	r1, [r0, #4]
 8003436:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <cleanup_stdio+0x34>)
 8003438:	b510      	push	{r4, lr}
 800343a:	4299      	cmp	r1, r3
 800343c:	4604      	mov	r4, r0
 800343e:	d001      	beq.n	8003444 <cleanup_stdio+0x10>
 8003440:	f001 f81e 	bl	8004480 <_fflush_r>
 8003444:	68a1      	ldr	r1, [r4, #8]
 8003446:	4b09      	ldr	r3, [pc, #36]	@ (800346c <cleanup_stdio+0x38>)
 8003448:	4299      	cmp	r1, r3
 800344a:	d002      	beq.n	8003452 <cleanup_stdio+0x1e>
 800344c:	4620      	mov	r0, r4
 800344e:	f001 f817 	bl	8004480 <_fflush_r>
 8003452:	68e1      	ldr	r1, [r4, #12]
 8003454:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <cleanup_stdio+0x3c>)
 8003456:	4299      	cmp	r1, r3
 8003458:	d004      	beq.n	8003464 <cleanup_stdio+0x30>
 800345a:	4620      	mov	r0, r4
 800345c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003460:	f001 b80e 	b.w	8004480 <_fflush_r>
 8003464:	bd10      	pop	{r4, pc}
 8003466:	bf00      	nop
 8003468:	20000158 	.word	0x20000158
 800346c:	200001c0 	.word	0x200001c0
 8003470:	20000228 	.word	0x20000228

08003474 <global_stdio_init.part.0>:
 8003474:	b510      	push	{r4, lr}
 8003476:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <global_stdio_init.part.0+0x30>)
 8003478:	4c0b      	ldr	r4, [pc, #44]	@ (80034a8 <global_stdio_init.part.0+0x34>)
 800347a:	4a0c      	ldr	r2, [pc, #48]	@ (80034ac <global_stdio_init.part.0+0x38>)
 800347c:	4620      	mov	r0, r4
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	2104      	movs	r1, #4
 8003482:	2200      	movs	r2, #0
 8003484:	f7ff ff94 	bl	80033b0 <std>
 8003488:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800348c:	2201      	movs	r2, #1
 800348e:	2109      	movs	r1, #9
 8003490:	f7ff ff8e 	bl	80033b0 <std>
 8003494:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003498:	2202      	movs	r2, #2
 800349a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800349e:	2112      	movs	r1, #18
 80034a0:	f7ff bf86 	b.w	80033b0 <std>
 80034a4:	20000290 	.word	0x20000290
 80034a8:	20000158 	.word	0x20000158
 80034ac:	0800341d 	.word	0x0800341d

080034b0 <__sfp_lock_acquire>:
 80034b0:	4801      	ldr	r0, [pc, #4]	@ (80034b8 <__sfp_lock_acquire+0x8>)
 80034b2:	f000 ba34 	b.w	800391e <__retarget_lock_acquire_recursive>
 80034b6:	bf00      	nop
 80034b8:	20000299 	.word	0x20000299

080034bc <__sfp_lock_release>:
 80034bc:	4801      	ldr	r0, [pc, #4]	@ (80034c4 <__sfp_lock_release+0x8>)
 80034be:	f000 ba2f 	b.w	8003920 <__retarget_lock_release_recursive>
 80034c2:	bf00      	nop
 80034c4:	20000299 	.word	0x20000299

080034c8 <__sinit>:
 80034c8:	b510      	push	{r4, lr}
 80034ca:	4604      	mov	r4, r0
 80034cc:	f7ff fff0 	bl	80034b0 <__sfp_lock_acquire>
 80034d0:	6a23      	ldr	r3, [r4, #32]
 80034d2:	b11b      	cbz	r3, 80034dc <__sinit+0x14>
 80034d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034d8:	f7ff bff0 	b.w	80034bc <__sfp_lock_release>
 80034dc:	4b04      	ldr	r3, [pc, #16]	@ (80034f0 <__sinit+0x28>)
 80034de:	6223      	str	r3, [r4, #32]
 80034e0:	4b04      	ldr	r3, [pc, #16]	@ (80034f4 <__sinit+0x2c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f5      	bne.n	80034d4 <__sinit+0xc>
 80034e8:	f7ff ffc4 	bl	8003474 <global_stdio_init.part.0>
 80034ec:	e7f2      	b.n	80034d4 <__sinit+0xc>
 80034ee:	bf00      	nop
 80034f0:	08003435 	.word	0x08003435
 80034f4:	20000290 	.word	0x20000290

080034f8 <_fwalk_sglue>:
 80034f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034fc:	4607      	mov	r7, r0
 80034fe:	4688      	mov	r8, r1
 8003500:	4614      	mov	r4, r2
 8003502:	2600      	movs	r6, #0
 8003504:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003508:	f1b9 0901 	subs.w	r9, r9, #1
 800350c:	d505      	bpl.n	800351a <_fwalk_sglue+0x22>
 800350e:	6824      	ldr	r4, [r4, #0]
 8003510:	2c00      	cmp	r4, #0
 8003512:	d1f7      	bne.n	8003504 <_fwalk_sglue+0xc>
 8003514:	4630      	mov	r0, r6
 8003516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800351a:	89ab      	ldrh	r3, [r5, #12]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d907      	bls.n	8003530 <_fwalk_sglue+0x38>
 8003520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003524:	3301      	adds	r3, #1
 8003526:	d003      	beq.n	8003530 <_fwalk_sglue+0x38>
 8003528:	4629      	mov	r1, r5
 800352a:	4638      	mov	r0, r7
 800352c:	47c0      	blx	r8
 800352e:	4306      	orrs	r6, r0
 8003530:	3568      	adds	r5, #104	@ 0x68
 8003532:	e7e9      	b.n	8003508 <_fwalk_sglue+0x10>

08003534 <iprintf>:
 8003534:	b40f      	push	{r0, r1, r2, r3}
 8003536:	b507      	push	{r0, r1, r2, lr}
 8003538:	4906      	ldr	r1, [pc, #24]	@ (8003554 <iprintf+0x20>)
 800353a:	ab04      	add	r3, sp, #16
 800353c:	6808      	ldr	r0, [r1, #0]
 800353e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003542:	6881      	ldr	r1, [r0, #8]
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	f000 fc71 	bl	8003e2c <_vfiprintf_r>
 800354a:	b003      	add	sp, #12
 800354c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003550:	b004      	add	sp, #16
 8003552:	4770      	bx	lr
 8003554:	20000020 	.word	0x20000020

08003558 <_puts_r>:
 8003558:	6a03      	ldr	r3, [r0, #32]
 800355a:	b570      	push	{r4, r5, r6, lr}
 800355c:	4605      	mov	r5, r0
 800355e:	460e      	mov	r6, r1
 8003560:	6884      	ldr	r4, [r0, #8]
 8003562:	b90b      	cbnz	r3, 8003568 <_puts_r+0x10>
 8003564:	f7ff ffb0 	bl	80034c8 <__sinit>
 8003568:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800356a:	07db      	lsls	r3, r3, #31
 800356c:	d405      	bmi.n	800357a <_puts_r+0x22>
 800356e:	89a3      	ldrh	r3, [r4, #12]
 8003570:	0598      	lsls	r0, r3, #22
 8003572:	d402      	bmi.n	800357a <_puts_r+0x22>
 8003574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003576:	f000 f9d2 	bl	800391e <__retarget_lock_acquire_recursive>
 800357a:	89a3      	ldrh	r3, [r4, #12]
 800357c:	0719      	lsls	r1, r3, #28
 800357e:	d502      	bpl.n	8003586 <_puts_r+0x2e>
 8003580:	6923      	ldr	r3, [r4, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d135      	bne.n	80035f2 <_puts_r+0x9a>
 8003586:	4621      	mov	r1, r4
 8003588:	4628      	mov	r0, r5
 800358a:	f000 f8f9 	bl	8003780 <__swsetup_r>
 800358e:	b380      	cbz	r0, 80035f2 <_puts_r+0x9a>
 8003590:	f04f 35ff 	mov.w	r5, #4294967295
 8003594:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003596:	07da      	lsls	r2, r3, #31
 8003598:	d405      	bmi.n	80035a6 <_puts_r+0x4e>
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	059b      	lsls	r3, r3, #22
 800359e:	d402      	bmi.n	80035a6 <_puts_r+0x4e>
 80035a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035a2:	f000 f9bd 	bl	8003920 <__retarget_lock_release_recursive>
 80035a6:	4628      	mov	r0, r5
 80035a8:	bd70      	pop	{r4, r5, r6, pc}
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da04      	bge.n	80035b8 <_puts_r+0x60>
 80035ae:	69a2      	ldr	r2, [r4, #24]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	dc17      	bgt.n	80035e4 <_puts_r+0x8c>
 80035b4:	290a      	cmp	r1, #10
 80035b6:	d015      	beq.n	80035e4 <_puts_r+0x8c>
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	6022      	str	r2, [r4, #0]
 80035be:	7019      	strb	r1, [r3, #0]
 80035c0:	68a3      	ldr	r3, [r4, #8]
 80035c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035c6:	3b01      	subs	r3, #1
 80035c8:	60a3      	str	r3, [r4, #8]
 80035ca:	2900      	cmp	r1, #0
 80035cc:	d1ed      	bne.n	80035aa <_puts_r+0x52>
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	da11      	bge.n	80035f6 <_puts_r+0x9e>
 80035d2:	4622      	mov	r2, r4
 80035d4:	210a      	movs	r1, #10
 80035d6:	4628      	mov	r0, r5
 80035d8:	f000 f893 	bl	8003702 <__swbuf_r>
 80035dc:	3001      	adds	r0, #1
 80035de:	d0d7      	beq.n	8003590 <_puts_r+0x38>
 80035e0:	250a      	movs	r5, #10
 80035e2:	e7d7      	b.n	8003594 <_puts_r+0x3c>
 80035e4:	4622      	mov	r2, r4
 80035e6:	4628      	mov	r0, r5
 80035e8:	f000 f88b 	bl	8003702 <__swbuf_r>
 80035ec:	3001      	adds	r0, #1
 80035ee:	d1e7      	bne.n	80035c0 <_puts_r+0x68>
 80035f0:	e7ce      	b.n	8003590 <_puts_r+0x38>
 80035f2:	3e01      	subs	r6, #1
 80035f4:	e7e4      	b.n	80035c0 <_puts_r+0x68>
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	6022      	str	r2, [r4, #0]
 80035fc:	220a      	movs	r2, #10
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e7ee      	b.n	80035e0 <_puts_r+0x88>
	...

08003604 <puts>:
 8003604:	4b02      	ldr	r3, [pc, #8]	@ (8003610 <puts+0xc>)
 8003606:	4601      	mov	r1, r0
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	f7ff bfa5 	b.w	8003558 <_puts_r>
 800360e:	bf00      	nop
 8003610:	20000020 	.word	0x20000020

08003614 <sniprintf>:
 8003614:	b40c      	push	{r2, r3}
 8003616:	b530      	push	{r4, r5, lr}
 8003618:	4b17      	ldr	r3, [pc, #92]	@ (8003678 <sniprintf+0x64>)
 800361a:	1e0c      	subs	r4, r1, #0
 800361c:	681d      	ldr	r5, [r3, #0]
 800361e:	b09d      	sub	sp, #116	@ 0x74
 8003620:	da08      	bge.n	8003634 <sniprintf+0x20>
 8003622:	238b      	movs	r3, #139	@ 0x8b
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	602b      	str	r3, [r5, #0]
 800362a:	b01d      	add	sp, #116	@ 0x74
 800362c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003630:	b002      	add	sp, #8
 8003632:	4770      	bx	lr
 8003634:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003638:	f8ad 3014 	strh.w	r3, [sp, #20]
 800363c:	bf0c      	ite	eq
 800363e:	4623      	moveq	r3, r4
 8003640:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003644:	9304      	str	r3, [sp, #16]
 8003646:	9307      	str	r3, [sp, #28]
 8003648:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800364c:	9002      	str	r0, [sp, #8]
 800364e:	9006      	str	r0, [sp, #24]
 8003650:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003654:	4628      	mov	r0, r5
 8003656:	ab21      	add	r3, sp, #132	@ 0x84
 8003658:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800365a:	a902      	add	r1, sp, #8
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	f000 fac1 	bl	8003be4 <_svfiprintf_r>
 8003662:	1c43      	adds	r3, r0, #1
 8003664:	bfbc      	itt	lt
 8003666:	238b      	movlt	r3, #139	@ 0x8b
 8003668:	602b      	strlt	r3, [r5, #0]
 800366a:	2c00      	cmp	r4, #0
 800366c:	d0dd      	beq.n	800362a <sniprintf+0x16>
 800366e:	2200      	movs	r2, #0
 8003670:	9b02      	ldr	r3, [sp, #8]
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	e7d9      	b.n	800362a <sniprintf+0x16>
 8003676:	bf00      	nop
 8003678:	20000020 	.word	0x20000020

0800367c <__sread>:
 800367c:	b510      	push	{r4, lr}
 800367e:	460c      	mov	r4, r1
 8003680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003684:	f000 f8fc 	bl	8003880 <_read_r>
 8003688:	2800      	cmp	r0, #0
 800368a:	bfab      	itete	ge
 800368c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800368e:	89a3      	ldrhlt	r3, [r4, #12]
 8003690:	181b      	addge	r3, r3, r0
 8003692:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003696:	bfac      	ite	ge
 8003698:	6563      	strge	r3, [r4, #84]	@ 0x54
 800369a:	81a3      	strhlt	r3, [r4, #12]
 800369c:	bd10      	pop	{r4, pc}

0800369e <__swrite>:
 800369e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a2:	461f      	mov	r7, r3
 80036a4:	898b      	ldrh	r3, [r1, #12]
 80036a6:	4605      	mov	r5, r0
 80036a8:	05db      	lsls	r3, r3, #23
 80036aa:	460c      	mov	r4, r1
 80036ac:	4616      	mov	r6, r2
 80036ae:	d505      	bpl.n	80036bc <__swrite+0x1e>
 80036b0:	2302      	movs	r3, #2
 80036b2:	2200      	movs	r2, #0
 80036b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b8:	f000 f8d0 	bl	800385c <_lseek_r>
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	4632      	mov	r2, r6
 80036c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036c4:	81a3      	strh	r3, [r4, #12]
 80036c6:	4628      	mov	r0, r5
 80036c8:	463b      	mov	r3, r7
 80036ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036d2:	f000 b8e7 	b.w	80038a4 <_write_r>

080036d6 <__sseek>:
 80036d6:	b510      	push	{r4, lr}
 80036d8:	460c      	mov	r4, r1
 80036da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036de:	f000 f8bd 	bl	800385c <_lseek_r>
 80036e2:	1c43      	adds	r3, r0, #1
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	bf15      	itete	ne
 80036e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80036ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80036ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80036f2:	81a3      	strheq	r3, [r4, #12]
 80036f4:	bf18      	it	ne
 80036f6:	81a3      	strhne	r3, [r4, #12]
 80036f8:	bd10      	pop	{r4, pc}

080036fa <__sclose>:
 80036fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036fe:	f000 b89d 	b.w	800383c <_close_r>

08003702 <__swbuf_r>:
 8003702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003704:	460e      	mov	r6, r1
 8003706:	4614      	mov	r4, r2
 8003708:	4605      	mov	r5, r0
 800370a:	b118      	cbz	r0, 8003714 <__swbuf_r+0x12>
 800370c:	6a03      	ldr	r3, [r0, #32]
 800370e:	b90b      	cbnz	r3, 8003714 <__swbuf_r+0x12>
 8003710:	f7ff feda 	bl	80034c8 <__sinit>
 8003714:	69a3      	ldr	r3, [r4, #24]
 8003716:	60a3      	str	r3, [r4, #8]
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	071a      	lsls	r2, r3, #28
 800371c:	d501      	bpl.n	8003722 <__swbuf_r+0x20>
 800371e:	6923      	ldr	r3, [r4, #16]
 8003720:	b943      	cbnz	r3, 8003734 <__swbuf_r+0x32>
 8003722:	4621      	mov	r1, r4
 8003724:	4628      	mov	r0, r5
 8003726:	f000 f82b 	bl	8003780 <__swsetup_r>
 800372a:	b118      	cbz	r0, 8003734 <__swbuf_r+0x32>
 800372c:	f04f 37ff 	mov.w	r7, #4294967295
 8003730:	4638      	mov	r0, r7
 8003732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	6922      	ldr	r2, [r4, #16]
 8003738:	b2f6      	uxtb	r6, r6
 800373a:	1a98      	subs	r0, r3, r2
 800373c:	6963      	ldr	r3, [r4, #20]
 800373e:	4637      	mov	r7, r6
 8003740:	4283      	cmp	r3, r0
 8003742:	dc05      	bgt.n	8003750 <__swbuf_r+0x4e>
 8003744:	4621      	mov	r1, r4
 8003746:	4628      	mov	r0, r5
 8003748:	f000 fe9a 	bl	8004480 <_fflush_r>
 800374c:	2800      	cmp	r0, #0
 800374e:	d1ed      	bne.n	800372c <__swbuf_r+0x2a>
 8003750:	68a3      	ldr	r3, [r4, #8]
 8003752:	3b01      	subs	r3, #1
 8003754:	60a3      	str	r3, [r4, #8]
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	6022      	str	r2, [r4, #0]
 800375c:	701e      	strb	r6, [r3, #0]
 800375e:	6962      	ldr	r2, [r4, #20]
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	429a      	cmp	r2, r3
 8003764:	d004      	beq.n	8003770 <__swbuf_r+0x6e>
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	07db      	lsls	r3, r3, #31
 800376a:	d5e1      	bpl.n	8003730 <__swbuf_r+0x2e>
 800376c:	2e0a      	cmp	r6, #10
 800376e:	d1df      	bne.n	8003730 <__swbuf_r+0x2e>
 8003770:	4621      	mov	r1, r4
 8003772:	4628      	mov	r0, r5
 8003774:	f000 fe84 	bl	8004480 <_fflush_r>
 8003778:	2800      	cmp	r0, #0
 800377a:	d0d9      	beq.n	8003730 <__swbuf_r+0x2e>
 800377c:	e7d6      	b.n	800372c <__swbuf_r+0x2a>
	...

08003780 <__swsetup_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4b29      	ldr	r3, [pc, #164]	@ (8003828 <__swsetup_r+0xa8>)
 8003784:	4605      	mov	r5, r0
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	460c      	mov	r4, r1
 800378a:	b118      	cbz	r0, 8003794 <__swsetup_r+0x14>
 800378c:	6a03      	ldr	r3, [r0, #32]
 800378e:	b90b      	cbnz	r3, 8003794 <__swsetup_r+0x14>
 8003790:	f7ff fe9a 	bl	80034c8 <__sinit>
 8003794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003798:	0719      	lsls	r1, r3, #28
 800379a:	d422      	bmi.n	80037e2 <__swsetup_r+0x62>
 800379c:	06da      	lsls	r2, r3, #27
 800379e:	d407      	bmi.n	80037b0 <__swsetup_r+0x30>
 80037a0:	2209      	movs	r2, #9
 80037a2:	602a      	str	r2, [r5, #0]
 80037a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037a8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ac:	81a3      	strh	r3, [r4, #12]
 80037ae:	e033      	b.n	8003818 <__swsetup_r+0x98>
 80037b0:	0758      	lsls	r0, r3, #29
 80037b2:	d512      	bpl.n	80037da <__swsetup_r+0x5a>
 80037b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037b6:	b141      	cbz	r1, 80037ca <__swsetup_r+0x4a>
 80037b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037bc:	4299      	cmp	r1, r3
 80037be:	d002      	beq.n	80037c6 <__swsetup_r+0x46>
 80037c0:	4628      	mov	r0, r5
 80037c2:	f000 f8bd 	bl	8003940 <_free_r>
 80037c6:	2300      	movs	r3, #0
 80037c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80037ca:	89a3      	ldrh	r3, [r4, #12]
 80037cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80037d0:	81a3      	strh	r3, [r4, #12]
 80037d2:	2300      	movs	r3, #0
 80037d4:	6063      	str	r3, [r4, #4]
 80037d6:	6923      	ldr	r3, [r4, #16]
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	89a3      	ldrh	r3, [r4, #12]
 80037dc:	f043 0308 	orr.w	r3, r3, #8
 80037e0:	81a3      	strh	r3, [r4, #12]
 80037e2:	6923      	ldr	r3, [r4, #16]
 80037e4:	b94b      	cbnz	r3, 80037fa <__swsetup_r+0x7a>
 80037e6:	89a3      	ldrh	r3, [r4, #12]
 80037e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80037ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037f0:	d003      	beq.n	80037fa <__swsetup_r+0x7a>
 80037f2:	4621      	mov	r1, r4
 80037f4:	4628      	mov	r0, r5
 80037f6:	f000 fe90 	bl	800451a <__smakebuf_r>
 80037fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037fe:	f013 0201 	ands.w	r2, r3, #1
 8003802:	d00a      	beq.n	800381a <__swsetup_r+0x9a>
 8003804:	2200      	movs	r2, #0
 8003806:	60a2      	str	r2, [r4, #8]
 8003808:	6962      	ldr	r2, [r4, #20]
 800380a:	4252      	negs	r2, r2
 800380c:	61a2      	str	r2, [r4, #24]
 800380e:	6922      	ldr	r2, [r4, #16]
 8003810:	b942      	cbnz	r2, 8003824 <__swsetup_r+0xa4>
 8003812:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003816:	d1c5      	bne.n	80037a4 <__swsetup_r+0x24>
 8003818:	bd38      	pop	{r3, r4, r5, pc}
 800381a:	0799      	lsls	r1, r3, #30
 800381c:	bf58      	it	pl
 800381e:	6962      	ldrpl	r2, [r4, #20]
 8003820:	60a2      	str	r2, [r4, #8]
 8003822:	e7f4      	b.n	800380e <__swsetup_r+0x8e>
 8003824:	2000      	movs	r0, #0
 8003826:	e7f7      	b.n	8003818 <__swsetup_r+0x98>
 8003828:	20000020 	.word	0x20000020

0800382c <memset>:
 800382c:	4603      	mov	r3, r0
 800382e:	4402      	add	r2, r0
 8003830:	4293      	cmp	r3, r2
 8003832:	d100      	bne.n	8003836 <memset+0xa>
 8003834:	4770      	bx	lr
 8003836:	f803 1b01 	strb.w	r1, [r3], #1
 800383a:	e7f9      	b.n	8003830 <memset+0x4>

0800383c <_close_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	2300      	movs	r3, #0
 8003840:	4d05      	ldr	r5, [pc, #20]	@ (8003858 <_close_r+0x1c>)
 8003842:	4604      	mov	r4, r0
 8003844:	4608      	mov	r0, r1
 8003846:	602b      	str	r3, [r5, #0]
 8003848:	f7fd f8cb 	bl	80009e2 <_close>
 800384c:	1c43      	adds	r3, r0, #1
 800384e:	d102      	bne.n	8003856 <_close_r+0x1a>
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	b103      	cbz	r3, 8003856 <_close_r+0x1a>
 8003854:	6023      	str	r3, [r4, #0]
 8003856:	bd38      	pop	{r3, r4, r5, pc}
 8003858:	20000294 	.word	0x20000294

0800385c <_lseek_r>:
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	4604      	mov	r4, r0
 8003860:	4608      	mov	r0, r1
 8003862:	4611      	mov	r1, r2
 8003864:	2200      	movs	r2, #0
 8003866:	4d05      	ldr	r5, [pc, #20]	@ (800387c <_lseek_r+0x20>)
 8003868:	602a      	str	r2, [r5, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	f7fd f8dd 	bl	8000a2a <_lseek>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	d102      	bne.n	800387a <_lseek_r+0x1e>
 8003874:	682b      	ldr	r3, [r5, #0]
 8003876:	b103      	cbz	r3, 800387a <_lseek_r+0x1e>
 8003878:	6023      	str	r3, [r4, #0]
 800387a:	bd38      	pop	{r3, r4, r5, pc}
 800387c:	20000294 	.word	0x20000294

08003880 <_read_r>:
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	4604      	mov	r4, r0
 8003884:	4608      	mov	r0, r1
 8003886:	4611      	mov	r1, r2
 8003888:	2200      	movs	r2, #0
 800388a:	4d05      	ldr	r5, [pc, #20]	@ (80038a0 <_read_r+0x20>)
 800388c:	602a      	str	r2, [r5, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	f7fd f86e 	bl	8000970 <_read>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d102      	bne.n	800389e <_read_r+0x1e>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	b103      	cbz	r3, 800389e <_read_r+0x1e>
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	20000294 	.word	0x20000294

080038a4 <_write_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4604      	mov	r4, r0
 80038a8:	4608      	mov	r0, r1
 80038aa:	4611      	mov	r1, r2
 80038ac:	2200      	movs	r2, #0
 80038ae:	4d05      	ldr	r5, [pc, #20]	@ (80038c4 <_write_r+0x20>)
 80038b0:	602a      	str	r2, [r5, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f7fd f879 	bl	80009aa <_write>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d102      	bne.n	80038c2 <_write_r+0x1e>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	b103      	cbz	r3, 80038c2 <_write_r+0x1e>
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
 80038c4:	20000294 	.word	0x20000294

080038c8 <__errno>:
 80038c8:	4b01      	ldr	r3, [pc, #4]	@ (80038d0 <__errno+0x8>)
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000020 	.word	0x20000020

080038d4 <__libc_init_array>:
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	2600      	movs	r6, #0
 80038d8:	4d0c      	ldr	r5, [pc, #48]	@ (800390c <__libc_init_array+0x38>)
 80038da:	4c0d      	ldr	r4, [pc, #52]	@ (8003910 <__libc_init_array+0x3c>)
 80038dc:	1b64      	subs	r4, r4, r5
 80038de:	10a4      	asrs	r4, r4, #2
 80038e0:	42a6      	cmp	r6, r4
 80038e2:	d109      	bne.n	80038f8 <__libc_init_array+0x24>
 80038e4:	f000 fee6 	bl	80046b4 <_init>
 80038e8:	2600      	movs	r6, #0
 80038ea:	4d0a      	ldr	r5, [pc, #40]	@ (8003914 <__libc_init_array+0x40>)
 80038ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003918 <__libc_init_array+0x44>)
 80038ee:	1b64      	subs	r4, r4, r5
 80038f0:	10a4      	asrs	r4, r4, #2
 80038f2:	42a6      	cmp	r6, r4
 80038f4:	d105      	bne.n	8003902 <__libc_init_array+0x2e>
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
 80038f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038fc:	4798      	blx	r3
 80038fe:	3601      	adds	r6, #1
 8003900:	e7ee      	b.n	80038e0 <__libc_init_array+0xc>
 8003902:	f855 3b04 	ldr.w	r3, [r5], #4
 8003906:	4798      	blx	r3
 8003908:	3601      	adds	r6, #1
 800390a:	e7f2      	b.n	80038f2 <__libc_init_array+0x1e>
 800390c:	080047e0 	.word	0x080047e0
 8003910:	080047e0 	.word	0x080047e0
 8003914:	080047e0 	.word	0x080047e0
 8003918:	080047e4 	.word	0x080047e4

0800391c <__retarget_lock_init_recursive>:
 800391c:	4770      	bx	lr

0800391e <__retarget_lock_acquire_recursive>:
 800391e:	4770      	bx	lr

08003920 <__retarget_lock_release_recursive>:
 8003920:	4770      	bx	lr

08003922 <memcpy>:
 8003922:	440a      	add	r2, r1
 8003924:	4291      	cmp	r1, r2
 8003926:	f100 33ff 	add.w	r3, r0, #4294967295
 800392a:	d100      	bne.n	800392e <memcpy+0xc>
 800392c:	4770      	bx	lr
 800392e:	b510      	push	{r4, lr}
 8003930:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003934:	4291      	cmp	r1, r2
 8003936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800393a:	d1f9      	bne.n	8003930 <memcpy+0xe>
 800393c:	bd10      	pop	{r4, pc}
	...

08003940 <_free_r>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	4605      	mov	r5, r0
 8003944:	2900      	cmp	r1, #0
 8003946:	d040      	beq.n	80039ca <_free_r+0x8a>
 8003948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800394c:	1f0c      	subs	r4, r1, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	bfb8      	it	lt
 8003952:	18e4      	addlt	r4, r4, r3
 8003954:	f000 f8de 	bl	8003b14 <__malloc_lock>
 8003958:	4a1c      	ldr	r2, [pc, #112]	@ (80039cc <_free_r+0x8c>)
 800395a:	6813      	ldr	r3, [r2, #0]
 800395c:	b933      	cbnz	r3, 800396c <_free_r+0x2c>
 800395e:	6063      	str	r3, [r4, #4]
 8003960:	6014      	str	r4, [r2, #0]
 8003962:	4628      	mov	r0, r5
 8003964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003968:	f000 b8da 	b.w	8003b20 <__malloc_unlock>
 800396c:	42a3      	cmp	r3, r4
 800396e:	d908      	bls.n	8003982 <_free_r+0x42>
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	1821      	adds	r1, r4, r0
 8003974:	428b      	cmp	r3, r1
 8003976:	bf01      	itttt	eq
 8003978:	6819      	ldreq	r1, [r3, #0]
 800397a:	685b      	ldreq	r3, [r3, #4]
 800397c:	1809      	addeq	r1, r1, r0
 800397e:	6021      	streq	r1, [r4, #0]
 8003980:	e7ed      	b.n	800395e <_free_r+0x1e>
 8003982:	461a      	mov	r2, r3
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	b10b      	cbz	r3, 800398c <_free_r+0x4c>
 8003988:	42a3      	cmp	r3, r4
 800398a:	d9fa      	bls.n	8003982 <_free_r+0x42>
 800398c:	6811      	ldr	r1, [r2, #0]
 800398e:	1850      	adds	r0, r2, r1
 8003990:	42a0      	cmp	r0, r4
 8003992:	d10b      	bne.n	80039ac <_free_r+0x6c>
 8003994:	6820      	ldr	r0, [r4, #0]
 8003996:	4401      	add	r1, r0
 8003998:	1850      	adds	r0, r2, r1
 800399a:	4283      	cmp	r3, r0
 800399c:	6011      	str	r1, [r2, #0]
 800399e:	d1e0      	bne.n	8003962 <_free_r+0x22>
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4408      	add	r0, r1
 80039a6:	6010      	str	r0, [r2, #0]
 80039a8:	6053      	str	r3, [r2, #4]
 80039aa:	e7da      	b.n	8003962 <_free_r+0x22>
 80039ac:	d902      	bls.n	80039b4 <_free_r+0x74>
 80039ae:	230c      	movs	r3, #12
 80039b0:	602b      	str	r3, [r5, #0]
 80039b2:	e7d6      	b.n	8003962 <_free_r+0x22>
 80039b4:	6820      	ldr	r0, [r4, #0]
 80039b6:	1821      	adds	r1, r4, r0
 80039b8:	428b      	cmp	r3, r1
 80039ba:	bf01      	itttt	eq
 80039bc:	6819      	ldreq	r1, [r3, #0]
 80039be:	685b      	ldreq	r3, [r3, #4]
 80039c0:	1809      	addeq	r1, r1, r0
 80039c2:	6021      	streq	r1, [r4, #0]
 80039c4:	6063      	str	r3, [r4, #4]
 80039c6:	6054      	str	r4, [r2, #4]
 80039c8:	e7cb      	b.n	8003962 <_free_r+0x22>
 80039ca:	bd38      	pop	{r3, r4, r5, pc}
 80039cc:	200002a0 	.word	0x200002a0

080039d0 <sbrk_aligned>:
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	4e0f      	ldr	r6, [pc, #60]	@ (8003a10 <sbrk_aligned+0x40>)
 80039d4:	460c      	mov	r4, r1
 80039d6:	6831      	ldr	r1, [r6, #0]
 80039d8:	4605      	mov	r5, r0
 80039da:	b911      	cbnz	r1, 80039e2 <sbrk_aligned+0x12>
 80039dc:	f000 fe16 	bl	800460c <_sbrk_r>
 80039e0:	6030      	str	r0, [r6, #0]
 80039e2:	4621      	mov	r1, r4
 80039e4:	4628      	mov	r0, r5
 80039e6:	f000 fe11 	bl	800460c <_sbrk_r>
 80039ea:	1c43      	adds	r3, r0, #1
 80039ec:	d103      	bne.n	80039f6 <sbrk_aligned+0x26>
 80039ee:	f04f 34ff 	mov.w	r4, #4294967295
 80039f2:	4620      	mov	r0, r4
 80039f4:	bd70      	pop	{r4, r5, r6, pc}
 80039f6:	1cc4      	adds	r4, r0, #3
 80039f8:	f024 0403 	bic.w	r4, r4, #3
 80039fc:	42a0      	cmp	r0, r4
 80039fe:	d0f8      	beq.n	80039f2 <sbrk_aligned+0x22>
 8003a00:	1a21      	subs	r1, r4, r0
 8003a02:	4628      	mov	r0, r5
 8003a04:	f000 fe02 	bl	800460c <_sbrk_r>
 8003a08:	3001      	adds	r0, #1
 8003a0a:	d1f2      	bne.n	80039f2 <sbrk_aligned+0x22>
 8003a0c:	e7ef      	b.n	80039ee <sbrk_aligned+0x1e>
 8003a0e:	bf00      	nop
 8003a10:	2000029c 	.word	0x2000029c

08003a14 <_malloc_r>:
 8003a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a18:	1ccd      	adds	r5, r1, #3
 8003a1a:	f025 0503 	bic.w	r5, r5, #3
 8003a1e:	3508      	adds	r5, #8
 8003a20:	2d0c      	cmp	r5, #12
 8003a22:	bf38      	it	cc
 8003a24:	250c      	movcc	r5, #12
 8003a26:	2d00      	cmp	r5, #0
 8003a28:	4606      	mov	r6, r0
 8003a2a:	db01      	blt.n	8003a30 <_malloc_r+0x1c>
 8003a2c:	42a9      	cmp	r1, r5
 8003a2e:	d904      	bls.n	8003a3a <_malloc_r+0x26>
 8003a30:	230c      	movs	r3, #12
 8003a32:	6033      	str	r3, [r6, #0]
 8003a34:	2000      	movs	r0, #0
 8003a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b10 <_malloc_r+0xfc>
 8003a3e:	f000 f869 	bl	8003b14 <__malloc_lock>
 8003a42:	f8d8 3000 	ldr.w	r3, [r8]
 8003a46:	461c      	mov	r4, r3
 8003a48:	bb44      	cbnz	r4, 8003a9c <_malloc_r+0x88>
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f7ff ffbf 	bl	80039d0 <sbrk_aligned>
 8003a52:	1c43      	adds	r3, r0, #1
 8003a54:	4604      	mov	r4, r0
 8003a56:	d158      	bne.n	8003b0a <_malloc_r+0xf6>
 8003a58:	f8d8 4000 	ldr.w	r4, [r8]
 8003a5c:	4627      	mov	r7, r4
 8003a5e:	2f00      	cmp	r7, #0
 8003a60:	d143      	bne.n	8003aea <_malloc_r+0xd6>
 8003a62:	2c00      	cmp	r4, #0
 8003a64:	d04b      	beq.n	8003afe <_malloc_r+0xea>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	4639      	mov	r1, r7
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	eb04 0903 	add.w	r9, r4, r3
 8003a70:	f000 fdcc 	bl	800460c <_sbrk_r>
 8003a74:	4581      	cmp	r9, r0
 8003a76:	d142      	bne.n	8003afe <_malloc_r+0xea>
 8003a78:	6821      	ldr	r1, [r4, #0]
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	1a6d      	subs	r5, r5, r1
 8003a7e:	4629      	mov	r1, r5
 8003a80:	f7ff ffa6 	bl	80039d0 <sbrk_aligned>
 8003a84:	3001      	adds	r0, #1
 8003a86:	d03a      	beq.n	8003afe <_malloc_r+0xea>
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	442b      	add	r3, r5
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	bb62      	cbnz	r2, 8003af0 <_malloc_r+0xdc>
 8003a96:	f8c8 7000 	str.w	r7, [r8]
 8003a9a:	e00f      	b.n	8003abc <_malloc_r+0xa8>
 8003a9c:	6822      	ldr	r2, [r4, #0]
 8003a9e:	1b52      	subs	r2, r2, r5
 8003aa0:	d420      	bmi.n	8003ae4 <_malloc_r+0xd0>
 8003aa2:	2a0b      	cmp	r2, #11
 8003aa4:	d917      	bls.n	8003ad6 <_malloc_r+0xc2>
 8003aa6:	1961      	adds	r1, r4, r5
 8003aa8:	42a3      	cmp	r3, r4
 8003aaa:	6025      	str	r5, [r4, #0]
 8003aac:	bf18      	it	ne
 8003aae:	6059      	strne	r1, [r3, #4]
 8003ab0:	6863      	ldr	r3, [r4, #4]
 8003ab2:	bf08      	it	eq
 8003ab4:	f8c8 1000 	streq.w	r1, [r8]
 8003ab8:	5162      	str	r2, [r4, r5]
 8003aba:	604b      	str	r3, [r1, #4]
 8003abc:	4630      	mov	r0, r6
 8003abe:	f000 f82f 	bl	8003b20 <__malloc_unlock>
 8003ac2:	f104 000b 	add.w	r0, r4, #11
 8003ac6:	1d23      	adds	r3, r4, #4
 8003ac8:	f020 0007 	bic.w	r0, r0, #7
 8003acc:	1ac2      	subs	r2, r0, r3
 8003ace:	bf1c      	itt	ne
 8003ad0:	1a1b      	subne	r3, r3, r0
 8003ad2:	50a3      	strne	r3, [r4, r2]
 8003ad4:	e7af      	b.n	8003a36 <_malloc_r+0x22>
 8003ad6:	6862      	ldr	r2, [r4, #4]
 8003ad8:	42a3      	cmp	r3, r4
 8003ada:	bf0c      	ite	eq
 8003adc:	f8c8 2000 	streq.w	r2, [r8]
 8003ae0:	605a      	strne	r2, [r3, #4]
 8003ae2:	e7eb      	b.n	8003abc <_malloc_r+0xa8>
 8003ae4:	4623      	mov	r3, r4
 8003ae6:	6864      	ldr	r4, [r4, #4]
 8003ae8:	e7ae      	b.n	8003a48 <_malloc_r+0x34>
 8003aea:	463c      	mov	r4, r7
 8003aec:	687f      	ldr	r7, [r7, #4]
 8003aee:	e7b6      	b.n	8003a5e <_malloc_r+0x4a>
 8003af0:	461a      	mov	r2, r3
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	42a3      	cmp	r3, r4
 8003af6:	d1fb      	bne.n	8003af0 <_malloc_r+0xdc>
 8003af8:	2300      	movs	r3, #0
 8003afa:	6053      	str	r3, [r2, #4]
 8003afc:	e7de      	b.n	8003abc <_malloc_r+0xa8>
 8003afe:	230c      	movs	r3, #12
 8003b00:	4630      	mov	r0, r6
 8003b02:	6033      	str	r3, [r6, #0]
 8003b04:	f000 f80c 	bl	8003b20 <__malloc_unlock>
 8003b08:	e794      	b.n	8003a34 <_malloc_r+0x20>
 8003b0a:	6005      	str	r5, [r0, #0]
 8003b0c:	e7d6      	b.n	8003abc <_malloc_r+0xa8>
 8003b0e:	bf00      	nop
 8003b10:	200002a0 	.word	0x200002a0

08003b14 <__malloc_lock>:
 8003b14:	4801      	ldr	r0, [pc, #4]	@ (8003b1c <__malloc_lock+0x8>)
 8003b16:	f7ff bf02 	b.w	800391e <__retarget_lock_acquire_recursive>
 8003b1a:	bf00      	nop
 8003b1c:	20000298 	.word	0x20000298

08003b20 <__malloc_unlock>:
 8003b20:	4801      	ldr	r0, [pc, #4]	@ (8003b28 <__malloc_unlock+0x8>)
 8003b22:	f7ff befd 	b.w	8003920 <__retarget_lock_release_recursive>
 8003b26:	bf00      	nop
 8003b28:	20000298 	.word	0x20000298

08003b2c <__ssputs_r>:
 8003b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	461f      	mov	r7, r3
 8003b32:	688e      	ldr	r6, [r1, #8]
 8003b34:	4682      	mov	sl, r0
 8003b36:	42be      	cmp	r6, r7
 8003b38:	460c      	mov	r4, r1
 8003b3a:	4690      	mov	r8, r2
 8003b3c:	680b      	ldr	r3, [r1, #0]
 8003b3e:	d82d      	bhi.n	8003b9c <__ssputs_r+0x70>
 8003b40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b48:	d026      	beq.n	8003b98 <__ssputs_r+0x6c>
 8003b4a:	6965      	ldr	r5, [r4, #20]
 8003b4c:	6909      	ldr	r1, [r1, #16]
 8003b4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b52:	eba3 0901 	sub.w	r9, r3, r1
 8003b56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b5a:	1c7b      	adds	r3, r7, #1
 8003b5c:	444b      	add	r3, r9
 8003b5e:	106d      	asrs	r5, r5, #1
 8003b60:	429d      	cmp	r5, r3
 8003b62:	bf38      	it	cc
 8003b64:	461d      	movcc	r5, r3
 8003b66:	0553      	lsls	r3, r2, #21
 8003b68:	d527      	bpl.n	8003bba <__ssputs_r+0x8e>
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	f7ff ff52 	bl	8003a14 <_malloc_r>
 8003b70:	4606      	mov	r6, r0
 8003b72:	b360      	cbz	r0, 8003bce <__ssputs_r+0xa2>
 8003b74:	464a      	mov	r2, r9
 8003b76:	6921      	ldr	r1, [r4, #16]
 8003b78:	f7ff fed3 	bl	8003922 <memcpy>
 8003b7c:	89a3      	ldrh	r3, [r4, #12]
 8003b7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b86:	81a3      	strh	r3, [r4, #12]
 8003b88:	6126      	str	r6, [r4, #16]
 8003b8a:	444e      	add	r6, r9
 8003b8c:	6026      	str	r6, [r4, #0]
 8003b8e:	463e      	mov	r6, r7
 8003b90:	6165      	str	r5, [r4, #20]
 8003b92:	eba5 0509 	sub.w	r5, r5, r9
 8003b96:	60a5      	str	r5, [r4, #8]
 8003b98:	42be      	cmp	r6, r7
 8003b9a:	d900      	bls.n	8003b9e <__ssputs_r+0x72>
 8003b9c:	463e      	mov	r6, r7
 8003b9e:	4632      	mov	r2, r6
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	6820      	ldr	r0, [r4, #0]
 8003ba4:	f000 fcf5 	bl	8004592 <memmove>
 8003ba8:	2000      	movs	r0, #0
 8003baa:	68a3      	ldr	r3, [r4, #8]
 8003bac:	1b9b      	subs	r3, r3, r6
 8003bae:	60a3      	str	r3, [r4, #8]
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	4433      	add	r3, r6
 8003bb4:	6023      	str	r3, [r4, #0]
 8003bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bba:	462a      	mov	r2, r5
 8003bbc:	f000 fd44 	bl	8004648 <_realloc_r>
 8003bc0:	4606      	mov	r6, r0
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d1e0      	bne.n	8003b88 <__ssputs_r+0x5c>
 8003bc6:	4650      	mov	r0, sl
 8003bc8:	6921      	ldr	r1, [r4, #16]
 8003bca:	f7ff feb9 	bl	8003940 <_free_r>
 8003bce:	230c      	movs	r3, #12
 8003bd0:	f8ca 3000 	str.w	r3, [sl]
 8003bd4:	89a3      	ldrh	r3, [r4, #12]
 8003bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bde:	81a3      	strh	r3, [r4, #12]
 8003be0:	e7e9      	b.n	8003bb6 <__ssputs_r+0x8a>
	...

08003be4 <_svfiprintf_r>:
 8003be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be8:	4698      	mov	r8, r3
 8003bea:	898b      	ldrh	r3, [r1, #12]
 8003bec:	4607      	mov	r7, r0
 8003bee:	061b      	lsls	r3, r3, #24
 8003bf0:	460d      	mov	r5, r1
 8003bf2:	4614      	mov	r4, r2
 8003bf4:	b09d      	sub	sp, #116	@ 0x74
 8003bf6:	d510      	bpl.n	8003c1a <_svfiprintf_r+0x36>
 8003bf8:	690b      	ldr	r3, [r1, #16]
 8003bfa:	b973      	cbnz	r3, 8003c1a <_svfiprintf_r+0x36>
 8003bfc:	2140      	movs	r1, #64	@ 0x40
 8003bfe:	f7ff ff09 	bl	8003a14 <_malloc_r>
 8003c02:	6028      	str	r0, [r5, #0]
 8003c04:	6128      	str	r0, [r5, #16]
 8003c06:	b930      	cbnz	r0, 8003c16 <_svfiprintf_r+0x32>
 8003c08:	230c      	movs	r3, #12
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c10:	b01d      	add	sp, #116	@ 0x74
 8003c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c16:	2340      	movs	r3, #64	@ 0x40
 8003c18:	616b      	str	r3, [r5, #20]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c1e:	2320      	movs	r3, #32
 8003c20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c24:	2330      	movs	r3, #48	@ 0x30
 8003c26:	f04f 0901 	mov.w	r9, #1
 8003c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c2e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003dc8 <_svfiprintf_r+0x1e4>
 8003c32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c36:	4623      	mov	r3, r4
 8003c38:	469a      	mov	sl, r3
 8003c3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c3e:	b10a      	cbz	r2, 8003c44 <_svfiprintf_r+0x60>
 8003c40:	2a25      	cmp	r2, #37	@ 0x25
 8003c42:	d1f9      	bne.n	8003c38 <_svfiprintf_r+0x54>
 8003c44:	ebba 0b04 	subs.w	fp, sl, r4
 8003c48:	d00b      	beq.n	8003c62 <_svfiprintf_r+0x7e>
 8003c4a:	465b      	mov	r3, fp
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	4629      	mov	r1, r5
 8003c50:	4638      	mov	r0, r7
 8003c52:	f7ff ff6b 	bl	8003b2c <__ssputs_r>
 8003c56:	3001      	adds	r0, #1
 8003c58:	f000 80a7 	beq.w	8003daa <_svfiprintf_r+0x1c6>
 8003c5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c5e:	445a      	add	r2, fp
 8003c60:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c62:	f89a 3000 	ldrb.w	r3, [sl]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 809f 	beq.w	8003daa <_svfiprintf_r+0x1c6>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c76:	f10a 0a01 	add.w	sl, sl, #1
 8003c7a:	9304      	str	r3, [sp, #16]
 8003c7c:	9307      	str	r3, [sp, #28]
 8003c7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c82:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c84:	4654      	mov	r4, sl
 8003c86:	2205      	movs	r2, #5
 8003c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c8c:	484e      	ldr	r0, [pc, #312]	@ (8003dc8 <_svfiprintf_r+0x1e4>)
 8003c8e:	f000 fccd 	bl	800462c <memchr>
 8003c92:	9a04      	ldr	r2, [sp, #16]
 8003c94:	b9d8      	cbnz	r0, 8003cce <_svfiprintf_r+0xea>
 8003c96:	06d0      	lsls	r0, r2, #27
 8003c98:	bf44      	itt	mi
 8003c9a:	2320      	movmi	r3, #32
 8003c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ca0:	0711      	lsls	r1, r2, #28
 8003ca2:	bf44      	itt	mi
 8003ca4:	232b      	movmi	r3, #43	@ 0x2b
 8003ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003caa:	f89a 3000 	ldrb.w	r3, [sl]
 8003cae:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cb0:	d015      	beq.n	8003cde <_svfiprintf_r+0xfa>
 8003cb2:	4654      	mov	r4, sl
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	f04f 0c0a 	mov.w	ip, #10
 8003cba:	9a07      	ldr	r2, [sp, #28]
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cc2:	3b30      	subs	r3, #48	@ 0x30
 8003cc4:	2b09      	cmp	r3, #9
 8003cc6:	d94b      	bls.n	8003d60 <_svfiprintf_r+0x17c>
 8003cc8:	b1b0      	cbz	r0, 8003cf8 <_svfiprintf_r+0x114>
 8003cca:	9207      	str	r2, [sp, #28]
 8003ccc:	e014      	b.n	8003cf8 <_svfiprintf_r+0x114>
 8003cce:	eba0 0308 	sub.w	r3, r0, r8
 8003cd2:	fa09 f303 	lsl.w	r3, r9, r3
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	46a2      	mov	sl, r4
 8003cda:	9304      	str	r3, [sp, #16]
 8003cdc:	e7d2      	b.n	8003c84 <_svfiprintf_r+0xa0>
 8003cde:	9b03      	ldr	r3, [sp, #12]
 8003ce0:	1d19      	adds	r1, r3, #4
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	9103      	str	r1, [sp, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bfbb      	ittet	lt
 8003cea:	425b      	neglt	r3, r3
 8003cec:	f042 0202 	orrlt.w	r2, r2, #2
 8003cf0:	9307      	strge	r3, [sp, #28]
 8003cf2:	9307      	strlt	r3, [sp, #28]
 8003cf4:	bfb8      	it	lt
 8003cf6:	9204      	strlt	r2, [sp, #16]
 8003cf8:	7823      	ldrb	r3, [r4, #0]
 8003cfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cfc:	d10a      	bne.n	8003d14 <_svfiprintf_r+0x130>
 8003cfe:	7863      	ldrb	r3, [r4, #1]
 8003d00:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d02:	d132      	bne.n	8003d6a <_svfiprintf_r+0x186>
 8003d04:	9b03      	ldr	r3, [sp, #12]
 8003d06:	3402      	adds	r4, #2
 8003d08:	1d1a      	adds	r2, r3, #4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	9203      	str	r2, [sp, #12]
 8003d0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d12:	9305      	str	r3, [sp, #20]
 8003d14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003dcc <_svfiprintf_r+0x1e8>
 8003d18:	2203      	movs	r2, #3
 8003d1a:	4650      	mov	r0, sl
 8003d1c:	7821      	ldrb	r1, [r4, #0]
 8003d1e:	f000 fc85 	bl	800462c <memchr>
 8003d22:	b138      	cbz	r0, 8003d34 <_svfiprintf_r+0x150>
 8003d24:	2240      	movs	r2, #64	@ 0x40
 8003d26:	9b04      	ldr	r3, [sp, #16]
 8003d28:	eba0 000a 	sub.w	r0, r0, sl
 8003d2c:	4082      	lsls	r2, r0
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	3401      	adds	r4, #1
 8003d32:	9304      	str	r3, [sp, #16]
 8003d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d38:	2206      	movs	r2, #6
 8003d3a:	4825      	ldr	r0, [pc, #148]	@ (8003dd0 <_svfiprintf_r+0x1ec>)
 8003d3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d40:	f000 fc74 	bl	800462c <memchr>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d036      	beq.n	8003db6 <_svfiprintf_r+0x1d2>
 8003d48:	4b22      	ldr	r3, [pc, #136]	@ (8003dd4 <_svfiprintf_r+0x1f0>)
 8003d4a:	bb1b      	cbnz	r3, 8003d94 <_svfiprintf_r+0x1b0>
 8003d4c:	9b03      	ldr	r3, [sp, #12]
 8003d4e:	3307      	adds	r3, #7
 8003d50:	f023 0307 	bic.w	r3, r3, #7
 8003d54:	3308      	adds	r3, #8
 8003d56:	9303      	str	r3, [sp, #12]
 8003d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d5a:	4433      	add	r3, r6
 8003d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d5e:	e76a      	b.n	8003c36 <_svfiprintf_r+0x52>
 8003d60:	460c      	mov	r4, r1
 8003d62:	2001      	movs	r0, #1
 8003d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d68:	e7a8      	b.n	8003cbc <_svfiprintf_r+0xd8>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f04f 0c0a 	mov.w	ip, #10
 8003d70:	4619      	mov	r1, r3
 8003d72:	3401      	adds	r4, #1
 8003d74:	9305      	str	r3, [sp, #20]
 8003d76:	4620      	mov	r0, r4
 8003d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d7c:	3a30      	subs	r2, #48	@ 0x30
 8003d7e:	2a09      	cmp	r2, #9
 8003d80:	d903      	bls.n	8003d8a <_svfiprintf_r+0x1a6>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0c6      	beq.n	8003d14 <_svfiprintf_r+0x130>
 8003d86:	9105      	str	r1, [sp, #20]
 8003d88:	e7c4      	b.n	8003d14 <_svfiprintf_r+0x130>
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d92:	e7f0      	b.n	8003d76 <_svfiprintf_r+0x192>
 8003d94:	ab03      	add	r3, sp, #12
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	462a      	mov	r2, r5
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd8 <_svfiprintf_r+0x1f4>)
 8003d9e:	a904      	add	r1, sp, #16
 8003da0:	f3af 8000 	nop.w
 8003da4:	1c42      	adds	r2, r0, #1
 8003da6:	4606      	mov	r6, r0
 8003da8:	d1d6      	bne.n	8003d58 <_svfiprintf_r+0x174>
 8003daa:	89ab      	ldrh	r3, [r5, #12]
 8003dac:	065b      	lsls	r3, r3, #25
 8003dae:	f53f af2d 	bmi.w	8003c0c <_svfiprintf_r+0x28>
 8003db2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003db4:	e72c      	b.n	8003c10 <_svfiprintf_r+0x2c>
 8003db6:	ab03      	add	r3, sp, #12
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	462a      	mov	r2, r5
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <_svfiprintf_r+0x1f4>)
 8003dc0:	a904      	add	r1, sp, #16
 8003dc2:	f000 f9bd 	bl	8004140 <_printf_i>
 8003dc6:	e7ed      	b.n	8003da4 <_svfiprintf_r+0x1c0>
 8003dc8:	080047a2 	.word	0x080047a2
 8003dcc:	080047a8 	.word	0x080047a8
 8003dd0:	080047ac 	.word	0x080047ac
 8003dd4:	00000000 	.word	0x00000000
 8003dd8:	08003b2d 	.word	0x08003b2d

08003ddc <__sfputc_r>:
 8003ddc:	6893      	ldr	r3, [r2, #8]
 8003dde:	b410      	push	{r4}
 8003de0:	3b01      	subs	r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	6093      	str	r3, [r2, #8]
 8003de6:	da07      	bge.n	8003df8 <__sfputc_r+0x1c>
 8003de8:	6994      	ldr	r4, [r2, #24]
 8003dea:	42a3      	cmp	r3, r4
 8003dec:	db01      	blt.n	8003df2 <__sfputc_r+0x16>
 8003dee:	290a      	cmp	r1, #10
 8003df0:	d102      	bne.n	8003df8 <__sfputc_r+0x1c>
 8003df2:	bc10      	pop	{r4}
 8003df4:	f7ff bc85 	b.w	8003702 <__swbuf_r>
 8003df8:	6813      	ldr	r3, [r2, #0]
 8003dfa:	1c58      	adds	r0, r3, #1
 8003dfc:	6010      	str	r0, [r2, #0]
 8003dfe:	7019      	strb	r1, [r3, #0]
 8003e00:	4608      	mov	r0, r1
 8003e02:	bc10      	pop	{r4}
 8003e04:	4770      	bx	lr

08003e06 <__sfputs_r>:
 8003e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e08:	4606      	mov	r6, r0
 8003e0a:	460f      	mov	r7, r1
 8003e0c:	4614      	mov	r4, r2
 8003e0e:	18d5      	adds	r5, r2, r3
 8003e10:	42ac      	cmp	r4, r5
 8003e12:	d101      	bne.n	8003e18 <__sfputs_r+0x12>
 8003e14:	2000      	movs	r0, #0
 8003e16:	e007      	b.n	8003e28 <__sfputs_r+0x22>
 8003e18:	463a      	mov	r2, r7
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e20:	f7ff ffdc 	bl	8003ddc <__sfputc_r>
 8003e24:	1c43      	adds	r3, r0, #1
 8003e26:	d1f3      	bne.n	8003e10 <__sfputs_r+0xa>
 8003e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e2c <_vfiprintf_r>:
 8003e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e30:	460d      	mov	r5, r1
 8003e32:	4614      	mov	r4, r2
 8003e34:	4698      	mov	r8, r3
 8003e36:	4606      	mov	r6, r0
 8003e38:	b09d      	sub	sp, #116	@ 0x74
 8003e3a:	b118      	cbz	r0, 8003e44 <_vfiprintf_r+0x18>
 8003e3c:	6a03      	ldr	r3, [r0, #32]
 8003e3e:	b90b      	cbnz	r3, 8003e44 <_vfiprintf_r+0x18>
 8003e40:	f7ff fb42 	bl	80034c8 <__sinit>
 8003e44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e46:	07d9      	lsls	r1, r3, #31
 8003e48:	d405      	bmi.n	8003e56 <_vfiprintf_r+0x2a>
 8003e4a:	89ab      	ldrh	r3, [r5, #12]
 8003e4c:	059a      	lsls	r2, r3, #22
 8003e4e:	d402      	bmi.n	8003e56 <_vfiprintf_r+0x2a>
 8003e50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e52:	f7ff fd64 	bl	800391e <__retarget_lock_acquire_recursive>
 8003e56:	89ab      	ldrh	r3, [r5, #12]
 8003e58:	071b      	lsls	r3, r3, #28
 8003e5a:	d501      	bpl.n	8003e60 <_vfiprintf_r+0x34>
 8003e5c:	692b      	ldr	r3, [r5, #16]
 8003e5e:	b99b      	cbnz	r3, 8003e88 <_vfiprintf_r+0x5c>
 8003e60:	4629      	mov	r1, r5
 8003e62:	4630      	mov	r0, r6
 8003e64:	f7ff fc8c 	bl	8003780 <__swsetup_r>
 8003e68:	b170      	cbz	r0, 8003e88 <_vfiprintf_r+0x5c>
 8003e6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e6c:	07dc      	lsls	r4, r3, #31
 8003e6e:	d504      	bpl.n	8003e7a <_vfiprintf_r+0x4e>
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	b01d      	add	sp, #116	@ 0x74
 8003e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e7a:	89ab      	ldrh	r3, [r5, #12]
 8003e7c:	0598      	lsls	r0, r3, #22
 8003e7e:	d4f7      	bmi.n	8003e70 <_vfiprintf_r+0x44>
 8003e80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e82:	f7ff fd4d 	bl	8003920 <__retarget_lock_release_recursive>
 8003e86:	e7f3      	b.n	8003e70 <_vfiprintf_r+0x44>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e92:	2330      	movs	r3, #48	@ 0x30
 8003e94:	f04f 0901 	mov.w	r9, #1
 8003e98:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e9c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004048 <_vfiprintf_r+0x21c>
 8003ea0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ea4:	4623      	mov	r3, r4
 8003ea6:	469a      	mov	sl, r3
 8003ea8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eac:	b10a      	cbz	r2, 8003eb2 <_vfiprintf_r+0x86>
 8003eae:	2a25      	cmp	r2, #37	@ 0x25
 8003eb0:	d1f9      	bne.n	8003ea6 <_vfiprintf_r+0x7a>
 8003eb2:	ebba 0b04 	subs.w	fp, sl, r4
 8003eb6:	d00b      	beq.n	8003ed0 <_vfiprintf_r+0xa4>
 8003eb8:	465b      	mov	r3, fp
 8003eba:	4622      	mov	r2, r4
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f7ff ffa1 	bl	8003e06 <__sfputs_r>
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	f000 80a7 	beq.w	8004018 <_vfiprintf_r+0x1ec>
 8003eca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ecc:	445a      	add	r2, fp
 8003ece:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 809f 	beq.w	8004018 <_vfiprintf_r+0x1ec>
 8003eda:	2300      	movs	r3, #0
 8003edc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ee4:	f10a 0a01 	add.w	sl, sl, #1
 8003ee8:	9304      	str	r3, [sp, #16]
 8003eea:	9307      	str	r3, [sp, #28]
 8003eec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ef0:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ef2:	4654      	mov	r4, sl
 8003ef4:	2205      	movs	r2, #5
 8003ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003efa:	4853      	ldr	r0, [pc, #332]	@ (8004048 <_vfiprintf_r+0x21c>)
 8003efc:	f000 fb96 	bl	800462c <memchr>
 8003f00:	9a04      	ldr	r2, [sp, #16]
 8003f02:	b9d8      	cbnz	r0, 8003f3c <_vfiprintf_r+0x110>
 8003f04:	06d1      	lsls	r1, r2, #27
 8003f06:	bf44      	itt	mi
 8003f08:	2320      	movmi	r3, #32
 8003f0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f0e:	0713      	lsls	r3, r2, #28
 8003f10:	bf44      	itt	mi
 8003f12:	232b      	movmi	r3, #43	@ 0x2b
 8003f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f18:	f89a 3000 	ldrb.w	r3, [sl]
 8003f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f1e:	d015      	beq.n	8003f4c <_vfiprintf_r+0x120>
 8003f20:	4654      	mov	r4, sl
 8003f22:	2000      	movs	r0, #0
 8003f24:	f04f 0c0a 	mov.w	ip, #10
 8003f28:	9a07      	ldr	r2, [sp, #28]
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f30:	3b30      	subs	r3, #48	@ 0x30
 8003f32:	2b09      	cmp	r3, #9
 8003f34:	d94b      	bls.n	8003fce <_vfiprintf_r+0x1a2>
 8003f36:	b1b0      	cbz	r0, 8003f66 <_vfiprintf_r+0x13a>
 8003f38:	9207      	str	r2, [sp, #28]
 8003f3a:	e014      	b.n	8003f66 <_vfiprintf_r+0x13a>
 8003f3c:	eba0 0308 	sub.w	r3, r0, r8
 8003f40:	fa09 f303 	lsl.w	r3, r9, r3
 8003f44:	4313      	orrs	r3, r2
 8003f46:	46a2      	mov	sl, r4
 8003f48:	9304      	str	r3, [sp, #16]
 8003f4a:	e7d2      	b.n	8003ef2 <_vfiprintf_r+0xc6>
 8003f4c:	9b03      	ldr	r3, [sp, #12]
 8003f4e:	1d19      	adds	r1, r3, #4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	9103      	str	r1, [sp, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	bfbb      	ittet	lt
 8003f58:	425b      	neglt	r3, r3
 8003f5a:	f042 0202 	orrlt.w	r2, r2, #2
 8003f5e:	9307      	strge	r3, [sp, #28]
 8003f60:	9307      	strlt	r3, [sp, #28]
 8003f62:	bfb8      	it	lt
 8003f64:	9204      	strlt	r2, [sp, #16]
 8003f66:	7823      	ldrb	r3, [r4, #0]
 8003f68:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f6a:	d10a      	bne.n	8003f82 <_vfiprintf_r+0x156>
 8003f6c:	7863      	ldrb	r3, [r4, #1]
 8003f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f70:	d132      	bne.n	8003fd8 <_vfiprintf_r+0x1ac>
 8003f72:	9b03      	ldr	r3, [sp, #12]
 8003f74:	3402      	adds	r4, #2
 8003f76:	1d1a      	adds	r2, r3, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	9203      	str	r2, [sp, #12]
 8003f7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f80:	9305      	str	r3, [sp, #20]
 8003f82:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800404c <_vfiprintf_r+0x220>
 8003f86:	2203      	movs	r2, #3
 8003f88:	4650      	mov	r0, sl
 8003f8a:	7821      	ldrb	r1, [r4, #0]
 8003f8c:	f000 fb4e 	bl	800462c <memchr>
 8003f90:	b138      	cbz	r0, 8003fa2 <_vfiprintf_r+0x176>
 8003f92:	2240      	movs	r2, #64	@ 0x40
 8003f94:	9b04      	ldr	r3, [sp, #16]
 8003f96:	eba0 000a 	sub.w	r0, r0, sl
 8003f9a:	4082      	lsls	r2, r0
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	3401      	adds	r4, #1
 8003fa0:	9304      	str	r3, [sp, #16]
 8003fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa6:	2206      	movs	r2, #6
 8003fa8:	4829      	ldr	r0, [pc, #164]	@ (8004050 <_vfiprintf_r+0x224>)
 8003faa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003fae:	f000 fb3d 	bl	800462c <memchr>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d03f      	beq.n	8004036 <_vfiprintf_r+0x20a>
 8003fb6:	4b27      	ldr	r3, [pc, #156]	@ (8004054 <_vfiprintf_r+0x228>)
 8003fb8:	bb1b      	cbnz	r3, 8004002 <_vfiprintf_r+0x1d6>
 8003fba:	9b03      	ldr	r3, [sp, #12]
 8003fbc:	3307      	adds	r3, #7
 8003fbe:	f023 0307 	bic.w	r3, r3, #7
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	9303      	str	r3, [sp, #12]
 8003fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fc8:	443b      	add	r3, r7
 8003fca:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fcc:	e76a      	b.n	8003ea4 <_vfiprintf_r+0x78>
 8003fce:	460c      	mov	r4, r1
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fd6:	e7a8      	b.n	8003f2a <_vfiprintf_r+0xfe>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f04f 0c0a 	mov.w	ip, #10
 8003fde:	4619      	mov	r1, r3
 8003fe0:	3401      	adds	r4, #1
 8003fe2:	9305      	str	r3, [sp, #20]
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fea:	3a30      	subs	r2, #48	@ 0x30
 8003fec:	2a09      	cmp	r2, #9
 8003fee:	d903      	bls.n	8003ff8 <_vfiprintf_r+0x1cc>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0c6      	beq.n	8003f82 <_vfiprintf_r+0x156>
 8003ff4:	9105      	str	r1, [sp, #20]
 8003ff6:	e7c4      	b.n	8003f82 <_vfiprintf_r+0x156>
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004000:	e7f0      	b.n	8003fe4 <_vfiprintf_r+0x1b8>
 8004002:	ab03      	add	r3, sp, #12
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	462a      	mov	r2, r5
 8004008:	4630      	mov	r0, r6
 800400a:	4b13      	ldr	r3, [pc, #76]	@ (8004058 <_vfiprintf_r+0x22c>)
 800400c:	a904      	add	r1, sp, #16
 800400e:	f3af 8000 	nop.w
 8004012:	4607      	mov	r7, r0
 8004014:	1c78      	adds	r0, r7, #1
 8004016:	d1d6      	bne.n	8003fc6 <_vfiprintf_r+0x19a>
 8004018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800401a:	07d9      	lsls	r1, r3, #31
 800401c:	d405      	bmi.n	800402a <_vfiprintf_r+0x1fe>
 800401e:	89ab      	ldrh	r3, [r5, #12]
 8004020:	059a      	lsls	r2, r3, #22
 8004022:	d402      	bmi.n	800402a <_vfiprintf_r+0x1fe>
 8004024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004026:	f7ff fc7b 	bl	8003920 <__retarget_lock_release_recursive>
 800402a:	89ab      	ldrh	r3, [r5, #12]
 800402c:	065b      	lsls	r3, r3, #25
 800402e:	f53f af1f 	bmi.w	8003e70 <_vfiprintf_r+0x44>
 8004032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004034:	e71e      	b.n	8003e74 <_vfiprintf_r+0x48>
 8004036:	ab03      	add	r3, sp, #12
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	462a      	mov	r2, r5
 800403c:	4630      	mov	r0, r6
 800403e:	4b06      	ldr	r3, [pc, #24]	@ (8004058 <_vfiprintf_r+0x22c>)
 8004040:	a904      	add	r1, sp, #16
 8004042:	f000 f87d 	bl	8004140 <_printf_i>
 8004046:	e7e4      	b.n	8004012 <_vfiprintf_r+0x1e6>
 8004048:	080047a2 	.word	0x080047a2
 800404c:	080047a8 	.word	0x080047a8
 8004050:	080047ac 	.word	0x080047ac
 8004054:	00000000 	.word	0x00000000
 8004058:	08003e07 	.word	0x08003e07

0800405c <_printf_common>:
 800405c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004060:	4616      	mov	r6, r2
 8004062:	4698      	mov	r8, r3
 8004064:	688a      	ldr	r2, [r1, #8]
 8004066:	690b      	ldr	r3, [r1, #16]
 8004068:	4607      	mov	r7, r0
 800406a:	4293      	cmp	r3, r2
 800406c:	bfb8      	it	lt
 800406e:	4613      	movlt	r3, r2
 8004070:	6033      	str	r3, [r6, #0]
 8004072:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004076:	460c      	mov	r4, r1
 8004078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800407c:	b10a      	cbz	r2, 8004082 <_printf_common+0x26>
 800407e:	3301      	adds	r3, #1
 8004080:	6033      	str	r3, [r6, #0]
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	0699      	lsls	r1, r3, #26
 8004086:	bf42      	ittt	mi
 8004088:	6833      	ldrmi	r3, [r6, #0]
 800408a:	3302      	addmi	r3, #2
 800408c:	6033      	strmi	r3, [r6, #0]
 800408e:	6825      	ldr	r5, [r4, #0]
 8004090:	f015 0506 	ands.w	r5, r5, #6
 8004094:	d106      	bne.n	80040a4 <_printf_common+0x48>
 8004096:	f104 0a19 	add.w	sl, r4, #25
 800409a:	68e3      	ldr	r3, [r4, #12]
 800409c:	6832      	ldr	r2, [r6, #0]
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	42ab      	cmp	r3, r5
 80040a2:	dc2b      	bgt.n	80040fc <_printf_common+0xa0>
 80040a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80040a8:	6822      	ldr	r2, [r4, #0]
 80040aa:	3b00      	subs	r3, #0
 80040ac:	bf18      	it	ne
 80040ae:	2301      	movne	r3, #1
 80040b0:	0692      	lsls	r2, r2, #26
 80040b2:	d430      	bmi.n	8004116 <_printf_common+0xba>
 80040b4:	4641      	mov	r1, r8
 80040b6:	4638      	mov	r0, r7
 80040b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040bc:	47c8      	blx	r9
 80040be:	3001      	adds	r0, #1
 80040c0:	d023      	beq.n	800410a <_printf_common+0xae>
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	6922      	ldr	r2, [r4, #16]
 80040c6:	f003 0306 	and.w	r3, r3, #6
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	bf14      	ite	ne
 80040ce:	2500      	movne	r5, #0
 80040d0:	6833      	ldreq	r3, [r6, #0]
 80040d2:	f04f 0600 	mov.w	r6, #0
 80040d6:	bf08      	it	eq
 80040d8:	68e5      	ldreq	r5, [r4, #12]
 80040da:	f104 041a 	add.w	r4, r4, #26
 80040de:	bf08      	it	eq
 80040e0:	1aed      	subeq	r5, r5, r3
 80040e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80040e6:	bf08      	it	eq
 80040e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040ec:	4293      	cmp	r3, r2
 80040ee:	bfc4      	itt	gt
 80040f0:	1a9b      	subgt	r3, r3, r2
 80040f2:	18ed      	addgt	r5, r5, r3
 80040f4:	42b5      	cmp	r5, r6
 80040f6:	d11a      	bne.n	800412e <_printf_common+0xd2>
 80040f8:	2000      	movs	r0, #0
 80040fa:	e008      	b.n	800410e <_printf_common+0xb2>
 80040fc:	2301      	movs	r3, #1
 80040fe:	4652      	mov	r2, sl
 8004100:	4641      	mov	r1, r8
 8004102:	4638      	mov	r0, r7
 8004104:	47c8      	blx	r9
 8004106:	3001      	adds	r0, #1
 8004108:	d103      	bne.n	8004112 <_printf_common+0xb6>
 800410a:	f04f 30ff 	mov.w	r0, #4294967295
 800410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004112:	3501      	adds	r5, #1
 8004114:	e7c1      	b.n	800409a <_printf_common+0x3e>
 8004116:	2030      	movs	r0, #48	@ 0x30
 8004118:	18e1      	adds	r1, r4, r3
 800411a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004124:	4422      	add	r2, r4
 8004126:	3302      	adds	r3, #2
 8004128:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800412c:	e7c2      	b.n	80040b4 <_printf_common+0x58>
 800412e:	2301      	movs	r3, #1
 8004130:	4622      	mov	r2, r4
 8004132:	4641      	mov	r1, r8
 8004134:	4638      	mov	r0, r7
 8004136:	47c8      	blx	r9
 8004138:	3001      	adds	r0, #1
 800413a:	d0e6      	beq.n	800410a <_printf_common+0xae>
 800413c:	3601      	adds	r6, #1
 800413e:	e7d9      	b.n	80040f4 <_printf_common+0x98>

08004140 <_printf_i>:
 8004140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004144:	7e0f      	ldrb	r7, [r1, #24]
 8004146:	4691      	mov	r9, r2
 8004148:	2f78      	cmp	r7, #120	@ 0x78
 800414a:	4680      	mov	r8, r0
 800414c:	460c      	mov	r4, r1
 800414e:	469a      	mov	sl, r3
 8004150:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004156:	d807      	bhi.n	8004168 <_printf_i+0x28>
 8004158:	2f62      	cmp	r7, #98	@ 0x62
 800415a:	d80a      	bhi.n	8004172 <_printf_i+0x32>
 800415c:	2f00      	cmp	r7, #0
 800415e:	f000 80d3 	beq.w	8004308 <_printf_i+0x1c8>
 8004162:	2f58      	cmp	r7, #88	@ 0x58
 8004164:	f000 80ba 	beq.w	80042dc <_printf_i+0x19c>
 8004168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800416c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004170:	e03a      	b.n	80041e8 <_printf_i+0xa8>
 8004172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004176:	2b15      	cmp	r3, #21
 8004178:	d8f6      	bhi.n	8004168 <_printf_i+0x28>
 800417a:	a101      	add	r1, pc, #4	@ (adr r1, 8004180 <_printf_i+0x40>)
 800417c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004180:	080041d9 	.word	0x080041d9
 8004184:	080041ed 	.word	0x080041ed
 8004188:	08004169 	.word	0x08004169
 800418c:	08004169 	.word	0x08004169
 8004190:	08004169 	.word	0x08004169
 8004194:	08004169 	.word	0x08004169
 8004198:	080041ed 	.word	0x080041ed
 800419c:	08004169 	.word	0x08004169
 80041a0:	08004169 	.word	0x08004169
 80041a4:	08004169 	.word	0x08004169
 80041a8:	08004169 	.word	0x08004169
 80041ac:	080042ef 	.word	0x080042ef
 80041b0:	08004217 	.word	0x08004217
 80041b4:	080042a9 	.word	0x080042a9
 80041b8:	08004169 	.word	0x08004169
 80041bc:	08004169 	.word	0x08004169
 80041c0:	08004311 	.word	0x08004311
 80041c4:	08004169 	.word	0x08004169
 80041c8:	08004217 	.word	0x08004217
 80041cc:	08004169 	.word	0x08004169
 80041d0:	08004169 	.word	0x08004169
 80041d4:	080042b1 	.word	0x080042b1
 80041d8:	6833      	ldr	r3, [r6, #0]
 80041da:	1d1a      	adds	r2, r3, #4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6032      	str	r2, [r6, #0]
 80041e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041e8:	2301      	movs	r3, #1
 80041ea:	e09e      	b.n	800432a <_printf_i+0x1ea>
 80041ec:	6833      	ldr	r3, [r6, #0]
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	1d19      	adds	r1, r3, #4
 80041f2:	6031      	str	r1, [r6, #0]
 80041f4:	0606      	lsls	r6, r0, #24
 80041f6:	d501      	bpl.n	80041fc <_printf_i+0xbc>
 80041f8:	681d      	ldr	r5, [r3, #0]
 80041fa:	e003      	b.n	8004204 <_printf_i+0xc4>
 80041fc:	0645      	lsls	r5, r0, #25
 80041fe:	d5fb      	bpl.n	80041f8 <_printf_i+0xb8>
 8004200:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004204:	2d00      	cmp	r5, #0
 8004206:	da03      	bge.n	8004210 <_printf_i+0xd0>
 8004208:	232d      	movs	r3, #45	@ 0x2d
 800420a:	426d      	negs	r5, r5
 800420c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004210:	230a      	movs	r3, #10
 8004212:	4859      	ldr	r0, [pc, #356]	@ (8004378 <_printf_i+0x238>)
 8004214:	e011      	b.n	800423a <_printf_i+0xfa>
 8004216:	6821      	ldr	r1, [r4, #0]
 8004218:	6833      	ldr	r3, [r6, #0]
 800421a:	0608      	lsls	r0, r1, #24
 800421c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004220:	d402      	bmi.n	8004228 <_printf_i+0xe8>
 8004222:	0649      	lsls	r1, r1, #25
 8004224:	bf48      	it	mi
 8004226:	b2ad      	uxthmi	r5, r5
 8004228:	2f6f      	cmp	r7, #111	@ 0x6f
 800422a:	6033      	str	r3, [r6, #0]
 800422c:	bf14      	ite	ne
 800422e:	230a      	movne	r3, #10
 8004230:	2308      	moveq	r3, #8
 8004232:	4851      	ldr	r0, [pc, #324]	@ (8004378 <_printf_i+0x238>)
 8004234:	2100      	movs	r1, #0
 8004236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800423a:	6866      	ldr	r6, [r4, #4]
 800423c:	2e00      	cmp	r6, #0
 800423e:	bfa8      	it	ge
 8004240:	6821      	ldrge	r1, [r4, #0]
 8004242:	60a6      	str	r6, [r4, #8]
 8004244:	bfa4      	itt	ge
 8004246:	f021 0104 	bicge.w	r1, r1, #4
 800424a:	6021      	strge	r1, [r4, #0]
 800424c:	b90d      	cbnz	r5, 8004252 <_printf_i+0x112>
 800424e:	2e00      	cmp	r6, #0
 8004250:	d04b      	beq.n	80042ea <_printf_i+0x1aa>
 8004252:	4616      	mov	r6, r2
 8004254:	fbb5 f1f3 	udiv	r1, r5, r3
 8004258:	fb03 5711 	mls	r7, r3, r1, r5
 800425c:	5dc7      	ldrb	r7, [r0, r7]
 800425e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004262:	462f      	mov	r7, r5
 8004264:	42bb      	cmp	r3, r7
 8004266:	460d      	mov	r5, r1
 8004268:	d9f4      	bls.n	8004254 <_printf_i+0x114>
 800426a:	2b08      	cmp	r3, #8
 800426c:	d10b      	bne.n	8004286 <_printf_i+0x146>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	07df      	lsls	r7, r3, #31
 8004272:	d508      	bpl.n	8004286 <_printf_i+0x146>
 8004274:	6923      	ldr	r3, [r4, #16]
 8004276:	6861      	ldr	r1, [r4, #4]
 8004278:	4299      	cmp	r1, r3
 800427a:	bfde      	ittt	le
 800427c:	2330      	movle	r3, #48	@ 0x30
 800427e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004282:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004286:	1b92      	subs	r2, r2, r6
 8004288:	6122      	str	r2, [r4, #16]
 800428a:	464b      	mov	r3, r9
 800428c:	4621      	mov	r1, r4
 800428e:	4640      	mov	r0, r8
 8004290:	f8cd a000 	str.w	sl, [sp]
 8004294:	aa03      	add	r2, sp, #12
 8004296:	f7ff fee1 	bl	800405c <_printf_common>
 800429a:	3001      	adds	r0, #1
 800429c:	d14a      	bne.n	8004334 <_printf_i+0x1f4>
 800429e:	f04f 30ff 	mov.w	r0, #4294967295
 80042a2:	b004      	add	sp, #16
 80042a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	f043 0320 	orr.w	r3, r3, #32
 80042ae:	6023      	str	r3, [r4, #0]
 80042b0:	2778      	movs	r7, #120	@ 0x78
 80042b2:	4832      	ldr	r0, [pc, #200]	@ (800437c <_printf_i+0x23c>)
 80042b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	6831      	ldr	r1, [r6, #0]
 80042bc:	061f      	lsls	r7, r3, #24
 80042be:	f851 5b04 	ldr.w	r5, [r1], #4
 80042c2:	d402      	bmi.n	80042ca <_printf_i+0x18a>
 80042c4:	065f      	lsls	r7, r3, #25
 80042c6:	bf48      	it	mi
 80042c8:	b2ad      	uxthmi	r5, r5
 80042ca:	6031      	str	r1, [r6, #0]
 80042cc:	07d9      	lsls	r1, r3, #31
 80042ce:	bf44      	itt	mi
 80042d0:	f043 0320 	orrmi.w	r3, r3, #32
 80042d4:	6023      	strmi	r3, [r4, #0]
 80042d6:	b11d      	cbz	r5, 80042e0 <_printf_i+0x1a0>
 80042d8:	2310      	movs	r3, #16
 80042da:	e7ab      	b.n	8004234 <_printf_i+0xf4>
 80042dc:	4826      	ldr	r0, [pc, #152]	@ (8004378 <_printf_i+0x238>)
 80042de:	e7e9      	b.n	80042b4 <_printf_i+0x174>
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	f023 0320 	bic.w	r3, r3, #32
 80042e6:	6023      	str	r3, [r4, #0]
 80042e8:	e7f6      	b.n	80042d8 <_printf_i+0x198>
 80042ea:	4616      	mov	r6, r2
 80042ec:	e7bd      	b.n	800426a <_printf_i+0x12a>
 80042ee:	6833      	ldr	r3, [r6, #0]
 80042f0:	6825      	ldr	r5, [r4, #0]
 80042f2:	1d18      	adds	r0, r3, #4
 80042f4:	6961      	ldr	r1, [r4, #20]
 80042f6:	6030      	str	r0, [r6, #0]
 80042f8:	062e      	lsls	r6, r5, #24
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	d501      	bpl.n	8004302 <_printf_i+0x1c2>
 80042fe:	6019      	str	r1, [r3, #0]
 8004300:	e002      	b.n	8004308 <_printf_i+0x1c8>
 8004302:	0668      	lsls	r0, r5, #25
 8004304:	d5fb      	bpl.n	80042fe <_printf_i+0x1be>
 8004306:	8019      	strh	r1, [r3, #0]
 8004308:	2300      	movs	r3, #0
 800430a:	4616      	mov	r6, r2
 800430c:	6123      	str	r3, [r4, #16]
 800430e:	e7bc      	b.n	800428a <_printf_i+0x14a>
 8004310:	6833      	ldr	r3, [r6, #0]
 8004312:	2100      	movs	r1, #0
 8004314:	1d1a      	adds	r2, r3, #4
 8004316:	6032      	str	r2, [r6, #0]
 8004318:	681e      	ldr	r6, [r3, #0]
 800431a:	6862      	ldr	r2, [r4, #4]
 800431c:	4630      	mov	r0, r6
 800431e:	f000 f985 	bl	800462c <memchr>
 8004322:	b108      	cbz	r0, 8004328 <_printf_i+0x1e8>
 8004324:	1b80      	subs	r0, r0, r6
 8004326:	6060      	str	r0, [r4, #4]
 8004328:	6863      	ldr	r3, [r4, #4]
 800432a:	6123      	str	r3, [r4, #16]
 800432c:	2300      	movs	r3, #0
 800432e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004332:	e7aa      	b.n	800428a <_printf_i+0x14a>
 8004334:	4632      	mov	r2, r6
 8004336:	4649      	mov	r1, r9
 8004338:	4640      	mov	r0, r8
 800433a:	6923      	ldr	r3, [r4, #16]
 800433c:	47d0      	blx	sl
 800433e:	3001      	adds	r0, #1
 8004340:	d0ad      	beq.n	800429e <_printf_i+0x15e>
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	079b      	lsls	r3, r3, #30
 8004346:	d413      	bmi.n	8004370 <_printf_i+0x230>
 8004348:	68e0      	ldr	r0, [r4, #12]
 800434a:	9b03      	ldr	r3, [sp, #12]
 800434c:	4298      	cmp	r0, r3
 800434e:	bfb8      	it	lt
 8004350:	4618      	movlt	r0, r3
 8004352:	e7a6      	b.n	80042a2 <_printf_i+0x162>
 8004354:	2301      	movs	r3, #1
 8004356:	4632      	mov	r2, r6
 8004358:	4649      	mov	r1, r9
 800435a:	4640      	mov	r0, r8
 800435c:	47d0      	blx	sl
 800435e:	3001      	adds	r0, #1
 8004360:	d09d      	beq.n	800429e <_printf_i+0x15e>
 8004362:	3501      	adds	r5, #1
 8004364:	68e3      	ldr	r3, [r4, #12]
 8004366:	9903      	ldr	r1, [sp, #12]
 8004368:	1a5b      	subs	r3, r3, r1
 800436a:	42ab      	cmp	r3, r5
 800436c:	dcf2      	bgt.n	8004354 <_printf_i+0x214>
 800436e:	e7eb      	b.n	8004348 <_printf_i+0x208>
 8004370:	2500      	movs	r5, #0
 8004372:	f104 0619 	add.w	r6, r4, #25
 8004376:	e7f5      	b.n	8004364 <_printf_i+0x224>
 8004378:	080047b3 	.word	0x080047b3
 800437c:	080047c4 	.word	0x080047c4

08004380 <__sflush_r>:
 8004380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	0716      	lsls	r6, r2, #28
 8004388:	4605      	mov	r5, r0
 800438a:	460c      	mov	r4, r1
 800438c:	d454      	bmi.n	8004438 <__sflush_r+0xb8>
 800438e:	684b      	ldr	r3, [r1, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	dc02      	bgt.n	800439a <__sflush_r+0x1a>
 8004394:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	dd48      	ble.n	800442c <__sflush_r+0xac>
 800439a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800439c:	2e00      	cmp	r6, #0
 800439e:	d045      	beq.n	800442c <__sflush_r+0xac>
 80043a0:	2300      	movs	r3, #0
 80043a2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80043a6:	682f      	ldr	r7, [r5, #0]
 80043a8:	6a21      	ldr	r1, [r4, #32]
 80043aa:	602b      	str	r3, [r5, #0]
 80043ac:	d030      	beq.n	8004410 <__sflush_r+0x90>
 80043ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80043b0:	89a3      	ldrh	r3, [r4, #12]
 80043b2:	0759      	lsls	r1, r3, #29
 80043b4:	d505      	bpl.n	80043c2 <__sflush_r+0x42>
 80043b6:	6863      	ldr	r3, [r4, #4]
 80043b8:	1ad2      	subs	r2, r2, r3
 80043ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80043bc:	b10b      	cbz	r3, 80043c2 <__sflush_r+0x42>
 80043be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043c0:	1ad2      	subs	r2, r2, r3
 80043c2:	2300      	movs	r3, #0
 80043c4:	4628      	mov	r0, r5
 80043c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80043c8:	6a21      	ldr	r1, [r4, #32]
 80043ca:	47b0      	blx	r6
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	d106      	bne.n	80043e0 <__sflush_r+0x60>
 80043d2:	6829      	ldr	r1, [r5, #0]
 80043d4:	291d      	cmp	r1, #29
 80043d6:	d82b      	bhi.n	8004430 <__sflush_r+0xb0>
 80043d8:	4a28      	ldr	r2, [pc, #160]	@ (800447c <__sflush_r+0xfc>)
 80043da:	410a      	asrs	r2, r1
 80043dc:	07d6      	lsls	r6, r2, #31
 80043de:	d427      	bmi.n	8004430 <__sflush_r+0xb0>
 80043e0:	2200      	movs	r2, #0
 80043e2:	6062      	str	r2, [r4, #4]
 80043e4:	6922      	ldr	r2, [r4, #16]
 80043e6:	04d9      	lsls	r1, r3, #19
 80043e8:	6022      	str	r2, [r4, #0]
 80043ea:	d504      	bpl.n	80043f6 <__sflush_r+0x76>
 80043ec:	1c42      	adds	r2, r0, #1
 80043ee:	d101      	bne.n	80043f4 <__sflush_r+0x74>
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	b903      	cbnz	r3, 80043f6 <__sflush_r+0x76>
 80043f4:	6560      	str	r0, [r4, #84]	@ 0x54
 80043f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043f8:	602f      	str	r7, [r5, #0]
 80043fa:	b1b9      	cbz	r1, 800442c <__sflush_r+0xac>
 80043fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004400:	4299      	cmp	r1, r3
 8004402:	d002      	beq.n	800440a <__sflush_r+0x8a>
 8004404:	4628      	mov	r0, r5
 8004406:	f7ff fa9b 	bl	8003940 <_free_r>
 800440a:	2300      	movs	r3, #0
 800440c:	6363      	str	r3, [r4, #52]	@ 0x34
 800440e:	e00d      	b.n	800442c <__sflush_r+0xac>
 8004410:	2301      	movs	r3, #1
 8004412:	4628      	mov	r0, r5
 8004414:	47b0      	blx	r6
 8004416:	4602      	mov	r2, r0
 8004418:	1c50      	adds	r0, r2, #1
 800441a:	d1c9      	bne.n	80043b0 <__sflush_r+0x30>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0c6      	beq.n	80043b0 <__sflush_r+0x30>
 8004422:	2b1d      	cmp	r3, #29
 8004424:	d001      	beq.n	800442a <__sflush_r+0xaa>
 8004426:	2b16      	cmp	r3, #22
 8004428:	d11d      	bne.n	8004466 <__sflush_r+0xe6>
 800442a:	602f      	str	r7, [r5, #0]
 800442c:	2000      	movs	r0, #0
 800442e:	e021      	b.n	8004474 <__sflush_r+0xf4>
 8004430:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004434:	b21b      	sxth	r3, r3
 8004436:	e01a      	b.n	800446e <__sflush_r+0xee>
 8004438:	690f      	ldr	r7, [r1, #16]
 800443a:	2f00      	cmp	r7, #0
 800443c:	d0f6      	beq.n	800442c <__sflush_r+0xac>
 800443e:	0793      	lsls	r3, r2, #30
 8004440:	bf18      	it	ne
 8004442:	2300      	movne	r3, #0
 8004444:	680e      	ldr	r6, [r1, #0]
 8004446:	bf08      	it	eq
 8004448:	694b      	ldreq	r3, [r1, #20]
 800444a:	1bf6      	subs	r6, r6, r7
 800444c:	600f      	str	r7, [r1, #0]
 800444e:	608b      	str	r3, [r1, #8]
 8004450:	2e00      	cmp	r6, #0
 8004452:	ddeb      	ble.n	800442c <__sflush_r+0xac>
 8004454:	4633      	mov	r3, r6
 8004456:	463a      	mov	r2, r7
 8004458:	4628      	mov	r0, r5
 800445a:	6a21      	ldr	r1, [r4, #32]
 800445c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004460:	47e0      	blx	ip
 8004462:	2800      	cmp	r0, #0
 8004464:	dc07      	bgt.n	8004476 <__sflush_r+0xf6>
 8004466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800446a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800446e:	f04f 30ff 	mov.w	r0, #4294967295
 8004472:	81a3      	strh	r3, [r4, #12]
 8004474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004476:	4407      	add	r7, r0
 8004478:	1a36      	subs	r6, r6, r0
 800447a:	e7e9      	b.n	8004450 <__sflush_r+0xd0>
 800447c:	dfbffffe 	.word	0xdfbffffe

08004480 <_fflush_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	690b      	ldr	r3, [r1, #16]
 8004484:	4605      	mov	r5, r0
 8004486:	460c      	mov	r4, r1
 8004488:	b913      	cbnz	r3, 8004490 <_fflush_r+0x10>
 800448a:	2500      	movs	r5, #0
 800448c:	4628      	mov	r0, r5
 800448e:	bd38      	pop	{r3, r4, r5, pc}
 8004490:	b118      	cbz	r0, 800449a <_fflush_r+0x1a>
 8004492:	6a03      	ldr	r3, [r0, #32]
 8004494:	b90b      	cbnz	r3, 800449a <_fflush_r+0x1a>
 8004496:	f7ff f817 	bl	80034c8 <__sinit>
 800449a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f3      	beq.n	800448a <_fflush_r+0xa>
 80044a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80044a4:	07d0      	lsls	r0, r2, #31
 80044a6:	d404      	bmi.n	80044b2 <_fflush_r+0x32>
 80044a8:	0599      	lsls	r1, r3, #22
 80044aa:	d402      	bmi.n	80044b2 <_fflush_r+0x32>
 80044ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044ae:	f7ff fa36 	bl	800391e <__retarget_lock_acquire_recursive>
 80044b2:	4628      	mov	r0, r5
 80044b4:	4621      	mov	r1, r4
 80044b6:	f7ff ff63 	bl	8004380 <__sflush_r>
 80044ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044bc:	4605      	mov	r5, r0
 80044be:	07da      	lsls	r2, r3, #31
 80044c0:	d4e4      	bmi.n	800448c <_fflush_r+0xc>
 80044c2:	89a3      	ldrh	r3, [r4, #12]
 80044c4:	059b      	lsls	r3, r3, #22
 80044c6:	d4e1      	bmi.n	800448c <_fflush_r+0xc>
 80044c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044ca:	f7ff fa29 	bl	8003920 <__retarget_lock_release_recursive>
 80044ce:	e7dd      	b.n	800448c <_fflush_r+0xc>

080044d0 <__swhatbuf_r>:
 80044d0:	b570      	push	{r4, r5, r6, lr}
 80044d2:	460c      	mov	r4, r1
 80044d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d8:	4615      	mov	r5, r2
 80044da:	2900      	cmp	r1, #0
 80044dc:	461e      	mov	r6, r3
 80044de:	b096      	sub	sp, #88	@ 0x58
 80044e0:	da0c      	bge.n	80044fc <__swhatbuf_r+0x2c>
 80044e2:	89a3      	ldrh	r3, [r4, #12]
 80044e4:	2100      	movs	r1, #0
 80044e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80044ea:	bf14      	ite	ne
 80044ec:	2340      	movne	r3, #64	@ 0x40
 80044ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80044f2:	2000      	movs	r0, #0
 80044f4:	6031      	str	r1, [r6, #0]
 80044f6:	602b      	str	r3, [r5, #0]
 80044f8:	b016      	add	sp, #88	@ 0x58
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	466a      	mov	r2, sp
 80044fe:	f000 f863 	bl	80045c8 <_fstat_r>
 8004502:	2800      	cmp	r0, #0
 8004504:	dbed      	blt.n	80044e2 <__swhatbuf_r+0x12>
 8004506:	9901      	ldr	r1, [sp, #4]
 8004508:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800450c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004510:	4259      	negs	r1, r3
 8004512:	4159      	adcs	r1, r3
 8004514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004518:	e7eb      	b.n	80044f2 <__swhatbuf_r+0x22>

0800451a <__smakebuf_r>:
 800451a:	898b      	ldrh	r3, [r1, #12]
 800451c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800451e:	079d      	lsls	r5, r3, #30
 8004520:	4606      	mov	r6, r0
 8004522:	460c      	mov	r4, r1
 8004524:	d507      	bpl.n	8004536 <__smakebuf_r+0x1c>
 8004526:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800452a:	6023      	str	r3, [r4, #0]
 800452c:	6123      	str	r3, [r4, #16]
 800452e:	2301      	movs	r3, #1
 8004530:	6163      	str	r3, [r4, #20]
 8004532:	b003      	add	sp, #12
 8004534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004536:	466a      	mov	r2, sp
 8004538:	ab01      	add	r3, sp, #4
 800453a:	f7ff ffc9 	bl	80044d0 <__swhatbuf_r>
 800453e:	9f00      	ldr	r7, [sp, #0]
 8004540:	4605      	mov	r5, r0
 8004542:	4639      	mov	r1, r7
 8004544:	4630      	mov	r0, r6
 8004546:	f7ff fa65 	bl	8003a14 <_malloc_r>
 800454a:	b948      	cbnz	r0, 8004560 <__smakebuf_r+0x46>
 800454c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004550:	059a      	lsls	r2, r3, #22
 8004552:	d4ee      	bmi.n	8004532 <__smakebuf_r+0x18>
 8004554:	f023 0303 	bic.w	r3, r3, #3
 8004558:	f043 0302 	orr.w	r3, r3, #2
 800455c:	81a3      	strh	r3, [r4, #12]
 800455e:	e7e2      	b.n	8004526 <__smakebuf_r+0xc>
 8004560:	89a3      	ldrh	r3, [r4, #12]
 8004562:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800456a:	81a3      	strh	r3, [r4, #12]
 800456c:	9b01      	ldr	r3, [sp, #4]
 800456e:	6020      	str	r0, [r4, #0]
 8004570:	b15b      	cbz	r3, 800458a <__smakebuf_r+0x70>
 8004572:	4630      	mov	r0, r6
 8004574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004578:	f000 f838 	bl	80045ec <_isatty_r>
 800457c:	b128      	cbz	r0, 800458a <__smakebuf_r+0x70>
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	f023 0303 	bic.w	r3, r3, #3
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	81a3      	strh	r3, [r4, #12]
 800458a:	89a3      	ldrh	r3, [r4, #12]
 800458c:	431d      	orrs	r5, r3
 800458e:	81a5      	strh	r5, [r4, #12]
 8004590:	e7cf      	b.n	8004532 <__smakebuf_r+0x18>

08004592 <memmove>:
 8004592:	4288      	cmp	r0, r1
 8004594:	b510      	push	{r4, lr}
 8004596:	eb01 0402 	add.w	r4, r1, r2
 800459a:	d902      	bls.n	80045a2 <memmove+0x10>
 800459c:	4284      	cmp	r4, r0
 800459e:	4623      	mov	r3, r4
 80045a0:	d807      	bhi.n	80045b2 <memmove+0x20>
 80045a2:	1e43      	subs	r3, r0, #1
 80045a4:	42a1      	cmp	r1, r4
 80045a6:	d008      	beq.n	80045ba <memmove+0x28>
 80045a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045b0:	e7f8      	b.n	80045a4 <memmove+0x12>
 80045b2:	4601      	mov	r1, r0
 80045b4:	4402      	add	r2, r0
 80045b6:	428a      	cmp	r2, r1
 80045b8:	d100      	bne.n	80045bc <memmove+0x2a>
 80045ba:	bd10      	pop	{r4, pc}
 80045bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045c4:	e7f7      	b.n	80045b6 <memmove+0x24>
	...

080045c8 <_fstat_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	2300      	movs	r3, #0
 80045cc:	4d06      	ldr	r5, [pc, #24]	@ (80045e8 <_fstat_r+0x20>)
 80045ce:	4604      	mov	r4, r0
 80045d0:	4608      	mov	r0, r1
 80045d2:	4611      	mov	r1, r2
 80045d4:	602b      	str	r3, [r5, #0]
 80045d6:	f7fc fa0f 	bl	80009f8 <_fstat>
 80045da:	1c43      	adds	r3, r0, #1
 80045dc:	d102      	bne.n	80045e4 <_fstat_r+0x1c>
 80045de:	682b      	ldr	r3, [r5, #0]
 80045e0:	b103      	cbz	r3, 80045e4 <_fstat_r+0x1c>
 80045e2:	6023      	str	r3, [r4, #0]
 80045e4:	bd38      	pop	{r3, r4, r5, pc}
 80045e6:	bf00      	nop
 80045e8:	20000294 	.word	0x20000294

080045ec <_isatty_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	2300      	movs	r3, #0
 80045f0:	4d05      	ldr	r5, [pc, #20]	@ (8004608 <_isatty_r+0x1c>)
 80045f2:	4604      	mov	r4, r0
 80045f4:	4608      	mov	r0, r1
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	f7fc fa0d 	bl	8000a16 <_isatty>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_isatty_r+0x1a>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_isatty_r+0x1a>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	20000294 	.word	0x20000294

0800460c <_sbrk_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	2300      	movs	r3, #0
 8004610:	4d05      	ldr	r5, [pc, #20]	@ (8004628 <_sbrk_r+0x1c>)
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	f7fc fa14 	bl	8000a44 <_sbrk>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d102      	bne.n	8004626 <_sbrk_r+0x1a>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	b103      	cbz	r3, 8004626 <_sbrk_r+0x1a>
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	20000294 	.word	0x20000294

0800462c <memchr>:
 800462c:	4603      	mov	r3, r0
 800462e:	b510      	push	{r4, lr}
 8004630:	b2c9      	uxtb	r1, r1
 8004632:	4402      	add	r2, r0
 8004634:	4293      	cmp	r3, r2
 8004636:	4618      	mov	r0, r3
 8004638:	d101      	bne.n	800463e <memchr+0x12>
 800463a:	2000      	movs	r0, #0
 800463c:	e003      	b.n	8004646 <memchr+0x1a>
 800463e:	7804      	ldrb	r4, [r0, #0]
 8004640:	3301      	adds	r3, #1
 8004642:	428c      	cmp	r4, r1
 8004644:	d1f6      	bne.n	8004634 <memchr+0x8>
 8004646:	bd10      	pop	{r4, pc}

08004648 <_realloc_r>:
 8004648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800464c:	4680      	mov	r8, r0
 800464e:	4615      	mov	r5, r2
 8004650:	460c      	mov	r4, r1
 8004652:	b921      	cbnz	r1, 800465e <_realloc_r+0x16>
 8004654:	4611      	mov	r1, r2
 8004656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800465a:	f7ff b9db 	b.w	8003a14 <_malloc_r>
 800465e:	b92a      	cbnz	r2, 800466c <_realloc_r+0x24>
 8004660:	f7ff f96e 	bl	8003940 <_free_r>
 8004664:	2400      	movs	r4, #0
 8004666:	4620      	mov	r0, r4
 8004668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800466c:	f000 f81a 	bl	80046a4 <_malloc_usable_size_r>
 8004670:	4285      	cmp	r5, r0
 8004672:	4606      	mov	r6, r0
 8004674:	d802      	bhi.n	800467c <_realloc_r+0x34>
 8004676:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800467a:	d8f4      	bhi.n	8004666 <_realloc_r+0x1e>
 800467c:	4629      	mov	r1, r5
 800467e:	4640      	mov	r0, r8
 8004680:	f7ff f9c8 	bl	8003a14 <_malloc_r>
 8004684:	4607      	mov	r7, r0
 8004686:	2800      	cmp	r0, #0
 8004688:	d0ec      	beq.n	8004664 <_realloc_r+0x1c>
 800468a:	42b5      	cmp	r5, r6
 800468c:	462a      	mov	r2, r5
 800468e:	4621      	mov	r1, r4
 8004690:	bf28      	it	cs
 8004692:	4632      	movcs	r2, r6
 8004694:	f7ff f945 	bl	8003922 <memcpy>
 8004698:	4621      	mov	r1, r4
 800469a:	4640      	mov	r0, r8
 800469c:	f7ff f950 	bl	8003940 <_free_r>
 80046a0:	463c      	mov	r4, r7
 80046a2:	e7e0      	b.n	8004666 <_realloc_r+0x1e>

080046a4 <_malloc_usable_size_r>:
 80046a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a8:	1f18      	subs	r0, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bfbc      	itt	lt
 80046ae:	580b      	ldrlt	r3, [r1, r0]
 80046b0:	18c0      	addlt	r0, r0, r3
 80046b2:	4770      	bx	lr

080046b4 <_init>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr

080046c0 <_fini>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr
