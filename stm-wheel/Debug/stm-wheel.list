
stm-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d4c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08004e58  08004e58  00005e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fac  08004fac  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004fac  08004fac  00005fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fb4  08004fb4  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb4  08004fb4  00005fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fb8  08004fb8  00005fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004fbc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  08005024  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08005024  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b31e  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe1  00000000  00000000  000113af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00013390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d5  00000000  00000000  00013dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ae6  00000000  00000000  000145ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c45f  00000000  00000000  0002d093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb7b  00000000  00000000  000394f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c506d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031bc  00000000  00000000  000c50b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000c826c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e40 	.word	0x08004e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004e40 	.word	0x08004e40

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 feba 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f848 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f950 	bl	800040c <MX_GPIO_Init>
  MX_CAN_Init();
 800016c:	f000 f8d6 	bl	800031c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f922 	bl	80003b8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000174:	f000 f894 	bl	80002a0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000178:	481c      	ldr	r0, [pc, #112]	@ (80001ec <main+0x90>)
 800017a:	f001 fb08 	bl	800178e <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800017e:	2110      	movs	r1, #16
 8000180:	481a      	ldr	r0, [pc, #104]	@ (80001ec <main+0x90>)
 8000182:	f001 fd81 	bl	8001c88 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 8000186:	2201      	movs	r2, #1
 8000188:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800018c:	4818      	ldr	r0, [pc, #96]	@ (80001f0 <main+0x94>)
 800018e:	f002 fb2a 	bl	80027e6 <HAL_GPIO_WritePin>
	telemetry_data.tRpm = 0;
 8000192:	4b18      	ldr	r3, [pc, #96]	@ (80001f4 <main+0x98>)
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
	telemetry_data.tRpm = 0;
 8000198:	4b16      	ldr	r3, [pc, #88]	@ (80001f4 <main+0x98>)
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
	telemetry_data.tSpeedKmh = 0;
 800019e:	4b15      	ldr	r3, [pc, #84]	@ (80001f4 <main+0x98>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	609a      	str	r2, [r3, #8]
	telemetry_data.tHasDRS = 0;
 80001a4:	4b13      	ldr	r3, [pc, #76]	@ (80001f4 <main+0x98>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	60da      	str	r2, [r3, #12]
	telemetry_data.tDrs = 0;
 80001aa:	4b12      	ldr	r3, [pc, #72]	@ (80001f4 <main+0x98>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	611a      	str	r2, [r3, #16]
	telemetry_data.tPitLim = 0;
 80001b0:	4b10      	ldr	r3, [pc, #64]	@ (80001f4 <main+0x98>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	615a      	str	r2, [r3, #20]
	telemetry_data.tFuel = 0;
 80001b6:	4b0f      	ldr	r3, [pc, #60]	@ (80001f4 <main+0x98>)
 80001b8:	2200      	movs	r2, #0
 80001ba:	619a      	str	r2, [r3, #24]
	telemetry_data.tBrakeBias = 0;
 80001bc:	4b0d      	ldr	r3, [pc, #52]	@ (80001f4 <main+0x98>)
 80001be:	2200      	movs	r2, #0
 80001c0:	61da      	str	r2, [r3, #28]
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 80001c2:	2200      	movs	r2, #0
 80001c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c8:	4809      	ldr	r0, [pc, #36]	@ (80001f0 <main+0x94>)
 80001ca:	f002 fb0c 	bl	80027e6 <HAL_GPIO_WritePin>

	  updateTelemetry();
 80001ce:	f000 f99d 	bl	800050c <updateTelemetry>
	  updateButtons();
 80001d2:	f000 fab3 	bl	800073c <updateButtons>

	  CAN_Transmit();
 80001d6:	f000 fb4b 	bl	8000870 <CAN_Transmit>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 80001da:	2201      	movs	r2, #1
 80001dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <main+0x94>)
 80001e2:	f002 fb00 	bl	80027e6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 80001e6:	bf00      	nop
 80001e8:	e7eb      	b.n	80001c2 <main+0x66>
 80001ea:	bf00      	nop
 80001ec:	200000e8 	.word	0x200000e8
 80001f0:	40011000 	.word	0x40011000
 80001f4:	20000084 	.word	0x20000084

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b094      	sub	sp, #80	@ 0x50
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000202:	2228      	movs	r2, #40	@ 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f004 f8c4 	bl	8004394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000228:	2302      	movs	r3, #2
 800022a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000230:	2310      	movs	r3, #16
 8000232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000234:	2302      	movs	r3, #2
 8000236:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000238:	2300      	movs	r3, #0
 800023a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800023c:	2300      	movs	r3, #0
 800023e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000240:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000244:	4618      	mov	r0, r3
 8000246:	f002 fae7 	bl	8002818 <HAL_RCC_OscConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000250:	f000 fbe4 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000254:	230f      	movs	r3, #15
 8000256:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000258:	2302      	movs	r3, #2
 800025a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f002 fd54 	bl	8002d1c <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800027a:	f000 fbcf 	bl	8000a1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800027e:	2302      	movs	r3, #2
 8000280:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f002 fed5 	bl	8003038 <HAL_RCCEx_PeriphCLKConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000294:	f000 fbc2 	bl	8000a1c <Error_Handler>
  }
}
 8000298:	bf00      	nop
 800029a:	3750      	adds	r7, #80	@ 0x50
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b0:	4b18      	ldr	r3, [pc, #96]	@ (8000314 <MX_ADC1_Init+0x74>)
 80002b2:	4a19      	ldr	r2, [pc, #100]	@ (8000318 <MX_ADC1_Init+0x78>)
 80002b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002b6:	4b17      	ldr	r3, [pc, #92]	@ (8000314 <MX_ADC1_Init+0x74>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002bc:	4b15      	ldr	r3, [pc, #84]	@ (8000314 <MX_ADC1_Init+0x74>)
 80002be:	2200      	movs	r2, #0
 80002c0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002c2:	4b14      	ldr	r3, [pc, #80]	@ (8000314 <MX_ADC1_Init+0x74>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002c8:	4b12      	ldr	r3, [pc, #72]	@ (8000314 <MX_ADC1_Init+0x74>)
 80002ca:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d0:	4b10      	ldr	r3, [pc, #64]	@ (8000314 <MX_ADC1_Init+0x74>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000314 <MX_ADC1_Init+0x74>)
 80002d8:	2201      	movs	r2, #1
 80002da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002dc:	480d      	ldr	r0, [pc, #52]	@ (8000314 <MX_ADC1_Init+0x74>)
 80002de:	f000 fe81 	bl	8000fe4 <HAL_ADC_Init>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002e8:	f000 fb98 	bl	8000a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002f0:	2301      	movs	r3, #1
 80002f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	4619      	mov	r1, r3
 80002fc:	4805      	ldr	r0, [pc, #20]	@ (8000314 <MX_ADC1_Init+0x74>)
 80002fe:	f000 ff49 	bl	8001194 <HAL_ADC_ConfigChannel>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000308:	f000 fb88 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800030c:	bf00      	nop
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	200000b8 	.word	0x200000b8
 8000318:	40012400 	.word	0x40012400

0800031c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08a      	sub	sp, #40	@ 0x28
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000322:	4b23      	ldr	r3, [pc, #140]	@ (80003b0 <MX_CAN_Init+0x94>)
 8000324:	4a23      	ldr	r2, [pc, #140]	@ (80003b4 <MX_CAN_Init+0x98>)
 8000326:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8000328:	4b21      	ldr	r3, [pc, #132]	@ (80003b0 <MX_CAN_Init+0x94>)
 800032a:	2201      	movs	r2, #1
 800032c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800032e:	4b20      	ldr	r3, [pc, #128]	@ (80003b0 <MX_CAN_Init+0x94>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000334:	4b1e      	ldr	r3, [pc, #120]	@ (80003b0 <MX_CAN_Init+0x94>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 800033a:	4b1d      	ldr	r3, [pc, #116]	@ (80003b0 <MX_CAN_Init+0x94>)
 800033c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000340:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000342:	4b1b      	ldr	r3, [pc, #108]	@ (80003b0 <MX_CAN_Init+0x94>)
 8000344:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000348:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800034a:	4b19      	ldr	r3, [pc, #100]	@ (80003b0 <MX_CAN_Init+0x94>)
 800034c:	2200      	movs	r2, #0
 800034e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000350:	4b17      	ldr	r3, [pc, #92]	@ (80003b0 <MX_CAN_Init+0x94>)
 8000352:	2200      	movs	r2, #0
 8000354:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000356:	4b16      	ldr	r3, [pc, #88]	@ (80003b0 <MX_CAN_Init+0x94>)
 8000358:	2200      	movs	r2, #0
 800035a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800035c:	4b14      	ldr	r3, [pc, #80]	@ (80003b0 <MX_CAN_Init+0x94>)
 800035e:	2200      	movs	r2, #0
 8000360:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000362:	4b13      	ldr	r3, [pc, #76]	@ (80003b0 <MX_CAN_Init+0x94>)
 8000364:	2200      	movs	r2, #0
 8000366:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000368:	4b11      	ldr	r3, [pc, #68]	@ (80003b0 <MX_CAN_Init+0x94>)
 800036a:	2200      	movs	r2, #0
 800036c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800036e:	4810      	ldr	r0, [pc, #64]	@ (80003b0 <MX_CAN_Init+0x94>)
 8000370:	f001 f849 	bl	8001406 <HAL_CAN_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800037a:	f000 fb4f 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000382:	2300      	movs	r3, #0
 8000384:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000386:	2301      	movs	r3, #1
 8000388:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x100 << 5;       // Accept all IDs
 800038a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800038e:	603b      	str	r3, [r7, #0]
  filterConfig.FilterMaskIdHigh = 0x7FF << 5;;   // Accept all IDs
 8000390:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000394:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;  // Assign to FIFO 1
 8000396:	2301      	movs	r3, #1
 8000398:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 800039a:	2301      	movs	r3, #1
 800039c:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 800039e:	463b      	mov	r3, r7
 80003a0:	4619      	mov	r1, r3
 80003a2:	4803      	ldr	r0, [pc, #12]	@ (80003b0 <MX_CAN_Init+0x94>)
 80003a4:	f001 f92a 	bl	80015fc <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	3728      	adds	r7, #40	@ 0x28
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	200000e8 	.word	0x200000e8
 80003b4:	40006400 	.word	0x40006400

080003b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003bc:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <MX_USART1_UART_Init+0x4c>)
 80003be:	4a12      	ldr	r2, [pc, #72]	@ (8000408 <MX_USART1_UART_Init+0x50>)
 80003c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003c2:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <MX_USART1_UART_Init+0x4c>)
 80003c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80003c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <MX_USART1_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <MX_USART1_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <MX_USART1_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003dc:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <MX_USART1_UART_Init+0x4c>)
 80003de:	220c      	movs	r2, #12
 80003e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	@ (8000404 <MX_USART1_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e8:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <MX_USART1_UART_Init+0x4c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ee:	4805      	ldr	r0, [pc, #20]	@ (8000404 <MX_USART1_UART_Init+0x4c>)
 80003f0:	f002 fed8 	bl	80031a4 <HAL_UART_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003fa:	f000 fb0f 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000110 	.word	0x20000110
 8000408:	40013800 	.word	0x40013800

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000420:	4b36      	ldr	r3, [pc, #216]	@ (80004fc <MX_GPIO_Init+0xf0>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a35      	ldr	r2, [pc, #212]	@ (80004fc <MX_GPIO_Init+0xf0>)
 8000426:	f043 0310 	orr.w	r3, r3, #16
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b33      	ldr	r3, [pc, #204]	@ (80004fc <MX_GPIO_Init+0xf0>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0310 	and.w	r3, r3, #16
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000438:	4b30      	ldr	r3, [pc, #192]	@ (80004fc <MX_GPIO_Init+0xf0>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a2f      	ldr	r2, [pc, #188]	@ (80004fc <MX_GPIO_Init+0xf0>)
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b2d      	ldr	r3, [pc, #180]	@ (80004fc <MX_GPIO_Init+0xf0>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0320 	and.w	r3, r3, #32
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b2a      	ldr	r3, [pc, #168]	@ (80004fc <MX_GPIO_Init+0xf0>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a29      	ldr	r2, [pc, #164]	@ (80004fc <MX_GPIO_Init+0xf0>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b27      	ldr	r3, [pc, #156]	@ (80004fc <MX_GPIO_Init+0xf0>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	4b24      	ldr	r3, [pc, #144]	@ (80004fc <MX_GPIO_Init+0xf0>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a23      	ldr	r2, [pc, #140]	@ (80004fc <MX_GPIO_Init+0xf0>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b21      	ldr	r3, [pc, #132]	@ (80004fc <MX_GPIO_Init+0xf0>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	603b      	str	r3, [r7, #0]
 800047e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000486:	481e      	ldr	r0, [pc, #120]	@ (8000500 <MX_GPIO_Init+0xf4>)
 8000488:	f002 f9ad 	bl	80027e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800048c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	2301      	movs	r3, #1
 8000494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049a:	2302      	movs	r3, #2
 800049c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800049e:	f107 0310 	add.w	r3, r7, #16
 80004a2:	4619      	mov	r1, r3
 80004a4:	4816      	ldr	r0, [pc, #88]	@ (8000500 <MX_GPIO_Init+0xf4>)
 80004a6:	f002 f803 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80004aa:	f248 13f0 	movw	r3, #33264	@ 0x81f0
 80004ae:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b4:	2301      	movs	r3, #1
 80004b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	4811      	ldr	r0, [pc, #68]	@ (8000504 <MX_GPIO_Init+0xf8>)
 80004c0:	f001 fff6 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80004c4:	23fb      	movs	r3, #251	@ 0xfb
 80004c6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	480c      	ldr	r0, [pc, #48]	@ (8000508 <MX_GPIO_Init+0xfc>)
 80004d8:	f001 ffea 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
 80004dc:	f44f 4343 	mov.w	r3, #49920	@ 0xc300
 80004e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e2:	2303      	movs	r3, #3
 80004e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	4619      	mov	r1, r3
 80004ec:	4806      	ldr	r0, [pc, #24]	@ (8000508 <MX_GPIO_Init+0xfc>)
 80004ee:	f001 ffdf 	bl	80024b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004f2:	bf00      	nop
 80004f4:	3720      	adds	r7, #32
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000
 8000500:	40011000 	.word	0x40011000
 8000504:	40010800 	.word	0x40010800
 8000508:	40010c00 	.word	0x40010c00

0800050c <updateTelemetry>:
}

/*
 * NEXTION UART FUNCTIONS
 */
void updateTelemetry() {
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
//	int mappedRpm = map_value(telemetry_data.tRpm, 0, telemetry_data.tMaxRpm, 0, 100);
	char *mappedRpm = int_to_string(telemetry_data.tRpm);
 8000512:	4b1f      	ldr	r3, [pc, #124]	@ (8000590 <updateTelemetry+0x84>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f000 f8ea 	bl	80006f0 <int_to_string>
 800051c:	61f8      	str	r0, [r7, #28]
	char *mappedGear = map_gear(telemetry_data.tGear);
 800051e:	4b1c      	ldr	r3, [pc, #112]	@ (8000590 <updateTelemetry+0x84>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	4618      	mov	r0, r3
 8000524:	f000 f876 	bl	8000614 <map_gear>
 8000528:	61b8      	str	r0, [r7, #24]
	char *mappedSpeed = int_to_string(telemetry_data.tSpeedKmh);
 800052a:	4b19      	ldr	r3, [pc, #100]	@ (8000590 <updateTelemetry+0x84>)
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	4618      	mov	r0, r3
 8000530:	f000 f8de 	bl	80006f0 <int_to_string>
 8000534:	6178      	str	r0, [r7, #20]
	char *mappedHasDrs = int_to_string(telemetry_data.tHasDRS);
 8000536:	4b16      	ldr	r3, [pc, #88]	@ (8000590 <updateTelemetry+0x84>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f8d8 	bl	80006f0 <int_to_string>
 8000540:	6138      	str	r0, [r7, #16]
	char *mappedPitLim = int_to_string(telemetry_data.tPitLim);
 8000542:	4b13      	ldr	r3, [pc, #76]	@ (8000590 <updateTelemetry+0x84>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f8d2 	bl	80006f0 <int_to_string>
 800054c:	60f8      	str	r0, [r7, #12]
	char *mappedFuel = int_to_string(telemetry_data.tFuel);
 800054e:	4b10      	ldr	r3, [pc, #64]	@ (8000590 <updateTelemetry+0x84>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f8cc 	bl	80006f0 <int_to_string>
 8000558:	60b8      	str	r0, [r7, #8]
	char *mappedBrakeBias = int_to_string(telemetry_data.tBrakeBias);
 800055a:	4b0d      	ldr	r3, [pc, #52]	@ (8000590 <updateTelemetry+0x84>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f8c6 	bl	80006f0 <int_to_string>
 8000564:	6078      	str	r0, [r7, #4]

//	send_int_to_nextion("rpmbar", mappedRpm);
	send__char_to_nextion("rpm", mappedRpm);
 8000566:	69f9      	ldr	r1, [r7, #28]
 8000568:	480a      	ldr	r0, [pc, #40]	@ (8000594 <updateTelemetry+0x88>)
 800056a:	f000 f81b 	bl	80005a4 <send__char_to_nextion>
	send__char_to_nextion("gear", mappedGear);
 800056e:	69b9      	ldr	r1, [r7, #24]
 8000570:	4809      	ldr	r0, [pc, #36]	@ (8000598 <updateTelemetry+0x8c>)
 8000572:	f000 f817 	bl	80005a4 <send__char_to_nextion>
	send__char_to_nextion("speed", mappedSpeed);
 8000576:	6979      	ldr	r1, [r7, #20]
 8000578:	4808      	ldr	r0, [pc, #32]	@ (800059c <updateTelemetry+0x90>)
 800057a:	f000 f813 	bl	80005a4 <send__char_to_nextion>
	//send__char_to_nextion("mappedHasDrs", mappedHasDrs);
	//send_to_nextion("pitlim", telemetry_data.tPitLim);
	send__char_to_nextion("fuel", mappedFuel);
 800057e:	68b9      	ldr	r1, [r7, #8]
 8000580:	4807      	ldr	r0, [pc, #28]	@ (80005a0 <updateTelemetry+0x94>)
 8000582:	f000 f80f 	bl	80005a4 <send__char_to_nextion>
	//send_to_nextion("gear", telemetry_data.tBrakeBias);

}
 8000586:	bf00      	nop
 8000588:	3720      	adds	r7, #32
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000084 	.word	0x20000084
 8000594:	08004e58 	.word	0x08004e58
 8000598:	08004e5c 	.word	0x08004e5c
 800059c:	08004e64 	.word	0x08004e64
 80005a0:	08004e6c 	.word	0x08004e6c

080005a4 <send__char_to_nextion>:

	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
}

void send__char_to_nextion(const char *var_name, char *value) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08e      	sub	sp, #56	@ 0x38
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	char command[32];
	snprintf(command, sizeof(command), "%s.txt=\"%s\"", var_name, value);
 80005ae:	f107 0010 	add.w	r0, r7, #16
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a13      	ldr	r2, [pc, #76]	@ (8000608 <send__char_to_nextion+0x64>)
 80005ba:	2120      	movs	r1, #32
 80005bc:	f003 fdde 	bl	800417c <sniprintf>

	HAL_UART_Transmit(&huart1, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fdc1 	bl	800014c <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f107 0110 	add.w	r1, r7, #16
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	480d      	ldr	r0, [pc, #52]	@ (800060c <send__char_to_nextion+0x68>)
 80005d8:	f002 fe34 	bl	8003244 <HAL_UART_Transmit>

	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
 80005dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <send__char_to_nextion+0x6c>)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	6812      	ldr	r2, [r2, #0]
 80005e4:	4611      	mov	r1, r2
 80005e6:	8019      	strh	r1, [r3, #0]
 80005e8:	3302      	adds	r3, #2
 80005ea:	0c12      	lsrs	r2, r2, #16
 80005ec:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
 80005ee:	f107 010c 	add.w	r1, r7, #12
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	2203      	movs	r2, #3
 80005f8:	4804      	ldr	r0, [pc, #16]	@ (800060c <send__char_to_nextion+0x68>)
 80005fa:	f002 fe23 	bl	8003244 <HAL_UART_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3730      	adds	r7, #48	@ 0x30
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	08004e84 	.word	0x08004e84
 800060c:	20000110 	.word	0x20000110
 8000610:	08004e80 	.word	0x08004e80

08000614 <map_gear>:
    if (input > in_max) input = in_max;

    return (input - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

const char* map_gear(int value)  {
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    if (value < 0 || value > 13) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db02      	blt.n	8000628 <map_gear+0x14>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0d      	cmp	r3, #13
 8000626:	dd01      	ble.n	800062c <map_gear+0x18>
        return "X";
 8000628:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <map_gear+0xa0>)
 800062a:	e03e      	b.n	80006aa <map_gear+0x96>
    }

    switch (value) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2b0d      	cmp	r3, #13
 8000630:	d83a      	bhi.n	80006a8 <map_gear+0x94>
 8000632:	a201      	add	r2, pc, #4	@ (adr r2, 8000638 <map_gear+0x24>)
 8000634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000638:	08000671 	.word	0x08000671
 800063c:	08000675 	.word	0x08000675
 8000640:	08000679 	.word	0x08000679
 8000644:	0800067d 	.word	0x0800067d
 8000648:	08000681 	.word	0x08000681
 800064c:	08000685 	.word	0x08000685
 8000650:	08000689 	.word	0x08000689
 8000654:	0800068d 	.word	0x0800068d
 8000658:	08000691 	.word	0x08000691
 800065c:	08000695 	.word	0x08000695
 8000660:	08000699 	.word	0x08000699
 8000664:	0800069d 	.word	0x0800069d
 8000668:	080006a1 	.word	0x080006a1
 800066c:	080006a5 	.word	0x080006a5
        case 0: return "R";
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <map_gear+0xa4>)
 8000672:	e01a      	b.n	80006aa <map_gear+0x96>
        case 1: return "N";
 8000674:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <map_gear+0xa8>)
 8000676:	e018      	b.n	80006aa <map_gear+0x96>
        case 2: return "1";
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <map_gear+0xac>)
 800067a:	e016      	b.n	80006aa <map_gear+0x96>
        case 3: return "2";
 800067c:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <map_gear+0xb0>)
 800067e:	e014      	b.n	80006aa <map_gear+0x96>
        case 4: return "3";
 8000680:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <map_gear+0xb4>)
 8000682:	e012      	b.n	80006aa <map_gear+0x96>
        case 5: return "4";
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <map_gear+0xb8>)
 8000686:	e010      	b.n	80006aa <map_gear+0x96>
        case 6: return "5";
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <map_gear+0xbc>)
 800068a:	e00e      	b.n	80006aa <map_gear+0x96>
        case 7: return "6";
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <map_gear+0xc0>)
 800068e:	e00c      	b.n	80006aa <map_gear+0x96>
        case 8: return "7";
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <map_gear+0xc4>)
 8000692:	e00a      	b.n	80006aa <map_gear+0x96>
        case 9: return "8";
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <map_gear+0xc8>)
 8000696:	e008      	b.n	80006aa <map_gear+0x96>
        case 10: return "9";
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <map_gear+0xcc>)
 800069a:	e006      	b.n	80006aa <map_gear+0x96>
        case 11: return "10";
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <map_gear+0xd0>)
 800069e:	e004      	b.n	80006aa <map_gear+0x96>
        case 12: return "11";
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <map_gear+0xd4>)
 80006a2:	e002      	b.n	80006aa <map_gear+0x96>
        case 13: return "12";
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <map_gear+0xd8>)
 80006a6:	e000      	b.n	80006aa <map_gear+0x96>

        default:
        	return "X";
 80006a8:	4b02      	ldr	r3, [pc, #8]	@ (80006b4 <map_gear+0xa0>)
    }
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	08004e90 	.word	0x08004e90
 80006b8:	08004e94 	.word	0x08004e94
 80006bc:	08004e98 	.word	0x08004e98
 80006c0:	08004e9c 	.word	0x08004e9c
 80006c4:	08004ea0 	.word	0x08004ea0
 80006c8:	08004ea4 	.word	0x08004ea4
 80006cc:	08004ea8 	.word	0x08004ea8
 80006d0:	08004eac 	.word	0x08004eac
 80006d4:	08004eb0 	.word	0x08004eb0
 80006d8:	08004eb4 	.word	0x08004eb4
 80006dc:	08004eb8 	.word	0x08004eb8
 80006e0:	08004ebc 	.word	0x08004ebc
 80006e4:	08004ec0 	.word	0x08004ec0
 80006e8:	08004ec4 	.word	0x08004ec4
 80006ec:	08004ec8 	.word	0x08004ec8

080006f0 <int_to_string>:

char* int_to_string(int value) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    int buffer_size = snprintf(NULL, 0, "%d", value) + 1;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <int_to_string+0x48>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	2000      	movs	r0, #0
 8000700:	f003 fd3c 	bl	800417c <sniprintf>
 8000704:	4603      	mov	r3, r0
 8000706:	3301      	adds	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]

    char *string = (char*)malloc(buffer_size);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fb5f 	bl	8003dd0 <malloc>
 8000712:	4603      	mov	r3, r0
 8000714:	60bb      	str	r3, [r7, #8]

    if (string == NULL) {
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d101      	bne.n	8000720 <int_to_string+0x30>
        return NULL;
 800071c:	2300      	movs	r3, #0
 800071e:	e006      	b.n	800072e <int_to_string+0x3e>
    }

    snprintf(string, buffer_size, "%d", value);
 8000720:	68f9      	ldr	r1, [r7, #12]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a04      	ldr	r2, [pc, #16]	@ (8000738 <int_to_string+0x48>)
 8000726:	68b8      	ldr	r0, [r7, #8]
 8000728:	f003 fd28 	bl	800417c <sniprintf>

    return string;
 800072c:	68bb      	ldr	r3, [r7, #8]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	08004ecc 	.word	0x08004ecc

0800073c <updateButtons>:

void updateButtons() {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	user_input_data.buttons = 0; // Clear all bits initially
 8000740:	4b48      	ldr	r3, [pc, #288]	@ (8000864 <updateButtons+0x128>)
 8000742:	2200      	movs	r2, #0
 8000744:	801a      	strh	r2, [r3, #0]

	// Buttons
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_1_PIN)) user_input_data.buttons |= (1 << 0);
 8000746:	2101      	movs	r1, #1
 8000748:	4847      	ldr	r0, [pc, #284]	@ (8000868 <updateButtons+0x12c>)
 800074a:	f002 f835 	bl	80027b8 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d106      	bne.n	8000762 <updateButtons+0x26>
 8000754:	4b43      	ldr	r3, [pc, #268]	@ (8000864 <updateButtons+0x128>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	b29a      	uxth	r2, r3
 800075e:	4b41      	ldr	r3, [pc, #260]	@ (8000864 <updateButtons+0x128>)
 8000760:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_2_PIN)) user_input_data.buttons |= (1 << 1);
 8000762:	2102      	movs	r1, #2
 8000764:	4840      	ldr	r0, [pc, #256]	@ (8000868 <updateButtons+0x12c>)
 8000766:	f002 f827 	bl	80027b8 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d106      	bne.n	800077e <updateButtons+0x42>
 8000770:	4b3c      	ldr	r3, [pc, #240]	@ (8000864 <updateButtons+0x128>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	b29a      	uxth	r2, r3
 800077a:	4b3a      	ldr	r3, [pc, #232]	@ (8000864 <updateButtons+0x128>)
 800077c:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_3_PIN)) user_input_data.buttons |= (1 << 2);
 800077e:	2104      	movs	r1, #4
 8000780:	4839      	ldr	r0, [pc, #228]	@ (8000868 <updateButtons+0x12c>)
 8000782:	f002 f819 	bl	80027b8 <HAL_GPIO_ReadPin>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d106      	bne.n	800079a <updateButtons+0x5e>
 800078c:	4b35      	ldr	r3, [pc, #212]	@ (8000864 <updateButtons+0x128>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	b29a      	uxth	r2, r3
 8000796:	4b33      	ldr	r3, [pc, #204]	@ (8000864 <updateButtons+0x128>)
 8000798:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_4_PIN)) user_input_data.buttons |= (1 << 3);
 800079a:	2108      	movs	r1, #8
 800079c:	4832      	ldr	r0, [pc, #200]	@ (8000868 <updateButtons+0x12c>)
 800079e:	f002 f80b 	bl	80027b8 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d106      	bne.n	80007b6 <updateButtons+0x7a>
 80007a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000864 <updateButtons+0x128>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000864 <updateButtons+0x128>)
 80007b4:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_5_PIN)) user_input_data.buttons |= (1 << 4);
 80007b6:	2110      	movs	r1, #16
 80007b8:	482b      	ldr	r0, [pc, #172]	@ (8000868 <updateButtons+0x12c>)
 80007ba:	f001 fffd 	bl	80027b8 <HAL_GPIO_ReadPin>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d106      	bne.n	80007d2 <updateButtons+0x96>
 80007c4:	4b27      	ldr	r3, [pc, #156]	@ (8000864 <updateButtons+0x128>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	f043 0310 	orr.w	r3, r3, #16
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <updateButtons+0x128>)
 80007d0:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_6_PIN)) user_input_data.buttons |= (1 << 5);
 80007d2:	2120      	movs	r1, #32
 80007d4:	4824      	ldr	r0, [pc, #144]	@ (8000868 <updateButtons+0x12c>)
 80007d6:	f001 ffef 	bl	80027b8 <HAL_GPIO_ReadPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d106      	bne.n	80007ee <updateButtons+0xb2>
 80007e0:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <updateButtons+0x128>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	f043 0320 	orr.w	r3, r3, #32
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000864 <updateButtons+0x128>)
 80007ec:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOA, BUTTON_7_PIN)) user_input_data.buttons |= (1 << 6);
 80007ee:	2140      	movs	r1, #64	@ 0x40
 80007f0:	481d      	ldr	r0, [pc, #116]	@ (8000868 <updateButtons+0x12c>)
 80007f2:	f001 ffe1 	bl	80027b8 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d106      	bne.n	800080a <updateButtons+0xce>
 80007fc:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <updateButtons+0x128>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000804:	b29a      	uxth	r2, r3
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <updateButtons+0x128>)
 8000808:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_8_PIN)) user_input_data.buttons |= (1 << 7);
 800080a:	2180      	movs	r1, #128	@ 0x80
 800080c:	4817      	ldr	r0, [pc, #92]	@ (800086c <updateButtons+0x130>)
 800080e:	f001 ffd3 	bl	80027b8 <HAL_GPIO_ReadPin>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d106      	bne.n	8000826 <updateButtons+0xea>
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <updateButtons+0x128>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <updateButtons+0x128>)
 8000824:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_9_PIN)) user_input_data.buttons |= (1 << 8);
 8000826:	2101      	movs	r1, #1
 8000828:	4810      	ldr	r0, [pc, #64]	@ (800086c <updateButtons+0x130>)
 800082a:	f001 ffc5 	bl	80027b8 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d106      	bne.n	8000842 <updateButtons+0x106>
 8000834:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <updateButtons+0x128>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800083c:	b29a      	uxth	r2, r3
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <updateButtons+0x128>)
 8000840:	801a      	strh	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_10_PIN)) user_input_data.buttons |= (1 << 9);
 8000842:	2102      	movs	r1, #2
 8000844:	4809      	ldr	r0, [pc, #36]	@ (800086c <updateButtons+0x130>)
 8000846:	f001 ffb7 	bl	80027b8 <HAL_GPIO_ReadPin>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d106      	bne.n	800085e <updateButtons+0x122>
 8000850:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <updateButtons+0x128>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000858:	b29a      	uxth	r2, r3
 800085a:	4b02      	ldr	r3, [pc, #8]	@ (8000864 <updateButtons+0x128>)
 800085c:	801a      	strh	r2, [r3, #0]
//	if (HAL_GPIO_ReadPin(GPIOB, L_ENC_PIN_B)) user_input_data.buttons |= (1 << 11);
//	if (HAL_GPIO_ReadPin(GPIOB, C_ENC_PIN_A)) user_input_data.buttons |= (1 << 11);
//	if (HAL_GPIO_ReadPin(GPIOB, C_ENC_PIN_B)) user_input_data.buttons |= (1 << 10);
//	if (HAL_GPIO_ReadPin(GPIOB, R_ENC_PIN_A)) user_input_data.buttons |= (1 << 11);
//	if (HAL_GPIO_ReadPin(GPIOB, R_ENC_PIN_B)) user_input_data.buttons |= (1 << 11);
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000ac 	.word	0x200000ac
 8000868:	40010800 	.word	0x40010800
 800086c:	40010c00 	.word	0x40010c00

08000870 <CAN_Transmit>:

}
/*
 * CAN BUS FUNCTIONS
 */
void CAN_Transmit() {
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	@ 0x50
 8000874:	af00      	add	r7, sp, #0
	uint32_t currentTime = HAL_GetTick();
 8000876:	f000 fb87 	bl	8000f88 <HAL_GetTick>
 800087a:	64b8      	str	r0, [r7, #72]	@ 0x48

	if(currentTime - lastSendTime >= 10) {
 800087c:	4b3a      	ldr	r3, [pc, #232]	@ (8000968 <CAN_Transmit+0xf8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	2b09      	cmp	r3, #9
 8000886:	d96a      	bls.n	800095e <CAN_Transmit+0xee>
		CAN_TxHeaderTypeDef TxHeader;
		uint32_t TxMailbox;

		// Create a telemetry_packet instance and initialize its fields
		user_input_data_t dataToSend = user_input_data;
 8000888:	4a38      	ldr	r2, [pc, #224]	@ (800096c <CAN_Transmit+0xfc>)
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000890:	c303      	stmia	r3!, {r0, r1}
 8000892:	801a      	strh	r2, [r3, #0]
//		dataToSend.hall_analog_2 = 200;      // Example: Hall sensor 2 value
//		dataToSend.encoder_1 = 1000;         // Example: Encoder 1 value
//		dataToSend.encoder_2 = -2000;        // Example: Encoder 2 value
//		dataToSend.encoder_3 = 5000;         // Example: Encoder 3 value

		uint8_t* rawData = (uint8_t*)&dataToSend;
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	647b      	str	r3, [r7, #68]	@ 0x44

		// Initialize CAN Header
		TxHeader.StdId = 0x101;           // CAN ID for the message
 800089a:	f240 1301 	movw	r3, #257	@ 0x101
 800089e:	61fb      	str	r3, [r7, #28]
		TxHeader.ExtId = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
		TxHeader.IDE = CAN_ID_STD;        // Use Standard ID
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
		TxHeader.RTR = CAN_RTR_DATA;      // Data frame
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
		TxHeader.DLC = 8;                 // Maximum data length for each CAN frame
 80008ac:	2308      	movs	r3, #8
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

		uint8_t frameData[8];             // Temporary buffer for each CAN frame

		// Calculate the size of the telemetry_packet struct
		int totalSize = sizeof(user_input_data_t);
 80008b0:	230a      	movs	r3, #10
 80008b2:	643b      	str	r3, [r7, #64]	@ 0x40

		// Split the telemetry_packet into CAN frames
		for (int i = 0; i < totalSize; i += 8) {
 80008b4:	2300      	movs	r3, #0
 80008b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80008b8:	e04d      	b.n	8000956 <CAN_Transmit+0xe6>
			// Calculate the size of the current chunk (for the last frame)
			int chunkSize = (totalSize - i >= 8) ? 8 : (totalSize - i);
 80008ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80008bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	2b08      	cmp	r3, #8
 80008c2:	bfa8      	it	ge
 80008c4:	2308      	movge	r3, #8
 80008c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

			// Copy the next chunk of data into the frame buffer
			memcpy(frameData, &rawData[i], chunkSize);
 80008c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80008cc:	18d1      	adds	r1, r2, r3
 80008ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 fde9 	bl	80044aa <memcpy>

			// Adjust DLC for the last frame
			TxHeader.DLC = chunkSize;
 80008d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008da:	62fb      	str	r3, [r7, #44]	@ 0x2c

			HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, frameData, &TxMailbox);
 80008dc:	f107 0318 	add.w	r3, r7, #24
 80008e0:	1d3a      	adds	r2, r7, #4
 80008e2:	f107 011c 	add.w	r1, r7, #28
 80008e6:	4822      	ldr	r0, [pc, #136]	@ (8000970 <CAN_Transmit+0x100>)
 80008e8:	f000 ffde 	bl	80018a8 <HAL_CAN_AddTxMessage>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			if (status != HAL_OK) {
 80008f2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d024      	beq.n	8000944 <CAN_Transmit+0xd4>
				// Inspect the error
				if (status == HAL_ERROR) {
 80008fa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d103      	bne.n	800090a <CAN_Transmit+0x9a>
					printf("HAL_CAN_AddTxMessage failed: HAL_ERROR\n");
 8000902:	481c      	ldr	r0, [pc, #112]	@ (8000974 <CAN_Transmit+0x104>)
 8000904:	f003 fc32 	bl	800416c <puts>
 8000908:	e00e      	b.n	8000928 <CAN_Transmit+0xb8>
				} else if (status == HAL_BUSY) {
 800090a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800090e:	2b02      	cmp	r3, #2
 8000910:	d103      	bne.n	800091a <CAN_Transmit+0xaa>
					printf("HAL_CAN_AddTxMessage failed: HAL_BUSY\n");
 8000912:	4819      	ldr	r0, [pc, #100]	@ (8000978 <CAN_Transmit+0x108>)
 8000914:	f003 fc2a 	bl	800416c <puts>
 8000918:	e006      	b.n	8000928 <CAN_Transmit+0xb8>
				} else if (status == HAL_TIMEOUT) {
 800091a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800091e:	2b03      	cmp	r3, #3
 8000920:	d102      	bne.n	8000928 <CAN_Transmit+0xb8>
					printf("HAL_CAN_AddTxMessage failed: HAL_TIMEOUT\n");
 8000922:	4816      	ldr	r0, [pc, #88]	@ (800097c <CAN_Transmit+0x10c>)
 8000924:	f003 fc22 	bl	800416c <puts>
				}

				// Optionally log the state of CAN error counters
				uint32_t error = HAL_CAN_GetError(&hcan);
 8000928:	4811      	ldr	r0, [pc, #68]	@ (8000970 <CAN_Transmit+0x100>)
 800092a:	f001 fbf5 	bl	8002118 <HAL_CAN_GetError>
 800092e:	6378      	str	r0, [r7, #52]	@ 0x34
		        HAL_CAN_Stop(&hcan);  // Stop CAN
 8000930:	480f      	ldr	r0, [pc, #60]	@ (8000970 <CAN_Transmit+0x100>)
 8000932:	f000 ff70 	bl	8001816 <HAL_CAN_Stop>
		        HAL_CAN_Start(&hcan); // Restart CAN
 8000936:	480e      	ldr	r0, [pc, #56]	@ (8000970 <CAN_Transmit+0x100>)
 8000938:	f000 ff29 	bl	800178e <HAL_CAN_Start>

		        // Optional: Clear error flags
		        __HAL_CAN_CLEAR_FLAG(&hcan, CAN_FLAG_ERRI);
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <CAN_Transmit+0x100>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2204      	movs	r2, #4
 8000942:	605a      	str	r2, [r3, #4]
			}
			lastSendTime = currentTime;  // Update last transmission time
 8000944:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <CAN_Transmit+0xf8>)
 8000946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000948:	6013      	str	r3, [r2, #0]
			HAL_Delay(1);
 800094a:	2001      	movs	r0, #1
 800094c:	f000 fb26 	bl	8000f9c <HAL_Delay>
		for (int i = 0; i < totalSize; i += 8) {
 8000950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000952:	3308      	adds	r3, #8
 8000954:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000956:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800095a:	429a      	cmp	r2, r3
 800095c:	dbad      	blt.n	80008ba <CAN_Transmit+0x4a>
		}
	}
}
 800095e:	bf00      	nop
 8000960:	3750      	adds	r7, #80	@ 0x50
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000158 	.word	0x20000158
 800096c:	200000ac 	.word	0x200000ac
 8000970:	200000e8 	.word	0x200000e8
 8000974:	08004ed0 	.word	0x08004ed0
 8000978:	08004ef8 	.word	0x08004ef8
 800097c:	08004f20 	.word	0x08004f20

08000980 <HAL_CAN_RxFifo1MsgPendingCallback>:

// CAN receive interrupt callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000980:	b5b0      	push	{r4, r5, r7, lr}
 8000982:	b08c      	sub	sp, #48	@ 0x30
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8]; // Max CAN frame size is 8 bytes

    // Receive the message
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rxHeader, rxData) == HAL_OK) {
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	f107 0210 	add.w	r2, r7, #16
 8000990:	2101      	movs	r1, #1
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f001 f857 	bl	8001a46 <HAL_CAN_GetRxMessage>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d134      	bne.n	8000a08 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>
    	 // Check if the message ID matches 0x100
		if (rxHeader.StdId == 0x100) {
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009a4:	d130      	bne.n	8000a08 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>
			static uint8_t buffer[sizeof(telemetry_packet)];
			static uint8_t offset = 0;

			// Copy received data into buffer
			uint8_t bytesToCopy = (rxHeader.DLC < sizeof(telemetry_packet) - offset) ? rxHeader.DLC : sizeof(telemetry_packet) - offset;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	f1c3 0228 	rsb	r2, r3, #40	@ 0x28
 80009ae:	6a3b      	ldr	r3, [r7, #32]
 80009b0:	4293      	cmp	r3, r2
 80009b2:	bf28      	it	cs
 80009b4:	4613      	movcs	r3, r2
 80009b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			memcpy(&buffer[offset], rxData, bytesToCopy);
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 80009c2:	4413      	add	r3, r2
 80009c4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80009c8:	f107 0108 	add.w	r1, r7, #8
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 fd6c 	bl	80044aa <memcpy>
			offset += bytesToCopy;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009da:	4413      	add	r3, r2
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 80009e0:	701a      	strb	r2, [r3, #0]

			// Check if the entire packet has been received
			if (offset >= sizeof(telemetry_packet)) {
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b27      	cmp	r3, #39	@ 0x27
 80009e8:	d90e      	bls.n	8000a08 <HAL_CAN_RxFifo1MsgPendingCallback+0x88>
				// Copy buffer into the telemetry_packet struct
				memcpy(&telemetry_data, buffer, sizeof(telemetry_packet));
 80009ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000a18 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 80009ee:	4614      	mov	r4, r2
 80009f0:	461d      	mov	r5, r3
 80009f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009fe:	e884 0003 	stmia.w	r4, {r0, r1}
				offset = 0; // Reset offset for the next packet
 8000a02:	4b03      	ldr	r3, [pc, #12]	@ (8000a10 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
			}
		}
    }
}
 8000a08:	bf00      	nop
 8000a0a:	3730      	adds	r7, #48	@ 0x30
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a10:	2000015c 	.word	0x2000015c
 8000a14:	20000160 	.word	0x20000160
 8000a18:	20000084 	.word	0x20000084

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a2e:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <HAL_MspInit+0x5c>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a14      	ldr	r2, [pc, #80]	@ (8000a84 <HAL_MspInit+0x5c>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <HAL_MspInit+0x5c>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <HAL_MspInit+0x5c>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a84 <HAL_MspInit+0x5c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <HAL_MspInit+0x5c>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <HAL_MspInit+0x60>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	4a04      	ldr	r2, [pc, #16]	@ (8000a88 <HAL_MspInit+0x60>)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40010000 	.word	0x40010000

08000a8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a14      	ldr	r2, [pc, #80]	@ (8000af8 <HAL_ADC_MspInit+0x6c>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d121      	bne.n	8000af0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <HAL_ADC_MspInit+0x70>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a12      	ldr	r2, [pc, #72]	@ (8000afc <HAL_ADC_MspInit+0x70>)
 8000ab2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <HAL_ADC_MspInit+0x70>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <HAL_ADC_MspInit+0x70>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8000afc <HAL_ADC_MspInit+0x70>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <HAL_ADC_MspInit+0x70>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000adc:	230f      	movs	r3, #15
 8000ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <HAL_ADC_MspInit+0x74>)
 8000aec:	f001 fce0 	bl	80024b0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40012400 	.word	0x40012400
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010800 	.word	0x40010800

08000b04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd0 <HAL_CAN_MspInit+0xcc>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d151      	bne.n	8000bc8 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b24:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd4 <HAL_CAN_MspInit+0xd0>)
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	4a2a      	ldr	r2, [pc, #168]	@ (8000bd4 <HAL_CAN_MspInit+0xd0>)
 8000b2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b2e:	61d3      	str	r3, [r2, #28]
 8000b30:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <HAL_CAN_MspInit+0xd0>)
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b25      	ldr	r3, [pc, #148]	@ (8000bd4 <HAL_CAN_MspInit+0xd0>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a24      	ldr	r2, [pc, #144]	@ (8000bd4 <HAL_CAN_MspInit+0xd0>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <HAL_CAN_MspInit+0xd0>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	4619      	mov	r1, r3
 8000b68:	481b      	ldr	r0, [pc, #108]	@ (8000bd8 <HAL_CAN_MspInit+0xd4>)
 8000b6a:	f001 fca1 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	4815      	ldr	r0, [pc, #84]	@ (8000bd8 <HAL_CAN_MspInit+0xd4>)
 8000b84:	f001 fc94 	bl	80024b0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2013      	movs	r0, #19
 8000b8e:	f001 fba6 	bl	80022de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000b92:	2013      	movs	r0, #19
 8000b94:	f001 fbbf 	bl	8002316 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2014      	movs	r0, #20
 8000b9e:	f001 fb9e 	bl	80022de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000ba2:	2014      	movs	r0, #20
 8000ba4:	f001 fbb7 	bl	8002316 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2100      	movs	r1, #0
 8000bac:	2015      	movs	r0, #21
 8000bae:	f001 fb96 	bl	80022de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000bb2:	2015      	movs	r0, #21
 8000bb4:	f001 fbaf 	bl	8002316 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2016      	movs	r0, #22
 8000bbe:	f001 fb8e 	bl	80022de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000bc2:	2016      	movs	r0, #22
 8000bc4:	f001 fba7 	bl	8002316 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000bc8:	bf00      	nop
 8000bca:	3720      	adds	r7, #32
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40006400 	.word	0x40006400
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010800 	.word	0x40010800

08000bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a20      	ldr	r2, [pc, #128]	@ (8000c78 <HAL_UART_MspInit+0x9c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d139      	bne.n	8000c70 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <HAL_UART_MspInit+0xa0>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a1e      	ldr	r2, [pc, #120]	@ (8000c7c <HAL_UART_MspInit+0xa0>)
 8000c02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <HAL_UART_MspInit+0xa0>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <HAL_UART_MspInit+0xa0>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a18      	ldr	r2, [pc, #96]	@ (8000c7c <HAL_UART_MspInit+0xa0>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <HAL_UART_MspInit+0xa0>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480f      	ldr	r0, [pc, #60]	@ (8000c80 <HAL_UART_MspInit+0xa4>)
 8000c42:	f001 fc35 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4809      	ldr	r0, [pc, #36]	@ (8000c80 <HAL_UART_MspInit+0xa4>)
 8000c5c:	f001 fc28 	bl	80024b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	2025      	movs	r0, #37	@ 0x25
 8000c66:	f001 fb3a 	bl	80022de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6a:	2025      	movs	r0, #37	@ 0x25
 8000c6c:	f001 fb53 	bl	8002316 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40013800 	.word	0x40013800
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010800 	.word	0x40010800

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <NMI_Handler+0x4>

08000c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd4:	f000 f946 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000ce2:	f000 fff6 	bl	8001cd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000e8 	.word	0x200000e8

08000cf0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000cf4:	4802      	ldr	r0, [pc, #8]	@ (8000d00 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000cf6:	f000 ffec 	bl	8001cd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200000e8 	.word	0x200000e8

08000d04 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d08:	4802      	ldr	r0, [pc, #8]	@ (8000d14 <CAN1_RX1_IRQHandler+0x10>)
 8000d0a:	f000 ffe2 	bl	8001cd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000e8 	.word	0x200000e8

08000d18 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d1c:	4802      	ldr	r0, [pc, #8]	@ (8000d28 <CAN1_SCE_IRQHandler+0x10>)
 8000d1e:	f000 ffd8 	bl	8001cd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200000e8 	.word	0x200000e8

08000d2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d30:	4802      	ldr	r0, [pc, #8]	@ (8000d3c <USART1_IRQHandler+0x10>)
 8000d32:	f002 fb13 	bl	800335c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000110 	.word	0x20000110

08000d40 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e00a      	b.n	8000d68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d52:	f3af 8000 	nop.w
 8000d56:	4601      	mov	r1, r0
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	60ba      	str	r2, [r7, #8]
 8000d5e:	b2ca      	uxtb	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dbf0      	blt.n	8000d52 <_read+0x12>
  }

  return len;
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e009      	b.n	8000da0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbf1      	blt.n	8000d8c <_write+0x12>
  }
  return len;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_close>:

int _close(int file)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dd8:	605a      	str	r2, [r3, #4]
  return 0;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <_isatty>:

int _isatty(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b085      	sub	sp, #20
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
	...

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	@ (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	@ (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f003 fb04 	bl	8004450 <__errno>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	@ (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20005000 	.word	0x20005000
 8000e74:	00000400 	.word	0x00000400
 8000e78:	20000188 	.word	0x20000188
 8000e7c:	200002e0 	.word	0x200002e0

08000e80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e8c:	f7ff fff8 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480b      	ldr	r0, [pc, #44]	@ (8000ec0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e92:	490c      	ldr	r1, [pc, #48]	@ (8000ec4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e94:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a09      	ldr	r2, [pc, #36]	@ (8000ecc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ea8:	4c09      	ldr	r4, [pc, #36]	@ (8000ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f003 fad1 	bl	800445c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eba:	f7ff f94f 	bl	800015c <main>
  bx lr
 8000ebe:	4770      	bx	lr
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ec8:	08004fbc 	.word	0x08004fbc
  ldr r2, =_sbss
 8000ecc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ed0:	200002dc 	.word	0x200002dc

08000ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_2_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <HAL_Init+0x28>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	@ (8000f00 <HAL_Init+0x28>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f001 f9ed 	bl	80022c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff fd98 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fa05 	bl	8002332 <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f001 f9cd 	bl	80022de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	@ (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <HAL_IncTick+0x1c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <HAL_IncTick+0x20>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a03      	ldr	r2, [pc, #12]	@ (8000f84 <HAL_IncTick+0x20>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000008 	.word	0x20000008
 8000f84:	2000018c 	.word	0x2000018c

08000f88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b02      	ldr	r3, [pc, #8]	@ (8000f98 <HAL_GetTick+0x10>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	2000018c 	.word	0x2000018c

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff fff0 	bl	8000f88 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffe0 	bl	8000f88 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e0be      	b.n	8001184 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001010:	2b00      	cmp	r3, #0
 8001012:	d109      	bne.n	8001028 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fd32 	bl	8000a8c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f9ab 	bl	8001384 <ADC_ConversionStop_Disable>
 800102e:	4603      	mov	r3, r0
 8001030:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 8099 	bne.w	8001172 <HAL_ADC_Init+0x18e>
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f040 8095 	bne.w	8001172 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800104c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001050:	f023 0302 	bic.w	r3, r3, #2
 8001054:	f043 0202 	orr.w	r2, r3, #2
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001064:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7b1b      	ldrb	r3, [r3, #12]
 800106a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800106c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	4313      	orrs	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800107c:	d003      	beq.n	8001086 <HAL_ADC_Init+0xa2>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d102      	bne.n	800108c <HAL_ADC_Init+0xa8>
 8001086:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800108a:	e000      	b.n	800108e <HAL_ADC_Init+0xaa>
 800108c:	2300      	movs	r3, #0
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7d1b      	ldrb	r3, [r3, #20]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d119      	bne.n	80010d0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7b1b      	ldrb	r3, [r3, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d109      	bne.n	80010b8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	035a      	lsls	r2, r3, #13
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	e00b      	b.n	80010d0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010bc:	f043 0220 	orr.w	r2, r3, #32
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c8:	f043 0201 	orr.w	r2, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	4b28      	ldr	r3, [pc, #160]	@ (800118c <HAL_ADC_Init+0x1a8>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	430b      	orrs	r3, r1
 80010f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001100:	d003      	beq.n	800110a <HAL_ADC_Init+0x126>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d104      	bne.n	8001114 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	3b01      	subs	r3, #1
 8001110:	051b      	lsls	r3, r3, #20
 8001112:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800111a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	430a      	orrs	r2, r1
 8001126:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_ADC_Init+0x1ac>)
 8001130:	4013      	ands	r3, r2
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	429a      	cmp	r2, r3
 8001136:	d10b      	bne.n	8001150 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001142:	f023 0303 	bic.w	r3, r3, #3
 8001146:	f043 0201 	orr.w	r2, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800114e:	e018      	b.n	8001182 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001154:	f023 0312 	bic.w	r3, r3, #18
 8001158:	f043 0210 	orr.w	r2, r3, #16
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001164:	f043 0201 	orr.w	r2, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001170:	e007      	b.n	8001182 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001176:	f043 0210 	orr.w	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001182:	7dfb      	ldrb	r3, [r7, #23]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	ffe1f7fd 	.word	0xffe1f7fd
 8001190:	ff1f0efe 	.word	0xff1f0efe

08001194 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d101      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x20>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e0dc      	b.n	800136e <HAL_ADC_ConfigChannel+0x1da>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b06      	cmp	r3, #6
 80011c2:	d81c      	bhi.n	80011fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	3b05      	subs	r3, #5
 80011d6:	221f      	movs	r2, #31
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	4019      	ands	r1, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	3b05      	subs	r3, #5
 80011f0:	fa00 f203 	lsl.w	r2, r0, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80011fc:	e03c      	b.n	8001278 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b0c      	cmp	r3, #12
 8001204:	d81c      	bhi.n	8001240 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3b23      	subs	r3, #35	@ 0x23
 8001218:	221f      	movs	r2, #31
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	4019      	ands	r1, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	3b23      	subs	r3, #35	@ 0x23
 8001232:	fa00 f203 	lsl.w	r2, r0, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	631a      	str	r2, [r3, #48]	@ 0x30
 800123e:	e01b      	b.n	8001278 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	3b41      	subs	r3, #65	@ 0x41
 8001252:	221f      	movs	r2, #31
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	4019      	ands	r1, r3
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	3b41      	subs	r3, #65	@ 0x41
 800126c:	fa00 f203 	lsl.w	r2, r0, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b09      	cmp	r3, #9
 800127e:	d91c      	bls.n	80012ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68d9      	ldr	r1, [r3, #12]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	3b1e      	subs	r3, #30
 8001292:	2207      	movs	r2, #7
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	4019      	ands	r1, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	6898      	ldr	r0, [r3, #8]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	3b1e      	subs	r3, #30
 80012ac:	fa00 f203 	lsl.w	r2, r0, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	e019      	b.n	80012ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6919      	ldr	r1, [r3, #16]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	2207      	movs	r2, #7
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	4019      	ands	r1, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	6898      	ldr	r0, [r3, #8]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	fa00 f203 	lsl.w	r2, r0, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b10      	cmp	r3, #16
 80012f4:	d003      	beq.n	80012fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012fa:	2b11      	cmp	r3, #17
 80012fc:	d132      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a1d      	ldr	r2, [pc, #116]	@ (8001378 <HAL_ADC_ConfigChannel+0x1e4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d125      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d126      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001324:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b10      	cmp	r3, #16
 800132c:	d11a      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <HAL_ADC_ConfigChannel+0x1e8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a13      	ldr	r2, [pc, #76]	@ (8001380 <HAL_ADC_ConfigChannel+0x1ec>)
 8001334:	fba2 2303 	umull	r2, r3, r2, r3
 8001338:	0c9a      	lsrs	r2, r3, #18
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001344:	e002      	b.n	800134c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	3b01      	subs	r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f9      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x1b2>
 8001352:	e007      	b.n	8001364 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001358:	f043 0220 	orr.w	r2, r3, #32
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	40012400 	.word	0x40012400
 800137c:	20000000 	.word	0x20000000
 8001380:	431bde83 	.word	0x431bde83

08001384 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b01      	cmp	r3, #1
 800139c:	d12e      	bne.n	80013fc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0201 	bic.w	r2, r2, #1
 80013ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013ae:	f7ff fdeb 	bl	8000f88 <HAL_GetTick>
 80013b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013b4:	e01b      	b.n	80013ee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013b6:	f7ff fde7 	bl	8000f88 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d914      	bls.n	80013ee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10d      	bne.n	80013ee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d6:	f043 0210 	orr.w	r2, r3, #16
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e2:	f043 0201 	orr.w	r2, r3, #1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e007      	b.n	80013fe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d0dc      	beq.n	80013b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e0ed      	b.n	80015f4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fb6d 	bl	8000b04 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 0201 	orr.w	r2, r2, #1
 8001438:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800143a:	f7ff fda5 	bl	8000f88 <HAL_GetTick>
 800143e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001440:	e012      	b.n	8001468 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001442:	f7ff fda1 	bl	8000f88 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b0a      	cmp	r3, #10
 800144e:	d90b      	bls.n	8001468 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2205      	movs	r2, #5
 8001460:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0c5      	b.n	80015f4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0e5      	beq.n	8001442 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0202 	bic.w	r2, r2, #2
 8001484:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001486:	f7ff fd7f 	bl	8000f88 <HAL_GetTick>
 800148a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800148c:	e012      	b.n	80014b4 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800148e:	f7ff fd7b 	bl	8000f88 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b0a      	cmp	r3, #10
 800149a:	d90b      	bls.n	80014b4 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2205      	movs	r2, #5
 80014ac:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e09f      	b.n	80015f4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1e5      	bne.n	800148e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7e1b      	ldrb	r3, [r3, #24]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d108      	bne.n	80014dc <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e007      	b.n	80014ec <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7e5b      	ldrb	r3, [r3, #25]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d108      	bne.n	8001506 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	e007      	b.n	8001516 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7e9b      	ldrb	r3, [r3, #26]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d108      	bne.n	8001530 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0220 	orr.w	r2, r2, #32
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e007      	b.n	8001540 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0220 	bic.w	r2, r2, #32
 800153e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7edb      	ldrb	r3, [r3, #27]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d108      	bne.n	800155a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0210 	bic.w	r2, r2, #16
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e007      	b.n	800156a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f042 0210 	orr.w	r2, r2, #16
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7f1b      	ldrb	r3, [r3, #28]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d108      	bne.n	8001584 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0208 	orr.w	r2, r2, #8
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e007      	b.n	8001594 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0208 	bic.w	r2, r2, #8
 8001592:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7f5b      	ldrb	r3, [r3, #29]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d108      	bne.n	80015ae <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0204 	orr.w	r2, r2, #4
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e007      	b.n	80015be <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0204 	bic.w	r2, r2, #4
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	ea42 0103 	orr.w	r1, r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001612:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001614:	7cfb      	ldrb	r3, [r7, #19]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d003      	beq.n	8001622 <HAL_CAN_ConfigFilter+0x26>
 800161a:	7cfb      	ldrb	r3, [r7, #19]
 800161c:	2b02      	cmp	r3, #2
 800161e:	f040 80aa 	bne.w	8001776 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f003 031f 	and.w	r3, r3, #31
 800163a:	2201      	movs	r2, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43db      	mvns	r3, r3
 800164c:	401a      	ands	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d123      	bne.n	80016a4 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	43db      	mvns	r3, r3
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800167e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3248      	adds	r2, #72	@ 0x48
 8001684:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001698:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800169a:	6979      	ldr	r1, [r7, #20]
 800169c:	3348      	adds	r3, #72	@ 0x48
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	440b      	add	r3, r1
 80016a2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d122      	bne.n	80016f2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	431a      	orrs	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3248      	adds	r2, #72	@ 0x48
 80016d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016e8:	6979      	ldr	r1, [r7, #20]
 80016ea:	3348      	adds	r3, #72	@ 0x48
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	43db      	mvns	r3, r3
 8001704:	401a      	ands	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800170c:	e007      	b.n	800171e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	431a      	orrs	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d109      	bne.n	800173a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43db      	mvns	r3, r3
 8001730:	401a      	ands	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001738:	e007      	b.n	800174a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	431a      	orrs	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d107      	bne.n	8001762 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	431a      	orrs	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001768:	f023 0201 	bic.w	r2, r3, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e006      	b.n	8001784 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
  }
}
 8001784:	4618      	mov	r0, r3
 8001786:	371c      	adds	r7, #28
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d12e      	bne.n	8001800 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2202      	movs	r2, #2
 80017a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017ba:	f7ff fbe5 	bl	8000f88 <HAL_GetTick>
 80017be:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017c0:	e012      	b.n	80017e8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017c2:	f7ff fbe1 	bl	8000f88 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b0a      	cmp	r3, #10
 80017ce:	d90b      	bls.n	80017e8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2205      	movs	r2, #5
 80017e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e012      	b.n	800180e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1e5      	bne.n	80017c2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e006      	b.n	800180e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001804:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
  }
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d133      	bne.n	8001892 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0201 	orr.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800183a:	f7ff fba5 	bl	8000f88 <HAL_GetTick>
 800183e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001840:	e012      	b.n	8001868 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001842:	f7ff fba1 	bl	8000f88 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b0a      	cmp	r3, #10
 800184e:	d90b      	bls.n	8001868 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001854:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2205      	movs	r2, #5
 8001860:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e01b      	b.n	80018a0 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0e5      	beq.n	8001842 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0202 	bic.w	r2, r2, #2
 8001884:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e006      	b.n	80018a0 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001896:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
  }
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	@ 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018c6:	7ffb      	ldrb	r3, [r7, #31]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d003      	beq.n	80018d4 <HAL_CAN_AddTxMessage+0x2c>
 80018cc:	7ffb      	ldrb	r3, [r7, #31]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	f040 80ad 	bne.w	8001a2e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10a      	bne.n	80018f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d105      	bne.n	80018f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8095 	beq.w	8001a1e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	0e1b      	lsrs	r3, r3, #24
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80018fe:	2201      	movs	r2, #1
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10d      	bne.n	800192c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800191a:	68f9      	ldr	r1, [r7, #12]
 800191c:	6809      	ldr	r1, [r1, #0]
 800191e:	431a      	orrs	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3318      	adds	r3, #24
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	440b      	add	r3, r1
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e00f      	b.n	800194c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001936:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800193c:	68f9      	ldr	r1, [r7, #12]
 800193e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001940:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3318      	adds	r3, #24
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	440b      	add	r3, r1
 800194a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3318      	adds	r3, #24
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	440b      	add	r3, r1
 800195c:	3304      	adds	r3, #4
 800195e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	7d1b      	ldrb	r3, [r3, #20]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d111      	bne.n	800198c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3318      	adds	r3, #24
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	6811      	ldr	r1, [r2, #0]
 800197c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3318      	adds	r3, #24
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	440b      	add	r3, r1
 8001988:	3304      	adds	r3, #4
 800198a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3307      	adds	r3, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	061a      	lsls	r2, r3, #24
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3306      	adds	r3, #6
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	041b      	lsls	r3, r3, #16
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3305      	adds	r3, #5
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	4313      	orrs	r3, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	3204      	adds	r2, #4
 80019ac:	7812      	ldrb	r2, [r2, #0]
 80019ae:	4610      	mov	r0, r2
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	6811      	ldr	r1, [r2, #0]
 80019b4:	ea43 0200 	orr.w	r2, r3, r0
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	440b      	add	r3, r1
 80019be:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80019c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3303      	adds	r3, #3
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	061a      	lsls	r2, r3, #24
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3302      	adds	r3, #2
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	041b      	lsls	r3, r3, #16
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3301      	adds	r3, #1
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	4313      	orrs	r3, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	7812      	ldrb	r2, [r2, #0]
 80019e4:	4610      	mov	r0, r2
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	6811      	ldr	r1, [r2, #0]
 80019ea:	ea43 0200 	orr.w	r2, r3, r0
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	440b      	add	r3, r1
 80019f4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80019f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3318      	adds	r3, #24
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	4413      	add	r3, r2
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	6811      	ldr	r1, [r2, #0]
 8001a0c:	f043 0201 	orr.w	r2, r3, #1
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3318      	adds	r3, #24
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	440b      	add	r3, r1
 8001a18:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e00e      	b.n	8001a3c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e006      	b.n	8001a3c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a32:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
  }
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3724      	adds	r7, #36	@ 0x24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a46:	b480      	push	{r7}
 8001a48:	b087      	sub	sp, #28
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d003      	beq.n	8001a6a <HAL_CAN_GetRxMessage+0x24>
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	f040 8103 	bne.w	8001c70 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10e      	bne.n	8001a8e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d116      	bne.n	8001aac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0f7      	b.n	8001c7e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d107      	bne.n	8001aac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0e8      	b.n	8001c7e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	331b      	adds	r3, #27
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	4413      	add	r3, r2
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0204 	and.w	r2, r3, #4
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	331b      	adds	r3, #27
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	4413      	add	r3, r2
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0d5b      	lsrs	r3, r3, #21
 8001ada:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e00b      	b.n	8001afc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	331b      	adds	r3, #27
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	4413      	add	r3, r2
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	08db      	lsrs	r3, r3, #3
 8001af4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	331b      	adds	r3, #27
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4413      	add	r3, r2
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0202 	and.w	r2, r3, #2
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	331b      	adds	r3, #27
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3304      	adds	r3, #4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	611a      	str	r2, [r3, #16]
 8001b30:	e00b      	b.n	8001b4a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	331b      	adds	r3, #27
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3304      	adds	r3, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 020f 	and.w	r2, r3, #15
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	331b      	adds	r3, #27
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	4413      	add	r3, r2
 8001b56:	3304      	adds	r3, #4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	331b      	adds	r3, #27
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3304      	adds	r3, #4
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	0c1b      	lsrs	r3, r3, #16
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0a1a      	lsrs	r2, r3, #8
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	0c1a      	lsrs	r2, r3, #16
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0e1a      	lsrs	r2, r3, #24
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	3303      	adds	r3, #3
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	4413      	add	r3, r2
 8001be8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0a1a      	lsrs	r2, r3, #8
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	3305      	adds	r3, #5
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0c1a      	lsrs	r2, r3, #16
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	3306      	adds	r3, #6
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	0e1a      	lsrs	r2, r3, #24
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	3307      	adds	r3, #7
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d108      	bne.n	8001c5c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0220 	orr.w	r2, r2, #32
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	e007      	b.n	8001c6c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0220 	orr.w	r2, r2, #32
 8001c6a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e006      	b.n	8001c7e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
  }
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c98:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d002      	beq.n	8001ca6 <HAL_CAN_ActivateNotification+0x1e>
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d109      	bne.n	8001cba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6959      	ldr	r1, [r3, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e006      	b.n	8001cc8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
  }
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b08a      	sub	sp, #40	@ 0x28
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d07c      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d023      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2201      	movs	r2, #1
 8001d28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f983 	bl	8002040 <HAL_CAN_TxMailbox0CompleteCallback>
 8001d3a:	e016      	b.n	8001d6a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d004      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4e:	e00c      	b.n	8001d6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d62:	e002      	b.n	8001d6a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f986 	bl	8002076 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d024      	beq.n	8001dbe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f962 	bl	8002052 <HAL_CAN_TxMailbox1CompleteCallback>
 8001d8e:	e016      	b.n	8001dbe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d004      	beq.n	8001da4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da2:	e00c      	b.n	8001dbe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d004      	beq.n	8001db8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db6:	e002      	b.n	8001dbe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f965 	bl	8002088 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d024      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f941 	bl	8002064 <HAL_CAN_TxMailbox2CompleteCallback>
 8001de2:	e016      	b.n	8001e12 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d004      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df6:	e00c      	b.n	8001e12 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d004      	beq.n	8001e0c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e0a:	e002      	b.n	8001e12 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f944 	bl	800209a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00c      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2210      	movs	r2, #16
 8001e34:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00b      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d006      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2208      	movs	r2, #8
 8001e50:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f933 	bl	80020be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f91b 	bl	80020ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00c      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d007      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2210      	movs	r2, #16
 8001e98:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2208      	movs	r2, #8
 8001eb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f90a 	bl	80020d0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d009      	beq.n	8001eda <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7fe fd53 	bl	8000980 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00b      	beq.n	8001efc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2210      	movs	r2, #16
 8001ef4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8f3 	bl	80020e2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00b      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d006      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2208      	movs	r2, #8
 8001f16:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f8eb 	bl	80020f4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d07b      	beq.n	8002020 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d072      	beq.n	8002018 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d043      	beq.n	8002018 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d03e      	beq.n	8002018 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fa0:	2b60      	cmp	r3, #96	@ 0x60
 8001fa2:	d02b      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x32a>
 8001fa4:	2b60      	cmp	r3, #96	@ 0x60
 8001fa6:	d82e      	bhi.n	8002006 <HAL_CAN_IRQHandler+0x334>
 8001fa8:	2b50      	cmp	r3, #80	@ 0x50
 8001faa:	d022      	beq.n	8001ff2 <HAL_CAN_IRQHandler+0x320>
 8001fac:	2b50      	cmp	r3, #80	@ 0x50
 8001fae:	d82a      	bhi.n	8002006 <HAL_CAN_IRQHandler+0x334>
 8001fb0:	2b40      	cmp	r3, #64	@ 0x40
 8001fb2:	d019      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x316>
 8001fb4:	2b40      	cmp	r3, #64	@ 0x40
 8001fb6:	d826      	bhi.n	8002006 <HAL_CAN_IRQHandler+0x334>
 8001fb8:	2b30      	cmp	r3, #48	@ 0x30
 8001fba:	d010      	beq.n	8001fde <HAL_CAN_IRQHandler+0x30c>
 8001fbc:	2b30      	cmp	r3, #48	@ 0x30
 8001fbe:	d822      	bhi.n	8002006 <HAL_CAN_IRQHandler+0x334>
 8001fc0:	2b10      	cmp	r3, #16
 8001fc2:	d002      	beq.n	8001fca <HAL_CAN_IRQHandler+0x2f8>
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d005      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fc8:	e01d      	b.n	8002006 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	f043 0308 	orr.w	r3, r3, #8
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fd2:	e019      	b.n	8002008 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	f043 0310 	orr.w	r3, r3, #16
 8001fda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fdc:	e014      	b.n	8002008 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	f043 0320 	orr.w	r3, r3, #32
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fe6:	e00f      	b.n	8002008 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ff0:	e00a      	b.n	8002008 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ffa:	e005      	b.n	8002008 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002004:	e000      	b.n	8002008 <HAL_CAN_IRQHandler+0x336>
            break;
 8002006:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002016:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2204      	movs	r2, #4
 800201e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f867 	bl	8002106 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002038:	bf00      	nop
 800203a:	3728      	adds	r7, #40	@ 0x28
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
	...

08002130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800214c:	4013      	ands	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800215c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002162:	4a04      	ldr	r2, [pc, #16]	@ (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	60d3      	str	r3, [r2, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800217c:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <__NVIC_GetPriorityGrouping+0x18>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 0307 	and.w	r3, r3, #7
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	db0b      	blt.n	80021be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	4906      	ldr	r1, [pc, #24]	@ (80021c8 <__NVIC_EnableIRQ+0x34>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2001      	movs	r0, #1
 80021b6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	e000e100 	.word	0xe000e100

080021cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	db0a      	blt.n	80021f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	490c      	ldr	r1, [pc, #48]	@ (8002218 <__NVIC_SetPriority+0x4c>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	0112      	lsls	r2, r2, #4
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	440b      	add	r3, r1
 80021f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f4:	e00a      	b.n	800220c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4908      	ldr	r1, [pc, #32]	@ (800221c <__NVIC_SetPriority+0x50>)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	3b04      	subs	r3, #4
 8002204:	0112      	lsls	r2, r2, #4
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	440b      	add	r3, r1
 800220a:	761a      	strb	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	@ 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f1c3 0307 	rsb	r3, r3, #7
 800223a:	2b04      	cmp	r3, #4
 800223c:	bf28      	it	cs
 800223e:	2304      	movcs	r3, #4
 8002240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3304      	adds	r3, #4
 8002246:	2b06      	cmp	r3, #6
 8002248:	d902      	bls.n	8002250 <NVIC_EncodePriority+0x30>
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3b03      	subs	r3, #3
 800224e:	e000      	b.n	8002252 <NVIC_EncodePriority+0x32>
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	f04f 32ff 	mov.w	r2, #4294967295
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43da      	mvns	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	401a      	ands	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002268:	f04f 31ff 	mov.w	r1, #4294967295
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	43d9      	mvns	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	4313      	orrs	r3, r2
         );
}
 800227a:	4618      	mov	r0, r3
 800227c:	3724      	adds	r7, #36	@ 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002294:	d301      	bcc.n	800229a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002296:	2301      	movs	r3, #1
 8002298:	e00f      	b.n	80022ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229a:	4a0a      	ldr	r2, [pc, #40]	@ (80022c4 <SysTick_Config+0x40>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a2:	210f      	movs	r1, #15
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f7ff ff90 	bl	80021cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <SysTick_Config+0x40>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b2:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <SysTick_Config+0x40>)
 80022b4:	2207      	movs	r2, #7
 80022b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	e000e010 	.word	0xe000e010

080022c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff2d 	bl	8002130 <__NVIC_SetPriorityGrouping>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022f0:	f7ff ff42 	bl	8002178 <__NVIC_GetPriorityGrouping>
 80022f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f7ff ff90 	bl	8002220 <NVIC_EncodePriority>
 8002300:	4602      	mov	r2, r0
 8002302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff5f 	bl	80021cc <__NVIC_SetPriority>
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff35 	bl	8002194 <__NVIC_EnableIRQ>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffa2 	bl	8002284 <SysTick_Config>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d008      	beq.n	8002374 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2204      	movs	r2, #4
 8002366:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e020      	b.n	80023b6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 020e 	bic.w	r2, r2, #14
 8002382:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239c:	2101      	movs	r1, #1
 800239e:	fa01 f202 	lsl.w	r2, r1, r2
 80023a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d005      	beq.n	80023e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2204      	movs	r2, #4
 80023dc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e051      	b.n	8002488 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 020e 	bic.w	r2, r2, #14
 80023f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a22      	ldr	r2, [pc, #136]	@ (8002494 <HAL_DMA_Abort_IT+0xd4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d029      	beq.n	8002462 <HAL_DMA_Abort_IT+0xa2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a21      	ldr	r2, [pc, #132]	@ (8002498 <HAL_DMA_Abort_IT+0xd8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d022      	beq.n	800245e <HAL_DMA_Abort_IT+0x9e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1f      	ldr	r2, [pc, #124]	@ (800249c <HAL_DMA_Abort_IT+0xdc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d01a      	beq.n	8002458 <HAL_DMA_Abort_IT+0x98>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1e      	ldr	r2, [pc, #120]	@ (80024a0 <HAL_DMA_Abort_IT+0xe0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d012      	beq.n	8002452 <HAL_DMA_Abort_IT+0x92>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1c      	ldr	r2, [pc, #112]	@ (80024a4 <HAL_DMA_Abort_IT+0xe4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00a      	beq.n	800244c <HAL_DMA_Abort_IT+0x8c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1b      	ldr	r2, [pc, #108]	@ (80024a8 <HAL_DMA_Abort_IT+0xe8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d102      	bne.n	8002446 <HAL_DMA_Abort_IT+0x86>
 8002440:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002444:	e00e      	b.n	8002464 <HAL_DMA_Abort_IT+0xa4>
 8002446:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800244a:	e00b      	b.n	8002464 <HAL_DMA_Abort_IT+0xa4>
 800244c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002450:	e008      	b.n	8002464 <HAL_DMA_Abort_IT+0xa4>
 8002452:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002456:	e005      	b.n	8002464 <HAL_DMA_Abort_IT+0xa4>
 8002458:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800245c:	e002      	b.n	8002464 <HAL_DMA_Abort_IT+0xa4>
 800245e:	2310      	movs	r3, #16
 8002460:	e000      	b.n	8002464 <HAL_DMA_Abort_IT+0xa4>
 8002462:	2301      	movs	r3, #1
 8002464:	4a11      	ldr	r2, [pc, #68]	@ (80024ac <HAL_DMA_Abort_IT+0xec>)
 8002466:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4798      	blx	r3
    } 
  }
  return status;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40020008 	.word	0x40020008
 8002498:	4002001c 	.word	0x4002001c
 800249c:	40020030 	.word	0x40020030
 80024a0:	40020044 	.word	0x40020044
 80024a4:	40020058 	.word	0x40020058
 80024a8:	4002006c 	.word	0x4002006c
 80024ac:	40020000 	.word	0x40020000

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b08b      	sub	sp, #44	@ 0x2c
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c2:	e169      	b.n	8002798 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024c4:	2201      	movs	r2, #1
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	429a      	cmp	r2, r3
 80024de:	f040 8158 	bne.w	8002792 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4a9a      	ldr	r2, [pc, #616]	@ (8002750 <HAL_GPIO_Init+0x2a0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d05e      	beq.n	80025aa <HAL_GPIO_Init+0xfa>
 80024ec:	4a98      	ldr	r2, [pc, #608]	@ (8002750 <HAL_GPIO_Init+0x2a0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d875      	bhi.n	80025de <HAL_GPIO_Init+0x12e>
 80024f2:	4a98      	ldr	r2, [pc, #608]	@ (8002754 <HAL_GPIO_Init+0x2a4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d058      	beq.n	80025aa <HAL_GPIO_Init+0xfa>
 80024f8:	4a96      	ldr	r2, [pc, #600]	@ (8002754 <HAL_GPIO_Init+0x2a4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d86f      	bhi.n	80025de <HAL_GPIO_Init+0x12e>
 80024fe:	4a96      	ldr	r2, [pc, #600]	@ (8002758 <HAL_GPIO_Init+0x2a8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d052      	beq.n	80025aa <HAL_GPIO_Init+0xfa>
 8002504:	4a94      	ldr	r2, [pc, #592]	@ (8002758 <HAL_GPIO_Init+0x2a8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d869      	bhi.n	80025de <HAL_GPIO_Init+0x12e>
 800250a:	4a94      	ldr	r2, [pc, #592]	@ (800275c <HAL_GPIO_Init+0x2ac>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d04c      	beq.n	80025aa <HAL_GPIO_Init+0xfa>
 8002510:	4a92      	ldr	r2, [pc, #584]	@ (800275c <HAL_GPIO_Init+0x2ac>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d863      	bhi.n	80025de <HAL_GPIO_Init+0x12e>
 8002516:	4a92      	ldr	r2, [pc, #584]	@ (8002760 <HAL_GPIO_Init+0x2b0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d046      	beq.n	80025aa <HAL_GPIO_Init+0xfa>
 800251c:	4a90      	ldr	r2, [pc, #576]	@ (8002760 <HAL_GPIO_Init+0x2b0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d85d      	bhi.n	80025de <HAL_GPIO_Init+0x12e>
 8002522:	2b12      	cmp	r3, #18
 8002524:	d82a      	bhi.n	800257c <HAL_GPIO_Init+0xcc>
 8002526:	2b12      	cmp	r3, #18
 8002528:	d859      	bhi.n	80025de <HAL_GPIO_Init+0x12e>
 800252a:	a201      	add	r2, pc, #4	@ (adr r2, 8002530 <HAL_GPIO_Init+0x80>)
 800252c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002530:	080025ab 	.word	0x080025ab
 8002534:	08002585 	.word	0x08002585
 8002538:	08002597 	.word	0x08002597
 800253c:	080025d9 	.word	0x080025d9
 8002540:	080025df 	.word	0x080025df
 8002544:	080025df 	.word	0x080025df
 8002548:	080025df 	.word	0x080025df
 800254c:	080025df 	.word	0x080025df
 8002550:	080025df 	.word	0x080025df
 8002554:	080025df 	.word	0x080025df
 8002558:	080025df 	.word	0x080025df
 800255c:	080025df 	.word	0x080025df
 8002560:	080025df 	.word	0x080025df
 8002564:	080025df 	.word	0x080025df
 8002568:	080025df 	.word	0x080025df
 800256c:	080025df 	.word	0x080025df
 8002570:	080025df 	.word	0x080025df
 8002574:	0800258d 	.word	0x0800258d
 8002578:	080025a1 	.word	0x080025a1
 800257c:	4a79      	ldr	r2, [pc, #484]	@ (8002764 <HAL_GPIO_Init+0x2b4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002582:	e02c      	b.n	80025de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	623b      	str	r3, [r7, #32]
          break;
 800258a:	e029      	b.n	80025e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	3304      	adds	r3, #4
 8002592:	623b      	str	r3, [r7, #32]
          break;
 8002594:	e024      	b.n	80025e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	3308      	adds	r3, #8
 800259c:	623b      	str	r3, [r7, #32]
          break;
 800259e:	e01f      	b.n	80025e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	330c      	adds	r3, #12
 80025a6:	623b      	str	r3, [r7, #32]
          break;
 80025a8:	e01a      	b.n	80025e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d102      	bne.n	80025b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025b2:	2304      	movs	r3, #4
 80025b4:	623b      	str	r3, [r7, #32]
          break;
 80025b6:	e013      	b.n	80025e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025c0:	2308      	movs	r3, #8
 80025c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	611a      	str	r2, [r3, #16]
          break;
 80025ca:	e009      	b.n	80025e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025cc:	2308      	movs	r3, #8
 80025ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	615a      	str	r2, [r3, #20]
          break;
 80025d6:	e003      	b.n	80025e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025d8:	2300      	movs	r3, #0
 80025da:	623b      	str	r3, [r7, #32]
          break;
 80025dc:	e000      	b.n	80025e0 <HAL_GPIO_Init+0x130>
          break;
 80025de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	2bff      	cmp	r3, #255	@ 0xff
 80025e4:	d801      	bhi.n	80025ea <HAL_GPIO_Init+0x13a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	e001      	b.n	80025ee <HAL_GPIO_Init+0x13e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3304      	adds	r3, #4
 80025ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2bff      	cmp	r3, #255	@ 0xff
 80025f4:	d802      	bhi.n	80025fc <HAL_GPIO_Init+0x14c>
 80025f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	e002      	b.n	8002602 <HAL_GPIO_Init+0x152>
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	3b08      	subs	r3, #8
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	210f      	movs	r1, #15
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	401a      	ands	r2, r3
 8002614:	6a39      	ldr	r1, [r7, #32]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	431a      	orrs	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80b1 	beq.w	8002792 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002630:	4b4d      	ldr	r3, [pc, #308]	@ (8002768 <HAL_GPIO_Init+0x2b8>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4a4c      	ldr	r2, [pc, #304]	@ (8002768 <HAL_GPIO_Init+0x2b8>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6193      	str	r3, [r2, #24]
 800263c:	4b4a      	ldr	r3, [pc, #296]	@ (8002768 <HAL_GPIO_Init+0x2b8>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002648:	4a48      	ldr	r2, [pc, #288]	@ (800276c <HAL_GPIO_Init+0x2bc>)
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002654:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4013      	ands	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a40      	ldr	r2, [pc, #256]	@ (8002770 <HAL_GPIO_Init+0x2c0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d013      	beq.n	800269c <HAL_GPIO_Init+0x1ec>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a3f      	ldr	r2, [pc, #252]	@ (8002774 <HAL_GPIO_Init+0x2c4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00d      	beq.n	8002698 <HAL_GPIO_Init+0x1e8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a3e      	ldr	r2, [pc, #248]	@ (8002778 <HAL_GPIO_Init+0x2c8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d007      	beq.n	8002694 <HAL_GPIO_Init+0x1e4>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a3d      	ldr	r2, [pc, #244]	@ (800277c <HAL_GPIO_Init+0x2cc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d101      	bne.n	8002690 <HAL_GPIO_Init+0x1e0>
 800268c:	2303      	movs	r3, #3
 800268e:	e006      	b.n	800269e <HAL_GPIO_Init+0x1ee>
 8002690:	2304      	movs	r3, #4
 8002692:	e004      	b.n	800269e <HAL_GPIO_Init+0x1ee>
 8002694:	2302      	movs	r3, #2
 8002696:	e002      	b.n	800269e <HAL_GPIO_Init+0x1ee>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_GPIO_Init+0x1ee>
 800269c:	2300      	movs	r3, #0
 800269e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a0:	f002 0203 	and.w	r2, r2, #3
 80026a4:	0092      	lsls	r2, r2, #2
 80026a6:	4093      	lsls	r3, r2
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026ae:	492f      	ldr	r1, [pc, #188]	@ (800276c <HAL_GPIO_Init+0x2bc>)
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	3302      	adds	r3, #2
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d006      	beq.n	80026d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002780 <HAL_GPIO_Init+0x2d0>)
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	492c      	ldr	r1, [pc, #176]	@ (8002780 <HAL_GPIO_Init+0x2d0>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	608b      	str	r3, [r1, #8]
 80026d4:	e006      	b.n	80026e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002780 <HAL_GPIO_Init+0x2d0>)
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	43db      	mvns	r3, r3
 80026de:	4928      	ldr	r1, [pc, #160]	@ (8002780 <HAL_GPIO_Init+0x2d0>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026f0:	4b23      	ldr	r3, [pc, #140]	@ (8002780 <HAL_GPIO_Init+0x2d0>)
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	4922      	ldr	r1, [pc, #136]	@ (8002780 <HAL_GPIO_Init+0x2d0>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60cb      	str	r3, [r1, #12]
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026fe:	4b20      	ldr	r3, [pc, #128]	@ (8002780 <HAL_GPIO_Init+0x2d0>)
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	43db      	mvns	r3, r3
 8002706:	491e      	ldr	r1, [pc, #120]	@ (8002780 <HAL_GPIO_Init+0x2d0>)
 8002708:	4013      	ands	r3, r2
 800270a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002718:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <HAL_GPIO_Init+0x2d0>)
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	4918      	ldr	r1, [pc, #96]	@ (8002780 <HAL_GPIO_Init+0x2d0>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002726:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <HAL_GPIO_Init+0x2d0>)
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	43db      	mvns	r3, r3
 800272e:	4914      	ldr	r1, [pc, #80]	@ (8002780 <HAL_GPIO_Init+0x2d0>)
 8002730:	4013      	ands	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d021      	beq.n	8002784 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002740:	4b0f      	ldr	r3, [pc, #60]	@ (8002780 <HAL_GPIO_Init+0x2d0>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	490e      	ldr	r1, [pc, #56]	@ (8002780 <HAL_GPIO_Init+0x2d0>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]
 800274c:	e021      	b.n	8002792 <HAL_GPIO_Init+0x2e2>
 800274e:	bf00      	nop
 8002750:	10320000 	.word	0x10320000
 8002754:	10310000 	.word	0x10310000
 8002758:	10220000 	.word	0x10220000
 800275c:	10210000 	.word	0x10210000
 8002760:	10120000 	.word	0x10120000
 8002764:	10110000 	.word	0x10110000
 8002768:	40021000 	.word	0x40021000
 800276c:	40010000 	.word	0x40010000
 8002770:	40010800 	.word	0x40010800
 8002774:	40010c00 	.word	0x40010c00
 8002778:	40011000 	.word	0x40011000
 800277c:	40011400 	.word	0x40011400
 8002780:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002784:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_GPIO_Init+0x304>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	43db      	mvns	r3, r3
 800278c:	4909      	ldr	r1, [pc, #36]	@ (80027b4 <HAL_GPIO_Init+0x304>)
 800278e:	4013      	ands	r3, r2
 8002790:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	3301      	adds	r3, #1
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f47f ae8e 	bne.w	80024c4 <HAL_GPIO_Init+0x14>
  }
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	372c      	adds	r7, #44	@ 0x2c
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	40010400 	.word	0x40010400

080027b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
 80027d4:	e001      	b.n	80027da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	460b      	mov	r3, r1
 80027f0:	807b      	strh	r3, [r7, #2]
 80027f2:	4613      	mov	r3, r2
 80027f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027f6:	787b      	ldrb	r3, [r7, #1]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fc:	887a      	ldrh	r2, [r7, #2]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002802:	e003      	b.n	800280c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	041a      	lsls	r2, r3, #16
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	611a      	str	r2, [r3, #16]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
	...

08002818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e272      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8087 	beq.w	8002946 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002838:	4b92      	ldr	r3, [pc, #584]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b04      	cmp	r3, #4
 8002842:	d00c      	beq.n	800285e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002844:	4b8f      	ldr	r3, [pc, #572]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b08      	cmp	r3, #8
 800284e:	d112      	bne.n	8002876 <HAL_RCC_OscConfig+0x5e>
 8002850:	4b8c      	ldr	r3, [pc, #560]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800285c:	d10b      	bne.n	8002876 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285e:	4b89      	ldr	r3, [pc, #548]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d06c      	beq.n	8002944 <HAL_RCC_OscConfig+0x12c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d168      	bne.n	8002944 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e24c      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x76>
 8002880:	4b80      	ldr	r3, [pc, #512]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a7f      	ldr	r2, [pc, #508]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002886:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	e02e      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x98>
 8002896:	4b7b      	ldr	r3, [pc, #492]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7a      	ldr	r2, [pc, #488]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b78      	ldr	r3, [pc, #480]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a77      	ldr	r2, [pc, #476]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01d      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0xbc>
 80028ba:	4b72      	ldr	r3, [pc, #456]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a71      	ldr	r2, [pc, #452]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 80028d4:	4b6b      	ldr	r3, [pc, #428]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b68      	ldr	r3, [pc, #416]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a67      	ldr	r2, [pc, #412]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fb48 	bl	8000f88 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe fb44 	bl	8000f88 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	@ 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e200      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b5d      	ldr	r3, [pc, #372]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0xe4>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fb34 	bl	8000f88 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002924:	f7fe fb30 	bl	8000f88 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	@ 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1ec      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	4b53      	ldr	r3, [pc, #332]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x10c>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d063      	beq.n	8002a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002952:	4b4c      	ldr	r3, [pc, #304]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800295e:	4b49      	ldr	r3, [pc, #292]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b08      	cmp	r3, #8
 8002968:	d11c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x18c>
 800296a:	4b46      	ldr	r3, [pc, #280]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	4b43      	ldr	r3, [pc, #268]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x176>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e1c0      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4939      	ldr	r1, [pc, #228]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	e03a      	b.n	8002a1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ac:	4b36      	ldr	r3, [pc, #216]	@ (8002a88 <HAL_RCC_OscConfig+0x270>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7fe fae9 	bl	8000f88 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ba:	f7fe fae5 	bl	8000f88 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1a1      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4927      	ldr	r1, [pc, #156]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ee:	4b26      	ldr	r3, [pc, #152]	@ (8002a88 <HAL_RCC_OscConfig+0x270>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fac8 	bl	8000f88 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fc:	f7fe fac4 	bl	8000f88 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e180      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d03a      	beq.n	8002a9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d019      	beq.n	8002a62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a34:	f7fe faa8 	bl	8000f88 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7fe faa4 	bl	8000f88 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e160      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f000 face 	bl	8002ffc <RCC_Delay>
 8002a60:	e01c      	b.n	8002a9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a68:	f7fe fa8e 	bl	8000f88 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6e:	e00f      	b.n	8002a90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a70:	f7fe fa8a 	bl	8000f88 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d908      	bls.n	8002a90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e146      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	42420000 	.word	0x42420000
 8002a8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	4b92      	ldr	r3, [pc, #584]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e9      	bne.n	8002a70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80a6 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aae:	4b8b      	ldr	r3, [pc, #556]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b88      	ldr	r3, [pc, #544]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4a87      	ldr	r2, [pc, #540]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	61d3      	str	r3, [r2, #28]
 8002ac6:	4b85      	ldr	r3, [pc, #532]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b82      	ldr	r3, [pc, #520]	@ (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d118      	bne.n	8002b14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7fe fa4b 	bl	8000f88 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af6:	f7fe fa47 	bl	8000f88 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b64      	cmp	r3, #100	@ 0x64
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e103      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	4b75      	ldr	r3, [pc, #468]	@ (8002ce0 <HAL_RCC_OscConfig+0x4c8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_OscConfig+0x312>
 8002b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a6e      	ldr	r2, [pc, #440]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6213      	str	r3, [r2, #32]
 8002b28:	e02d      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x334>
 8002b32:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4a69      	ldr	r2, [pc, #420]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	6213      	str	r3, [r2, #32]
 8002b3e:	4b67      	ldr	r3, [pc, #412]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4a66      	ldr	r2, [pc, #408]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6213      	str	r3, [r2, #32]
 8002b4a:	e01c      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	d10c      	bne.n	8002b6e <HAL_RCC_OscConfig+0x356>
 8002b54:	4b61      	ldr	r3, [pc, #388]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4a60      	ldr	r2, [pc, #384]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b5a:	f043 0304 	orr.w	r3, r3, #4
 8002b5e:	6213      	str	r3, [r2, #32]
 8002b60:	4b5e      	ldr	r3, [pc, #376]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4a5d      	ldr	r2, [pc, #372]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6213      	str	r3, [r2, #32]
 8002b6c:	e00b      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4a5a      	ldr	r2, [pc, #360]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6213      	str	r3, [r2, #32]
 8002b7a:	4b58      	ldr	r3, [pc, #352]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4a57      	ldr	r2, [pc, #348]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	f023 0304 	bic.w	r3, r3, #4
 8002b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d015      	beq.n	8002bba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7fe f9fb 	bl	8000f88 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fe f9f7 	bl	8000f88 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0b1      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	4b4b      	ldr	r3, [pc, #300]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ee      	beq.n	8002b96 <HAL_RCC_OscConfig+0x37e>
 8002bb8:	e014      	b.n	8002be4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7fe f9e5 	bl	8000f88 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc2:	f7fe f9e1 	bl	8000f88 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e09b      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd8:	4b40      	ldr	r3, [pc, #256]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ee      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bea:	4b3c      	ldr	r3, [pc, #240]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4a3b      	ldr	r2, [pc, #236]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8087 	beq.w	8002d0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c00:	4b36      	ldr	r3, [pc, #216]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d061      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d146      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c14:	4b33      	ldr	r3, [pc, #204]	@ (8002ce4 <HAL_RCC_OscConfig+0x4cc>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe f9b5 	bl	8000f88 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c22:	f7fe f9b1 	bl	8000f88 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e06d      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c34:	4b29      	ldr	r3, [pc, #164]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c48:	d108      	bne.n	8002c5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c4a:	4b24      	ldr	r3, [pc, #144]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4921      	ldr	r1, [pc, #132]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a19      	ldr	r1, [r3, #32]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	491b      	ldr	r1, [pc, #108]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce4 <HAL_RCC_OscConfig+0x4cc>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7fe f985 	bl	8000f88 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c82:	f7fe f981 	bl	8000f88 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e03d      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c94:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x46a>
 8002ca0:	e035      	b.n	8002d0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca2:	4b10      	ldr	r3, [pc, #64]	@ (8002ce4 <HAL_RCC_OscConfig+0x4cc>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe f96e 	bl	8000f88 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe f96a 	bl	8000f88 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e026      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x498>
 8002cce:	e01e      	b.n	8002d0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d107      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e019      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <HAL_RCC_OscConfig+0x500>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000

08002d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0d0      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b6a      	ldr	r3, [pc, #424]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d910      	bls.n	8002d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b67      	ldr	r3, [pc, #412]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 0207 	bic.w	r2, r3, #7
 8002d46:	4965      	ldr	r1, [pc, #404]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b63      	ldr	r3, [pc, #396]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0b8      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d020      	beq.n	8002dae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d78:	4b59      	ldr	r3, [pc, #356]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4a58      	ldr	r2, [pc, #352]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d90:	4b53      	ldr	r3, [pc, #332]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a52      	ldr	r2, [pc, #328]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9c:	4b50      	ldr	r3, [pc, #320]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	494d      	ldr	r1, [pc, #308]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d040      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b47      	ldr	r3, [pc, #284]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d115      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e07f      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dda:	4b41      	ldr	r3, [pc, #260]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e073      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06b      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dfa:	4b39      	ldr	r3, [pc, #228]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f023 0203 	bic.w	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4936      	ldr	r1, [pc, #216]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e0c:	f7fe f8bc 	bl	8000f88 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e14:	f7fe f8b8 	bl	8000f88 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e053      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 020c 	and.w	r2, r3, #12
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d1eb      	bne.n	8002e14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b27      	ldr	r3, [pc, #156]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d210      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b24      	ldr	r3, [pc, #144]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 0207 	bic.w	r2, r3, #7
 8002e52:	4922      	ldr	r1, [pc, #136]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b20      	ldr	r3, [pc, #128]	@ (8002edc <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e032      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e78:	4b19      	ldr	r3, [pc, #100]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4916      	ldr	r1, [pc, #88]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e96:	4b12      	ldr	r3, [pc, #72]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	490e      	ldr	r1, [pc, #56]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eaa:	f000 f821 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	490a      	ldr	r1, [pc, #40]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebc:	5ccb      	ldrb	r3, [r1, r3]
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	4a09      	ldr	r2, [pc, #36]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ec6:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_RCC_ClockConfig+0x1d0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe f81a 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	08004f4c 	.word	0x08004f4c
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	20000004 	.word	0x20000004

08002ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x30>
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x36>
 8002f1e:	e027      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f20:	4b19      	ldr	r3, [pc, #100]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f22:	613b      	str	r3, [r7, #16]
      break;
 8002f24:	e027      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	4a17      	ldr	r2, [pc, #92]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f30:	5cd3      	ldrb	r3, [r2, r3]
 8002f32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d010      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f3e:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	0c5b      	lsrs	r3, r3, #17
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	4a11      	ldr	r2, [pc, #68]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a0d      	ldr	r2, [pc, #52]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f52:	fb03 f202 	mul.w	r2, r3, r2
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	e004      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a0c      	ldr	r2, [pc, #48]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f64:	fb02 f303 	mul.w	r3, r2, r3
 8002f68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	613b      	str	r3, [r7, #16]
      break;
 8002f6e:	e002      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f70:	4b05      	ldr	r3, [pc, #20]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f72:	613b      	str	r3, [r7, #16]
      break;
 8002f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f76:	693b      	ldr	r3, [r7, #16]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	007a1200 	.word	0x007a1200
 8002f8c:	08004f64 	.word	0x08004f64
 8002f90:	08004f74 	.word	0x08004f74
 8002f94:	003d0900 	.word	0x003d0900

08002f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f9c:	4b02      	ldr	r3, [pc, #8]	@ (8002fa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	20000000 	.word	0x20000000

08002fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb0:	f7ff fff2 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	4903      	ldr	r1, [pc, #12]	@ (8002fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	08004f5c 	.word	0x08004f5c

08002fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fd8:	f7ff ffde 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	0adb      	lsrs	r3, r3, #11
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	4903      	ldr	r1, [pc, #12]	@ (8002ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fea:	5ccb      	ldrb	r3, [r1, r3]
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	08004f5c 	.word	0x08004f5c

08002ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003004:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <RCC_Delay+0x34>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0a      	ldr	r2, [pc, #40]	@ (8003034 <RCC_Delay+0x38>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0a5b      	lsrs	r3, r3, #9
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003018:	bf00      	nop
  }
  while (Delay --);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1e5a      	subs	r2, r3, #1
 800301e:	60fa      	str	r2, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f9      	bne.n	8003018 <RCC_Delay+0x1c>
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr
 8003030:	20000000 	.word	0x20000000
 8003034:	10624dd3 	.word	0x10624dd3

08003038 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d07d      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003054:	2300      	movs	r3, #0
 8003056:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003058:	4b4f      	ldr	r3, [pc, #316]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10d      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	4b4c      	ldr	r3, [pc, #304]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	4a4b      	ldr	r2, [pc, #300]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306e:	61d3      	str	r3, [r2, #28]
 8003070:	4b49      	ldr	r3, [pc, #292]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307c:	2301      	movs	r3, #1
 800307e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	4b46      	ldr	r3, [pc, #280]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d118      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308c:	4b43      	ldr	r3, [pc, #268]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a42      	ldr	r2, [pc, #264]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003096:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003098:	f7fd ff76 	bl	8000f88 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309e:	e008      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a0:	f7fd ff72 	bl	8000f88 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	@ 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e06d      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b3a      	ldr	r3, [pc, #232]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030be:	4b36      	ldr	r3, [pc, #216]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d02e      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d027      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030e6:	4b2e      	ldr	r3, [pc, #184]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030ec:	4b2c      	ldr	r3, [pc, #176]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030f2:	4a29      	ldr	r2, [pc, #164]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d014      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7fd ff41 	bl	8000f88 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003108:	e00a      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310a:	f7fd ff3d 	bl	8000f88 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003118:	4293      	cmp	r3, r2
 800311a:	d901      	bls.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e036      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003120:	4b1d      	ldr	r3, [pc, #116]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0ee      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800312c:	4b1a      	ldr	r3, [pc, #104]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4917      	ldr	r1, [pc, #92]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313a:	4313      	orrs	r3, r2
 800313c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800313e:	7dfb      	ldrb	r3, [r7, #23]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d105      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003144:	4b14      	ldr	r3, [pc, #80]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	4a13      	ldr	r2, [pc, #76]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800314e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800315c:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	490b      	ldr	r1, [pc, #44]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316a:	4313      	orrs	r3, r2
 800316c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800317a:	4b07      	ldr	r3, [pc, #28]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4904      	ldr	r1, [pc, #16]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	40007000 	.word	0x40007000
 80031a0:	42420440 	.word	0x42420440

080031a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e042      	b.n	800323c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fd fd06 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2224      	movs	r2, #36	@ 0x24
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fd63 	bl	8003cb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800320c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800321c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	@ 0x28
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	4613      	mov	r3, r2
 8003252:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b20      	cmp	r3, #32
 8003262:	d175      	bne.n	8003350 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_UART_Transmit+0x2c>
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e06e      	b.n	8003352 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2221      	movs	r2, #33	@ 0x21
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003282:	f7fd fe81 	bl	8000f88 <HAL_GetTick>
 8003286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	88fa      	ldrh	r2, [r7, #6]
 800328c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	88fa      	ldrh	r2, [r7, #6]
 8003292:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800329c:	d108      	bne.n	80032b0 <HAL_UART_Transmit+0x6c>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d104      	bne.n	80032b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	e003      	b.n	80032b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032b8:	e02e      	b.n	8003318 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2200      	movs	r2, #0
 80032c2:	2180      	movs	r1, #128	@ 0x80
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fb01 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e03a      	b.n	8003352 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	3302      	adds	r3, #2
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	e007      	b.n	800330a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	781a      	ldrb	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	3301      	adds	r3, #1
 8003308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1cb      	bne.n	80032ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2200      	movs	r2, #0
 800332a:	2140      	movs	r1, #64	@ 0x40
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 facd 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e006      	b.n	8003352 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	e000      	b.n	8003352 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003350:	2302      	movs	r3, #2
  }
}
 8003352:	4618      	mov	r0, r3
 8003354:	3720      	adds	r7, #32
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b0ba      	sub	sp, #232	@ 0xe8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003382:	2300      	movs	r3, #0
 8003384:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800338e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800339a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10f      	bne.n	80033c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_UART_IRQHandler+0x66>
 80033ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fbbc 	bl	8003b38 <UART_Receive_IT>
      return;
 80033c0:	e25b      	b.n	800387a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80de 	beq.w	8003588 <HAL_UART_IRQHandler+0x22c>
 80033cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d106      	bne.n	80033e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80d1 	beq.w	8003588 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <HAL_UART_IRQHandler+0xae>
 80033f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	f043 0201 	orr.w	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800340a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_UART_IRQHandler+0xd2>
 8003416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003426:	f043 0202 	orr.w	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800342e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_UART_IRQHandler+0xf6>
 800343a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344a:	f043 0204 	orr.w	r2, r3, #4
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d011      	beq.n	8003482 <HAL_UART_IRQHandler+0x126>
 800345e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800346a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347a:	f043 0208 	orr.w	r2, r3, #8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 81f2 	beq.w	8003870 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800348c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_UART_IRQHandler+0x14e>
 8003498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fb47 	bl	8003b38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <HAL_UART_IRQHandler+0x17a>
 80034ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d04f      	beq.n	8003576 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa51 	bl	800397e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d041      	beq.n	800356e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3314      	adds	r3, #20
 80034f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003500:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003504:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003508:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3314      	adds	r3, #20
 8003512:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003516:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800351a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800352e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1d9      	bne.n	80034ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d013      	beq.n	8003566 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003542:	4a7e      	ldr	r2, [pc, #504]	@ (800373c <HAL_UART_IRQHandler+0x3e0>)
 8003544:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe ff38 	bl	80023c0 <HAL_DMA_Abort_IT>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003560:	4610      	mov	r0, r2
 8003562:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003564:	e00e      	b.n	8003584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f99c 	bl	80038a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	e00a      	b.n	8003584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f998 	bl	80038a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	e006      	b.n	8003584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f994 	bl	80038a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003582:	e175      	b.n	8003870 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003584:	bf00      	nop
    return;
 8003586:	e173      	b.n	8003870 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	2b01      	cmp	r3, #1
 800358e:	f040 814f 	bne.w	8003830 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8148 	beq.w	8003830 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8141 	beq.w	8003830 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 80b6 	beq.w	8003740 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8145 	beq.w	8003874 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035f2:	429a      	cmp	r2, r3
 80035f4:	f080 813e 	bcs.w	8003874 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b20      	cmp	r3, #32
 8003608:	f000 8088 	beq.w	800371c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003622:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003626:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800362a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003638:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800363c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003644:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003648:	e841 2300 	strex	r3, r2, [r1]
 800364c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1d9      	bne.n	800360c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3314      	adds	r3, #20
 800365e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003668:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3314      	adds	r3, #20
 8003678:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800367c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003680:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003684:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003688:	e841 2300 	strex	r3, r2, [r1]
 800368c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800368e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e1      	bne.n	8003658 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3314      	adds	r3, #20
 800369a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800369e:	e853 3f00 	ldrex	r3, [r3]
 80036a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80036a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3314      	adds	r3, #20
 80036b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80036b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e3      	bne.n	8003694 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036ec:	f023 0310 	bic.w	r3, r3, #16
 80036f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	330c      	adds	r3, #12
 80036fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80036fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003700:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003704:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800370c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e3      	bne.n	80036da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fe17 	bl	800234a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800372a:	b29b      	uxth	r3, r3
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	b29b      	uxth	r3, r3
 8003730:	4619      	mov	r1, r3
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f8bf 	bl	80038b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003738:	e09c      	b.n	8003874 <HAL_UART_IRQHandler+0x518>
 800373a:	bf00      	nop
 800373c:	08003a43 	.word	0x08003a43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003748:	b29b      	uxth	r3, r3
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 808e 	beq.w	8003878 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800375c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8089 	beq.w	8003878 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	330c      	adds	r3, #12
 800376c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800377c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800378a:	647a      	str	r2, [r7, #68]	@ 0x44
 800378c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003790:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1e3      	bne.n	8003766 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3314      	adds	r3, #20
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	623b      	str	r3, [r7, #32]
   return(result);
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3314      	adds	r3, #20
 80037be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80037c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e3      	bne.n	800379e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	330c      	adds	r3, #12
 80037ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0310 	bic.w	r3, r3, #16
 80037fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	330c      	adds	r3, #12
 8003804:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003808:	61fa      	str	r2, [r7, #28]
 800380a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	69b9      	ldr	r1, [r7, #24]
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	617b      	str	r3, [r7, #20]
   return(result);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e3      	bne.n	80037e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003822:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f844 	bl	80038b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800382e:	e023      	b.n	8003878 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003838:	2b00      	cmp	r3, #0
 800383a:	d009      	beq.n	8003850 <HAL_UART_IRQHandler+0x4f4>
 800383c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f90e 	bl	8003a6a <UART_Transmit_IT>
    return;
 800384e:	e014      	b.n	800387a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00e      	beq.n	800387a <HAL_UART_IRQHandler+0x51e>
 800385c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f94d 	bl	8003b08 <UART_EndTransmit_IT>
    return;
 800386e:	e004      	b.n	800387a <HAL_UART_IRQHandler+0x51e>
    return;
 8003870:	bf00      	nop
 8003872:	e002      	b.n	800387a <HAL_UART_IRQHandler+0x51e>
      return;
 8003874:	bf00      	nop
 8003876:	e000      	b.n	800387a <HAL_UART_IRQHandler+0x51e>
      return;
 8003878:	bf00      	nop
  }
}
 800387a:	37e8      	adds	r7, #232	@ 0xe8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	460b      	mov	r3, r1
 80038c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038dc:	e03b      	b.n	8003956 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d037      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e6:	f7fd fb4f 	bl	8000f88 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	6a3a      	ldr	r2, [r7, #32]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d302      	bcc.n	80038fc <UART_WaitOnFlagUntilTimeout+0x30>
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e03a      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d023      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x8a>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b80      	cmp	r3, #128	@ 0x80
 8003912:	d020      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b40      	cmp	r3, #64	@ 0x40
 8003918:	d01d      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b08      	cmp	r3, #8
 8003926:	d116      	bne.n	8003956 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f81d 	bl	800397e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2208      	movs	r2, #8
 8003948:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e00f      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4013      	ands	r3, r2
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	bf0c      	ite	eq
 8003966:	2301      	moveq	r3, #1
 8003968:	2300      	movne	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	429a      	cmp	r2, r3
 8003972:	d0b4      	beq.n	80038de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800397e:	b480      	push	{r7}
 8003980:	b095      	sub	sp, #84	@ 0x54
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003998:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800399c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80039a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e5      	bne.n	8003986 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3314      	adds	r3, #20
 80039c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f023 0301 	bic.w	r3, r3, #1
 80039d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3314      	adds	r3, #20
 80039d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e5      	bne.n	80039ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d119      	bne.n	8003a2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f023 0310 	bic.w	r3, r3, #16
 8003a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	330c      	adds	r3, #12
 8003a14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a16:	61ba      	str	r2, [r7, #24]
 8003a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6979      	ldr	r1, [r7, #20]
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	613b      	str	r3, [r7, #16]
   return(result);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e5      	bne.n	80039f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a38:	bf00      	nop
 8003a3a:	3754      	adds	r7, #84	@ 0x54
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7ff ff21 	bl	80038a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b085      	sub	sp, #20
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b21      	cmp	r3, #33	@ 0x21
 8003a7c:	d13e      	bne.n	8003afc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a86:	d114      	bne.n	8003ab2 <UART_Transmit_IT+0x48>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d110      	bne.n	8003ab2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	1c9a      	adds	r2, r3, #2
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	621a      	str	r2, [r3, #32]
 8003ab0:	e008      	b.n	8003ac4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	1c59      	adds	r1, r3, #1
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6211      	str	r1, [r2, #32]
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10f      	bne.n	8003af8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ae6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003af6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e000      	b.n	8003afe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003afc:	2302      	movs	r3, #2
  }
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff fea9 	bl	8003880 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08c      	sub	sp, #48	@ 0x30
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b22      	cmp	r3, #34	@ 0x22
 8003b4a:	f040 80ae 	bne.w	8003caa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b56:	d117      	bne.n	8003b88 <UART_Receive_IT+0x50>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d113      	bne.n	8003b88 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b80:	1c9a      	adds	r2, r3, #2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b86:	e026      	b.n	8003bd6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b9a:	d007      	beq.n	8003bac <UART_Receive_IT+0x74>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <UART_Receive_IT+0x82>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb6:	701a      	strb	r2, [r3, #0]
 8003bb8:	e008      	b.n	8003bcc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4619      	mov	r1, r3
 8003be4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d15d      	bne.n	8003ca6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0220 	bic.w	r2, r2, #32
 8003bf8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d135      	bne.n	8003c9c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	613b      	str	r3, [r7, #16]
   return(result);
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f023 0310 	bic.w	r3, r3, #16
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c56:	623a      	str	r2, [r7, #32]
 8003c58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	69f9      	ldr	r1, [r7, #28]
 8003c5c:	6a3a      	ldr	r2, [r7, #32]
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e5      	bne.n	8003c36 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d10a      	bne.n	8003c8e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff fe0e 	bl	80038b6 <HAL_UARTEx_RxEventCallback>
 8003c9a:	e002      	b.n	8003ca2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff fdf8 	bl	8003892 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e002      	b.n	8003cac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e000      	b.n	8003cac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003caa:	2302      	movs	r3, #2
  }
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3730      	adds	r7, #48	@ 0x30
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003cee:	f023 030c 	bic.w	r3, r3, #12
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc8 <UART_SetConfig+0x114>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d103      	bne.n	8003d24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d1c:	f7ff f95a 	bl	8002fd4 <HAL_RCC_GetPCLK2Freq>
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	e002      	b.n	8003d2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d24:	f7ff f942 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8003d28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	009a      	lsls	r2, r3, #2
 8003d34:	441a      	add	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	4a22      	ldr	r2, [pc, #136]	@ (8003dcc <UART_SetConfig+0x118>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	0119      	lsls	r1, r3, #4
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	009a      	lsls	r2, r3, #2
 8003d54:	441a      	add	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d60:	4b1a      	ldr	r3, [pc, #104]	@ (8003dcc <UART_SetConfig+0x118>)
 8003d62:	fba3 0302 	umull	r0, r3, r3, r2
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	2064      	movs	r0, #100	@ 0x64
 8003d6a:	fb00 f303 	mul.w	r3, r0, r3
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	3332      	adds	r3, #50	@ 0x32
 8003d74:	4a15      	ldr	r2, [pc, #84]	@ (8003dcc <UART_SetConfig+0x118>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d80:	4419      	add	r1, r3
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	009a      	lsls	r2, r3, #2
 8003d8c:	441a      	add	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d98:	4b0c      	ldr	r3, [pc, #48]	@ (8003dcc <UART_SetConfig+0x118>)
 8003d9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	2064      	movs	r0, #100	@ 0x64
 8003da2:	fb00 f303 	mul.w	r3, r0, r3
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	3332      	adds	r3, #50	@ 0x32
 8003dac:	4a07      	ldr	r2, [pc, #28]	@ (8003dcc <UART_SetConfig+0x118>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	f003 020f 	and.w	r2, r3, #15
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	440a      	add	r2, r1
 8003dbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40013800 	.word	0x40013800
 8003dcc:	51eb851f 	.word	0x51eb851f

08003dd0 <malloc>:
 8003dd0:	4b02      	ldr	r3, [pc, #8]	@ (8003ddc <malloc+0xc>)
 8003dd2:	4601      	mov	r1, r0
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	f000 b825 	b.w	8003e24 <_malloc_r>
 8003dda:	bf00      	nop
 8003ddc:	20000018 	.word	0x20000018

08003de0 <sbrk_aligned>:
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	4e0f      	ldr	r6, [pc, #60]	@ (8003e20 <sbrk_aligned+0x40>)
 8003de4:	460c      	mov	r4, r1
 8003de6:	6831      	ldr	r1, [r6, #0]
 8003de8:	4605      	mov	r5, r0
 8003dea:	b911      	cbnz	r1, 8003df2 <sbrk_aligned+0x12>
 8003dec:	f000 fb0e 	bl	800440c <_sbrk_r>
 8003df0:	6030      	str	r0, [r6, #0]
 8003df2:	4621      	mov	r1, r4
 8003df4:	4628      	mov	r0, r5
 8003df6:	f000 fb09 	bl	800440c <_sbrk_r>
 8003dfa:	1c43      	adds	r3, r0, #1
 8003dfc:	d103      	bne.n	8003e06 <sbrk_aligned+0x26>
 8003dfe:	f04f 34ff 	mov.w	r4, #4294967295
 8003e02:	4620      	mov	r0, r4
 8003e04:	bd70      	pop	{r4, r5, r6, pc}
 8003e06:	1cc4      	adds	r4, r0, #3
 8003e08:	f024 0403 	bic.w	r4, r4, #3
 8003e0c:	42a0      	cmp	r0, r4
 8003e0e:	d0f8      	beq.n	8003e02 <sbrk_aligned+0x22>
 8003e10:	1a21      	subs	r1, r4, r0
 8003e12:	4628      	mov	r0, r5
 8003e14:	f000 fafa 	bl	800440c <_sbrk_r>
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d1f2      	bne.n	8003e02 <sbrk_aligned+0x22>
 8003e1c:	e7ef      	b.n	8003dfe <sbrk_aligned+0x1e>
 8003e1e:	bf00      	nop
 8003e20:	20000190 	.word	0x20000190

08003e24 <_malloc_r>:
 8003e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e28:	1ccd      	adds	r5, r1, #3
 8003e2a:	f025 0503 	bic.w	r5, r5, #3
 8003e2e:	3508      	adds	r5, #8
 8003e30:	2d0c      	cmp	r5, #12
 8003e32:	bf38      	it	cc
 8003e34:	250c      	movcc	r5, #12
 8003e36:	2d00      	cmp	r5, #0
 8003e38:	4606      	mov	r6, r0
 8003e3a:	db01      	blt.n	8003e40 <_malloc_r+0x1c>
 8003e3c:	42a9      	cmp	r1, r5
 8003e3e:	d904      	bls.n	8003e4a <_malloc_r+0x26>
 8003e40:	230c      	movs	r3, #12
 8003e42:	6033      	str	r3, [r6, #0]
 8003e44:	2000      	movs	r0, #0
 8003e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f20 <_malloc_r+0xfc>
 8003e4e:	f000 f869 	bl	8003f24 <__malloc_lock>
 8003e52:	f8d8 3000 	ldr.w	r3, [r8]
 8003e56:	461c      	mov	r4, r3
 8003e58:	bb44      	cbnz	r4, 8003eac <_malloc_r+0x88>
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	f7ff ffbf 	bl	8003de0 <sbrk_aligned>
 8003e62:	1c43      	adds	r3, r0, #1
 8003e64:	4604      	mov	r4, r0
 8003e66:	d158      	bne.n	8003f1a <_malloc_r+0xf6>
 8003e68:	f8d8 4000 	ldr.w	r4, [r8]
 8003e6c:	4627      	mov	r7, r4
 8003e6e:	2f00      	cmp	r7, #0
 8003e70:	d143      	bne.n	8003efa <_malloc_r+0xd6>
 8003e72:	2c00      	cmp	r4, #0
 8003e74:	d04b      	beq.n	8003f0e <_malloc_r+0xea>
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	4639      	mov	r1, r7
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	eb04 0903 	add.w	r9, r4, r3
 8003e80:	f000 fac4 	bl	800440c <_sbrk_r>
 8003e84:	4581      	cmp	r9, r0
 8003e86:	d142      	bne.n	8003f0e <_malloc_r+0xea>
 8003e88:	6821      	ldr	r1, [r4, #0]
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	1a6d      	subs	r5, r5, r1
 8003e8e:	4629      	mov	r1, r5
 8003e90:	f7ff ffa6 	bl	8003de0 <sbrk_aligned>
 8003e94:	3001      	adds	r0, #1
 8003e96:	d03a      	beq.n	8003f0e <_malloc_r+0xea>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	442b      	add	r3, r5
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	bb62      	cbnz	r2, 8003f00 <_malloc_r+0xdc>
 8003ea6:	f8c8 7000 	str.w	r7, [r8]
 8003eaa:	e00f      	b.n	8003ecc <_malloc_r+0xa8>
 8003eac:	6822      	ldr	r2, [r4, #0]
 8003eae:	1b52      	subs	r2, r2, r5
 8003eb0:	d420      	bmi.n	8003ef4 <_malloc_r+0xd0>
 8003eb2:	2a0b      	cmp	r2, #11
 8003eb4:	d917      	bls.n	8003ee6 <_malloc_r+0xc2>
 8003eb6:	1961      	adds	r1, r4, r5
 8003eb8:	42a3      	cmp	r3, r4
 8003eba:	6025      	str	r5, [r4, #0]
 8003ebc:	bf18      	it	ne
 8003ebe:	6059      	strne	r1, [r3, #4]
 8003ec0:	6863      	ldr	r3, [r4, #4]
 8003ec2:	bf08      	it	eq
 8003ec4:	f8c8 1000 	streq.w	r1, [r8]
 8003ec8:	5162      	str	r2, [r4, r5]
 8003eca:	604b      	str	r3, [r1, #4]
 8003ecc:	4630      	mov	r0, r6
 8003ece:	f000 f82f 	bl	8003f30 <__malloc_unlock>
 8003ed2:	f104 000b 	add.w	r0, r4, #11
 8003ed6:	1d23      	adds	r3, r4, #4
 8003ed8:	f020 0007 	bic.w	r0, r0, #7
 8003edc:	1ac2      	subs	r2, r0, r3
 8003ede:	bf1c      	itt	ne
 8003ee0:	1a1b      	subne	r3, r3, r0
 8003ee2:	50a3      	strne	r3, [r4, r2]
 8003ee4:	e7af      	b.n	8003e46 <_malloc_r+0x22>
 8003ee6:	6862      	ldr	r2, [r4, #4]
 8003ee8:	42a3      	cmp	r3, r4
 8003eea:	bf0c      	ite	eq
 8003eec:	f8c8 2000 	streq.w	r2, [r8]
 8003ef0:	605a      	strne	r2, [r3, #4]
 8003ef2:	e7eb      	b.n	8003ecc <_malloc_r+0xa8>
 8003ef4:	4623      	mov	r3, r4
 8003ef6:	6864      	ldr	r4, [r4, #4]
 8003ef8:	e7ae      	b.n	8003e58 <_malloc_r+0x34>
 8003efa:	463c      	mov	r4, r7
 8003efc:	687f      	ldr	r7, [r7, #4]
 8003efe:	e7b6      	b.n	8003e6e <_malloc_r+0x4a>
 8003f00:	461a      	mov	r2, r3
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	42a3      	cmp	r3, r4
 8003f06:	d1fb      	bne.n	8003f00 <_malloc_r+0xdc>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	6053      	str	r3, [r2, #4]
 8003f0c:	e7de      	b.n	8003ecc <_malloc_r+0xa8>
 8003f0e:	230c      	movs	r3, #12
 8003f10:	4630      	mov	r0, r6
 8003f12:	6033      	str	r3, [r6, #0]
 8003f14:	f000 f80c 	bl	8003f30 <__malloc_unlock>
 8003f18:	e794      	b.n	8003e44 <_malloc_r+0x20>
 8003f1a:	6005      	str	r5, [r0, #0]
 8003f1c:	e7d6      	b.n	8003ecc <_malloc_r+0xa8>
 8003f1e:	bf00      	nop
 8003f20:	20000194 	.word	0x20000194

08003f24 <__malloc_lock>:
 8003f24:	4801      	ldr	r0, [pc, #4]	@ (8003f2c <__malloc_lock+0x8>)
 8003f26:	f000 babe 	b.w	80044a6 <__retarget_lock_acquire_recursive>
 8003f2a:	bf00      	nop
 8003f2c:	200002d8 	.word	0x200002d8

08003f30 <__malloc_unlock>:
 8003f30:	4801      	ldr	r0, [pc, #4]	@ (8003f38 <__malloc_unlock+0x8>)
 8003f32:	f000 bab9 	b.w	80044a8 <__retarget_lock_release_recursive>
 8003f36:	bf00      	nop
 8003f38:	200002d8 	.word	0x200002d8

08003f3c <std>:
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	b510      	push	{r4, lr}
 8003f40:	4604      	mov	r4, r0
 8003f42:	e9c0 3300 	strd	r3, r3, [r0]
 8003f46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f4a:	6083      	str	r3, [r0, #8]
 8003f4c:	8181      	strh	r1, [r0, #12]
 8003f4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f50:	81c2      	strh	r2, [r0, #14]
 8003f52:	6183      	str	r3, [r0, #24]
 8003f54:	4619      	mov	r1, r3
 8003f56:	2208      	movs	r2, #8
 8003f58:	305c      	adds	r0, #92	@ 0x5c
 8003f5a:	f000 fa1b 	bl	8004394 <memset>
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f94 <std+0x58>)
 8003f60:	6224      	str	r4, [r4, #32]
 8003f62:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f64:	4b0c      	ldr	r3, [pc, #48]	@ (8003f98 <std+0x5c>)
 8003f66:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f68:	4b0c      	ldr	r3, [pc, #48]	@ (8003f9c <std+0x60>)
 8003f6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa0 <std+0x64>)
 8003f6e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f70:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa4 <std+0x68>)
 8003f72:	429c      	cmp	r4, r3
 8003f74:	d006      	beq.n	8003f84 <std+0x48>
 8003f76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f7a:	4294      	cmp	r4, r2
 8003f7c:	d002      	beq.n	8003f84 <std+0x48>
 8003f7e:	33d0      	adds	r3, #208	@ 0xd0
 8003f80:	429c      	cmp	r4, r3
 8003f82:	d105      	bne.n	8003f90 <std+0x54>
 8003f84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f8c:	f000 ba8a 	b.w	80044a4 <__retarget_lock_init_recursive>
 8003f90:	bd10      	pop	{r4, pc}
 8003f92:	bf00      	nop
 8003f94:	080041e5 	.word	0x080041e5
 8003f98:	08004207 	.word	0x08004207
 8003f9c:	0800423f 	.word	0x0800423f
 8003fa0:	08004263 	.word	0x08004263
 8003fa4:	20000198 	.word	0x20000198

08003fa8 <stdio_exit_handler>:
 8003fa8:	4a02      	ldr	r2, [pc, #8]	@ (8003fb4 <stdio_exit_handler+0xc>)
 8003faa:	4903      	ldr	r1, [pc, #12]	@ (8003fb8 <stdio_exit_handler+0x10>)
 8003fac:	4803      	ldr	r0, [pc, #12]	@ (8003fbc <stdio_exit_handler+0x14>)
 8003fae:	f000 b869 	b.w	8004084 <_fwalk_sglue>
 8003fb2:	bf00      	nop
 8003fb4:	2000000c 	.word	0x2000000c
 8003fb8:	08004c2d 	.word	0x08004c2d
 8003fbc:	2000001c 	.word	0x2000001c

08003fc0 <cleanup_stdio>:
 8003fc0:	6841      	ldr	r1, [r0, #4]
 8003fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff4 <cleanup_stdio+0x34>)
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	4299      	cmp	r1, r3
 8003fc8:	4604      	mov	r4, r0
 8003fca:	d001      	beq.n	8003fd0 <cleanup_stdio+0x10>
 8003fcc:	f000 fe2e 	bl	8004c2c <_fflush_r>
 8003fd0:	68a1      	ldr	r1, [r4, #8]
 8003fd2:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <cleanup_stdio+0x38>)
 8003fd4:	4299      	cmp	r1, r3
 8003fd6:	d002      	beq.n	8003fde <cleanup_stdio+0x1e>
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f000 fe27 	bl	8004c2c <_fflush_r>
 8003fde:	68e1      	ldr	r1, [r4, #12]
 8003fe0:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <cleanup_stdio+0x3c>)
 8003fe2:	4299      	cmp	r1, r3
 8003fe4:	d004      	beq.n	8003ff0 <cleanup_stdio+0x30>
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fec:	f000 be1e 	b.w	8004c2c <_fflush_r>
 8003ff0:	bd10      	pop	{r4, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000198 	.word	0x20000198
 8003ff8:	20000200 	.word	0x20000200
 8003ffc:	20000268 	.word	0x20000268

08004000 <global_stdio_init.part.0>:
 8004000:	b510      	push	{r4, lr}
 8004002:	4b0b      	ldr	r3, [pc, #44]	@ (8004030 <global_stdio_init.part.0+0x30>)
 8004004:	4c0b      	ldr	r4, [pc, #44]	@ (8004034 <global_stdio_init.part.0+0x34>)
 8004006:	4a0c      	ldr	r2, [pc, #48]	@ (8004038 <global_stdio_init.part.0+0x38>)
 8004008:	4620      	mov	r0, r4
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	2104      	movs	r1, #4
 800400e:	2200      	movs	r2, #0
 8004010:	f7ff ff94 	bl	8003f3c <std>
 8004014:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004018:	2201      	movs	r2, #1
 800401a:	2109      	movs	r1, #9
 800401c:	f7ff ff8e 	bl	8003f3c <std>
 8004020:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004024:	2202      	movs	r2, #2
 8004026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800402a:	2112      	movs	r1, #18
 800402c:	f7ff bf86 	b.w	8003f3c <std>
 8004030:	200002d0 	.word	0x200002d0
 8004034:	20000198 	.word	0x20000198
 8004038:	08003fa9 	.word	0x08003fa9

0800403c <__sfp_lock_acquire>:
 800403c:	4801      	ldr	r0, [pc, #4]	@ (8004044 <__sfp_lock_acquire+0x8>)
 800403e:	f000 ba32 	b.w	80044a6 <__retarget_lock_acquire_recursive>
 8004042:	bf00      	nop
 8004044:	200002d9 	.word	0x200002d9

08004048 <__sfp_lock_release>:
 8004048:	4801      	ldr	r0, [pc, #4]	@ (8004050 <__sfp_lock_release+0x8>)
 800404a:	f000 ba2d 	b.w	80044a8 <__retarget_lock_release_recursive>
 800404e:	bf00      	nop
 8004050:	200002d9 	.word	0x200002d9

08004054 <__sinit>:
 8004054:	b510      	push	{r4, lr}
 8004056:	4604      	mov	r4, r0
 8004058:	f7ff fff0 	bl	800403c <__sfp_lock_acquire>
 800405c:	6a23      	ldr	r3, [r4, #32]
 800405e:	b11b      	cbz	r3, 8004068 <__sinit+0x14>
 8004060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004064:	f7ff bff0 	b.w	8004048 <__sfp_lock_release>
 8004068:	4b04      	ldr	r3, [pc, #16]	@ (800407c <__sinit+0x28>)
 800406a:	6223      	str	r3, [r4, #32]
 800406c:	4b04      	ldr	r3, [pc, #16]	@ (8004080 <__sinit+0x2c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1f5      	bne.n	8004060 <__sinit+0xc>
 8004074:	f7ff ffc4 	bl	8004000 <global_stdio_init.part.0>
 8004078:	e7f2      	b.n	8004060 <__sinit+0xc>
 800407a:	bf00      	nop
 800407c:	08003fc1 	.word	0x08003fc1
 8004080:	200002d0 	.word	0x200002d0

08004084 <_fwalk_sglue>:
 8004084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004088:	4607      	mov	r7, r0
 800408a:	4688      	mov	r8, r1
 800408c:	4614      	mov	r4, r2
 800408e:	2600      	movs	r6, #0
 8004090:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004094:	f1b9 0901 	subs.w	r9, r9, #1
 8004098:	d505      	bpl.n	80040a6 <_fwalk_sglue+0x22>
 800409a:	6824      	ldr	r4, [r4, #0]
 800409c:	2c00      	cmp	r4, #0
 800409e:	d1f7      	bne.n	8004090 <_fwalk_sglue+0xc>
 80040a0:	4630      	mov	r0, r6
 80040a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040a6:	89ab      	ldrh	r3, [r5, #12]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d907      	bls.n	80040bc <_fwalk_sglue+0x38>
 80040ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040b0:	3301      	adds	r3, #1
 80040b2:	d003      	beq.n	80040bc <_fwalk_sglue+0x38>
 80040b4:	4629      	mov	r1, r5
 80040b6:	4638      	mov	r0, r7
 80040b8:	47c0      	blx	r8
 80040ba:	4306      	orrs	r6, r0
 80040bc:	3568      	adds	r5, #104	@ 0x68
 80040be:	e7e9      	b.n	8004094 <_fwalk_sglue+0x10>

080040c0 <_puts_r>:
 80040c0:	6a03      	ldr	r3, [r0, #32]
 80040c2:	b570      	push	{r4, r5, r6, lr}
 80040c4:	4605      	mov	r5, r0
 80040c6:	460e      	mov	r6, r1
 80040c8:	6884      	ldr	r4, [r0, #8]
 80040ca:	b90b      	cbnz	r3, 80040d0 <_puts_r+0x10>
 80040cc:	f7ff ffc2 	bl	8004054 <__sinit>
 80040d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040d2:	07db      	lsls	r3, r3, #31
 80040d4:	d405      	bmi.n	80040e2 <_puts_r+0x22>
 80040d6:	89a3      	ldrh	r3, [r4, #12]
 80040d8:	0598      	lsls	r0, r3, #22
 80040da:	d402      	bmi.n	80040e2 <_puts_r+0x22>
 80040dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040de:	f000 f9e2 	bl	80044a6 <__retarget_lock_acquire_recursive>
 80040e2:	89a3      	ldrh	r3, [r4, #12]
 80040e4:	0719      	lsls	r1, r3, #28
 80040e6:	d502      	bpl.n	80040ee <_puts_r+0x2e>
 80040e8:	6923      	ldr	r3, [r4, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d135      	bne.n	800415a <_puts_r+0x9a>
 80040ee:	4621      	mov	r1, r4
 80040f0:	4628      	mov	r0, r5
 80040f2:	f000 f8f9 	bl	80042e8 <__swsetup_r>
 80040f6:	b380      	cbz	r0, 800415a <_puts_r+0x9a>
 80040f8:	f04f 35ff 	mov.w	r5, #4294967295
 80040fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040fe:	07da      	lsls	r2, r3, #31
 8004100:	d405      	bmi.n	800410e <_puts_r+0x4e>
 8004102:	89a3      	ldrh	r3, [r4, #12]
 8004104:	059b      	lsls	r3, r3, #22
 8004106:	d402      	bmi.n	800410e <_puts_r+0x4e>
 8004108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800410a:	f000 f9cd 	bl	80044a8 <__retarget_lock_release_recursive>
 800410e:	4628      	mov	r0, r5
 8004110:	bd70      	pop	{r4, r5, r6, pc}
 8004112:	2b00      	cmp	r3, #0
 8004114:	da04      	bge.n	8004120 <_puts_r+0x60>
 8004116:	69a2      	ldr	r2, [r4, #24]
 8004118:	429a      	cmp	r2, r3
 800411a:	dc17      	bgt.n	800414c <_puts_r+0x8c>
 800411c:	290a      	cmp	r1, #10
 800411e:	d015      	beq.n	800414c <_puts_r+0x8c>
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	6022      	str	r2, [r4, #0]
 8004126:	7019      	strb	r1, [r3, #0]
 8004128:	68a3      	ldr	r3, [r4, #8]
 800412a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800412e:	3b01      	subs	r3, #1
 8004130:	60a3      	str	r3, [r4, #8]
 8004132:	2900      	cmp	r1, #0
 8004134:	d1ed      	bne.n	8004112 <_puts_r+0x52>
 8004136:	2b00      	cmp	r3, #0
 8004138:	da11      	bge.n	800415e <_puts_r+0x9e>
 800413a:	4622      	mov	r2, r4
 800413c:	210a      	movs	r1, #10
 800413e:	4628      	mov	r0, r5
 8004140:	f000 f893 	bl	800426a <__swbuf_r>
 8004144:	3001      	adds	r0, #1
 8004146:	d0d7      	beq.n	80040f8 <_puts_r+0x38>
 8004148:	250a      	movs	r5, #10
 800414a:	e7d7      	b.n	80040fc <_puts_r+0x3c>
 800414c:	4622      	mov	r2, r4
 800414e:	4628      	mov	r0, r5
 8004150:	f000 f88b 	bl	800426a <__swbuf_r>
 8004154:	3001      	adds	r0, #1
 8004156:	d1e7      	bne.n	8004128 <_puts_r+0x68>
 8004158:	e7ce      	b.n	80040f8 <_puts_r+0x38>
 800415a:	3e01      	subs	r6, #1
 800415c:	e7e4      	b.n	8004128 <_puts_r+0x68>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	6022      	str	r2, [r4, #0]
 8004164:	220a      	movs	r2, #10
 8004166:	701a      	strb	r2, [r3, #0]
 8004168:	e7ee      	b.n	8004148 <_puts_r+0x88>
	...

0800416c <puts>:
 800416c:	4b02      	ldr	r3, [pc, #8]	@ (8004178 <puts+0xc>)
 800416e:	4601      	mov	r1, r0
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	f7ff bfa5 	b.w	80040c0 <_puts_r>
 8004176:	bf00      	nop
 8004178:	20000018 	.word	0x20000018

0800417c <sniprintf>:
 800417c:	b40c      	push	{r2, r3}
 800417e:	b530      	push	{r4, r5, lr}
 8004180:	4b17      	ldr	r3, [pc, #92]	@ (80041e0 <sniprintf+0x64>)
 8004182:	1e0c      	subs	r4, r1, #0
 8004184:	681d      	ldr	r5, [r3, #0]
 8004186:	b09d      	sub	sp, #116	@ 0x74
 8004188:	da08      	bge.n	800419c <sniprintf+0x20>
 800418a:	238b      	movs	r3, #139	@ 0x8b
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	602b      	str	r3, [r5, #0]
 8004192:	b01d      	add	sp, #116	@ 0x74
 8004194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004198:	b002      	add	sp, #8
 800419a:	4770      	bx	lr
 800419c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80041a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80041a4:	bf0c      	ite	eq
 80041a6:	4623      	moveq	r3, r4
 80041a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80041ac:	9304      	str	r3, [sp, #16]
 80041ae:	9307      	str	r3, [sp, #28]
 80041b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80041b4:	9002      	str	r0, [sp, #8]
 80041b6:	9006      	str	r0, [sp, #24]
 80041b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80041bc:	4628      	mov	r0, r5
 80041be:	ab21      	add	r3, sp, #132	@ 0x84
 80041c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80041c2:	a902      	add	r1, sp, #8
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	f000 fa23 	bl	8004610 <_svfiprintf_r>
 80041ca:	1c43      	adds	r3, r0, #1
 80041cc:	bfbc      	itt	lt
 80041ce:	238b      	movlt	r3, #139	@ 0x8b
 80041d0:	602b      	strlt	r3, [r5, #0]
 80041d2:	2c00      	cmp	r4, #0
 80041d4:	d0dd      	beq.n	8004192 <sniprintf+0x16>
 80041d6:	2200      	movs	r2, #0
 80041d8:	9b02      	ldr	r3, [sp, #8]
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e7d9      	b.n	8004192 <sniprintf+0x16>
 80041de:	bf00      	nop
 80041e0:	20000018 	.word	0x20000018

080041e4 <__sread>:
 80041e4:	b510      	push	{r4, lr}
 80041e6:	460c      	mov	r4, r1
 80041e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ec:	f000 f8fc 	bl	80043e8 <_read_r>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	bfab      	itete	ge
 80041f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80041f6:	89a3      	ldrhlt	r3, [r4, #12]
 80041f8:	181b      	addge	r3, r3, r0
 80041fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80041fe:	bfac      	ite	ge
 8004200:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004202:	81a3      	strhlt	r3, [r4, #12]
 8004204:	bd10      	pop	{r4, pc}

08004206 <__swrite>:
 8004206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800420a:	461f      	mov	r7, r3
 800420c:	898b      	ldrh	r3, [r1, #12]
 800420e:	4605      	mov	r5, r0
 8004210:	05db      	lsls	r3, r3, #23
 8004212:	460c      	mov	r4, r1
 8004214:	4616      	mov	r6, r2
 8004216:	d505      	bpl.n	8004224 <__swrite+0x1e>
 8004218:	2302      	movs	r3, #2
 800421a:	2200      	movs	r2, #0
 800421c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004220:	f000 f8d0 	bl	80043c4 <_lseek_r>
 8004224:	89a3      	ldrh	r3, [r4, #12]
 8004226:	4632      	mov	r2, r6
 8004228:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800422c:	81a3      	strh	r3, [r4, #12]
 800422e:	4628      	mov	r0, r5
 8004230:	463b      	mov	r3, r7
 8004232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800423a:	f000 b8f7 	b.w	800442c <_write_r>

0800423e <__sseek>:
 800423e:	b510      	push	{r4, lr}
 8004240:	460c      	mov	r4, r1
 8004242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004246:	f000 f8bd 	bl	80043c4 <_lseek_r>
 800424a:	1c43      	adds	r3, r0, #1
 800424c:	89a3      	ldrh	r3, [r4, #12]
 800424e:	bf15      	itete	ne
 8004250:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004252:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004256:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800425a:	81a3      	strheq	r3, [r4, #12]
 800425c:	bf18      	it	ne
 800425e:	81a3      	strhne	r3, [r4, #12]
 8004260:	bd10      	pop	{r4, pc}

08004262 <__sclose>:
 8004262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004266:	f000 b89d 	b.w	80043a4 <_close_r>

0800426a <__swbuf_r>:
 800426a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426c:	460e      	mov	r6, r1
 800426e:	4614      	mov	r4, r2
 8004270:	4605      	mov	r5, r0
 8004272:	b118      	cbz	r0, 800427c <__swbuf_r+0x12>
 8004274:	6a03      	ldr	r3, [r0, #32]
 8004276:	b90b      	cbnz	r3, 800427c <__swbuf_r+0x12>
 8004278:	f7ff feec 	bl	8004054 <__sinit>
 800427c:	69a3      	ldr	r3, [r4, #24]
 800427e:	60a3      	str	r3, [r4, #8]
 8004280:	89a3      	ldrh	r3, [r4, #12]
 8004282:	071a      	lsls	r2, r3, #28
 8004284:	d501      	bpl.n	800428a <__swbuf_r+0x20>
 8004286:	6923      	ldr	r3, [r4, #16]
 8004288:	b943      	cbnz	r3, 800429c <__swbuf_r+0x32>
 800428a:	4621      	mov	r1, r4
 800428c:	4628      	mov	r0, r5
 800428e:	f000 f82b 	bl	80042e8 <__swsetup_r>
 8004292:	b118      	cbz	r0, 800429c <__swbuf_r+0x32>
 8004294:	f04f 37ff 	mov.w	r7, #4294967295
 8004298:	4638      	mov	r0, r7
 800429a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	6922      	ldr	r2, [r4, #16]
 80042a0:	b2f6      	uxtb	r6, r6
 80042a2:	1a98      	subs	r0, r3, r2
 80042a4:	6963      	ldr	r3, [r4, #20]
 80042a6:	4637      	mov	r7, r6
 80042a8:	4283      	cmp	r3, r0
 80042aa:	dc05      	bgt.n	80042b8 <__swbuf_r+0x4e>
 80042ac:	4621      	mov	r1, r4
 80042ae:	4628      	mov	r0, r5
 80042b0:	f000 fcbc 	bl	8004c2c <_fflush_r>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d1ed      	bne.n	8004294 <__swbuf_r+0x2a>
 80042b8:	68a3      	ldr	r3, [r4, #8]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	60a3      	str	r3, [r4, #8]
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	6022      	str	r2, [r4, #0]
 80042c4:	701e      	strb	r6, [r3, #0]
 80042c6:	6962      	ldr	r2, [r4, #20]
 80042c8:	1c43      	adds	r3, r0, #1
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d004      	beq.n	80042d8 <__swbuf_r+0x6e>
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	07db      	lsls	r3, r3, #31
 80042d2:	d5e1      	bpl.n	8004298 <__swbuf_r+0x2e>
 80042d4:	2e0a      	cmp	r6, #10
 80042d6:	d1df      	bne.n	8004298 <__swbuf_r+0x2e>
 80042d8:	4621      	mov	r1, r4
 80042da:	4628      	mov	r0, r5
 80042dc:	f000 fca6 	bl	8004c2c <_fflush_r>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d0d9      	beq.n	8004298 <__swbuf_r+0x2e>
 80042e4:	e7d6      	b.n	8004294 <__swbuf_r+0x2a>
	...

080042e8 <__swsetup_r>:
 80042e8:	b538      	push	{r3, r4, r5, lr}
 80042ea:	4b29      	ldr	r3, [pc, #164]	@ (8004390 <__swsetup_r+0xa8>)
 80042ec:	4605      	mov	r5, r0
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	460c      	mov	r4, r1
 80042f2:	b118      	cbz	r0, 80042fc <__swsetup_r+0x14>
 80042f4:	6a03      	ldr	r3, [r0, #32]
 80042f6:	b90b      	cbnz	r3, 80042fc <__swsetup_r+0x14>
 80042f8:	f7ff feac 	bl	8004054 <__sinit>
 80042fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004300:	0719      	lsls	r1, r3, #28
 8004302:	d422      	bmi.n	800434a <__swsetup_r+0x62>
 8004304:	06da      	lsls	r2, r3, #27
 8004306:	d407      	bmi.n	8004318 <__swsetup_r+0x30>
 8004308:	2209      	movs	r2, #9
 800430a:	602a      	str	r2, [r5, #0]
 800430c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004310:	f04f 30ff 	mov.w	r0, #4294967295
 8004314:	81a3      	strh	r3, [r4, #12]
 8004316:	e033      	b.n	8004380 <__swsetup_r+0x98>
 8004318:	0758      	lsls	r0, r3, #29
 800431a:	d512      	bpl.n	8004342 <__swsetup_r+0x5a>
 800431c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800431e:	b141      	cbz	r1, 8004332 <__swsetup_r+0x4a>
 8004320:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004324:	4299      	cmp	r1, r3
 8004326:	d002      	beq.n	800432e <__swsetup_r+0x46>
 8004328:	4628      	mov	r0, r5
 800432a:	f000 f8cd 	bl	80044c8 <_free_r>
 800432e:	2300      	movs	r3, #0
 8004330:	6363      	str	r3, [r4, #52]	@ 0x34
 8004332:	89a3      	ldrh	r3, [r4, #12]
 8004334:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004338:	81a3      	strh	r3, [r4, #12]
 800433a:	2300      	movs	r3, #0
 800433c:	6063      	str	r3, [r4, #4]
 800433e:	6923      	ldr	r3, [r4, #16]
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	89a3      	ldrh	r3, [r4, #12]
 8004344:	f043 0308 	orr.w	r3, r3, #8
 8004348:	81a3      	strh	r3, [r4, #12]
 800434a:	6923      	ldr	r3, [r4, #16]
 800434c:	b94b      	cbnz	r3, 8004362 <__swsetup_r+0x7a>
 800434e:	89a3      	ldrh	r3, [r4, #12]
 8004350:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004358:	d003      	beq.n	8004362 <__swsetup_r+0x7a>
 800435a:	4621      	mov	r1, r4
 800435c:	4628      	mov	r0, r5
 800435e:	f000 fcb2 	bl	8004cc6 <__smakebuf_r>
 8004362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004366:	f013 0201 	ands.w	r2, r3, #1
 800436a:	d00a      	beq.n	8004382 <__swsetup_r+0x9a>
 800436c:	2200      	movs	r2, #0
 800436e:	60a2      	str	r2, [r4, #8]
 8004370:	6962      	ldr	r2, [r4, #20]
 8004372:	4252      	negs	r2, r2
 8004374:	61a2      	str	r2, [r4, #24]
 8004376:	6922      	ldr	r2, [r4, #16]
 8004378:	b942      	cbnz	r2, 800438c <__swsetup_r+0xa4>
 800437a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800437e:	d1c5      	bne.n	800430c <__swsetup_r+0x24>
 8004380:	bd38      	pop	{r3, r4, r5, pc}
 8004382:	0799      	lsls	r1, r3, #30
 8004384:	bf58      	it	pl
 8004386:	6962      	ldrpl	r2, [r4, #20]
 8004388:	60a2      	str	r2, [r4, #8]
 800438a:	e7f4      	b.n	8004376 <__swsetup_r+0x8e>
 800438c:	2000      	movs	r0, #0
 800438e:	e7f7      	b.n	8004380 <__swsetup_r+0x98>
 8004390:	20000018 	.word	0x20000018

08004394 <memset>:
 8004394:	4603      	mov	r3, r0
 8004396:	4402      	add	r2, r0
 8004398:	4293      	cmp	r3, r2
 800439a:	d100      	bne.n	800439e <memset+0xa>
 800439c:	4770      	bx	lr
 800439e:	f803 1b01 	strb.w	r1, [r3], #1
 80043a2:	e7f9      	b.n	8004398 <memset+0x4>

080043a4 <_close_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	2300      	movs	r3, #0
 80043a8:	4d05      	ldr	r5, [pc, #20]	@ (80043c0 <_close_r+0x1c>)
 80043aa:	4604      	mov	r4, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	602b      	str	r3, [r5, #0]
 80043b0:	f7fc fcff 	bl	8000db2 <_close>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_close_r+0x1a>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	b103      	cbz	r3, 80043be <_close_r+0x1a>
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	200002d4 	.word	0x200002d4

080043c4 <_lseek_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4604      	mov	r4, r0
 80043c8:	4608      	mov	r0, r1
 80043ca:	4611      	mov	r1, r2
 80043cc:	2200      	movs	r2, #0
 80043ce:	4d05      	ldr	r5, [pc, #20]	@ (80043e4 <_lseek_r+0x20>)
 80043d0:	602a      	str	r2, [r5, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f7fc fd11 	bl	8000dfa <_lseek>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	d102      	bne.n	80043e2 <_lseek_r+0x1e>
 80043dc:	682b      	ldr	r3, [r5, #0]
 80043de:	b103      	cbz	r3, 80043e2 <_lseek_r+0x1e>
 80043e0:	6023      	str	r3, [r4, #0]
 80043e2:	bd38      	pop	{r3, r4, r5, pc}
 80043e4:	200002d4 	.word	0x200002d4

080043e8 <_read_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4604      	mov	r4, r0
 80043ec:	4608      	mov	r0, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	2200      	movs	r2, #0
 80043f2:	4d05      	ldr	r5, [pc, #20]	@ (8004408 <_read_r+0x20>)
 80043f4:	602a      	str	r2, [r5, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f7fc fca2 	bl	8000d40 <_read>
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	d102      	bne.n	8004406 <_read_r+0x1e>
 8004400:	682b      	ldr	r3, [r5, #0]
 8004402:	b103      	cbz	r3, 8004406 <_read_r+0x1e>
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	200002d4 	.word	0x200002d4

0800440c <_sbrk_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	2300      	movs	r3, #0
 8004410:	4d05      	ldr	r5, [pc, #20]	@ (8004428 <_sbrk_r+0x1c>)
 8004412:	4604      	mov	r4, r0
 8004414:	4608      	mov	r0, r1
 8004416:	602b      	str	r3, [r5, #0]
 8004418:	f7fc fcfc 	bl	8000e14 <_sbrk>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d102      	bne.n	8004426 <_sbrk_r+0x1a>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	b103      	cbz	r3, 8004426 <_sbrk_r+0x1a>
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	bd38      	pop	{r3, r4, r5, pc}
 8004428:	200002d4 	.word	0x200002d4

0800442c <_write_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4604      	mov	r4, r0
 8004430:	4608      	mov	r0, r1
 8004432:	4611      	mov	r1, r2
 8004434:	2200      	movs	r2, #0
 8004436:	4d05      	ldr	r5, [pc, #20]	@ (800444c <_write_r+0x20>)
 8004438:	602a      	str	r2, [r5, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	f7fc fc9d 	bl	8000d7a <_write>
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	d102      	bne.n	800444a <_write_r+0x1e>
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	b103      	cbz	r3, 800444a <_write_r+0x1e>
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	200002d4 	.word	0x200002d4

08004450 <__errno>:
 8004450:	4b01      	ldr	r3, [pc, #4]	@ (8004458 <__errno+0x8>)
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000018 	.word	0x20000018

0800445c <__libc_init_array>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	2600      	movs	r6, #0
 8004460:	4d0c      	ldr	r5, [pc, #48]	@ (8004494 <__libc_init_array+0x38>)
 8004462:	4c0d      	ldr	r4, [pc, #52]	@ (8004498 <__libc_init_array+0x3c>)
 8004464:	1b64      	subs	r4, r4, r5
 8004466:	10a4      	asrs	r4, r4, #2
 8004468:	42a6      	cmp	r6, r4
 800446a:	d109      	bne.n	8004480 <__libc_init_array+0x24>
 800446c:	f000 fce8 	bl	8004e40 <_init>
 8004470:	2600      	movs	r6, #0
 8004472:	4d0a      	ldr	r5, [pc, #40]	@ (800449c <__libc_init_array+0x40>)
 8004474:	4c0a      	ldr	r4, [pc, #40]	@ (80044a0 <__libc_init_array+0x44>)
 8004476:	1b64      	subs	r4, r4, r5
 8004478:	10a4      	asrs	r4, r4, #2
 800447a:	42a6      	cmp	r6, r4
 800447c:	d105      	bne.n	800448a <__libc_init_array+0x2e>
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	f855 3b04 	ldr.w	r3, [r5], #4
 8004484:	4798      	blx	r3
 8004486:	3601      	adds	r6, #1
 8004488:	e7ee      	b.n	8004468 <__libc_init_array+0xc>
 800448a:	f855 3b04 	ldr.w	r3, [r5], #4
 800448e:	4798      	blx	r3
 8004490:	3601      	adds	r6, #1
 8004492:	e7f2      	b.n	800447a <__libc_init_array+0x1e>
 8004494:	08004fb4 	.word	0x08004fb4
 8004498:	08004fb4 	.word	0x08004fb4
 800449c:	08004fb4 	.word	0x08004fb4
 80044a0:	08004fb8 	.word	0x08004fb8

080044a4 <__retarget_lock_init_recursive>:
 80044a4:	4770      	bx	lr

080044a6 <__retarget_lock_acquire_recursive>:
 80044a6:	4770      	bx	lr

080044a8 <__retarget_lock_release_recursive>:
 80044a8:	4770      	bx	lr

080044aa <memcpy>:
 80044aa:	440a      	add	r2, r1
 80044ac:	4291      	cmp	r1, r2
 80044ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80044b2:	d100      	bne.n	80044b6 <memcpy+0xc>
 80044b4:	4770      	bx	lr
 80044b6:	b510      	push	{r4, lr}
 80044b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044bc:	4291      	cmp	r1, r2
 80044be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044c2:	d1f9      	bne.n	80044b8 <memcpy+0xe>
 80044c4:	bd10      	pop	{r4, pc}
	...

080044c8 <_free_r>:
 80044c8:	b538      	push	{r3, r4, r5, lr}
 80044ca:	4605      	mov	r5, r0
 80044cc:	2900      	cmp	r1, #0
 80044ce:	d040      	beq.n	8004552 <_free_r+0x8a>
 80044d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d4:	1f0c      	subs	r4, r1, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bfb8      	it	lt
 80044da:	18e4      	addlt	r4, r4, r3
 80044dc:	f7ff fd22 	bl	8003f24 <__malloc_lock>
 80044e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004554 <_free_r+0x8c>)
 80044e2:	6813      	ldr	r3, [r2, #0]
 80044e4:	b933      	cbnz	r3, 80044f4 <_free_r+0x2c>
 80044e6:	6063      	str	r3, [r4, #4]
 80044e8:	6014      	str	r4, [r2, #0]
 80044ea:	4628      	mov	r0, r5
 80044ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044f0:	f7ff bd1e 	b.w	8003f30 <__malloc_unlock>
 80044f4:	42a3      	cmp	r3, r4
 80044f6:	d908      	bls.n	800450a <_free_r+0x42>
 80044f8:	6820      	ldr	r0, [r4, #0]
 80044fa:	1821      	adds	r1, r4, r0
 80044fc:	428b      	cmp	r3, r1
 80044fe:	bf01      	itttt	eq
 8004500:	6819      	ldreq	r1, [r3, #0]
 8004502:	685b      	ldreq	r3, [r3, #4]
 8004504:	1809      	addeq	r1, r1, r0
 8004506:	6021      	streq	r1, [r4, #0]
 8004508:	e7ed      	b.n	80044e6 <_free_r+0x1e>
 800450a:	461a      	mov	r2, r3
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	b10b      	cbz	r3, 8004514 <_free_r+0x4c>
 8004510:	42a3      	cmp	r3, r4
 8004512:	d9fa      	bls.n	800450a <_free_r+0x42>
 8004514:	6811      	ldr	r1, [r2, #0]
 8004516:	1850      	adds	r0, r2, r1
 8004518:	42a0      	cmp	r0, r4
 800451a:	d10b      	bne.n	8004534 <_free_r+0x6c>
 800451c:	6820      	ldr	r0, [r4, #0]
 800451e:	4401      	add	r1, r0
 8004520:	1850      	adds	r0, r2, r1
 8004522:	4283      	cmp	r3, r0
 8004524:	6011      	str	r1, [r2, #0]
 8004526:	d1e0      	bne.n	80044ea <_free_r+0x22>
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4408      	add	r0, r1
 800452e:	6010      	str	r0, [r2, #0]
 8004530:	6053      	str	r3, [r2, #4]
 8004532:	e7da      	b.n	80044ea <_free_r+0x22>
 8004534:	d902      	bls.n	800453c <_free_r+0x74>
 8004536:	230c      	movs	r3, #12
 8004538:	602b      	str	r3, [r5, #0]
 800453a:	e7d6      	b.n	80044ea <_free_r+0x22>
 800453c:	6820      	ldr	r0, [r4, #0]
 800453e:	1821      	adds	r1, r4, r0
 8004540:	428b      	cmp	r3, r1
 8004542:	bf01      	itttt	eq
 8004544:	6819      	ldreq	r1, [r3, #0]
 8004546:	685b      	ldreq	r3, [r3, #4]
 8004548:	1809      	addeq	r1, r1, r0
 800454a:	6021      	streq	r1, [r4, #0]
 800454c:	6063      	str	r3, [r4, #4]
 800454e:	6054      	str	r4, [r2, #4]
 8004550:	e7cb      	b.n	80044ea <_free_r+0x22>
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	20000194 	.word	0x20000194

08004558 <__ssputs_r>:
 8004558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800455c:	461f      	mov	r7, r3
 800455e:	688e      	ldr	r6, [r1, #8]
 8004560:	4682      	mov	sl, r0
 8004562:	42be      	cmp	r6, r7
 8004564:	460c      	mov	r4, r1
 8004566:	4690      	mov	r8, r2
 8004568:	680b      	ldr	r3, [r1, #0]
 800456a:	d82d      	bhi.n	80045c8 <__ssputs_r+0x70>
 800456c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004570:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004574:	d026      	beq.n	80045c4 <__ssputs_r+0x6c>
 8004576:	6965      	ldr	r5, [r4, #20]
 8004578:	6909      	ldr	r1, [r1, #16]
 800457a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800457e:	eba3 0901 	sub.w	r9, r3, r1
 8004582:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004586:	1c7b      	adds	r3, r7, #1
 8004588:	444b      	add	r3, r9
 800458a:	106d      	asrs	r5, r5, #1
 800458c:	429d      	cmp	r5, r3
 800458e:	bf38      	it	cc
 8004590:	461d      	movcc	r5, r3
 8004592:	0553      	lsls	r3, r2, #21
 8004594:	d527      	bpl.n	80045e6 <__ssputs_r+0x8e>
 8004596:	4629      	mov	r1, r5
 8004598:	f7ff fc44 	bl	8003e24 <_malloc_r>
 800459c:	4606      	mov	r6, r0
 800459e:	b360      	cbz	r0, 80045fa <__ssputs_r+0xa2>
 80045a0:	464a      	mov	r2, r9
 80045a2:	6921      	ldr	r1, [r4, #16]
 80045a4:	f7ff ff81 	bl	80044aa <memcpy>
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80045ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045b2:	81a3      	strh	r3, [r4, #12]
 80045b4:	6126      	str	r6, [r4, #16]
 80045b6:	444e      	add	r6, r9
 80045b8:	6026      	str	r6, [r4, #0]
 80045ba:	463e      	mov	r6, r7
 80045bc:	6165      	str	r5, [r4, #20]
 80045be:	eba5 0509 	sub.w	r5, r5, r9
 80045c2:	60a5      	str	r5, [r4, #8]
 80045c4:	42be      	cmp	r6, r7
 80045c6:	d900      	bls.n	80045ca <__ssputs_r+0x72>
 80045c8:	463e      	mov	r6, r7
 80045ca:	4632      	mov	r2, r6
 80045cc:	4641      	mov	r1, r8
 80045ce:	6820      	ldr	r0, [r4, #0]
 80045d0:	f000 fbb5 	bl	8004d3e <memmove>
 80045d4:	2000      	movs	r0, #0
 80045d6:	68a3      	ldr	r3, [r4, #8]
 80045d8:	1b9b      	subs	r3, r3, r6
 80045da:	60a3      	str	r3, [r4, #8]
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	4433      	add	r3, r6
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e6:	462a      	mov	r2, r5
 80045e8:	f000 fbf4 	bl	8004dd4 <_realloc_r>
 80045ec:	4606      	mov	r6, r0
 80045ee:	2800      	cmp	r0, #0
 80045f0:	d1e0      	bne.n	80045b4 <__ssputs_r+0x5c>
 80045f2:	4650      	mov	r0, sl
 80045f4:	6921      	ldr	r1, [r4, #16]
 80045f6:	f7ff ff67 	bl	80044c8 <_free_r>
 80045fa:	230c      	movs	r3, #12
 80045fc:	f8ca 3000 	str.w	r3, [sl]
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	f04f 30ff 	mov.w	r0, #4294967295
 8004606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800460a:	81a3      	strh	r3, [r4, #12]
 800460c:	e7e9      	b.n	80045e2 <__ssputs_r+0x8a>
	...

08004610 <_svfiprintf_r>:
 8004610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004614:	4698      	mov	r8, r3
 8004616:	898b      	ldrh	r3, [r1, #12]
 8004618:	4607      	mov	r7, r0
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	460d      	mov	r5, r1
 800461e:	4614      	mov	r4, r2
 8004620:	b09d      	sub	sp, #116	@ 0x74
 8004622:	d510      	bpl.n	8004646 <_svfiprintf_r+0x36>
 8004624:	690b      	ldr	r3, [r1, #16]
 8004626:	b973      	cbnz	r3, 8004646 <_svfiprintf_r+0x36>
 8004628:	2140      	movs	r1, #64	@ 0x40
 800462a:	f7ff fbfb 	bl	8003e24 <_malloc_r>
 800462e:	6028      	str	r0, [r5, #0]
 8004630:	6128      	str	r0, [r5, #16]
 8004632:	b930      	cbnz	r0, 8004642 <_svfiprintf_r+0x32>
 8004634:	230c      	movs	r3, #12
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	f04f 30ff 	mov.w	r0, #4294967295
 800463c:	b01d      	add	sp, #116	@ 0x74
 800463e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004642:	2340      	movs	r3, #64	@ 0x40
 8004644:	616b      	str	r3, [r5, #20]
 8004646:	2300      	movs	r3, #0
 8004648:	9309      	str	r3, [sp, #36]	@ 0x24
 800464a:	2320      	movs	r3, #32
 800464c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004650:	2330      	movs	r3, #48	@ 0x30
 8004652:	f04f 0901 	mov.w	r9, #1
 8004656:	f8cd 800c 	str.w	r8, [sp, #12]
 800465a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80047f4 <_svfiprintf_r+0x1e4>
 800465e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004662:	4623      	mov	r3, r4
 8004664:	469a      	mov	sl, r3
 8004666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800466a:	b10a      	cbz	r2, 8004670 <_svfiprintf_r+0x60>
 800466c:	2a25      	cmp	r2, #37	@ 0x25
 800466e:	d1f9      	bne.n	8004664 <_svfiprintf_r+0x54>
 8004670:	ebba 0b04 	subs.w	fp, sl, r4
 8004674:	d00b      	beq.n	800468e <_svfiprintf_r+0x7e>
 8004676:	465b      	mov	r3, fp
 8004678:	4622      	mov	r2, r4
 800467a:	4629      	mov	r1, r5
 800467c:	4638      	mov	r0, r7
 800467e:	f7ff ff6b 	bl	8004558 <__ssputs_r>
 8004682:	3001      	adds	r0, #1
 8004684:	f000 80a7 	beq.w	80047d6 <_svfiprintf_r+0x1c6>
 8004688:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800468a:	445a      	add	r2, fp
 800468c:	9209      	str	r2, [sp, #36]	@ 0x24
 800468e:	f89a 3000 	ldrb.w	r3, [sl]
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 809f 	beq.w	80047d6 <_svfiprintf_r+0x1c6>
 8004698:	2300      	movs	r3, #0
 800469a:	f04f 32ff 	mov.w	r2, #4294967295
 800469e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046a2:	f10a 0a01 	add.w	sl, sl, #1
 80046a6:	9304      	str	r3, [sp, #16]
 80046a8:	9307      	str	r3, [sp, #28]
 80046aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80046b0:	4654      	mov	r4, sl
 80046b2:	2205      	movs	r2, #5
 80046b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b8:	484e      	ldr	r0, [pc, #312]	@ (80047f4 <_svfiprintf_r+0x1e4>)
 80046ba:	f000 fb7d 	bl	8004db8 <memchr>
 80046be:	9a04      	ldr	r2, [sp, #16]
 80046c0:	b9d8      	cbnz	r0, 80046fa <_svfiprintf_r+0xea>
 80046c2:	06d0      	lsls	r0, r2, #27
 80046c4:	bf44      	itt	mi
 80046c6:	2320      	movmi	r3, #32
 80046c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046cc:	0711      	lsls	r1, r2, #28
 80046ce:	bf44      	itt	mi
 80046d0:	232b      	movmi	r3, #43	@ 0x2b
 80046d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046d6:	f89a 3000 	ldrb.w	r3, [sl]
 80046da:	2b2a      	cmp	r3, #42	@ 0x2a
 80046dc:	d015      	beq.n	800470a <_svfiprintf_r+0xfa>
 80046de:	4654      	mov	r4, sl
 80046e0:	2000      	movs	r0, #0
 80046e2:	f04f 0c0a 	mov.w	ip, #10
 80046e6:	9a07      	ldr	r2, [sp, #28]
 80046e8:	4621      	mov	r1, r4
 80046ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046ee:	3b30      	subs	r3, #48	@ 0x30
 80046f0:	2b09      	cmp	r3, #9
 80046f2:	d94b      	bls.n	800478c <_svfiprintf_r+0x17c>
 80046f4:	b1b0      	cbz	r0, 8004724 <_svfiprintf_r+0x114>
 80046f6:	9207      	str	r2, [sp, #28]
 80046f8:	e014      	b.n	8004724 <_svfiprintf_r+0x114>
 80046fa:	eba0 0308 	sub.w	r3, r0, r8
 80046fe:	fa09 f303 	lsl.w	r3, r9, r3
 8004702:	4313      	orrs	r3, r2
 8004704:	46a2      	mov	sl, r4
 8004706:	9304      	str	r3, [sp, #16]
 8004708:	e7d2      	b.n	80046b0 <_svfiprintf_r+0xa0>
 800470a:	9b03      	ldr	r3, [sp, #12]
 800470c:	1d19      	adds	r1, r3, #4
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	9103      	str	r1, [sp, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	bfbb      	ittet	lt
 8004716:	425b      	neglt	r3, r3
 8004718:	f042 0202 	orrlt.w	r2, r2, #2
 800471c:	9307      	strge	r3, [sp, #28]
 800471e:	9307      	strlt	r3, [sp, #28]
 8004720:	bfb8      	it	lt
 8004722:	9204      	strlt	r2, [sp, #16]
 8004724:	7823      	ldrb	r3, [r4, #0]
 8004726:	2b2e      	cmp	r3, #46	@ 0x2e
 8004728:	d10a      	bne.n	8004740 <_svfiprintf_r+0x130>
 800472a:	7863      	ldrb	r3, [r4, #1]
 800472c:	2b2a      	cmp	r3, #42	@ 0x2a
 800472e:	d132      	bne.n	8004796 <_svfiprintf_r+0x186>
 8004730:	9b03      	ldr	r3, [sp, #12]
 8004732:	3402      	adds	r4, #2
 8004734:	1d1a      	adds	r2, r3, #4
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	9203      	str	r2, [sp, #12]
 800473a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800473e:	9305      	str	r3, [sp, #20]
 8004740:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80047f8 <_svfiprintf_r+0x1e8>
 8004744:	2203      	movs	r2, #3
 8004746:	4650      	mov	r0, sl
 8004748:	7821      	ldrb	r1, [r4, #0]
 800474a:	f000 fb35 	bl	8004db8 <memchr>
 800474e:	b138      	cbz	r0, 8004760 <_svfiprintf_r+0x150>
 8004750:	2240      	movs	r2, #64	@ 0x40
 8004752:	9b04      	ldr	r3, [sp, #16]
 8004754:	eba0 000a 	sub.w	r0, r0, sl
 8004758:	4082      	lsls	r2, r0
 800475a:	4313      	orrs	r3, r2
 800475c:	3401      	adds	r4, #1
 800475e:	9304      	str	r3, [sp, #16]
 8004760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004764:	2206      	movs	r2, #6
 8004766:	4825      	ldr	r0, [pc, #148]	@ (80047fc <_svfiprintf_r+0x1ec>)
 8004768:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800476c:	f000 fb24 	bl	8004db8 <memchr>
 8004770:	2800      	cmp	r0, #0
 8004772:	d036      	beq.n	80047e2 <_svfiprintf_r+0x1d2>
 8004774:	4b22      	ldr	r3, [pc, #136]	@ (8004800 <_svfiprintf_r+0x1f0>)
 8004776:	bb1b      	cbnz	r3, 80047c0 <_svfiprintf_r+0x1b0>
 8004778:	9b03      	ldr	r3, [sp, #12]
 800477a:	3307      	adds	r3, #7
 800477c:	f023 0307 	bic.w	r3, r3, #7
 8004780:	3308      	adds	r3, #8
 8004782:	9303      	str	r3, [sp, #12]
 8004784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004786:	4433      	add	r3, r6
 8004788:	9309      	str	r3, [sp, #36]	@ 0x24
 800478a:	e76a      	b.n	8004662 <_svfiprintf_r+0x52>
 800478c:	460c      	mov	r4, r1
 800478e:	2001      	movs	r0, #1
 8004790:	fb0c 3202 	mla	r2, ip, r2, r3
 8004794:	e7a8      	b.n	80046e8 <_svfiprintf_r+0xd8>
 8004796:	2300      	movs	r3, #0
 8004798:	f04f 0c0a 	mov.w	ip, #10
 800479c:	4619      	mov	r1, r3
 800479e:	3401      	adds	r4, #1
 80047a0:	9305      	str	r3, [sp, #20]
 80047a2:	4620      	mov	r0, r4
 80047a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047a8:	3a30      	subs	r2, #48	@ 0x30
 80047aa:	2a09      	cmp	r2, #9
 80047ac:	d903      	bls.n	80047b6 <_svfiprintf_r+0x1a6>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0c6      	beq.n	8004740 <_svfiprintf_r+0x130>
 80047b2:	9105      	str	r1, [sp, #20]
 80047b4:	e7c4      	b.n	8004740 <_svfiprintf_r+0x130>
 80047b6:	4604      	mov	r4, r0
 80047b8:	2301      	movs	r3, #1
 80047ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80047be:	e7f0      	b.n	80047a2 <_svfiprintf_r+0x192>
 80047c0:	ab03      	add	r3, sp, #12
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	462a      	mov	r2, r5
 80047c6:	4638      	mov	r0, r7
 80047c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004804 <_svfiprintf_r+0x1f4>)
 80047ca:	a904      	add	r1, sp, #16
 80047cc:	f3af 8000 	nop.w
 80047d0:	1c42      	adds	r2, r0, #1
 80047d2:	4606      	mov	r6, r0
 80047d4:	d1d6      	bne.n	8004784 <_svfiprintf_r+0x174>
 80047d6:	89ab      	ldrh	r3, [r5, #12]
 80047d8:	065b      	lsls	r3, r3, #25
 80047da:	f53f af2d 	bmi.w	8004638 <_svfiprintf_r+0x28>
 80047de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047e0:	e72c      	b.n	800463c <_svfiprintf_r+0x2c>
 80047e2:	ab03      	add	r3, sp, #12
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	462a      	mov	r2, r5
 80047e8:	4638      	mov	r0, r7
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <_svfiprintf_r+0x1f4>)
 80047ec:	a904      	add	r1, sp, #16
 80047ee:	f000 f87d 	bl	80048ec <_printf_i>
 80047f2:	e7ed      	b.n	80047d0 <_svfiprintf_r+0x1c0>
 80047f4:	08004f76 	.word	0x08004f76
 80047f8:	08004f7c 	.word	0x08004f7c
 80047fc:	08004f80 	.word	0x08004f80
 8004800:	00000000 	.word	0x00000000
 8004804:	08004559 	.word	0x08004559

08004808 <_printf_common>:
 8004808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800480c:	4616      	mov	r6, r2
 800480e:	4698      	mov	r8, r3
 8004810:	688a      	ldr	r2, [r1, #8]
 8004812:	690b      	ldr	r3, [r1, #16]
 8004814:	4607      	mov	r7, r0
 8004816:	4293      	cmp	r3, r2
 8004818:	bfb8      	it	lt
 800481a:	4613      	movlt	r3, r2
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004822:	460c      	mov	r4, r1
 8004824:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004828:	b10a      	cbz	r2, 800482e <_printf_common+0x26>
 800482a:	3301      	adds	r3, #1
 800482c:	6033      	str	r3, [r6, #0]
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	0699      	lsls	r1, r3, #26
 8004832:	bf42      	ittt	mi
 8004834:	6833      	ldrmi	r3, [r6, #0]
 8004836:	3302      	addmi	r3, #2
 8004838:	6033      	strmi	r3, [r6, #0]
 800483a:	6825      	ldr	r5, [r4, #0]
 800483c:	f015 0506 	ands.w	r5, r5, #6
 8004840:	d106      	bne.n	8004850 <_printf_common+0x48>
 8004842:	f104 0a19 	add.w	sl, r4, #25
 8004846:	68e3      	ldr	r3, [r4, #12]
 8004848:	6832      	ldr	r2, [r6, #0]
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	42ab      	cmp	r3, r5
 800484e:	dc2b      	bgt.n	80048a8 <_printf_common+0xa0>
 8004850:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004854:	6822      	ldr	r2, [r4, #0]
 8004856:	3b00      	subs	r3, #0
 8004858:	bf18      	it	ne
 800485a:	2301      	movne	r3, #1
 800485c:	0692      	lsls	r2, r2, #26
 800485e:	d430      	bmi.n	80048c2 <_printf_common+0xba>
 8004860:	4641      	mov	r1, r8
 8004862:	4638      	mov	r0, r7
 8004864:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004868:	47c8      	blx	r9
 800486a:	3001      	adds	r0, #1
 800486c:	d023      	beq.n	80048b6 <_printf_common+0xae>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	6922      	ldr	r2, [r4, #16]
 8004872:	f003 0306 	and.w	r3, r3, #6
 8004876:	2b04      	cmp	r3, #4
 8004878:	bf14      	ite	ne
 800487a:	2500      	movne	r5, #0
 800487c:	6833      	ldreq	r3, [r6, #0]
 800487e:	f04f 0600 	mov.w	r6, #0
 8004882:	bf08      	it	eq
 8004884:	68e5      	ldreq	r5, [r4, #12]
 8004886:	f104 041a 	add.w	r4, r4, #26
 800488a:	bf08      	it	eq
 800488c:	1aed      	subeq	r5, r5, r3
 800488e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004892:	bf08      	it	eq
 8004894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004898:	4293      	cmp	r3, r2
 800489a:	bfc4      	itt	gt
 800489c:	1a9b      	subgt	r3, r3, r2
 800489e:	18ed      	addgt	r5, r5, r3
 80048a0:	42b5      	cmp	r5, r6
 80048a2:	d11a      	bne.n	80048da <_printf_common+0xd2>
 80048a4:	2000      	movs	r0, #0
 80048a6:	e008      	b.n	80048ba <_printf_common+0xb2>
 80048a8:	2301      	movs	r3, #1
 80048aa:	4652      	mov	r2, sl
 80048ac:	4641      	mov	r1, r8
 80048ae:	4638      	mov	r0, r7
 80048b0:	47c8      	blx	r9
 80048b2:	3001      	adds	r0, #1
 80048b4:	d103      	bne.n	80048be <_printf_common+0xb6>
 80048b6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048be:	3501      	adds	r5, #1
 80048c0:	e7c1      	b.n	8004846 <_printf_common+0x3e>
 80048c2:	2030      	movs	r0, #48	@ 0x30
 80048c4:	18e1      	adds	r1, r4, r3
 80048c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048d0:	4422      	add	r2, r4
 80048d2:	3302      	adds	r3, #2
 80048d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048d8:	e7c2      	b.n	8004860 <_printf_common+0x58>
 80048da:	2301      	movs	r3, #1
 80048dc:	4622      	mov	r2, r4
 80048de:	4641      	mov	r1, r8
 80048e0:	4638      	mov	r0, r7
 80048e2:	47c8      	blx	r9
 80048e4:	3001      	adds	r0, #1
 80048e6:	d0e6      	beq.n	80048b6 <_printf_common+0xae>
 80048e8:	3601      	adds	r6, #1
 80048ea:	e7d9      	b.n	80048a0 <_printf_common+0x98>

080048ec <_printf_i>:
 80048ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f0:	7e0f      	ldrb	r7, [r1, #24]
 80048f2:	4691      	mov	r9, r2
 80048f4:	2f78      	cmp	r7, #120	@ 0x78
 80048f6:	4680      	mov	r8, r0
 80048f8:	460c      	mov	r4, r1
 80048fa:	469a      	mov	sl, r3
 80048fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004902:	d807      	bhi.n	8004914 <_printf_i+0x28>
 8004904:	2f62      	cmp	r7, #98	@ 0x62
 8004906:	d80a      	bhi.n	800491e <_printf_i+0x32>
 8004908:	2f00      	cmp	r7, #0
 800490a:	f000 80d3 	beq.w	8004ab4 <_printf_i+0x1c8>
 800490e:	2f58      	cmp	r7, #88	@ 0x58
 8004910:	f000 80ba 	beq.w	8004a88 <_printf_i+0x19c>
 8004914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004918:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800491c:	e03a      	b.n	8004994 <_printf_i+0xa8>
 800491e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004922:	2b15      	cmp	r3, #21
 8004924:	d8f6      	bhi.n	8004914 <_printf_i+0x28>
 8004926:	a101      	add	r1, pc, #4	@ (adr r1, 800492c <_printf_i+0x40>)
 8004928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800492c:	08004985 	.word	0x08004985
 8004930:	08004999 	.word	0x08004999
 8004934:	08004915 	.word	0x08004915
 8004938:	08004915 	.word	0x08004915
 800493c:	08004915 	.word	0x08004915
 8004940:	08004915 	.word	0x08004915
 8004944:	08004999 	.word	0x08004999
 8004948:	08004915 	.word	0x08004915
 800494c:	08004915 	.word	0x08004915
 8004950:	08004915 	.word	0x08004915
 8004954:	08004915 	.word	0x08004915
 8004958:	08004a9b 	.word	0x08004a9b
 800495c:	080049c3 	.word	0x080049c3
 8004960:	08004a55 	.word	0x08004a55
 8004964:	08004915 	.word	0x08004915
 8004968:	08004915 	.word	0x08004915
 800496c:	08004abd 	.word	0x08004abd
 8004970:	08004915 	.word	0x08004915
 8004974:	080049c3 	.word	0x080049c3
 8004978:	08004915 	.word	0x08004915
 800497c:	08004915 	.word	0x08004915
 8004980:	08004a5d 	.word	0x08004a5d
 8004984:	6833      	ldr	r3, [r6, #0]
 8004986:	1d1a      	adds	r2, r3, #4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6032      	str	r2, [r6, #0]
 800498c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004990:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004994:	2301      	movs	r3, #1
 8004996:	e09e      	b.n	8004ad6 <_printf_i+0x1ea>
 8004998:	6833      	ldr	r3, [r6, #0]
 800499a:	6820      	ldr	r0, [r4, #0]
 800499c:	1d19      	adds	r1, r3, #4
 800499e:	6031      	str	r1, [r6, #0]
 80049a0:	0606      	lsls	r6, r0, #24
 80049a2:	d501      	bpl.n	80049a8 <_printf_i+0xbc>
 80049a4:	681d      	ldr	r5, [r3, #0]
 80049a6:	e003      	b.n	80049b0 <_printf_i+0xc4>
 80049a8:	0645      	lsls	r5, r0, #25
 80049aa:	d5fb      	bpl.n	80049a4 <_printf_i+0xb8>
 80049ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80049b0:	2d00      	cmp	r5, #0
 80049b2:	da03      	bge.n	80049bc <_printf_i+0xd0>
 80049b4:	232d      	movs	r3, #45	@ 0x2d
 80049b6:	426d      	negs	r5, r5
 80049b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049bc:	230a      	movs	r3, #10
 80049be:	4859      	ldr	r0, [pc, #356]	@ (8004b24 <_printf_i+0x238>)
 80049c0:	e011      	b.n	80049e6 <_printf_i+0xfa>
 80049c2:	6821      	ldr	r1, [r4, #0]
 80049c4:	6833      	ldr	r3, [r6, #0]
 80049c6:	0608      	lsls	r0, r1, #24
 80049c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80049cc:	d402      	bmi.n	80049d4 <_printf_i+0xe8>
 80049ce:	0649      	lsls	r1, r1, #25
 80049d0:	bf48      	it	mi
 80049d2:	b2ad      	uxthmi	r5, r5
 80049d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80049d6:	6033      	str	r3, [r6, #0]
 80049d8:	bf14      	ite	ne
 80049da:	230a      	movne	r3, #10
 80049dc:	2308      	moveq	r3, #8
 80049de:	4851      	ldr	r0, [pc, #324]	@ (8004b24 <_printf_i+0x238>)
 80049e0:	2100      	movs	r1, #0
 80049e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049e6:	6866      	ldr	r6, [r4, #4]
 80049e8:	2e00      	cmp	r6, #0
 80049ea:	bfa8      	it	ge
 80049ec:	6821      	ldrge	r1, [r4, #0]
 80049ee:	60a6      	str	r6, [r4, #8]
 80049f0:	bfa4      	itt	ge
 80049f2:	f021 0104 	bicge.w	r1, r1, #4
 80049f6:	6021      	strge	r1, [r4, #0]
 80049f8:	b90d      	cbnz	r5, 80049fe <_printf_i+0x112>
 80049fa:	2e00      	cmp	r6, #0
 80049fc:	d04b      	beq.n	8004a96 <_printf_i+0x1aa>
 80049fe:	4616      	mov	r6, r2
 8004a00:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a04:	fb03 5711 	mls	r7, r3, r1, r5
 8004a08:	5dc7      	ldrb	r7, [r0, r7]
 8004a0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a0e:	462f      	mov	r7, r5
 8004a10:	42bb      	cmp	r3, r7
 8004a12:	460d      	mov	r5, r1
 8004a14:	d9f4      	bls.n	8004a00 <_printf_i+0x114>
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d10b      	bne.n	8004a32 <_printf_i+0x146>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	07df      	lsls	r7, r3, #31
 8004a1e:	d508      	bpl.n	8004a32 <_printf_i+0x146>
 8004a20:	6923      	ldr	r3, [r4, #16]
 8004a22:	6861      	ldr	r1, [r4, #4]
 8004a24:	4299      	cmp	r1, r3
 8004a26:	bfde      	ittt	le
 8004a28:	2330      	movle	r3, #48	@ 0x30
 8004a2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a32:	1b92      	subs	r2, r2, r6
 8004a34:	6122      	str	r2, [r4, #16]
 8004a36:	464b      	mov	r3, r9
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	f8cd a000 	str.w	sl, [sp]
 8004a40:	aa03      	add	r2, sp, #12
 8004a42:	f7ff fee1 	bl	8004808 <_printf_common>
 8004a46:	3001      	adds	r0, #1
 8004a48:	d14a      	bne.n	8004ae0 <_printf_i+0x1f4>
 8004a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4e:	b004      	add	sp, #16
 8004a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	f043 0320 	orr.w	r3, r3, #32
 8004a5a:	6023      	str	r3, [r4, #0]
 8004a5c:	2778      	movs	r7, #120	@ 0x78
 8004a5e:	4832      	ldr	r0, [pc, #200]	@ (8004b28 <_printf_i+0x23c>)
 8004a60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	6831      	ldr	r1, [r6, #0]
 8004a68:	061f      	lsls	r7, r3, #24
 8004a6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a6e:	d402      	bmi.n	8004a76 <_printf_i+0x18a>
 8004a70:	065f      	lsls	r7, r3, #25
 8004a72:	bf48      	it	mi
 8004a74:	b2ad      	uxthmi	r5, r5
 8004a76:	6031      	str	r1, [r6, #0]
 8004a78:	07d9      	lsls	r1, r3, #31
 8004a7a:	bf44      	itt	mi
 8004a7c:	f043 0320 	orrmi.w	r3, r3, #32
 8004a80:	6023      	strmi	r3, [r4, #0]
 8004a82:	b11d      	cbz	r5, 8004a8c <_printf_i+0x1a0>
 8004a84:	2310      	movs	r3, #16
 8004a86:	e7ab      	b.n	80049e0 <_printf_i+0xf4>
 8004a88:	4826      	ldr	r0, [pc, #152]	@ (8004b24 <_printf_i+0x238>)
 8004a8a:	e7e9      	b.n	8004a60 <_printf_i+0x174>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	f023 0320 	bic.w	r3, r3, #32
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	e7f6      	b.n	8004a84 <_printf_i+0x198>
 8004a96:	4616      	mov	r6, r2
 8004a98:	e7bd      	b.n	8004a16 <_printf_i+0x12a>
 8004a9a:	6833      	ldr	r3, [r6, #0]
 8004a9c:	6825      	ldr	r5, [r4, #0]
 8004a9e:	1d18      	adds	r0, r3, #4
 8004aa0:	6961      	ldr	r1, [r4, #20]
 8004aa2:	6030      	str	r0, [r6, #0]
 8004aa4:	062e      	lsls	r6, r5, #24
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	d501      	bpl.n	8004aae <_printf_i+0x1c2>
 8004aaa:	6019      	str	r1, [r3, #0]
 8004aac:	e002      	b.n	8004ab4 <_printf_i+0x1c8>
 8004aae:	0668      	lsls	r0, r5, #25
 8004ab0:	d5fb      	bpl.n	8004aaa <_printf_i+0x1be>
 8004ab2:	8019      	strh	r1, [r3, #0]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	4616      	mov	r6, r2
 8004ab8:	6123      	str	r3, [r4, #16]
 8004aba:	e7bc      	b.n	8004a36 <_printf_i+0x14a>
 8004abc:	6833      	ldr	r3, [r6, #0]
 8004abe:	2100      	movs	r1, #0
 8004ac0:	1d1a      	adds	r2, r3, #4
 8004ac2:	6032      	str	r2, [r6, #0]
 8004ac4:	681e      	ldr	r6, [r3, #0]
 8004ac6:	6862      	ldr	r2, [r4, #4]
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f000 f975 	bl	8004db8 <memchr>
 8004ace:	b108      	cbz	r0, 8004ad4 <_printf_i+0x1e8>
 8004ad0:	1b80      	subs	r0, r0, r6
 8004ad2:	6060      	str	r0, [r4, #4]
 8004ad4:	6863      	ldr	r3, [r4, #4]
 8004ad6:	6123      	str	r3, [r4, #16]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ade:	e7aa      	b.n	8004a36 <_printf_i+0x14a>
 8004ae0:	4632      	mov	r2, r6
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	6923      	ldr	r3, [r4, #16]
 8004ae8:	47d0      	blx	sl
 8004aea:	3001      	adds	r0, #1
 8004aec:	d0ad      	beq.n	8004a4a <_printf_i+0x15e>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	079b      	lsls	r3, r3, #30
 8004af2:	d413      	bmi.n	8004b1c <_printf_i+0x230>
 8004af4:	68e0      	ldr	r0, [r4, #12]
 8004af6:	9b03      	ldr	r3, [sp, #12]
 8004af8:	4298      	cmp	r0, r3
 8004afa:	bfb8      	it	lt
 8004afc:	4618      	movlt	r0, r3
 8004afe:	e7a6      	b.n	8004a4e <_printf_i+0x162>
 8004b00:	2301      	movs	r3, #1
 8004b02:	4632      	mov	r2, r6
 8004b04:	4649      	mov	r1, r9
 8004b06:	4640      	mov	r0, r8
 8004b08:	47d0      	blx	sl
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d09d      	beq.n	8004a4a <_printf_i+0x15e>
 8004b0e:	3501      	adds	r5, #1
 8004b10:	68e3      	ldr	r3, [r4, #12]
 8004b12:	9903      	ldr	r1, [sp, #12]
 8004b14:	1a5b      	subs	r3, r3, r1
 8004b16:	42ab      	cmp	r3, r5
 8004b18:	dcf2      	bgt.n	8004b00 <_printf_i+0x214>
 8004b1a:	e7eb      	b.n	8004af4 <_printf_i+0x208>
 8004b1c:	2500      	movs	r5, #0
 8004b1e:	f104 0619 	add.w	r6, r4, #25
 8004b22:	e7f5      	b.n	8004b10 <_printf_i+0x224>
 8004b24:	08004f87 	.word	0x08004f87
 8004b28:	08004f98 	.word	0x08004f98

08004b2c <__sflush_r>:
 8004b2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	0716      	lsls	r6, r2, #28
 8004b34:	4605      	mov	r5, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	d454      	bmi.n	8004be4 <__sflush_r+0xb8>
 8004b3a:	684b      	ldr	r3, [r1, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	dc02      	bgt.n	8004b46 <__sflush_r+0x1a>
 8004b40:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	dd48      	ble.n	8004bd8 <__sflush_r+0xac>
 8004b46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b48:	2e00      	cmp	r6, #0
 8004b4a:	d045      	beq.n	8004bd8 <__sflush_r+0xac>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b52:	682f      	ldr	r7, [r5, #0]
 8004b54:	6a21      	ldr	r1, [r4, #32]
 8004b56:	602b      	str	r3, [r5, #0]
 8004b58:	d030      	beq.n	8004bbc <__sflush_r+0x90>
 8004b5a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	0759      	lsls	r1, r3, #29
 8004b60:	d505      	bpl.n	8004b6e <__sflush_r+0x42>
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	1ad2      	subs	r2, r2, r3
 8004b66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b68:	b10b      	cbz	r3, 8004b6e <__sflush_r+0x42>
 8004b6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b6c:	1ad2      	subs	r2, r2, r3
 8004b6e:	2300      	movs	r3, #0
 8004b70:	4628      	mov	r0, r5
 8004b72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b74:	6a21      	ldr	r1, [r4, #32]
 8004b76:	47b0      	blx	r6
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	d106      	bne.n	8004b8c <__sflush_r+0x60>
 8004b7e:	6829      	ldr	r1, [r5, #0]
 8004b80:	291d      	cmp	r1, #29
 8004b82:	d82b      	bhi.n	8004bdc <__sflush_r+0xb0>
 8004b84:	4a28      	ldr	r2, [pc, #160]	@ (8004c28 <__sflush_r+0xfc>)
 8004b86:	410a      	asrs	r2, r1
 8004b88:	07d6      	lsls	r6, r2, #31
 8004b8a:	d427      	bmi.n	8004bdc <__sflush_r+0xb0>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	6062      	str	r2, [r4, #4]
 8004b90:	6922      	ldr	r2, [r4, #16]
 8004b92:	04d9      	lsls	r1, r3, #19
 8004b94:	6022      	str	r2, [r4, #0]
 8004b96:	d504      	bpl.n	8004ba2 <__sflush_r+0x76>
 8004b98:	1c42      	adds	r2, r0, #1
 8004b9a:	d101      	bne.n	8004ba0 <__sflush_r+0x74>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	b903      	cbnz	r3, 8004ba2 <__sflush_r+0x76>
 8004ba0:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ba2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ba4:	602f      	str	r7, [r5, #0]
 8004ba6:	b1b9      	cbz	r1, 8004bd8 <__sflush_r+0xac>
 8004ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004bac:	4299      	cmp	r1, r3
 8004bae:	d002      	beq.n	8004bb6 <__sflush_r+0x8a>
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f7ff fc89 	bl	80044c8 <_free_r>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bba:	e00d      	b.n	8004bd8 <__sflush_r+0xac>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	47b0      	blx	r6
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	1c50      	adds	r0, r2, #1
 8004bc6:	d1c9      	bne.n	8004b5c <__sflush_r+0x30>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0c6      	beq.n	8004b5c <__sflush_r+0x30>
 8004bce:	2b1d      	cmp	r3, #29
 8004bd0:	d001      	beq.n	8004bd6 <__sflush_r+0xaa>
 8004bd2:	2b16      	cmp	r3, #22
 8004bd4:	d11d      	bne.n	8004c12 <__sflush_r+0xe6>
 8004bd6:	602f      	str	r7, [r5, #0]
 8004bd8:	2000      	movs	r0, #0
 8004bda:	e021      	b.n	8004c20 <__sflush_r+0xf4>
 8004bdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004be0:	b21b      	sxth	r3, r3
 8004be2:	e01a      	b.n	8004c1a <__sflush_r+0xee>
 8004be4:	690f      	ldr	r7, [r1, #16]
 8004be6:	2f00      	cmp	r7, #0
 8004be8:	d0f6      	beq.n	8004bd8 <__sflush_r+0xac>
 8004bea:	0793      	lsls	r3, r2, #30
 8004bec:	bf18      	it	ne
 8004bee:	2300      	movne	r3, #0
 8004bf0:	680e      	ldr	r6, [r1, #0]
 8004bf2:	bf08      	it	eq
 8004bf4:	694b      	ldreq	r3, [r1, #20]
 8004bf6:	1bf6      	subs	r6, r6, r7
 8004bf8:	600f      	str	r7, [r1, #0]
 8004bfa:	608b      	str	r3, [r1, #8]
 8004bfc:	2e00      	cmp	r6, #0
 8004bfe:	ddeb      	ble.n	8004bd8 <__sflush_r+0xac>
 8004c00:	4633      	mov	r3, r6
 8004c02:	463a      	mov	r2, r7
 8004c04:	4628      	mov	r0, r5
 8004c06:	6a21      	ldr	r1, [r4, #32]
 8004c08:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004c0c:	47e0      	blx	ip
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	dc07      	bgt.n	8004c22 <__sflush_r+0xf6>
 8004c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1e:	81a3      	strh	r3, [r4, #12]
 8004c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c22:	4407      	add	r7, r0
 8004c24:	1a36      	subs	r6, r6, r0
 8004c26:	e7e9      	b.n	8004bfc <__sflush_r+0xd0>
 8004c28:	dfbffffe 	.word	0xdfbffffe

08004c2c <_fflush_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	690b      	ldr	r3, [r1, #16]
 8004c30:	4605      	mov	r5, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	b913      	cbnz	r3, 8004c3c <_fflush_r+0x10>
 8004c36:	2500      	movs	r5, #0
 8004c38:	4628      	mov	r0, r5
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	b118      	cbz	r0, 8004c46 <_fflush_r+0x1a>
 8004c3e:	6a03      	ldr	r3, [r0, #32]
 8004c40:	b90b      	cbnz	r3, 8004c46 <_fflush_r+0x1a>
 8004c42:	f7ff fa07 	bl	8004054 <__sinit>
 8004c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f3      	beq.n	8004c36 <_fflush_r+0xa>
 8004c4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c50:	07d0      	lsls	r0, r2, #31
 8004c52:	d404      	bmi.n	8004c5e <_fflush_r+0x32>
 8004c54:	0599      	lsls	r1, r3, #22
 8004c56:	d402      	bmi.n	8004c5e <_fflush_r+0x32>
 8004c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c5a:	f7ff fc24 	bl	80044a6 <__retarget_lock_acquire_recursive>
 8004c5e:	4628      	mov	r0, r5
 8004c60:	4621      	mov	r1, r4
 8004c62:	f7ff ff63 	bl	8004b2c <__sflush_r>
 8004c66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c68:	4605      	mov	r5, r0
 8004c6a:	07da      	lsls	r2, r3, #31
 8004c6c:	d4e4      	bmi.n	8004c38 <_fflush_r+0xc>
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	059b      	lsls	r3, r3, #22
 8004c72:	d4e1      	bmi.n	8004c38 <_fflush_r+0xc>
 8004c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c76:	f7ff fc17 	bl	80044a8 <__retarget_lock_release_recursive>
 8004c7a:	e7dd      	b.n	8004c38 <_fflush_r+0xc>

08004c7c <__swhatbuf_r>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	460c      	mov	r4, r1
 8004c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c84:	4615      	mov	r5, r2
 8004c86:	2900      	cmp	r1, #0
 8004c88:	461e      	mov	r6, r3
 8004c8a:	b096      	sub	sp, #88	@ 0x58
 8004c8c:	da0c      	bge.n	8004ca8 <__swhatbuf_r+0x2c>
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	2100      	movs	r1, #0
 8004c92:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c96:	bf14      	ite	ne
 8004c98:	2340      	movne	r3, #64	@ 0x40
 8004c9a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	6031      	str	r1, [r6, #0]
 8004ca2:	602b      	str	r3, [r5, #0]
 8004ca4:	b016      	add	sp, #88	@ 0x58
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	466a      	mov	r2, sp
 8004caa:	f000 f863 	bl	8004d74 <_fstat_r>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	dbed      	blt.n	8004c8e <__swhatbuf_r+0x12>
 8004cb2:	9901      	ldr	r1, [sp, #4]
 8004cb4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004cb8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004cbc:	4259      	negs	r1, r3
 8004cbe:	4159      	adcs	r1, r3
 8004cc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cc4:	e7eb      	b.n	8004c9e <__swhatbuf_r+0x22>

08004cc6 <__smakebuf_r>:
 8004cc6:	898b      	ldrh	r3, [r1, #12]
 8004cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cca:	079d      	lsls	r5, r3, #30
 8004ccc:	4606      	mov	r6, r0
 8004cce:	460c      	mov	r4, r1
 8004cd0:	d507      	bpl.n	8004ce2 <__smakebuf_r+0x1c>
 8004cd2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	6123      	str	r3, [r4, #16]
 8004cda:	2301      	movs	r3, #1
 8004cdc:	6163      	str	r3, [r4, #20]
 8004cde:	b003      	add	sp, #12
 8004ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ce2:	466a      	mov	r2, sp
 8004ce4:	ab01      	add	r3, sp, #4
 8004ce6:	f7ff ffc9 	bl	8004c7c <__swhatbuf_r>
 8004cea:	9f00      	ldr	r7, [sp, #0]
 8004cec:	4605      	mov	r5, r0
 8004cee:	4639      	mov	r1, r7
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f7ff f897 	bl	8003e24 <_malloc_r>
 8004cf6:	b948      	cbnz	r0, 8004d0c <__smakebuf_r+0x46>
 8004cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cfc:	059a      	lsls	r2, r3, #22
 8004cfe:	d4ee      	bmi.n	8004cde <__smakebuf_r+0x18>
 8004d00:	f023 0303 	bic.w	r3, r3, #3
 8004d04:	f043 0302 	orr.w	r3, r3, #2
 8004d08:	81a3      	strh	r3, [r4, #12]
 8004d0a:	e7e2      	b.n	8004cd2 <__smakebuf_r+0xc>
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d16:	81a3      	strh	r3, [r4, #12]
 8004d18:	9b01      	ldr	r3, [sp, #4]
 8004d1a:	6020      	str	r0, [r4, #0]
 8004d1c:	b15b      	cbz	r3, 8004d36 <__smakebuf_r+0x70>
 8004d1e:	4630      	mov	r0, r6
 8004d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d24:	f000 f838 	bl	8004d98 <_isatty_r>
 8004d28:	b128      	cbz	r0, 8004d36 <__smakebuf_r+0x70>
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	f023 0303 	bic.w	r3, r3, #3
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	81a3      	strh	r3, [r4, #12]
 8004d36:	89a3      	ldrh	r3, [r4, #12]
 8004d38:	431d      	orrs	r5, r3
 8004d3a:	81a5      	strh	r5, [r4, #12]
 8004d3c:	e7cf      	b.n	8004cde <__smakebuf_r+0x18>

08004d3e <memmove>:
 8004d3e:	4288      	cmp	r0, r1
 8004d40:	b510      	push	{r4, lr}
 8004d42:	eb01 0402 	add.w	r4, r1, r2
 8004d46:	d902      	bls.n	8004d4e <memmove+0x10>
 8004d48:	4284      	cmp	r4, r0
 8004d4a:	4623      	mov	r3, r4
 8004d4c:	d807      	bhi.n	8004d5e <memmove+0x20>
 8004d4e:	1e43      	subs	r3, r0, #1
 8004d50:	42a1      	cmp	r1, r4
 8004d52:	d008      	beq.n	8004d66 <memmove+0x28>
 8004d54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d5c:	e7f8      	b.n	8004d50 <memmove+0x12>
 8004d5e:	4601      	mov	r1, r0
 8004d60:	4402      	add	r2, r0
 8004d62:	428a      	cmp	r2, r1
 8004d64:	d100      	bne.n	8004d68 <memmove+0x2a>
 8004d66:	bd10      	pop	{r4, pc}
 8004d68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d6c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d70:	e7f7      	b.n	8004d62 <memmove+0x24>
	...

08004d74 <_fstat_r>:
 8004d74:	b538      	push	{r3, r4, r5, lr}
 8004d76:	2300      	movs	r3, #0
 8004d78:	4d06      	ldr	r5, [pc, #24]	@ (8004d94 <_fstat_r+0x20>)
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	4608      	mov	r0, r1
 8004d7e:	4611      	mov	r1, r2
 8004d80:	602b      	str	r3, [r5, #0]
 8004d82:	f7fc f821 	bl	8000dc8 <_fstat>
 8004d86:	1c43      	adds	r3, r0, #1
 8004d88:	d102      	bne.n	8004d90 <_fstat_r+0x1c>
 8004d8a:	682b      	ldr	r3, [r5, #0]
 8004d8c:	b103      	cbz	r3, 8004d90 <_fstat_r+0x1c>
 8004d8e:	6023      	str	r3, [r4, #0]
 8004d90:	bd38      	pop	{r3, r4, r5, pc}
 8004d92:	bf00      	nop
 8004d94:	200002d4 	.word	0x200002d4

08004d98 <_isatty_r>:
 8004d98:	b538      	push	{r3, r4, r5, lr}
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	4d05      	ldr	r5, [pc, #20]	@ (8004db4 <_isatty_r+0x1c>)
 8004d9e:	4604      	mov	r4, r0
 8004da0:	4608      	mov	r0, r1
 8004da2:	602b      	str	r3, [r5, #0]
 8004da4:	f7fc f81f 	bl	8000de6 <_isatty>
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	d102      	bne.n	8004db2 <_isatty_r+0x1a>
 8004dac:	682b      	ldr	r3, [r5, #0]
 8004dae:	b103      	cbz	r3, 8004db2 <_isatty_r+0x1a>
 8004db0:	6023      	str	r3, [r4, #0]
 8004db2:	bd38      	pop	{r3, r4, r5, pc}
 8004db4:	200002d4 	.word	0x200002d4

08004db8 <memchr>:
 8004db8:	4603      	mov	r3, r0
 8004dba:	b510      	push	{r4, lr}
 8004dbc:	b2c9      	uxtb	r1, r1
 8004dbe:	4402      	add	r2, r0
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	d101      	bne.n	8004dca <memchr+0x12>
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	e003      	b.n	8004dd2 <memchr+0x1a>
 8004dca:	7804      	ldrb	r4, [r0, #0]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	428c      	cmp	r4, r1
 8004dd0:	d1f6      	bne.n	8004dc0 <memchr+0x8>
 8004dd2:	bd10      	pop	{r4, pc}

08004dd4 <_realloc_r>:
 8004dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd8:	4680      	mov	r8, r0
 8004dda:	4615      	mov	r5, r2
 8004ddc:	460c      	mov	r4, r1
 8004dde:	b921      	cbnz	r1, 8004dea <_realloc_r+0x16>
 8004de0:	4611      	mov	r1, r2
 8004de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004de6:	f7ff b81d 	b.w	8003e24 <_malloc_r>
 8004dea:	b92a      	cbnz	r2, 8004df8 <_realloc_r+0x24>
 8004dec:	f7ff fb6c 	bl	80044c8 <_free_r>
 8004df0:	2400      	movs	r4, #0
 8004df2:	4620      	mov	r0, r4
 8004df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004df8:	f000 f81a 	bl	8004e30 <_malloc_usable_size_r>
 8004dfc:	4285      	cmp	r5, r0
 8004dfe:	4606      	mov	r6, r0
 8004e00:	d802      	bhi.n	8004e08 <_realloc_r+0x34>
 8004e02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004e06:	d8f4      	bhi.n	8004df2 <_realloc_r+0x1e>
 8004e08:	4629      	mov	r1, r5
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	f7ff f80a 	bl	8003e24 <_malloc_r>
 8004e10:	4607      	mov	r7, r0
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d0ec      	beq.n	8004df0 <_realloc_r+0x1c>
 8004e16:	42b5      	cmp	r5, r6
 8004e18:	462a      	mov	r2, r5
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	bf28      	it	cs
 8004e1e:	4632      	movcs	r2, r6
 8004e20:	f7ff fb43 	bl	80044aa <memcpy>
 8004e24:	4621      	mov	r1, r4
 8004e26:	4640      	mov	r0, r8
 8004e28:	f7ff fb4e 	bl	80044c8 <_free_r>
 8004e2c:	463c      	mov	r4, r7
 8004e2e:	e7e0      	b.n	8004df2 <_realloc_r+0x1e>

08004e30 <_malloc_usable_size_r>:
 8004e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e34:	1f18      	subs	r0, r3, #4
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bfbc      	itt	lt
 8004e3a:	580b      	ldrlt	r3, [r1, r0]
 8004e3c:	18c0      	addlt	r0, r0, r3
 8004e3e:	4770      	bx	lr

08004e40 <_init>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	bf00      	nop
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr

08004e4c <_fini>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr
