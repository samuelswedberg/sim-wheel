
stm-pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e7c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08002f88  08002f88  00003f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003078  08003078  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003078  08003078  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003078  08003078  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003078  08003078  00004078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800307c  0800307c  0000407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003080  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000068  080030e8  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  080030e8  00005204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000530f  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015be  00000000  00000000  0000a3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  0000b960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000465  00000000  00000000  0000bf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017933  00000000  00000000  0000c3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006ce2  00000000  00000000  00023d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083edf  00000000  00000000  0002a9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae8c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec0  00000000  00000000  000ae90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000b07cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f70 	.word	0x08002f70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002f70 	.word	0x08002f70

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb4c 	bl	80007ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f822 	bl	800019c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8b4 	bl	80002c4 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f85e 	bl	800021c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000160:	480c      	ldr	r0, [pc, #48]	@ (8000194 <main+0x48>)
 8000162:	f000 fd8d 	bl	8000c80 <HAL_CAN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 8000166:	2201      	movs	r2, #1
 8000168:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800016c:	480a      	ldr	r0, [pc, #40]	@ (8000198 <main+0x4c>)
 800016e:	f001 fb63 	bl	8001838 <HAL_GPIO_WritePin>
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 8000172:	2200      	movs	r2, #0
 8000174:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000178:	4807      	ldr	r0, [pc, #28]	@ (8000198 <main+0x4c>)
 800017a:	f001 fb5d 	bl	8001838 <HAL_GPIO_WritePin>
	 CAN_Transmit();
 800017e:	f000 f8ed 	bl	800035c <CAN_Transmit>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 8000182:	2201      	movs	r2, #1
 8000184:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <main+0x4c>)
 800018a:	f001 fb55 	bl	8001838 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 800018e:	bf00      	nop
 8000190:	e7ef      	b.n	8000172 <main+0x26>
 8000192:	bf00      	nop
 8000194:	20000084 	.word	0x20000084
 8000198:	40011000 	.word	0x40011000

0800019c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b090      	sub	sp, #64	@ 0x40
 80001a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a2:	f107 0318 	add.w	r3, r7, #24
 80001a6:	2228      	movs	r2, #40	@ 0x28
 80001a8:	2100      	movs	r1, #0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f002 f944 	bl	8002438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]
 80001bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001be:	2302      	movs	r3, #2
 80001c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c2:	2301      	movs	r3, #1
 80001c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c6:	2310      	movs	r3, #16
 80001c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ca:	2302      	movs	r3, #2
 80001cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ce:	2300      	movs	r3, #0
 80001d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d8:	f107 0318 	add.w	r3, r7, #24
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fb43 	bl	8001868 <HAL_RCC_OscConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001e8:	f000 f93c 	bl	8000464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ec:	230f      	movs	r3, #15
 80001ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f0:	2302      	movs	r3, #2
 80001f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2101      	movs	r1, #1
 8000204:	4618      	mov	r0, r3
 8000206:	f001 fdb1 	bl	8001d6c <HAL_RCC_ClockConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000210:	f000 f928 	bl	8000464 <Error_Handler>
  }
}
 8000214:	bf00      	nop
 8000216:	3740      	adds	r7, #64	@ 0x40
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b08a      	sub	sp, #40	@ 0x28
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000222:	4b26      	ldr	r3, [pc, #152]	@ (80002bc <MX_CAN_Init+0xa0>)
 8000224:	4a26      	ldr	r2, [pc, #152]	@ (80002c0 <MX_CAN_Init+0xa4>)
 8000226:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000228:	4b24      	ldr	r3, [pc, #144]	@ (80002bc <MX_CAN_Init+0xa0>)
 800022a:	2203      	movs	r2, #3
 800022c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800022e:	4b23      	ldr	r3, [pc, #140]	@ (80002bc <MX_CAN_Init+0xa0>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000234:	4b21      	ldr	r3, [pc, #132]	@ (80002bc <MX_CAN_Init+0xa0>)
 8000236:	2200      	movs	r2, #0
 8000238:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 800023a:	4b20      	ldr	r3, [pc, #128]	@ (80002bc <MX_CAN_Init+0xa0>)
 800023c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000240:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000242:	4b1e      	ldr	r3, [pc, #120]	@ (80002bc <MX_CAN_Init+0xa0>)
 8000244:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000248:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800024a:	4b1c      	ldr	r3, [pc, #112]	@ (80002bc <MX_CAN_Init+0xa0>)
 800024c:	2200      	movs	r2, #0
 800024e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000250:	4b1a      	ldr	r3, [pc, #104]	@ (80002bc <MX_CAN_Init+0xa0>)
 8000252:	2200      	movs	r2, #0
 8000254:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000256:	4b19      	ldr	r3, [pc, #100]	@ (80002bc <MX_CAN_Init+0xa0>)
 8000258:	2200      	movs	r2, #0
 800025a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800025c:	4b17      	ldr	r3, [pc, #92]	@ (80002bc <MX_CAN_Init+0xa0>)
 800025e:	2200      	movs	r2, #0
 8000260:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000262:	4b16      	ldr	r3, [pc, #88]	@ (80002bc <MX_CAN_Init+0xa0>)
 8000264:	2200      	movs	r2, #0
 8000266:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000268:	4b14      	ldr	r3, [pc, #80]	@ (80002bc <MX_CAN_Init+0xa0>)
 800026a:	2200      	movs	r2, #0
 800026c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800026e:	4813      	ldr	r0, [pc, #76]	@ (80002bc <MX_CAN_Init+0xa0>)
 8000270:	f000 fb42 	bl	80008f8 <HAL_CAN_Init>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800027a:	f000 f8f3 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;                  // Use filter bank 0 (adjust if needed)
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Mask mode
 8000282:	2300      	movs	r3, #0
 8000284:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // 32-bit scale
 8000286:	2301      	movs	r3, #1
 8000288:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0xFFFF;           // Invalid ID
 800028a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800028e:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0xFFFF;            // Invalid ID
 8000290:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000294:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0xFFFF;       // Mask blocks all
 8000296:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800029a:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0xFFFF;        // Mask blocks all
 800029c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80002a0:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1; // Assign to FIFO0 (or FIFO1 if used)
 80002a2:	2301      	movs	r3, #1
 80002a4:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;       // Activate the filter
 80002a6:	2301      	movs	r3, #1
 80002a8:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80002aa:	463b      	mov	r3, r7
 80002ac:	4619      	mov	r1, r3
 80002ae:	4803      	ldr	r0, [pc, #12]	@ (80002bc <MX_CAN_Init+0xa0>)
 80002b0:	f000 fc1d 	bl	8000aee <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 80002b4:	bf00      	nop
 80002b6:	3728      	adds	r7, #40	@ 0x28
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000084 	.word	0x20000084
 80002c0:	40006400 	.word	0x40006400

080002c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b088      	sub	sp, #32
 80002c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	f107 0310 	add.w	r3, r7, #16
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000354 <MX_GPIO_Init+0x90>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000354 <MX_GPIO_Init+0x90>)
 80002de:	f043 0310 	orr.w	r3, r3, #16
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000354 <MX_GPIO_Init+0x90>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0310 	and.w	r3, r3, #16
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f0:	4b18      	ldr	r3, [pc, #96]	@ (8000354 <MX_GPIO_Init+0x90>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a17      	ldr	r2, [pc, #92]	@ (8000354 <MX_GPIO_Init+0x90>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b15      	ldr	r3, [pc, #84]	@ (8000354 <MX_GPIO_Init+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0320 	and.w	r3, r3, #32
 8000304:	60bb      	str	r3, [r7, #8]
 8000306:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	4b12      	ldr	r3, [pc, #72]	@ (8000354 <MX_GPIO_Init+0x90>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a11      	ldr	r2, [pc, #68]	@ (8000354 <MX_GPIO_Init+0x90>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b0f      	ldr	r3, [pc, #60]	@ (8000354 <MX_GPIO_Init+0x90>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0304 	and.w	r3, r3, #4
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000326:	480c      	ldr	r0, [pc, #48]	@ (8000358 <MX_GPIO_Init+0x94>)
 8000328:	f001 fa86 	bl	8001838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800032c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	2301      	movs	r3, #1
 8000334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033a:	2302      	movs	r3, #2
 800033c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	4619      	mov	r1, r3
 8000344:	4804      	ldr	r0, [pc, #16]	@ (8000358 <MX_GPIO_Init+0x94>)
 8000346:	f001 f8f3 	bl	8001530 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800034a:	bf00      	nop
 800034c:	3720      	adds	r7, #32
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000
 8000358:	40011000 	.word	0x40011000

0800035c <CAN_Transmit>:
//	}
//
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
//}

void CAN_Transmit() {
 800035c:	b580      	push	{r7, lr}
 800035e:	b092      	sub	sp, #72	@ 0x48
 8000360:	af00      	add	r7, sp, #0
	uint32_t currentTime = HAL_GetTick();
 8000362:	f000 fa9b 	bl	800089c <HAL_GetTick>
 8000366:	6438      	str	r0, [r7, #64]	@ 0x40

	if(currentTime - lastSendTime >= 20) {
 8000368:	4b38      	ldr	r3, [pc, #224]	@ (800044c <CAN_Transmit+0xf0>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800036e:	1ad3      	subs	r3, r2, r3
 8000370:	2b13      	cmp	r3, #19
 8000372:	d967      	bls.n	8000444 <CAN_Transmit+0xe8>
		CAN_TxHeaderTypeDef TxHeader;
		uint32_t TxMailbox;

		// Create a telemetry_packet instance and initialize its fields
		pedal_data_t dataToSend;
		dataToSend.encoder_1 = 1234;         // Example: Encoder 1 value
 8000374:	f240 43d2 	movw	r3, #1234	@ 0x4d2
 8000378:	813b      	strh	r3, [r7, #8]
		dataToSend.encoder_2 = -2234;        // Example: Encoder 2 value
 800037a:	f24f 7346 	movw	r3, #63302	@ 0xf746
 800037e:	817b      	strh	r3, [r7, #10]
		dataToSend.encoder_3 = 5234;         // Example: Encoder 3 value
 8000380:	f241 4372 	movw	r3, #5234	@ 0x1472
 8000384:	81bb      	strh	r3, [r7, #12]

		uint8_t* rawData = (uint8_t*)&dataToSend;
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	63fb      	str	r3, [r7, #60]	@ 0x3c

		// Initialize CAN Header
		TxHeader.StdId = 0x102;           // CAN ID for the message
 800038c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000390:	617b      	str	r3, [r7, #20]
		TxHeader.ExtId = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	61bb      	str	r3, [r7, #24]
		TxHeader.IDE = CAN_ID_STD;        // Use Standard ID
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
		TxHeader.RTR = CAN_RTR_DATA;      // Data frame
 800039a:	2300      	movs	r3, #0
 800039c:	623b      	str	r3, [r7, #32]
		TxHeader.DLC = 8;                 // Maximum data length for each CAN frame
 800039e:	2308      	movs	r3, #8
 80003a0:	627b      	str	r3, [r7, #36]	@ 0x24

		uint8_t frameData[8];             // Temporary buffer for each CAN frame

		// Calculate the size of the telemetry_packet struct
		int totalSize = sizeof(pedal_data_t);
 80003a2:	2306      	movs	r3, #6
 80003a4:	63bb      	str	r3, [r7, #56]	@ 0x38

		// Split the telemetry_packet into CAN frames
		for (int i = 0; i < totalSize; i += 8) {
 80003a6:	2300      	movs	r3, #0
 80003a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80003aa:	e047      	b.n	800043c <CAN_Transmit+0xe0>
			// Calculate the size of the current chunk (for the last frame)
			int chunkSize = (totalSize - i >= 8) ? 8 : (totalSize - i);
 80003ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80003ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003b0:	1ad3      	subs	r3, r2, r3
 80003b2:	2b08      	cmp	r3, #8
 80003b4:	bfa8      	it	ge
 80003b6:	2308      	movge	r3, #8
 80003b8:	637b      	str	r3, [r7, #52]	@ 0x34

			// Copy the next chunk of data into the frame buffer
			memcpy(frameData, &rawData[i], chunkSize);
 80003ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80003be:	18d1      	adds	r1, r2, r3
 80003c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80003c2:	463b      	mov	r3, r7
 80003c4:	4618      	mov	r0, r3
 80003c6:	f002 f8b2 	bl	800252e <memcpy>

			// Adjust DLC for the last frame
			TxHeader.DLC = chunkSize;
 80003ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80003cc:	627b      	str	r3, [r7, #36]	@ 0x24

			HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, frameData, &TxMailbox);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	463a      	mov	r2, r7
 80003d4:	f107 0114 	add.w	r1, r7, #20
 80003d8:	481d      	ldr	r0, [pc, #116]	@ (8000450 <CAN_Transmit+0xf4>)
 80003da:	f000 fc95 	bl	8000d08 <HAL_CAN_AddTxMessage>
 80003de:	4603      	mov	r3, r0
 80003e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			if (status != HAL_OK) {
 80003e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d01e      	beq.n	800042a <CAN_Transmit+0xce>
				// Inspect the error
				if (status == HAL_ERROR) {
 80003ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d103      	bne.n	80003fc <CAN_Transmit+0xa0>
					printf("HAL_CAN_AddTxMessage failed: HAL_ERROR\n");
 80003f4:	4817      	ldr	r0, [pc, #92]	@ (8000454 <CAN_Transmit+0xf8>)
 80003f6:	f001 ff3f 	bl	8002278 <puts>
 80003fa:	e00e      	b.n	800041a <CAN_Transmit+0xbe>
				} else if (status == HAL_BUSY) {
 80003fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000400:	2b02      	cmp	r3, #2
 8000402:	d103      	bne.n	800040c <CAN_Transmit+0xb0>
					printf("HAL_CAN_AddTxMessage failed: HAL_BUSY\n");
 8000404:	4814      	ldr	r0, [pc, #80]	@ (8000458 <CAN_Transmit+0xfc>)
 8000406:	f001 ff37 	bl	8002278 <puts>
 800040a:	e006      	b.n	800041a <CAN_Transmit+0xbe>
				} else if (status == HAL_TIMEOUT) {
 800040c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000410:	2b03      	cmp	r3, #3
 8000412:	d102      	bne.n	800041a <CAN_Transmit+0xbe>
					printf("HAL_CAN_AddTxMessage failed: HAL_TIMEOUT\n");
 8000414:	4811      	ldr	r0, [pc, #68]	@ (800045c <CAN_Transmit+0x100>)
 8000416:	f001 ff2f 	bl	8002278 <puts>
				}

				// Optionally log the state of CAN error counters
				uint32_t error = HAL_CAN_GetError(&hcan);
 800041a:	480d      	ldr	r0, [pc, #52]	@ (8000450 <CAN_Transmit+0xf4>)
 800041c:	f000 ff6f 	bl	80012fe <HAL_CAN_GetError>
 8000420:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("CAN Error Code: 0x%08lx\n", error); // Only if you decide to stop execution
 8000422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000424:	480e      	ldr	r0, [pc, #56]	@ (8000460 <CAN_Transmit+0x104>)
 8000426:	f001 febf 	bl	80021a8 <iprintf>
			}
			lastSendTime = currentTime;  // Update last transmission time
 800042a:	4a08      	ldr	r2, [pc, #32]	@ (800044c <CAN_Transmit+0xf0>)
 800042c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800042e:	6013      	str	r3, [r2, #0]
			HAL_Delay(1);
 8000430:	2001      	movs	r0, #1
 8000432:	f000 fa3d 	bl	80008b0 <HAL_Delay>
		for (int i = 0; i < totalSize; i += 8) {
 8000436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000438:	3308      	adds	r3, #8
 800043a:	647b      	str	r3, [r7, #68]	@ 0x44
 800043c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800043e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000440:	429a      	cmp	r2, r3
 8000442:	dbb3      	blt.n	80003ac <CAN_Transmit+0x50>
		}
	}
}
 8000444:	bf00      	nop
 8000446:	3748      	adds	r7, #72	@ 0x48
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	200000ac 	.word	0x200000ac
 8000450:	20000084 	.word	0x20000084
 8000454:	08002f88 	.word	0x08002f88
 8000458:	08002fb0 	.word	0x08002fb0
 800045c:	08002fd8 	.word	0x08002fd8
 8000460:	08003004 	.word	0x08003004

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <Error_Handler+0x8>

08000470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000476:	4b15      	ldr	r3, [pc, #84]	@ (80004cc <HAL_MspInit+0x5c>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	4a14      	ldr	r2, [pc, #80]	@ (80004cc <HAL_MspInit+0x5c>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6193      	str	r3, [r2, #24]
 8000482:	4b12      	ldr	r3, [pc, #72]	@ (80004cc <HAL_MspInit+0x5c>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048e:	4b0f      	ldr	r3, [pc, #60]	@ (80004cc <HAL_MspInit+0x5c>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a0e      	ldr	r2, [pc, #56]	@ (80004cc <HAL_MspInit+0x5c>)
 8000494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <HAL_MspInit+0x5c>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004a6:	4b0a      	ldr	r3, [pc, #40]	@ (80004d0 <HAL_MspInit+0x60>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	4a04      	ldr	r2, [pc, #16]	@ (80004d0 <HAL_MspInit+0x60>)
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c2:	bf00      	nop
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010000 	.word	0x40010000

080004d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a2c      	ldr	r2, [pc, #176]	@ (80005a0 <HAL_CAN_MspInit+0xcc>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d151      	bne.n	8000598 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004f4:	4b2b      	ldr	r3, [pc, #172]	@ (80005a4 <HAL_CAN_MspInit+0xd0>)
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	4a2a      	ldr	r2, [pc, #168]	@ (80005a4 <HAL_CAN_MspInit+0xd0>)
 80004fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004fe:	61d3      	str	r3, [r2, #28]
 8000500:	4b28      	ldr	r3, [pc, #160]	@ (80005a4 <HAL_CAN_MspInit+0xd0>)
 8000502:	69db      	ldr	r3, [r3, #28]
 8000504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b25      	ldr	r3, [pc, #148]	@ (80005a4 <HAL_CAN_MspInit+0xd0>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a24      	ldr	r2, [pc, #144]	@ (80005a4 <HAL_CAN_MspInit+0xd0>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b22      	ldr	r3, [pc, #136]	@ (80005a4 <HAL_CAN_MspInit+0xd0>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000524:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000528:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800052e:	2301      	movs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	4619      	mov	r1, r3
 8000538:	481b      	ldr	r0, [pc, #108]	@ (80005a8 <HAL_CAN_MspInit+0xd4>)
 800053a:	f000 fff9 	bl	8001530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800053e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000544:	2302      	movs	r3, #2
 8000546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000548:	2303      	movs	r3, #3
 800054a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	4815      	ldr	r0, [pc, #84]	@ (80005a8 <HAL_CAN_MspInit+0xd4>)
 8000554:	f000 ffec 	bl	8001530 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2100      	movs	r1, #0
 800055c:	2013      	movs	r0, #19
 800055e:	f000 ffb0 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000562:	2013      	movs	r0, #19
 8000564:	f000 ffc9 	bl	80014fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2100      	movs	r1, #0
 800056c:	2014      	movs	r0, #20
 800056e:	f000 ffa8 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000572:	2014      	movs	r0, #20
 8000574:	f000 ffc1 	bl	80014fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000578:	2200      	movs	r2, #0
 800057a:	2100      	movs	r1, #0
 800057c:	2015      	movs	r0, #21
 800057e:	f000 ffa0 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000582:	2015      	movs	r0, #21
 8000584:	f000 ffb9 	bl	80014fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2100      	movs	r1, #0
 800058c:	2016      	movs	r0, #22
 800058e:	f000 ff98 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000592:	2016      	movs	r0, #22
 8000594:	f000 ffb1 	bl	80014fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000598:	bf00      	nop
 800059a:	3720      	adds	r7, #32
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40006400 	.word	0x40006400
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40010800 	.word	0x40010800

080005ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <NMI_Handler+0x4>

080005b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <MemManage_Handler+0x4>

080005c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <BusFault_Handler+0x4>

080005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <UsageFault_Handler+0x4>

080005d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fc:	f000 f93c 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000608:	4802      	ldr	r0, [pc, #8]	@ (8000614 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800060a:	f000 fc4c 	bl	8000ea6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000084 	.word	0x20000084

08000618 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800061c:	4802      	ldr	r0, [pc, #8]	@ (8000628 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800061e:	f000 fc42 	bl	8000ea6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000084 	.word	0x20000084

0800062c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000630:	4802      	ldr	r0, [pc, #8]	@ (800063c <CAN1_RX1_IRQHandler+0x10>)
 8000632:	f000 fc38 	bl	8000ea6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000084 	.word	0x20000084

08000640 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000644:	4802      	ldr	r0, [pc, #8]	@ (8000650 <CAN1_SCE_IRQHandler+0x10>)
 8000646:	f000 fc2e 	bl	8000ea6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000084 	.word	0x20000084

08000654 <_read>:
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	e00a      	b.n	800067c <_read+0x28>
 8000666:	f3af 8000 	nop.w
 800066a:	4601      	mov	r1, r0
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	1c5a      	adds	r2, r3, #1
 8000670:	60ba      	str	r2, [r7, #8]
 8000672:	b2ca      	uxtb	r2, r1
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	3301      	adds	r3, #1
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	429a      	cmp	r2, r3
 8000682:	dbf0      	blt.n	8000666 <_read+0x12>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4618      	mov	r0, r3
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_write>:
 800068e:	b580      	push	{r7, lr}
 8000690:	b086      	sub	sp, #24
 8000692:	af00      	add	r7, sp, #0
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	607a      	str	r2, [r7, #4]
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	e009      	b.n	80006b4 <_write+0x26>
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	60ba      	str	r2, [r7, #8]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f3af 8000 	nop.w
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	3301      	adds	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697a      	ldr	r2, [r7, #20]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbf1      	blt.n	80006a0 <_write+0x12>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4618      	mov	r0, r3
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <_close>:
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	4618      	mov	r0, r3
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <_fstat>:
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	2300      	movs	r3, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <_isatty>:
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	2301      	movs	r3, #1
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <_lseek>:
 800070e:	b480      	push	{r7}
 8000710:	b085      	sub	sp, #20
 8000712:	af00      	add	r7, sp, #0
 8000714:	60f8      	str	r0, [r7, #12]
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607a      	str	r2, [r7, #4]
 800071a:	2300      	movs	r3, #0
 800071c:	4618      	mov	r0, r3
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
	...

08000728 <_sbrk>:
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	4a14      	ldr	r2, [pc, #80]	@ (8000784 <_sbrk+0x5c>)
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <_sbrk+0x60>)
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <_sbrk+0x64>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <_sbrk+0x22>
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <_sbrk+0x64>)
 8000746:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <_sbrk+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <_sbrk+0x64>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	693a      	ldr	r2, [r7, #16]
 8000754:	429a      	cmp	r2, r3
 8000756:	d207      	bcs.n	8000768 <_sbrk+0x40>
 8000758:	f001 febc 	bl	80024d4 <__errno>
 800075c:	4603      	mov	r3, r0
 800075e:	220c      	movs	r2, #12
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	e009      	b.n	800077c <_sbrk+0x54>
 8000768:	4b08      	ldr	r3, [pc, #32]	@ (800078c <_sbrk+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b07      	ldr	r3, [pc, #28]	@ (800078c <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	4a05      	ldr	r2, [pc, #20]	@ (800078c <_sbrk+0x64>)
 8000778:	6013      	str	r3, [r2, #0]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4618      	mov	r0, r3
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20005000 	.word	0x20005000
 8000788:	00000400 	.word	0x00000400
 800078c:	200000b0 	.word	0x200000b0
 8000790:	20000208 	.word	0x20000208

08000794 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <Reset_Handler>:
 80007a0:	f7ff fff8 	bl	8000794 <SystemInit>
 80007a4:	480b      	ldr	r0, [pc, #44]	@ (80007d4 <LoopFillZerobss+0xe>)
 80007a6:	490c      	ldr	r1, [pc, #48]	@ (80007d8 <LoopFillZerobss+0x12>)
 80007a8:	4a0c      	ldr	r2, [pc, #48]	@ (80007dc <LoopFillZerobss+0x16>)
 80007aa:	2300      	movs	r3, #0
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:
 80007ae:	58d4      	ldr	r4, [r2, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:
 80007b4:	18c4      	adds	r4, r0, r3
 80007b6:	428c      	cmp	r4, r1
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
 80007ba:	4a09      	ldr	r2, [pc, #36]	@ (80007e0 <LoopFillZerobss+0x1a>)
 80007bc:	4c09      	ldr	r4, [pc, #36]	@ (80007e4 <LoopFillZerobss+0x1e>)
 80007be:	2300      	movs	r3, #0
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:
 80007c6:	42a2      	cmp	r2, r4
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>
 80007ca:	f001 fe89 	bl	80024e0 <__libc_init_array>
 80007ce:	f7ff fcbd 	bl	800014c <main>
 80007d2:	4770      	bx	lr
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000068 	.word	0x20000068
 80007dc:	08003080 	.word	0x08003080
 80007e0:	20000068 	.word	0x20000068
 80007e4:	20000204 	.word	0x20000204

080007e8 <ADC1_2_IRQHandler>:
 80007e8:	e7fe      	b.n	80007e8 <ADC1_2_IRQHandler>
	...

080007ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <HAL_Init+0x28>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	@ (8000814 <HAL_Init+0x28>)
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 fe55 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000802:	200f      	movs	r0, #15
 8000804:	f000 f808 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff fe32 	bl	8000470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40022000 	.word	0x40022000

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fe6d 	bl	8001516 <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f000 fe35 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	@ (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000000 	.word	0x20000000
 8000870:	20000008 	.word	0x20000008
 8000874:	20000004 	.word	0x20000004

08000878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <HAL_IncTick+0x1c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <HAL_IncTick+0x20>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a03      	ldr	r2, [pc, #12]	@ (8000898 <HAL_IncTick+0x20>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	20000008 	.word	0x20000008
 8000898:	200000b4 	.word	0x200000b4

0800089c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return uwTick;
 80008a0:	4b02      	ldr	r3, [pc, #8]	@ (80008ac <HAL_GetTick+0x10>)
 80008a2:	681b      	ldr	r3, [r3, #0]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	200000b4 	.word	0x200000b4

080008b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b8:	f7ff fff0 	bl	800089c <HAL_GetTick>
 80008bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c8:	d005      	beq.n	80008d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <HAL_Delay+0x44>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4413      	add	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008d6:	bf00      	nop
 80008d8:	f7ff ffe0 	bl	800089c <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f7      	bhi.n	80008d8 <HAL_Delay+0x28>
  {
  }
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000008 	.word	0x20000008

080008f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d101      	bne.n	800090a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e0ed      	b.n	8000ae6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d102      	bne.n	800091c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fddc 	bl	80004d4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f042 0201 	orr.w	r2, r2, #1
 800092a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800092c:	f7ff ffb6 	bl	800089c <HAL_GetTick>
 8000930:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000932:	e012      	b.n	800095a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000934:	f7ff ffb2 	bl	800089c <HAL_GetTick>
 8000938:	4602      	mov	r2, r0
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	2b0a      	cmp	r3, #10
 8000940:	d90b      	bls.n	800095a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000946:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2205      	movs	r2, #5
 8000952:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e0c5      	b.n	8000ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d0e5      	beq.n	8000934 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f022 0202 	bic.w	r2, r2, #2
 8000976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000978:	f7ff ff90 	bl	800089c <HAL_GetTick>
 800097c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800097e:	e012      	b.n	80009a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000980:	f7ff ff8c 	bl	800089c <HAL_GetTick>
 8000984:	4602      	mov	r2, r0
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	2b0a      	cmp	r3, #10
 800098c:	d90b      	bls.n	80009a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000992:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2205      	movs	r2, #5
 800099e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e09f      	b.n	8000ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f003 0302 	and.w	r3, r3, #2
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1e5      	bne.n	8000980 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	7e1b      	ldrb	r3, [r3, #24]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d108      	bne.n	80009ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	e007      	b.n	80009de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80009dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	7e5b      	ldrb	r3, [r3, #25]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d108      	bne.n	80009f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	e007      	b.n	8000a08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	7e9b      	ldrb	r3, [r3, #26]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d108      	bne.n	8000a22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f042 0220 	orr.w	r2, r2, #32
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	e007      	b.n	8000a32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f022 0220 	bic.w	r2, r2, #32
 8000a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	7edb      	ldrb	r3, [r3, #27]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d108      	bne.n	8000a4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f022 0210 	bic.w	r2, r2, #16
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	e007      	b.n	8000a5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f042 0210 	orr.w	r2, r2, #16
 8000a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	7f1b      	ldrb	r3, [r3, #28]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d108      	bne.n	8000a76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f042 0208 	orr.w	r2, r2, #8
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	e007      	b.n	8000a86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f022 0208 	bic.w	r2, r2, #8
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	7f5b      	ldrb	r3, [r3, #29]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d108      	bne.n	8000aa0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f042 0204 	orr.w	r2, r2, #4
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	e007      	b.n	8000ab0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f022 0204 	bic.w	r2, r2, #4
 8000aae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	ea42 0103 	orr.w	r1, r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	1e5a      	subs	r2, r3, #1
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b087      	sub	sp, #28
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b04:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b06:	7cfb      	ldrb	r3, [r7, #19]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d003      	beq.n	8000b14 <HAL_CAN_ConfigFilter+0x26>
 8000b0c:	7cfb      	ldrb	r3, [r7, #19]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	f040 80aa 	bne.w	8000c68 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b1a:	f043 0201 	orr.w	r2, r3, #1
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	f003 031f 	and.w	r3, r3, #31
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d123      	bne.n	8000b96 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	43db      	mvns	r3, r3
 8000b58:	401a      	ands	r2, r3
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3248      	adds	r2, #72	@ 0x48
 8000b76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b8c:	6979      	ldr	r1, [r7, #20]
 8000b8e:	3348      	adds	r3, #72	@ 0x48
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	440b      	add	r3, r1
 8000b94:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d122      	bne.n	8000be4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bbe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	3248      	adds	r2, #72	@ 0x48
 8000bc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bd8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bda:	6979      	ldr	r1, [r7, #20]
 8000bdc:	3348      	adds	r3, #72	@ 0x48
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	440b      	add	r3, r1
 8000be2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d109      	bne.n	8000c00 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000bfe:	e007      	b.n	8000c10 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	691b      	ldr	r3, [r3, #16]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d109      	bne.n	8000c2c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000c2a:	e007      	b.n	8000c3c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	431a      	orrs	r2, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d107      	bne.n	8000c54 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c5a:	f023 0201 	bic.w	r2, r3, #1
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	e006      	b.n	8000c76 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c6c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
  }
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	371c      	adds	r7, #28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d12e      	bne.n	8000cf2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2202      	movs	r2, #2
 8000c98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f022 0201 	bic.w	r2, r2, #1
 8000caa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000cac:	f7ff fdf6 	bl	800089c <HAL_GetTick>
 8000cb0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cb2:	e012      	b.n	8000cda <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cb4:	f7ff fdf2 	bl	800089c <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b0a      	cmp	r3, #10
 8000cc0:	d90b      	bls.n	8000cda <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2205      	movs	r2, #5
 8000cd2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e012      	b.n	8000d00 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1e5      	bne.n	8000cb4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e006      	b.n	8000d00 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
  }
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d1c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d26:	7ffb      	ldrb	r3, [r7, #31]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d003      	beq.n	8000d34 <HAL_CAN_AddTxMessage+0x2c>
 8000d2c:	7ffb      	ldrb	r3, [r7, #31]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	f040 80ad 	bne.w	8000e8e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10a      	bne.n	8000d54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d105      	bne.n	8000d54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 8095 	beq.w	8000e7e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	0e1b      	lsrs	r3, r3, #24
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d5e:	2201      	movs	r2, #1
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10d      	bne.n	8000d8c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d7a:	68f9      	ldr	r1, [r7, #12]
 8000d7c:	6809      	ldr	r1, [r1, #0]
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3318      	adds	r3, #24
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	440b      	add	r3, r1
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	e00f      	b.n	8000dac <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d96:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d9c:	68f9      	ldr	r1, [r7, #12]
 8000d9e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000da0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3318      	adds	r3, #24
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	440b      	add	r3, r1
 8000daa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	6819      	ldr	r1, [r3, #0]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	691a      	ldr	r2, [r3, #16]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	3318      	adds	r3, #24
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	440b      	add	r3, r1
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	7d1b      	ldrb	r3, [r3, #20]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d111      	bne.n	8000dec <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	3318      	adds	r3, #24
 8000dd0:	011b      	lsls	r3, r3, #4
 8000dd2:	4413      	add	r3, r2
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	6811      	ldr	r1, [r2, #0]
 8000ddc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	3318      	adds	r3, #24
 8000de4:	011b      	lsls	r3, r3, #4
 8000de6:	440b      	add	r3, r1
 8000de8:	3304      	adds	r3, #4
 8000dea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3307      	adds	r3, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	061a      	lsls	r2, r3, #24
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3306      	adds	r3, #6
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	041b      	lsls	r3, r3, #16
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3305      	adds	r3, #5
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	4313      	orrs	r3, r2
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	3204      	adds	r2, #4
 8000e0c:	7812      	ldrb	r2, [r2, #0]
 8000e0e:	4610      	mov	r0, r2
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	6811      	ldr	r1, [r2, #0]
 8000e14:	ea43 0200 	orr.w	r2, r3, r0
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	440b      	add	r3, r1
 8000e1e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000e22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3303      	adds	r3, #3
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	061a      	lsls	r2, r3, #24
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3302      	adds	r3, #2
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	041b      	lsls	r3, r3, #16
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	7812      	ldrb	r2, [r2, #0]
 8000e44:	4610      	mov	r0, r2
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	6811      	ldr	r1, [r2, #0]
 8000e4a:	ea43 0200 	orr.w	r2, r3, r0
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	440b      	add	r3, r1
 8000e54:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e58:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3318      	adds	r3, #24
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	4413      	add	r3, r2
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	6811      	ldr	r1, [r2, #0]
 8000e6c:	f043 0201 	orr.w	r2, r3, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	3318      	adds	r3, #24
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	440b      	add	r3, r1
 8000e78:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e00e      	b.n	8000e9c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e006      	b.n	8000e9c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e92:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
  }
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3724      	adds	r7, #36	@ 0x24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr

08000ea6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b08a      	sub	sp, #40	@ 0x28
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ee2:	6a3b      	ldr	r3, [r7, #32]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d07c      	beq.n	8000fe6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d023      	beq.n	8000f3e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2201      	movs	r2, #1
 8000efc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f983 	bl	8001214 <HAL_CAN_TxMailbox0CompleteCallback>
 8000f0e:	e016      	b.n	8000f3e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d004      	beq.n	8000f24 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f22:	e00c      	b.n	8000f3e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d004      	beq.n	8000f38 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f36:	e002      	b.n	8000f3e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f986 	bl	800124a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d024      	beq.n	8000f92 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f962 	bl	8001226 <HAL_CAN_TxMailbox1CompleteCallback>
 8000f62:	e016      	b.n	8000f92 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d004      	beq.n	8000f78 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f76:	e00c      	b.n	8000f92 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d004      	beq.n	8000f8c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f8a:	e002      	b.n	8000f92 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 f965 	bl	800125c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d024      	beq.n	8000fe6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fa4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f941 	bl	8001238 <HAL_CAN_TxMailbox2CompleteCallback>
 8000fb6:	e016      	b.n	8000fe6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fca:	e00c      	b.n	8000fe6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d004      	beq.n	8000fe0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fde:	e002      	b.n	8000fe6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f944 	bl	800126e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00c      	beq.n	800100a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d007      	beq.n	800100a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2210      	movs	r2, #16
 8001008:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00b      	beq.n	800102c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2208      	movs	r2, #8
 8001024:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f933 	bl	8001292 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d009      	beq.n	800104a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f91b 	bl	8001280 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00c      	beq.n	800106e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	d007      	beq.n	800106e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800105e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001060:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2210      	movs	r2, #16
 800106c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	f003 0320 	and.w	r3, r3, #32
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00b      	beq.n	8001090 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2208      	movs	r2, #8
 8001088:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f913 	bl	80012b6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	2b00      	cmp	r3, #0
 8001098:	d009      	beq.n	80010ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f8fb 	bl	80012a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00b      	beq.n	80010d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d006      	beq.n	80010d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2210      	movs	r2, #16
 80010c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f8fc 	bl	80012c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80010d0:	6a3b      	ldr	r3, [r7, #32]
 80010d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00b      	beq.n	80010f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2208      	movs	r2, #8
 80010ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f8f4 	bl	80012da <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80010f2:	6a3b      	ldr	r3, [r7, #32]
 80010f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d07b      	beq.n	80011f4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	2b00      	cmp	r3, #0
 8001104:	d072      	beq.n	80011ec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d008      	beq.n	8001122 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001128:	2b00      	cmp	r3, #0
 800112a:	d008      	beq.n	800113e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001160:	2b00      	cmp	r3, #0
 8001162:	d043      	beq.n	80011ec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800116a:	2b00      	cmp	r3, #0
 800116c:	d03e      	beq.n	80011ec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001174:	2b60      	cmp	r3, #96	@ 0x60
 8001176:	d02b      	beq.n	80011d0 <HAL_CAN_IRQHandler+0x32a>
 8001178:	2b60      	cmp	r3, #96	@ 0x60
 800117a:	d82e      	bhi.n	80011da <HAL_CAN_IRQHandler+0x334>
 800117c:	2b50      	cmp	r3, #80	@ 0x50
 800117e:	d022      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x320>
 8001180:	2b50      	cmp	r3, #80	@ 0x50
 8001182:	d82a      	bhi.n	80011da <HAL_CAN_IRQHandler+0x334>
 8001184:	2b40      	cmp	r3, #64	@ 0x40
 8001186:	d019      	beq.n	80011bc <HAL_CAN_IRQHandler+0x316>
 8001188:	2b40      	cmp	r3, #64	@ 0x40
 800118a:	d826      	bhi.n	80011da <HAL_CAN_IRQHandler+0x334>
 800118c:	2b30      	cmp	r3, #48	@ 0x30
 800118e:	d010      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x30c>
 8001190:	2b30      	cmp	r3, #48	@ 0x30
 8001192:	d822      	bhi.n	80011da <HAL_CAN_IRQHandler+0x334>
 8001194:	2b10      	cmp	r3, #16
 8001196:	d002      	beq.n	800119e <HAL_CAN_IRQHandler+0x2f8>
 8001198:	2b20      	cmp	r3, #32
 800119a:	d005      	beq.n	80011a8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800119c:	e01d      	b.n	80011da <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011a6:	e019      	b.n	80011dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80011a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011aa:	f043 0310 	orr.w	r3, r3, #16
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011b0:	e014      	b.n	80011dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80011b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b4:	f043 0320 	orr.w	r3, r3, #32
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011ba:	e00f      	b.n	80011dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011c4:	e00a      	b.n	80011dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80011c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011ce:	e005      	b.n	80011dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80011d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011d8:	e000      	b.n	80011dc <HAL_CAN_IRQHandler+0x336>
            break;
 80011da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80011ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2204      	movs	r2, #4
 80011f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80011f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d008      	beq.n	800120c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f870 	bl	80012ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	@ 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4906      	ldr	r1, [pc, #24]	@ (80013ac <__NVIC_EnableIRQ+0x34>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db0a      	blt.n	80013da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	490c      	ldr	r1, [pc, #48]	@ (80013fc <__NVIC_SetPriority+0x4c>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d8:	e00a      	b.n	80013f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4908      	ldr	r1, [pc, #32]	@ (8001400 <__NVIC_SetPriority+0x50>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	3b04      	subs	r3, #4
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	440b      	add	r3, r1
 80013ee:	761a      	strb	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	@ 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f1c3 0307 	rsb	r3, r3, #7
 800141e:	2b04      	cmp	r3, #4
 8001420:	bf28      	it	cs
 8001422:	2304      	movcs	r3, #4
 8001424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3304      	adds	r3, #4
 800142a:	2b06      	cmp	r3, #6
 800142c:	d902      	bls.n	8001434 <NVIC_EncodePriority+0x30>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3b03      	subs	r3, #3
 8001432:	e000      	b.n	8001436 <NVIC_EncodePriority+0x32>
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144c:	f04f 31ff 	mov.w	r1, #4294967295
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	43d9      	mvns	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	4313      	orrs	r3, r2
         );
}
 800145e:	4618      	mov	r0, r3
 8001460:	3724      	adds	r7, #36	@ 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff90 	bl	80013b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff2d 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff42 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff90 	bl	8001404 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5f 	bl	80013b0 <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff35 	bl	8001378 <__NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffa2 	bl	8001468 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b08b      	sub	sp, #44	@ 0x2c
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001542:	e169      	b.n	8001818 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001544:	2201      	movs	r2, #1
 8001546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	429a      	cmp	r2, r3
 800155e:	f040 8158 	bne.w	8001812 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4a9a      	ldr	r2, [pc, #616]	@ (80017d0 <HAL_GPIO_Init+0x2a0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d05e      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 800156c:	4a98      	ldr	r2, [pc, #608]	@ (80017d0 <HAL_GPIO_Init+0x2a0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d875      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 8001572:	4a98      	ldr	r2, [pc, #608]	@ (80017d4 <HAL_GPIO_Init+0x2a4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d058      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001578:	4a96      	ldr	r2, [pc, #600]	@ (80017d4 <HAL_GPIO_Init+0x2a4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d86f      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 800157e:	4a96      	ldr	r2, [pc, #600]	@ (80017d8 <HAL_GPIO_Init+0x2a8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d052      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001584:	4a94      	ldr	r2, [pc, #592]	@ (80017d8 <HAL_GPIO_Init+0x2a8>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d869      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 800158a:	4a94      	ldr	r2, [pc, #592]	@ (80017dc <HAL_GPIO_Init+0x2ac>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d04c      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001590:	4a92      	ldr	r2, [pc, #584]	@ (80017dc <HAL_GPIO_Init+0x2ac>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d863      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 8001596:	4a92      	ldr	r2, [pc, #584]	@ (80017e0 <HAL_GPIO_Init+0x2b0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d046      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 800159c:	4a90      	ldr	r2, [pc, #576]	@ (80017e0 <HAL_GPIO_Init+0x2b0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d85d      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 80015a2:	2b12      	cmp	r3, #18
 80015a4:	d82a      	bhi.n	80015fc <HAL_GPIO_Init+0xcc>
 80015a6:	2b12      	cmp	r3, #18
 80015a8:	d859      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 80015aa:	a201      	add	r2, pc, #4	@ (adr r2, 80015b0 <HAL_GPIO_Init+0x80>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	0800162b 	.word	0x0800162b
 80015b4:	08001605 	.word	0x08001605
 80015b8:	08001617 	.word	0x08001617
 80015bc:	08001659 	.word	0x08001659
 80015c0:	0800165f 	.word	0x0800165f
 80015c4:	0800165f 	.word	0x0800165f
 80015c8:	0800165f 	.word	0x0800165f
 80015cc:	0800165f 	.word	0x0800165f
 80015d0:	0800165f 	.word	0x0800165f
 80015d4:	0800165f 	.word	0x0800165f
 80015d8:	0800165f 	.word	0x0800165f
 80015dc:	0800165f 	.word	0x0800165f
 80015e0:	0800165f 	.word	0x0800165f
 80015e4:	0800165f 	.word	0x0800165f
 80015e8:	0800165f 	.word	0x0800165f
 80015ec:	0800165f 	.word	0x0800165f
 80015f0:	0800165f 	.word	0x0800165f
 80015f4:	0800160d 	.word	0x0800160d
 80015f8:	08001621 	.word	0x08001621
 80015fc:	4a79      	ldr	r2, [pc, #484]	@ (80017e4 <HAL_GPIO_Init+0x2b4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001602:	e02c      	b.n	800165e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e029      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	3304      	adds	r3, #4
 8001612:	623b      	str	r3, [r7, #32]
          break;
 8001614:	e024      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	3308      	adds	r3, #8
 800161c:	623b      	str	r3, [r7, #32]
          break;
 800161e:	e01f      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	330c      	adds	r3, #12
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e01a      	b.n	8001660 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001632:	2304      	movs	r3, #4
 8001634:	623b      	str	r3, [r7, #32]
          break;
 8001636:	e013      	b.n	8001660 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001640:	2308      	movs	r3, #8
 8001642:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	611a      	str	r2, [r3, #16]
          break;
 800164a:	e009      	b.n	8001660 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800164c:	2308      	movs	r3, #8
 800164e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	615a      	str	r2, [r3, #20]
          break;
 8001656:	e003      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
          break;
 800165c:	e000      	b.n	8001660 <HAL_GPIO_Init+0x130>
          break;
 800165e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2bff      	cmp	r3, #255	@ 0xff
 8001664:	d801      	bhi.n	800166a <HAL_GPIO_Init+0x13a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	e001      	b.n	800166e <HAL_GPIO_Init+0x13e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3304      	adds	r3, #4
 800166e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2bff      	cmp	r3, #255	@ 0xff
 8001674:	d802      	bhi.n	800167c <HAL_GPIO_Init+0x14c>
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	e002      	b.n	8001682 <HAL_GPIO_Init+0x152>
 800167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167e:	3b08      	subs	r3, #8
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	210f      	movs	r1, #15
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	401a      	ands	r2, r3
 8001694:	6a39      	ldr	r1, [r7, #32]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	431a      	orrs	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80b1 	beq.w	8001812 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016b0:	4b4d      	ldr	r3, [pc, #308]	@ (80017e8 <HAL_GPIO_Init+0x2b8>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a4c      	ldr	r2, [pc, #304]	@ (80017e8 <HAL_GPIO_Init+0x2b8>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b4a      	ldr	r3, [pc, #296]	@ (80017e8 <HAL_GPIO_Init+0x2b8>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016c8:	4a48      	ldr	r2, [pc, #288]	@ (80017ec <HAL_GPIO_Init+0x2bc>)
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4013      	ands	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a40      	ldr	r2, [pc, #256]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d013      	beq.n	800171c <HAL_GPIO_Init+0x1ec>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a3f      	ldr	r2, [pc, #252]	@ (80017f4 <HAL_GPIO_Init+0x2c4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d00d      	beq.n	8001718 <HAL_GPIO_Init+0x1e8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a3e      	ldr	r2, [pc, #248]	@ (80017f8 <HAL_GPIO_Init+0x2c8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d007      	beq.n	8001714 <HAL_GPIO_Init+0x1e4>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a3d      	ldr	r2, [pc, #244]	@ (80017fc <HAL_GPIO_Init+0x2cc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_GPIO_Init+0x1e0>
 800170c:	2303      	movs	r3, #3
 800170e:	e006      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 8001710:	2304      	movs	r3, #4
 8001712:	e004      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 8001714:	2302      	movs	r3, #2
 8001716:	e002      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_GPIO_Init+0x1ee>
 800171c:	2300      	movs	r3, #0
 800171e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001720:	f002 0203 	and.w	r2, r2, #3
 8001724:	0092      	lsls	r2, r2, #2
 8001726:	4093      	lsls	r3, r2
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800172e:	492f      	ldr	r1, [pc, #188]	@ (80017ec <HAL_GPIO_Init+0x2bc>)
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001748:	4b2d      	ldr	r3, [pc, #180]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	492c      	ldr	r1, [pc, #176]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	608b      	str	r3, [r1, #8]
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001756:	4b2a      	ldr	r3, [pc, #168]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	43db      	mvns	r3, r3
 800175e:	4928      	ldr	r1, [pc, #160]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 8001760:	4013      	ands	r3, r2
 8001762:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001770:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	4922      	ldr	r1, [pc, #136]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	60cb      	str	r3, [r1, #12]
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800177e:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	43db      	mvns	r3, r3
 8001786:	491e      	ldr	r1, [pc, #120]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 8001788:	4013      	ands	r3, r2
 800178a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001798:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4918      	ldr	r1, [pc, #96]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017a6:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	4914      	ldr	r1, [pc, #80]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d021      	beq.n	8001804 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	490e      	ldr	r1, [pc, #56]	@ (8001800 <HAL_GPIO_Init+0x2d0>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]
 80017cc:	e021      	b.n	8001812 <HAL_GPIO_Init+0x2e2>
 80017ce:	bf00      	nop
 80017d0:	10320000 	.word	0x10320000
 80017d4:	10310000 	.word	0x10310000
 80017d8:	10220000 	.word	0x10220000
 80017dc:	10210000 	.word	0x10210000
 80017e0:	10120000 	.word	0x10120000
 80017e4:	10110000 	.word	0x10110000
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010000 	.word	0x40010000
 80017f0:	40010800 	.word	0x40010800
 80017f4:	40010c00 	.word	0x40010c00
 80017f8:	40011000 	.word	0x40011000
 80017fc:	40011400 	.word	0x40011400
 8001800:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001804:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <HAL_GPIO_Init+0x304>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	43db      	mvns	r3, r3
 800180c:	4909      	ldr	r1, [pc, #36]	@ (8001834 <HAL_GPIO_Init+0x304>)
 800180e:	4013      	ands	r3, r2
 8001810:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	3301      	adds	r3, #1
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	f47f ae8e 	bne.w	8001544 <HAL_GPIO_Init+0x14>
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	372c      	adds	r7, #44	@ 0x2c
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	40010400 	.word	0x40010400

08001838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
 8001844:	4613      	mov	r3, r2
 8001846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001848:	787b      	ldrb	r3, [r7, #1]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001854:	e003      	b.n	800185e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001856:	887b      	ldrh	r3, [r7, #2]
 8001858:	041a      	lsls	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	611a      	str	r2, [r3, #16]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e272      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8087 	beq.w	8001996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001888:	4b92      	ldr	r3, [pc, #584]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b04      	cmp	r3, #4
 8001892:	d00c      	beq.n	80018ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001894:	4b8f      	ldr	r3, [pc, #572]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b08      	cmp	r3, #8
 800189e:	d112      	bne.n	80018c6 <HAL_RCC_OscConfig+0x5e>
 80018a0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ac:	d10b      	bne.n	80018c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ae:	4b89      	ldr	r3, [pc, #548]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d06c      	beq.n	8001994 <HAL_RCC_OscConfig+0x12c>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d168      	bne.n	8001994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e24c      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x76>
 80018d0:	4b80      	ldr	r3, [pc, #512]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	e02e      	b.n	800193c <HAL_RCC_OscConfig+0xd4>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x98>
 80018e6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7a      	ldr	r2, [pc, #488]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b78      	ldr	r3, [pc, #480]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a77      	ldr	r2, [pc, #476]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e01d      	b.n	800193c <HAL_RCC_OscConfig+0xd4>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0xbc>
 800190a:	4b72      	ldr	r3, [pc, #456]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a71      	ldr	r2, [pc, #452]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 800191c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0xd4>
 8001924:	4b6b      	ldr	r3, [pc, #428]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a6a      	ldr	r2, [pc, #424]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 800192a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b68      	ldr	r3, [pc, #416]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a67      	ldr	r2, [pc, #412]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800193a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d013      	beq.n	800196c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7fe ffaa 	bl	800089c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7fe ffa6 	bl	800089c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	@ 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e200      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0xe4>
 800196a:	e014      	b.n	8001996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7fe ff96 	bl	800089c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001974:	f7fe ff92 	bl	800089c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	@ 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e1ec      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	4b53      	ldr	r3, [pc, #332]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x10c>
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d063      	beq.n	8001a6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00b      	beq.n	80019c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ae:	4b49      	ldr	r3, [pc, #292]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d11c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x18c>
 80019ba:	4b46      	ldr	r3, [pc, #280]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d116      	bne.n	80019f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	4b43      	ldr	r3, [pc, #268]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x176>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d001      	beq.n	80019de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e1c0      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019de:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4939      	ldr	r1, [pc, #228]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	e03a      	b.n	8001a6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d020      	beq.n	8001a3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019fc:	4b36      	ldr	r3, [pc, #216]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7fe ff4b 	bl	800089c <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0a:	f7fe ff47 	bl	800089c <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1a1      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4927      	ldr	r1, [pc, #156]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
 8001a3c:	e015      	b.n	8001a6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <HAL_RCC_OscConfig+0x270>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7fe ff2a 	bl	800089c <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4c:	f7fe ff26 	bl	800089c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e180      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d03a      	beq.n	8001aec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d019      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7e:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <HAL_RCC_OscConfig+0x274>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7fe ff0a 	bl	800089c <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8c:	f7fe ff06 	bl	800089c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e160      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad4 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f000 fa9c 	bl	8001fe8 <RCC_Delay>
 8001ab0:	e01c      	b.n	8001aec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <HAL_RCC_OscConfig+0x274>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab8:	f7fe fef0 	bl	800089c <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abe:	e00f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7fe feec 	bl	800089c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d908      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e146      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	42420000 	.word	0x42420000
 8001adc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae0:	4b92      	ldr	r3, [pc, #584]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1e9      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80a6 	beq.w	8001c46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afe:	4b8b      	ldr	r3, [pc, #556]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10d      	bne.n	8001b26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b88      	ldr	r3, [pc, #544]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4a87      	ldr	r2, [pc, #540]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	61d3      	str	r3, [r2, #28]
 8001b16:	4b85      	ldr	r3, [pc, #532]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b22:	2301      	movs	r3, #1
 8001b24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b26:	4b82      	ldr	r3, [pc, #520]	@ (8001d30 <HAL_RCC_OscConfig+0x4c8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d118      	bne.n	8001b64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b32:	4b7f      	ldr	r3, [pc, #508]	@ (8001d30 <HAL_RCC_OscConfig+0x4c8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a7e      	ldr	r2, [pc, #504]	@ (8001d30 <HAL_RCC_OscConfig+0x4c8>)
 8001b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3e:	f7fe fead 	bl	800089c <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b46:	f7fe fea9 	bl	800089c <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b64      	cmp	r3, #100	@ 0x64
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e103      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b58:	4b75      	ldr	r3, [pc, #468]	@ (8001d30 <HAL_RCC_OscConfig+0x4c8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x312>
 8001b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4a6e      	ldr	r2, [pc, #440]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6213      	str	r3, [r2, #32]
 8001b78:	e02d      	b.n	8001bd6 <HAL_RCC_OscConfig+0x36e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x334>
 8001b82:	4b6a      	ldr	r3, [pc, #424]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a69      	ldr	r2, [pc, #420]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6213      	str	r3, [r2, #32]
 8001b8e:	4b67      	ldr	r3, [pc, #412]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a66      	ldr	r2, [pc, #408]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	6213      	str	r3, [r2, #32]
 8001b9a:	e01c      	b.n	8001bd6 <HAL_RCC_OscConfig+0x36e>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d10c      	bne.n	8001bbe <HAL_RCC_OscConfig+0x356>
 8001ba4:	4b61      	ldr	r3, [pc, #388]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4a60      	ldr	r2, [pc, #384]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6213      	str	r3, [r2, #32]
 8001bb0:	4b5e      	ldr	r3, [pc, #376]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4a5d      	ldr	r2, [pc, #372]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6213      	str	r3, [r2, #32]
 8001bbc:	e00b      	b.n	8001bd6 <HAL_RCC_OscConfig+0x36e>
 8001bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	4a5a      	ldr	r2, [pc, #360]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	6213      	str	r3, [r2, #32]
 8001bca:	4b58      	ldr	r3, [pc, #352]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4a57      	ldr	r2, [pc, #348]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	f023 0304 	bic.w	r3, r3, #4
 8001bd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d015      	beq.n	8001c0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bde:	f7fe fe5d 	bl	800089c <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7fe fe59 	bl	800089c <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0b1      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ee      	beq.n	8001be6 <HAL_RCC_OscConfig+0x37e>
 8001c08:	e014      	b.n	8001c34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0a:	f7fe fe47 	bl	800089c <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7fe fe43 	bl	800089c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e09b      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c28:	4b40      	ldr	r3, [pc, #256]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ee      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d105      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8087 	beq.w	8001d5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c50:	4b36      	ldr	r3, [pc, #216]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d061      	beq.n	8001d20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d146      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c64:	4b33      	ldr	r3, [pc, #204]	@ (8001d34 <HAL_RCC_OscConfig+0x4cc>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7fe fe17 	bl	800089c <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c72:	f7fe fe13 	bl	800089c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e06d      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c84:	4b29      	ldr	r3, [pc, #164]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f0      	bne.n	8001c72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c98:	d108      	bne.n	8001cac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c9a:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	4921      	ldr	r1, [pc, #132]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cac:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a19      	ldr	r1, [r3, #32]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	491b      	ldr	r1, [pc, #108]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <HAL_RCC_OscConfig+0x4cc>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7fe fde7 	bl	800089c <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7fe fde3 	bl	800089c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e03d      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x46a>
 8001cf0:	e035      	b.n	8001d5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <HAL_RCC_OscConfig+0x4cc>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7fe fdd0 	bl	800089c <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d00:	f7fe fdcc 	bl	800089c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e026      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x498>
 8001d1e:	e01e      	b.n	8001d5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e019      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40007000 	.word	0x40007000
 8001d34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <HAL_RCC_OscConfig+0x500>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000

08001d6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0d0      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b6a      	ldr	r3, [pc, #424]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d910      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b67      	ldr	r3, [pc, #412]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0207 	bic.w	r2, r3, #7
 8001d96:	4965      	ldr	r1, [pc, #404]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b63      	ldr	r3, [pc, #396]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0b8      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d020      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc8:	4b59      	ldr	r3, [pc, #356]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4a58      	ldr	r2, [pc, #352]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de0:	4b53      	ldr	r3, [pc, #332]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4a52      	ldr	r2, [pc, #328]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001dea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dec:	4b50      	ldr	r3, [pc, #320]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	494d      	ldr	r1, [pc, #308]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d040      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	4b47      	ldr	r3, [pc, #284]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d115      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e07f      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2a:	4b41      	ldr	r3, [pc, #260]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e073      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e06b      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4a:	4b39      	ldr	r3, [pc, #228]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4936      	ldr	r1, [pc, #216]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e5c:	f7fe fd1e 	bl	800089c <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7fe fd1a 	bl	800089c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e053      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 020c 	and.w	r2, r3, #12
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1eb      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b27      	ldr	r3, [pc, #156]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d210      	bcs.n	8001ebc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b24      	ldr	r3, [pc, #144]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 0207 	bic.w	r2, r3, #7
 8001ea2:	4922      	ldr	r1, [pc, #136]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b20      	ldr	r3, [pc, #128]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e032      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec8:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4916      	ldr	r1, [pc, #88]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ee6:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	490e      	ldr	r1, [pc, #56]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001efa:	f000 f821 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8001efe:	4602      	mov	r2, r0
 8001f00:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	490a      	ldr	r1, [pc, #40]	@ (8001f34 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0c:	5ccb      	ldrb	r3, [r1, r3]
 8001f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f12:	4a09      	ldr	r2, [pc, #36]	@ (8001f38 <HAL_RCC_ClockConfig+0x1cc>)
 8001f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f16:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <HAL_RCC_ClockConfig+0x1d0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fc7c 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	40021000 	.word	0x40021000
 8001f34:	08003020 	.word	0x08003020
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d002      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0x30>
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d003      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0x36>
 8001f6e:	e027      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f70:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f72:	613b      	str	r3, [r7, #16]
      break;
 8001f74:	e027      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	0c9b      	lsrs	r3, r3, #18
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	4a17      	ldr	r2, [pc, #92]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f80:	5cd3      	ldrb	r3, [r2, r3]
 8001f82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d010      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f8e:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	0c5b      	lsrs	r3, r3, #17
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	4a11      	ldr	r2, [pc, #68]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f9a:	5cd3      	ldrb	r3, [r2, r3]
 8001f9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fa2:	fb03 f202 	mul.w	r2, r3, r2
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e004      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	613b      	str	r3, [r7, #16]
      break;
 8001fbe:	e002      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fc2:	613b      	str	r3, [r7, #16]
      break;
 8001fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc6:	693b      	ldr	r3, [r7, #16]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	371c      	adds	r7, #28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	007a1200 	.word	0x007a1200
 8001fdc:	08003030 	.word	0x08003030
 8001fe0:	08003040 	.word	0x08003040
 8001fe4:	003d0900 	.word	0x003d0900

08001fe8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <RCC_Delay+0x34>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <RCC_Delay+0x38>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0a5b      	lsrs	r3, r3, #9
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002004:	bf00      	nop
  }
  while (Delay --);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1e5a      	subs	r2, r3, #1
 800200a:	60fa      	str	r2, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f9      	bne.n	8002004 <RCC_Delay+0x1c>
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	20000000 	.word	0x20000000
 8002020:	10624dd3 	.word	0x10624dd3

08002024 <std>:
 8002024:	2300      	movs	r3, #0
 8002026:	b510      	push	{r4, lr}
 8002028:	4604      	mov	r4, r0
 800202a:	e9c0 3300 	strd	r3, r3, [r0]
 800202e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002032:	6083      	str	r3, [r0, #8]
 8002034:	8181      	strh	r1, [r0, #12]
 8002036:	6643      	str	r3, [r0, #100]	@ 0x64
 8002038:	81c2      	strh	r2, [r0, #14]
 800203a:	6183      	str	r3, [r0, #24]
 800203c:	4619      	mov	r1, r3
 800203e:	2208      	movs	r2, #8
 8002040:	305c      	adds	r0, #92	@ 0x5c
 8002042:	f000 f9f9 	bl	8002438 <memset>
 8002046:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <std+0x58>)
 8002048:	6224      	str	r4, [r4, #32]
 800204a:	6263      	str	r3, [r4, #36]	@ 0x24
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <std+0x5c>)
 800204e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002050:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <std+0x60>)
 8002052:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <std+0x64>)
 8002056:	6323      	str	r3, [r4, #48]	@ 0x30
 8002058:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <std+0x68>)
 800205a:	429c      	cmp	r4, r3
 800205c:	d006      	beq.n	800206c <std+0x48>
 800205e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002062:	4294      	cmp	r4, r2
 8002064:	d002      	beq.n	800206c <std+0x48>
 8002066:	33d0      	adds	r3, #208	@ 0xd0
 8002068:	429c      	cmp	r4, r3
 800206a:	d105      	bne.n	8002078 <std+0x54>
 800206c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002074:	f000 ba58 	b.w	8002528 <__retarget_lock_init_recursive>
 8002078:	bd10      	pop	{r4, pc}
 800207a:	bf00      	nop
 800207c:	08002289 	.word	0x08002289
 8002080:	080022ab 	.word	0x080022ab
 8002084:	080022e3 	.word	0x080022e3
 8002088:	08002307 	.word	0x08002307
 800208c:	200000b8 	.word	0x200000b8

08002090 <stdio_exit_handler>:
 8002090:	4a02      	ldr	r2, [pc, #8]	@ (800209c <stdio_exit_handler+0xc>)
 8002092:	4903      	ldr	r1, [pc, #12]	@ (80020a0 <stdio_exit_handler+0x10>)
 8002094:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <stdio_exit_handler+0x14>)
 8002096:	f000 b869 	b.w	800216c <_fwalk_sglue>
 800209a:	bf00      	nop
 800209c:	2000000c 	.word	0x2000000c
 80020a0:	08002ddd 	.word	0x08002ddd
 80020a4:	2000001c 	.word	0x2000001c

080020a8 <cleanup_stdio>:
 80020a8:	6841      	ldr	r1, [r0, #4]
 80020aa:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <cleanup_stdio+0x34>)
 80020ac:	b510      	push	{r4, lr}
 80020ae:	4299      	cmp	r1, r3
 80020b0:	4604      	mov	r4, r0
 80020b2:	d001      	beq.n	80020b8 <cleanup_stdio+0x10>
 80020b4:	f000 fe92 	bl	8002ddc <_fflush_r>
 80020b8:	68a1      	ldr	r1, [r4, #8]
 80020ba:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <cleanup_stdio+0x38>)
 80020bc:	4299      	cmp	r1, r3
 80020be:	d002      	beq.n	80020c6 <cleanup_stdio+0x1e>
 80020c0:	4620      	mov	r0, r4
 80020c2:	f000 fe8b 	bl	8002ddc <_fflush_r>
 80020c6:	68e1      	ldr	r1, [r4, #12]
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <cleanup_stdio+0x3c>)
 80020ca:	4299      	cmp	r1, r3
 80020cc:	d004      	beq.n	80020d8 <cleanup_stdio+0x30>
 80020ce:	4620      	mov	r0, r4
 80020d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020d4:	f000 be82 	b.w	8002ddc <_fflush_r>
 80020d8:	bd10      	pop	{r4, pc}
 80020da:	bf00      	nop
 80020dc:	200000b8 	.word	0x200000b8
 80020e0:	20000120 	.word	0x20000120
 80020e4:	20000188 	.word	0x20000188

080020e8 <global_stdio_init.part.0>:
 80020e8:	b510      	push	{r4, lr}
 80020ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <global_stdio_init.part.0+0x30>)
 80020ec:	4c0b      	ldr	r4, [pc, #44]	@ (800211c <global_stdio_init.part.0+0x34>)
 80020ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002120 <global_stdio_init.part.0+0x38>)
 80020f0:	4620      	mov	r0, r4
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	2104      	movs	r1, #4
 80020f6:	2200      	movs	r2, #0
 80020f8:	f7ff ff94 	bl	8002024 <std>
 80020fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002100:	2201      	movs	r2, #1
 8002102:	2109      	movs	r1, #9
 8002104:	f7ff ff8e 	bl	8002024 <std>
 8002108:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800210c:	2202      	movs	r2, #2
 800210e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002112:	2112      	movs	r1, #18
 8002114:	f7ff bf86 	b.w	8002024 <std>
 8002118:	200001f0 	.word	0x200001f0
 800211c:	200000b8 	.word	0x200000b8
 8002120:	08002091 	.word	0x08002091

08002124 <__sfp_lock_acquire>:
 8002124:	4801      	ldr	r0, [pc, #4]	@ (800212c <__sfp_lock_acquire+0x8>)
 8002126:	f000 ba00 	b.w	800252a <__retarget_lock_acquire_recursive>
 800212a:	bf00      	nop
 800212c:	200001f9 	.word	0x200001f9

08002130 <__sfp_lock_release>:
 8002130:	4801      	ldr	r0, [pc, #4]	@ (8002138 <__sfp_lock_release+0x8>)
 8002132:	f000 b9fb 	b.w	800252c <__retarget_lock_release_recursive>
 8002136:	bf00      	nop
 8002138:	200001f9 	.word	0x200001f9

0800213c <__sinit>:
 800213c:	b510      	push	{r4, lr}
 800213e:	4604      	mov	r4, r0
 8002140:	f7ff fff0 	bl	8002124 <__sfp_lock_acquire>
 8002144:	6a23      	ldr	r3, [r4, #32]
 8002146:	b11b      	cbz	r3, 8002150 <__sinit+0x14>
 8002148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800214c:	f7ff bff0 	b.w	8002130 <__sfp_lock_release>
 8002150:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <__sinit+0x28>)
 8002152:	6223      	str	r3, [r4, #32]
 8002154:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <__sinit+0x2c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f5      	bne.n	8002148 <__sinit+0xc>
 800215c:	f7ff ffc4 	bl	80020e8 <global_stdio_init.part.0>
 8002160:	e7f2      	b.n	8002148 <__sinit+0xc>
 8002162:	bf00      	nop
 8002164:	080020a9 	.word	0x080020a9
 8002168:	200001f0 	.word	0x200001f0

0800216c <_fwalk_sglue>:
 800216c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002170:	4607      	mov	r7, r0
 8002172:	4688      	mov	r8, r1
 8002174:	4614      	mov	r4, r2
 8002176:	2600      	movs	r6, #0
 8002178:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800217c:	f1b9 0901 	subs.w	r9, r9, #1
 8002180:	d505      	bpl.n	800218e <_fwalk_sglue+0x22>
 8002182:	6824      	ldr	r4, [r4, #0]
 8002184:	2c00      	cmp	r4, #0
 8002186:	d1f7      	bne.n	8002178 <_fwalk_sglue+0xc>
 8002188:	4630      	mov	r0, r6
 800218a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800218e:	89ab      	ldrh	r3, [r5, #12]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d907      	bls.n	80021a4 <_fwalk_sglue+0x38>
 8002194:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002198:	3301      	adds	r3, #1
 800219a:	d003      	beq.n	80021a4 <_fwalk_sglue+0x38>
 800219c:	4629      	mov	r1, r5
 800219e:	4638      	mov	r0, r7
 80021a0:	47c0      	blx	r8
 80021a2:	4306      	orrs	r6, r0
 80021a4:	3568      	adds	r5, #104	@ 0x68
 80021a6:	e7e9      	b.n	800217c <_fwalk_sglue+0x10>

080021a8 <iprintf>:
 80021a8:	b40f      	push	{r0, r1, r2, r3}
 80021aa:	b507      	push	{r0, r1, r2, lr}
 80021ac:	4906      	ldr	r1, [pc, #24]	@ (80021c8 <iprintf+0x20>)
 80021ae:	ab04      	add	r3, sp, #16
 80021b0:	6808      	ldr	r0, [r1, #0]
 80021b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80021b6:	6881      	ldr	r1, [r0, #8]
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	f000 fae5 	bl	8002788 <_vfiprintf_r>
 80021be:	b003      	add	sp, #12
 80021c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80021c4:	b004      	add	sp, #16
 80021c6:	4770      	bx	lr
 80021c8:	20000018 	.word	0x20000018

080021cc <_puts_r>:
 80021cc:	6a03      	ldr	r3, [r0, #32]
 80021ce:	b570      	push	{r4, r5, r6, lr}
 80021d0:	4605      	mov	r5, r0
 80021d2:	460e      	mov	r6, r1
 80021d4:	6884      	ldr	r4, [r0, #8]
 80021d6:	b90b      	cbnz	r3, 80021dc <_puts_r+0x10>
 80021d8:	f7ff ffb0 	bl	800213c <__sinit>
 80021dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80021de:	07db      	lsls	r3, r3, #31
 80021e0:	d405      	bmi.n	80021ee <_puts_r+0x22>
 80021e2:	89a3      	ldrh	r3, [r4, #12]
 80021e4:	0598      	lsls	r0, r3, #22
 80021e6:	d402      	bmi.n	80021ee <_puts_r+0x22>
 80021e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021ea:	f000 f99e 	bl	800252a <__retarget_lock_acquire_recursive>
 80021ee:	89a3      	ldrh	r3, [r4, #12]
 80021f0:	0719      	lsls	r1, r3, #28
 80021f2:	d502      	bpl.n	80021fa <_puts_r+0x2e>
 80021f4:	6923      	ldr	r3, [r4, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d135      	bne.n	8002266 <_puts_r+0x9a>
 80021fa:	4621      	mov	r1, r4
 80021fc:	4628      	mov	r0, r5
 80021fe:	f000 f8c5 	bl	800238c <__swsetup_r>
 8002202:	b380      	cbz	r0, 8002266 <_puts_r+0x9a>
 8002204:	f04f 35ff 	mov.w	r5, #4294967295
 8002208:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800220a:	07da      	lsls	r2, r3, #31
 800220c:	d405      	bmi.n	800221a <_puts_r+0x4e>
 800220e:	89a3      	ldrh	r3, [r4, #12]
 8002210:	059b      	lsls	r3, r3, #22
 8002212:	d402      	bmi.n	800221a <_puts_r+0x4e>
 8002214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002216:	f000 f989 	bl	800252c <__retarget_lock_release_recursive>
 800221a:	4628      	mov	r0, r5
 800221c:	bd70      	pop	{r4, r5, r6, pc}
 800221e:	2b00      	cmp	r3, #0
 8002220:	da04      	bge.n	800222c <_puts_r+0x60>
 8002222:	69a2      	ldr	r2, [r4, #24]
 8002224:	429a      	cmp	r2, r3
 8002226:	dc17      	bgt.n	8002258 <_puts_r+0x8c>
 8002228:	290a      	cmp	r1, #10
 800222a:	d015      	beq.n	8002258 <_puts_r+0x8c>
 800222c:	6823      	ldr	r3, [r4, #0]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	6022      	str	r2, [r4, #0]
 8002232:	7019      	strb	r1, [r3, #0]
 8002234:	68a3      	ldr	r3, [r4, #8]
 8002236:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800223a:	3b01      	subs	r3, #1
 800223c:	60a3      	str	r3, [r4, #8]
 800223e:	2900      	cmp	r1, #0
 8002240:	d1ed      	bne.n	800221e <_puts_r+0x52>
 8002242:	2b00      	cmp	r3, #0
 8002244:	da11      	bge.n	800226a <_puts_r+0x9e>
 8002246:	4622      	mov	r2, r4
 8002248:	210a      	movs	r1, #10
 800224a:	4628      	mov	r0, r5
 800224c:	f000 f85f 	bl	800230e <__swbuf_r>
 8002250:	3001      	adds	r0, #1
 8002252:	d0d7      	beq.n	8002204 <_puts_r+0x38>
 8002254:	250a      	movs	r5, #10
 8002256:	e7d7      	b.n	8002208 <_puts_r+0x3c>
 8002258:	4622      	mov	r2, r4
 800225a:	4628      	mov	r0, r5
 800225c:	f000 f857 	bl	800230e <__swbuf_r>
 8002260:	3001      	adds	r0, #1
 8002262:	d1e7      	bne.n	8002234 <_puts_r+0x68>
 8002264:	e7ce      	b.n	8002204 <_puts_r+0x38>
 8002266:	3e01      	subs	r6, #1
 8002268:	e7e4      	b.n	8002234 <_puts_r+0x68>
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	6022      	str	r2, [r4, #0]
 8002270:	220a      	movs	r2, #10
 8002272:	701a      	strb	r2, [r3, #0]
 8002274:	e7ee      	b.n	8002254 <_puts_r+0x88>
	...

08002278 <puts>:
 8002278:	4b02      	ldr	r3, [pc, #8]	@ (8002284 <puts+0xc>)
 800227a:	4601      	mov	r1, r0
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	f7ff bfa5 	b.w	80021cc <_puts_r>
 8002282:	bf00      	nop
 8002284:	20000018 	.word	0x20000018

08002288 <__sread>:
 8002288:	b510      	push	{r4, lr}
 800228a:	460c      	mov	r4, r1
 800228c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002290:	f000 f8fc 	bl	800248c <_read_r>
 8002294:	2800      	cmp	r0, #0
 8002296:	bfab      	itete	ge
 8002298:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800229a:	89a3      	ldrhlt	r3, [r4, #12]
 800229c:	181b      	addge	r3, r3, r0
 800229e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80022a2:	bfac      	ite	ge
 80022a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80022a6:	81a3      	strhlt	r3, [r4, #12]
 80022a8:	bd10      	pop	{r4, pc}

080022aa <__swrite>:
 80022aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ae:	461f      	mov	r7, r3
 80022b0:	898b      	ldrh	r3, [r1, #12]
 80022b2:	4605      	mov	r5, r0
 80022b4:	05db      	lsls	r3, r3, #23
 80022b6:	460c      	mov	r4, r1
 80022b8:	4616      	mov	r6, r2
 80022ba:	d505      	bpl.n	80022c8 <__swrite+0x1e>
 80022bc:	2302      	movs	r3, #2
 80022be:	2200      	movs	r2, #0
 80022c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c4:	f000 f8d0 	bl	8002468 <_lseek_r>
 80022c8:	89a3      	ldrh	r3, [r4, #12]
 80022ca:	4632      	mov	r2, r6
 80022cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022d0:	81a3      	strh	r3, [r4, #12]
 80022d2:	4628      	mov	r0, r5
 80022d4:	463b      	mov	r3, r7
 80022d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022de:	f000 b8e7 	b.w	80024b0 <_write_r>

080022e2 <__sseek>:
 80022e2:	b510      	push	{r4, lr}
 80022e4:	460c      	mov	r4, r1
 80022e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022ea:	f000 f8bd 	bl	8002468 <_lseek_r>
 80022ee:	1c43      	adds	r3, r0, #1
 80022f0:	89a3      	ldrh	r3, [r4, #12]
 80022f2:	bf15      	itete	ne
 80022f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80022f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80022fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80022fe:	81a3      	strheq	r3, [r4, #12]
 8002300:	bf18      	it	ne
 8002302:	81a3      	strhne	r3, [r4, #12]
 8002304:	bd10      	pop	{r4, pc}

08002306 <__sclose>:
 8002306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800230a:	f000 b89d 	b.w	8002448 <_close_r>

0800230e <__swbuf_r>:
 800230e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002310:	460e      	mov	r6, r1
 8002312:	4614      	mov	r4, r2
 8002314:	4605      	mov	r5, r0
 8002316:	b118      	cbz	r0, 8002320 <__swbuf_r+0x12>
 8002318:	6a03      	ldr	r3, [r0, #32]
 800231a:	b90b      	cbnz	r3, 8002320 <__swbuf_r+0x12>
 800231c:	f7ff ff0e 	bl	800213c <__sinit>
 8002320:	69a3      	ldr	r3, [r4, #24]
 8002322:	60a3      	str	r3, [r4, #8]
 8002324:	89a3      	ldrh	r3, [r4, #12]
 8002326:	071a      	lsls	r2, r3, #28
 8002328:	d501      	bpl.n	800232e <__swbuf_r+0x20>
 800232a:	6923      	ldr	r3, [r4, #16]
 800232c:	b943      	cbnz	r3, 8002340 <__swbuf_r+0x32>
 800232e:	4621      	mov	r1, r4
 8002330:	4628      	mov	r0, r5
 8002332:	f000 f82b 	bl	800238c <__swsetup_r>
 8002336:	b118      	cbz	r0, 8002340 <__swbuf_r+0x32>
 8002338:	f04f 37ff 	mov.w	r7, #4294967295
 800233c:	4638      	mov	r0, r7
 800233e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	6922      	ldr	r2, [r4, #16]
 8002344:	b2f6      	uxtb	r6, r6
 8002346:	1a98      	subs	r0, r3, r2
 8002348:	6963      	ldr	r3, [r4, #20]
 800234a:	4637      	mov	r7, r6
 800234c:	4283      	cmp	r3, r0
 800234e:	dc05      	bgt.n	800235c <__swbuf_r+0x4e>
 8002350:	4621      	mov	r1, r4
 8002352:	4628      	mov	r0, r5
 8002354:	f000 fd42 	bl	8002ddc <_fflush_r>
 8002358:	2800      	cmp	r0, #0
 800235a:	d1ed      	bne.n	8002338 <__swbuf_r+0x2a>
 800235c:	68a3      	ldr	r3, [r4, #8]
 800235e:	3b01      	subs	r3, #1
 8002360:	60a3      	str	r3, [r4, #8]
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	6022      	str	r2, [r4, #0]
 8002368:	701e      	strb	r6, [r3, #0]
 800236a:	6962      	ldr	r2, [r4, #20]
 800236c:	1c43      	adds	r3, r0, #1
 800236e:	429a      	cmp	r2, r3
 8002370:	d004      	beq.n	800237c <__swbuf_r+0x6e>
 8002372:	89a3      	ldrh	r3, [r4, #12]
 8002374:	07db      	lsls	r3, r3, #31
 8002376:	d5e1      	bpl.n	800233c <__swbuf_r+0x2e>
 8002378:	2e0a      	cmp	r6, #10
 800237a:	d1df      	bne.n	800233c <__swbuf_r+0x2e>
 800237c:	4621      	mov	r1, r4
 800237e:	4628      	mov	r0, r5
 8002380:	f000 fd2c 	bl	8002ddc <_fflush_r>
 8002384:	2800      	cmp	r0, #0
 8002386:	d0d9      	beq.n	800233c <__swbuf_r+0x2e>
 8002388:	e7d6      	b.n	8002338 <__swbuf_r+0x2a>
	...

0800238c <__swsetup_r>:
 800238c:	b538      	push	{r3, r4, r5, lr}
 800238e:	4b29      	ldr	r3, [pc, #164]	@ (8002434 <__swsetup_r+0xa8>)
 8002390:	4605      	mov	r5, r0
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	460c      	mov	r4, r1
 8002396:	b118      	cbz	r0, 80023a0 <__swsetup_r+0x14>
 8002398:	6a03      	ldr	r3, [r0, #32]
 800239a:	b90b      	cbnz	r3, 80023a0 <__swsetup_r+0x14>
 800239c:	f7ff fece 	bl	800213c <__sinit>
 80023a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023a4:	0719      	lsls	r1, r3, #28
 80023a6:	d422      	bmi.n	80023ee <__swsetup_r+0x62>
 80023a8:	06da      	lsls	r2, r3, #27
 80023aa:	d407      	bmi.n	80023bc <__swsetup_r+0x30>
 80023ac:	2209      	movs	r2, #9
 80023ae:	602a      	str	r2, [r5, #0]
 80023b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	81a3      	strh	r3, [r4, #12]
 80023ba:	e033      	b.n	8002424 <__swsetup_r+0x98>
 80023bc:	0758      	lsls	r0, r3, #29
 80023be:	d512      	bpl.n	80023e6 <__swsetup_r+0x5a>
 80023c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80023c2:	b141      	cbz	r1, 80023d6 <__swsetup_r+0x4a>
 80023c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d002      	beq.n	80023d2 <__swsetup_r+0x46>
 80023cc:	4628      	mov	r0, r5
 80023ce:	f000 f8bd 	bl	800254c <_free_r>
 80023d2:	2300      	movs	r3, #0
 80023d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80023d6:	89a3      	ldrh	r3, [r4, #12]
 80023d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80023dc:	81a3      	strh	r3, [r4, #12]
 80023de:	2300      	movs	r3, #0
 80023e0:	6063      	str	r3, [r4, #4]
 80023e2:	6923      	ldr	r3, [r4, #16]
 80023e4:	6023      	str	r3, [r4, #0]
 80023e6:	89a3      	ldrh	r3, [r4, #12]
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	81a3      	strh	r3, [r4, #12]
 80023ee:	6923      	ldr	r3, [r4, #16]
 80023f0:	b94b      	cbnz	r3, 8002406 <__swsetup_r+0x7a>
 80023f2:	89a3      	ldrh	r3, [r4, #12]
 80023f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80023f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023fc:	d003      	beq.n	8002406 <__swsetup_r+0x7a>
 80023fe:	4621      	mov	r1, r4
 8002400:	4628      	mov	r0, r5
 8002402:	f000 fd38 	bl	8002e76 <__smakebuf_r>
 8002406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800240a:	f013 0201 	ands.w	r2, r3, #1
 800240e:	d00a      	beq.n	8002426 <__swsetup_r+0x9a>
 8002410:	2200      	movs	r2, #0
 8002412:	60a2      	str	r2, [r4, #8]
 8002414:	6962      	ldr	r2, [r4, #20]
 8002416:	4252      	negs	r2, r2
 8002418:	61a2      	str	r2, [r4, #24]
 800241a:	6922      	ldr	r2, [r4, #16]
 800241c:	b942      	cbnz	r2, 8002430 <__swsetup_r+0xa4>
 800241e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002422:	d1c5      	bne.n	80023b0 <__swsetup_r+0x24>
 8002424:	bd38      	pop	{r3, r4, r5, pc}
 8002426:	0799      	lsls	r1, r3, #30
 8002428:	bf58      	it	pl
 800242a:	6962      	ldrpl	r2, [r4, #20]
 800242c:	60a2      	str	r2, [r4, #8]
 800242e:	e7f4      	b.n	800241a <__swsetup_r+0x8e>
 8002430:	2000      	movs	r0, #0
 8002432:	e7f7      	b.n	8002424 <__swsetup_r+0x98>
 8002434:	20000018 	.word	0x20000018

08002438 <memset>:
 8002438:	4603      	mov	r3, r0
 800243a:	4402      	add	r2, r0
 800243c:	4293      	cmp	r3, r2
 800243e:	d100      	bne.n	8002442 <memset+0xa>
 8002440:	4770      	bx	lr
 8002442:	f803 1b01 	strb.w	r1, [r3], #1
 8002446:	e7f9      	b.n	800243c <memset+0x4>

08002448 <_close_r>:
 8002448:	b538      	push	{r3, r4, r5, lr}
 800244a:	2300      	movs	r3, #0
 800244c:	4d05      	ldr	r5, [pc, #20]	@ (8002464 <_close_r+0x1c>)
 800244e:	4604      	mov	r4, r0
 8002450:	4608      	mov	r0, r1
 8002452:	602b      	str	r3, [r5, #0]
 8002454:	f7fe f937 	bl	80006c6 <_close>
 8002458:	1c43      	adds	r3, r0, #1
 800245a:	d102      	bne.n	8002462 <_close_r+0x1a>
 800245c:	682b      	ldr	r3, [r5, #0]
 800245e:	b103      	cbz	r3, 8002462 <_close_r+0x1a>
 8002460:	6023      	str	r3, [r4, #0]
 8002462:	bd38      	pop	{r3, r4, r5, pc}
 8002464:	200001f4 	.word	0x200001f4

08002468 <_lseek_r>:
 8002468:	b538      	push	{r3, r4, r5, lr}
 800246a:	4604      	mov	r4, r0
 800246c:	4608      	mov	r0, r1
 800246e:	4611      	mov	r1, r2
 8002470:	2200      	movs	r2, #0
 8002472:	4d05      	ldr	r5, [pc, #20]	@ (8002488 <_lseek_r+0x20>)
 8002474:	602a      	str	r2, [r5, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	f7fe f949 	bl	800070e <_lseek>
 800247c:	1c43      	adds	r3, r0, #1
 800247e:	d102      	bne.n	8002486 <_lseek_r+0x1e>
 8002480:	682b      	ldr	r3, [r5, #0]
 8002482:	b103      	cbz	r3, 8002486 <_lseek_r+0x1e>
 8002484:	6023      	str	r3, [r4, #0]
 8002486:	bd38      	pop	{r3, r4, r5, pc}
 8002488:	200001f4 	.word	0x200001f4

0800248c <_read_r>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	4604      	mov	r4, r0
 8002490:	4608      	mov	r0, r1
 8002492:	4611      	mov	r1, r2
 8002494:	2200      	movs	r2, #0
 8002496:	4d05      	ldr	r5, [pc, #20]	@ (80024ac <_read_r+0x20>)
 8002498:	602a      	str	r2, [r5, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	f7fe f8da 	bl	8000654 <_read>
 80024a0:	1c43      	adds	r3, r0, #1
 80024a2:	d102      	bne.n	80024aa <_read_r+0x1e>
 80024a4:	682b      	ldr	r3, [r5, #0]
 80024a6:	b103      	cbz	r3, 80024aa <_read_r+0x1e>
 80024a8:	6023      	str	r3, [r4, #0]
 80024aa:	bd38      	pop	{r3, r4, r5, pc}
 80024ac:	200001f4 	.word	0x200001f4

080024b0 <_write_r>:
 80024b0:	b538      	push	{r3, r4, r5, lr}
 80024b2:	4604      	mov	r4, r0
 80024b4:	4608      	mov	r0, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	2200      	movs	r2, #0
 80024ba:	4d05      	ldr	r5, [pc, #20]	@ (80024d0 <_write_r+0x20>)
 80024bc:	602a      	str	r2, [r5, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	f7fe f8e5 	bl	800068e <_write>
 80024c4:	1c43      	adds	r3, r0, #1
 80024c6:	d102      	bne.n	80024ce <_write_r+0x1e>
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	b103      	cbz	r3, 80024ce <_write_r+0x1e>
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	bd38      	pop	{r3, r4, r5, pc}
 80024d0:	200001f4 	.word	0x200001f4

080024d4 <__errno>:
 80024d4:	4b01      	ldr	r3, [pc, #4]	@ (80024dc <__errno+0x8>)
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000018 	.word	0x20000018

080024e0 <__libc_init_array>:
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	2600      	movs	r6, #0
 80024e4:	4d0c      	ldr	r5, [pc, #48]	@ (8002518 <__libc_init_array+0x38>)
 80024e6:	4c0d      	ldr	r4, [pc, #52]	@ (800251c <__libc_init_array+0x3c>)
 80024e8:	1b64      	subs	r4, r4, r5
 80024ea:	10a4      	asrs	r4, r4, #2
 80024ec:	42a6      	cmp	r6, r4
 80024ee:	d109      	bne.n	8002504 <__libc_init_array+0x24>
 80024f0:	f000 fd3e 	bl	8002f70 <_init>
 80024f4:	2600      	movs	r6, #0
 80024f6:	4d0a      	ldr	r5, [pc, #40]	@ (8002520 <__libc_init_array+0x40>)
 80024f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002524 <__libc_init_array+0x44>)
 80024fa:	1b64      	subs	r4, r4, r5
 80024fc:	10a4      	asrs	r4, r4, #2
 80024fe:	42a6      	cmp	r6, r4
 8002500:	d105      	bne.n	800250e <__libc_init_array+0x2e>
 8002502:	bd70      	pop	{r4, r5, r6, pc}
 8002504:	f855 3b04 	ldr.w	r3, [r5], #4
 8002508:	4798      	blx	r3
 800250a:	3601      	adds	r6, #1
 800250c:	e7ee      	b.n	80024ec <__libc_init_array+0xc>
 800250e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002512:	4798      	blx	r3
 8002514:	3601      	adds	r6, #1
 8002516:	e7f2      	b.n	80024fe <__libc_init_array+0x1e>
 8002518:	08003078 	.word	0x08003078
 800251c:	08003078 	.word	0x08003078
 8002520:	08003078 	.word	0x08003078
 8002524:	0800307c 	.word	0x0800307c

08002528 <__retarget_lock_init_recursive>:
 8002528:	4770      	bx	lr

0800252a <__retarget_lock_acquire_recursive>:
 800252a:	4770      	bx	lr

0800252c <__retarget_lock_release_recursive>:
 800252c:	4770      	bx	lr

0800252e <memcpy>:
 800252e:	440a      	add	r2, r1
 8002530:	4291      	cmp	r1, r2
 8002532:	f100 33ff 	add.w	r3, r0, #4294967295
 8002536:	d100      	bne.n	800253a <memcpy+0xc>
 8002538:	4770      	bx	lr
 800253a:	b510      	push	{r4, lr}
 800253c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002540:	4291      	cmp	r1, r2
 8002542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002546:	d1f9      	bne.n	800253c <memcpy+0xe>
 8002548:	bd10      	pop	{r4, pc}
	...

0800254c <_free_r>:
 800254c:	b538      	push	{r3, r4, r5, lr}
 800254e:	4605      	mov	r5, r0
 8002550:	2900      	cmp	r1, #0
 8002552:	d040      	beq.n	80025d6 <_free_r+0x8a>
 8002554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002558:	1f0c      	subs	r4, r1, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	bfb8      	it	lt
 800255e:	18e4      	addlt	r4, r4, r3
 8002560:	f000 f8de 	bl	8002720 <__malloc_lock>
 8002564:	4a1c      	ldr	r2, [pc, #112]	@ (80025d8 <_free_r+0x8c>)
 8002566:	6813      	ldr	r3, [r2, #0]
 8002568:	b933      	cbnz	r3, 8002578 <_free_r+0x2c>
 800256a:	6063      	str	r3, [r4, #4]
 800256c:	6014      	str	r4, [r2, #0]
 800256e:	4628      	mov	r0, r5
 8002570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002574:	f000 b8da 	b.w	800272c <__malloc_unlock>
 8002578:	42a3      	cmp	r3, r4
 800257a:	d908      	bls.n	800258e <_free_r+0x42>
 800257c:	6820      	ldr	r0, [r4, #0]
 800257e:	1821      	adds	r1, r4, r0
 8002580:	428b      	cmp	r3, r1
 8002582:	bf01      	itttt	eq
 8002584:	6819      	ldreq	r1, [r3, #0]
 8002586:	685b      	ldreq	r3, [r3, #4]
 8002588:	1809      	addeq	r1, r1, r0
 800258a:	6021      	streq	r1, [r4, #0]
 800258c:	e7ed      	b.n	800256a <_free_r+0x1e>
 800258e:	461a      	mov	r2, r3
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	b10b      	cbz	r3, 8002598 <_free_r+0x4c>
 8002594:	42a3      	cmp	r3, r4
 8002596:	d9fa      	bls.n	800258e <_free_r+0x42>
 8002598:	6811      	ldr	r1, [r2, #0]
 800259a:	1850      	adds	r0, r2, r1
 800259c:	42a0      	cmp	r0, r4
 800259e:	d10b      	bne.n	80025b8 <_free_r+0x6c>
 80025a0:	6820      	ldr	r0, [r4, #0]
 80025a2:	4401      	add	r1, r0
 80025a4:	1850      	adds	r0, r2, r1
 80025a6:	4283      	cmp	r3, r0
 80025a8:	6011      	str	r1, [r2, #0]
 80025aa:	d1e0      	bne.n	800256e <_free_r+0x22>
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4408      	add	r0, r1
 80025b2:	6010      	str	r0, [r2, #0]
 80025b4:	6053      	str	r3, [r2, #4]
 80025b6:	e7da      	b.n	800256e <_free_r+0x22>
 80025b8:	d902      	bls.n	80025c0 <_free_r+0x74>
 80025ba:	230c      	movs	r3, #12
 80025bc:	602b      	str	r3, [r5, #0]
 80025be:	e7d6      	b.n	800256e <_free_r+0x22>
 80025c0:	6820      	ldr	r0, [r4, #0]
 80025c2:	1821      	adds	r1, r4, r0
 80025c4:	428b      	cmp	r3, r1
 80025c6:	bf01      	itttt	eq
 80025c8:	6819      	ldreq	r1, [r3, #0]
 80025ca:	685b      	ldreq	r3, [r3, #4]
 80025cc:	1809      	addeq	r1, r1, r0
 80025ce:	6021      	streq	r1, [r4, #0]
 80025d0:	6063      	str	r3, [r4, #4]
 80025d2:	6054      	str	r4, [r2, #4]
 80025d4:	e7cb      	b.n	800256e <_free_r+0x22>
 80025d6:	bd38      	pop	{r3, r4, r5, pc}
 80025d8:	20000200 	.word	0x20000200

080025dc <sbrk_aligned>:
 80025dc:	b570      	push	{r4, r5, r6, lr}
 80025de:	4e0f      	ldr	r6, [pc, #60]	@ (800261c <sbrk_aligned+0x40>)
 80025e0:	460c      	mov	r4, r1
 80025e2:	6831      	ldr	r1, [r6, #0]
 80025e4:	4605      	mov	r5, r0
 80025e6:	b911      	cbnz	r1, 80025ee <sbrk_aligned+0x12>
 80025e8:	f000 fca4 	bl	8002f34 <_sbrk_r>
 80025ec:	6030      	str	r0, [r6, #0]
 80025ee:	4621      	mov	r1, r4
 80025f0:	4628      	mov	r0, r5
 80025f2:	f000 fc9f 	bl	8002f34 <_sbrk_r>
 80025f6:	1c43      	adds	r3, r0, #1
 80025f8:	d103      	bne.n	8002602 <sbrk_aligned+0x26>
 80025fa:	f04f 34ff 	mov.w	r4, #4294967295
 80025fe:	4620      	mov	r0, r4
 8002600:	bd70      	pop	{r4, r5, r6, pc}
 8002602:	1cc4      	adds	r4, r0, #3
 8002604:	f024 0403 	bic.w	r4, r4, #3
 8002608:	42a0      	cmp	r0, r4
 800260a:	d0f8      	beq.n	80025fe <sbrk_aligned+0x22>
 800260c:	1a21      	subs	r1, r4, r0
 800260e:	4628      	mov	r0, r5
 8002610:	f000 fc90 	bl	8002f34 <_sbrk_r>
 8002614:	3001      	adds	r0, #1
 8002616:	d1f2      	bne.n	80025fe <sbrk_aligned+0x22>
 8002618:	e7ef      	b.n	80025fa <sbrk_aligned+0x1e>
 800261a:	bf00      	nop
 800261c:	200001fc 	.word	0x200001fc

08002620 <_malloc_r>:
 8002620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002624:	1ccd      	adds	r5, r1, #3
 8002626:	f025 0503 	bic.w	r5, r5, #3
 800262a:	3508      	adds	r5, #8
 800262c:	2d0c      	cmp	r5, #12
 800262e:	bf38      	it	cc
 8002630:	250c      	movcc	r5, #12
 8002632:	2d00      	cmp	r5, #0
 8002634:	4606      	mov	r6, r0
 8002636:	db01      	blt.n	800263c <_malloc_r+0x1c>
 8002638:	42a9      	cmp	r1, r5
 800263a:	d904      	bls.n	8002646 <_malloc_r+0x26>
 800263c:	230c      	movs	r3, #12
 800263e:	6033      	str	r3, [r6, #0]
 8002640:	2000      	movs	r0, #0
 8002642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002646:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800271c <_malloc_r+0xfc>
 800264a:	f000 f869 	bl	8002720 <__malloc_lock>
 800264e:	f8d8 3000 	ldr.w	r3, [r8]
 8002652:	461c      	mov	r4, r3
 8002654:	bb44      	cbnz	r4, 80026a8 <_malloc_r+0x88>
 8002656:	4629      	mov	r1, r5
 8002658:	4630      	mov	r0, r6
 800265a:	f7ff ffbf 	bl	80025dc <sbrk_aligned>
 800265e:	1c43      	adds	r3, r0, #1
 8002660:	4604      	mov	r4, r0
 8002662:	d158      	bne.n	8002716 <_malloc_r+0xf6>
 8002664:	f8d8 4000 	ldr.w	r4, [r8]
 8002668:	4627      	mov	r7, r4
 800266a:	2f00      	cmp	r7, #0
 800266c:	d143      	bne.n	80026f6 <_malloc_r+0xd6>
 800266e:	2c00      	cmp	r4, #0
 8002670:	d04b      	beq.n	800270a <_malloc_r+0xea>
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	4639      	mov	r1, r7
 8002676:	4630      	mov	r0, r6
 8002678:	eb04 0903 	add.w	r9, r4, r3
 800267c:	f000 fc5a 	bl	8002f34 <_sbrk_r>
 8002680:	4581      	cmp	r9, r0
 8002682:	d142      	bne.n	800270a <_malloc_r+0xea>
 8002684:	6821      	ldr	r1, [r4, #0]
 8002686:	4630      	mov	r0, r6
 8002688:	1a6d      	subs	r5, r5, r1
 800268a:	4629      	mov	r1, r5
 800268c:	f7ff ffa6 	bl	80025dc <sbrk_aligned>
 8002690:	3001      	adds	r0, #1
 8002692:	d03a      	beq.n	800270a <_malloc_r+0xea>
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	442b      	add	r3, r5
 8002698:	6023      	str	r3, [r4, #0]
 800269a:	f8d8 3000 	ldr.w	r3, [r8]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	bb62      	cbnz	r2, 80026fc <_malloc_r+0xdc>
 80026a2:	f8c8 7000 	str.w	r7, [r8]
 80026a6:	e00f      	b.n	80026c8 <_malloc_r+0xa8>
 80026a8:	6822      	ldr	r2, [r4, #0]
 80026aa:	1b52      	subs	r2, r2, r5
 80026ac:	d420      	bmi.n	80026f0 <_malloc_r+0xd0>
 80026ae:	2a0b      	cmp	r2, #11
 80026b0:	d917      	bls.n	80026e2 <_malloc_r+0xc2>
 80026b2:	1961      	adds	r1, r4, r5
 80026b4:	42a3      	cmp	r3, r4
 80026b6:	6025      	str	r5, [r4, #0]
 80026b8:	bf18      	it	ne
 80026ba:	6059      	strne	r1, [r3, #4]
 80026bc:	6863      	ldr	r3, [r4, #4]
 80026be:	bf08      	it	eq
 80026c0:	f8c8 1000 	streq.w	r1, [r8]
 80026c4:	5162      	str	r2, [r4, r5]
 80026c6:	604b      	str	r3, [r1, #4]
 80026c8:	4630      	mov	r0, r6
 80026ca:	f000 f82f 	bl	800272c <__malloc_unlock>
 80026ce:	f104 000b 	add.w	r0, r4, #11
 80026d2:	1d23      	adds	r3, r4, #4
 80026d4:	f020 0007 	bic.w	r0, r0, #7
 80026d8:	1ac2      	subs	r2, r0, r3
 80026da:	bf1c      	itt	ne
 80026dc:	1a1b      	subne	r3, r3, r0
 80026de:	50a3      	strne	r3, [r4, r2]
 80026e0:	e7af      	b.n	8002642 <_malloc_r+0x22>
 80026e2:	6862      	ldr	r2, [r4, #4]
 80026e4:	42a3      	cmp	r3, r4
 80026e6:	bf0c      	ite	eq
 80026e8:	f8c8 2000 	streq.w	r2, [r8]
 80026ec:	605a      	strne	r2, [r3, #4]
 80026ee:	e7eb      	b.n	80026c8 <_malloc_r+0xa8>
 80026f0:	4623      	mov	r3, r4
 80026f2:	6864      	ldr	r4, [r4, #4]
 80026f4:	e7ae      	b.n	8002654 <_malloc_r+0x34>
 80026f6:	463c      	mov	r4, r7
 80026f8:	687f      	ldr	r7, [r7, #4]
 80026fa:	e7b6      	b.n	800266a <_malloc_r+0x4a>
 80026fc:	461a      	mov	r2, r3
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	42a3      	cmp	r3, r4
 8002702:	d1fb      	bne.n	80026fc <_malloc_r+0xdc>
 8002704:	2300      	movs	r3, #0
 8002706:	6053      	str	r3, [r2, #4]
 8002708:	e7de      	b.n	80026c8 <_malloc_r+0xa8>
 800270a:	230c      	movs	r3, #12
 800270c:	4630      	mov	r0, r6
 800270e:	6033      	str	r3, [r6, #0]
 8002710:	f000 f80c 	bl	800272c <__malloc_unlock>
 8002714:	e794      	b.n	8002640 <_malloc_r+0x20>
 8002716:	6005      	str	r5, [r0, #0]
 8002718:	e7d6      	b.n	80026c8 <_malloc_r+0xa8>
 800271a:	bf00      	nop
 800271c:	20000200 	.word	0x20000200

08002720 <__malloc_lock>:
 8002720:	4801      	ldr	r0, [pc, #4]	@ (8002728 <__malloc_lock+0x8>)
 8002722:	f7ff bf02 	b.w	800252a <__retarget_lock_acquire_recursive>
 8002726:	bf00      	nop
 8002728:	200001f8 	.word	0x200001f8

0800272c <__malloc_unlock>:
 800272c:	4801      	ldr	r0, [pc, #4]	@ (8002734 <__malloc_unlock+0x8>)
 800272e:	f7ff befd 	b.w	800252c <__retarget_lock_release_recursive>
 8002732:	bf00      	nop
 8002734:	200001f8 	.word	0x200001f8

08002738 <__sfputc_r>:
 8002738:	6893      	ldr	r3, [r2, #8]
 800273a:	b410      	push	{r4}
 800273c:	3b01      	subs	r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	6093      	str	r3, [r2, #8]
 8002742:	da07      	bge.n	8002754 <__sfputc_r+0x1c>
 8002744:	6994      	ldr	r4, [r2, #24]
 8002746:	42a3      	cmp	r3, r4
 8002748:	db01      	blt.n	800274e <__sfputc_r+0x16>
 800274a:	290a      	cmp	r1, #10
 800274c:	d102      	bne.n	8002754 <__sfputc_r+0x1c>
 800274e:	bc10      	pop	{r4}
 8002750:	f7ff bddd 	b.w	800230e <__swbuf_r>
 8002754:	6813      	ldr	r3, [r2, #0]
 8002756:	1c58      	adds	r0, r3, #1
 8002758:	6010      	str	r0, [r2, #0]
 800275a:	7019      	strb	r1, [r3, #0]
 800275c:	4608      	mov	r0, r1
 800275e:	bc10      	pop	{r4}
 8002760:	4770      	bx	lr

08002762 <__sfputs_r>:
 8002762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002764:	4606      	mov	r6, r0
 8002766:	460f      	mov	r7, r1
 8002768:	4614      	mov	r4, r2
 800276a:	18d5      	adds	r5, r2, r3
 800276c:	42ac      	cmp	r4, r5
 800276e:	d101      	bne.n	8002774 <__sfputs_r+0x12>
 8002770:	2000      	movs	r0, #0
 8002772:	e007      	b.n	8002784 <__sfputs_r+0x22>
 8002774:	463a      	mov	r2, r7
 8002776:	4630      	mov	r0, r6
 8002778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800277c:	f7ff ffdc 	bl	8002738 <__sfputc_r>
 8002780:	1c43      	adds	r3, r0, #1
 8002782:	d1f3      	bne.n	800276c <__sfputs_r+0xa>
 8002784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002788 <_vfiprintf_r>:
 8002788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800278c:	460d      	mov	r5, r1
 800278e:	4614      	mov	r4, r2
 8002790:	4698      	mov	r8, r3
 8002792:	4606      	mov	r6, r0
 8002794:	b09d      	sub	sp, #116	@ 0x74
 8002796:	b118      	cbz	r0, 80027a0 <_vfiprintf_r+0x18>
 8002798:	6a03      	ldr	r3, [r0, #32]
 800279a:	b90b      	cbnz	r3, 80027a0 <_vfiprintf_r+0x18>
 800279c:	f7ff fcce 	bl	800213c <__sinit>
 80027a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80027a2:	07d9      	lsls	r1, r3, #31
 80027a4:	d405      	bmi.n	80027b2 <_vfiprintf_r+0x2a>
 80027a6:	89ab      	ldrh	r3, [r5, #12]
 80027a8:	059a      	lsls	r2, r3, #22
 80027aa:	d402      	bmi.n	80027b2 <_vfiprintf_r+0x2a>
 80027ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80027ae:	f7ff febc 	bl	800252a <__retarget_lock_acquire_recursive>
 80027b2:	89ab      	ldrh	r3, [r5, #12]
 80027b4:	071b      	lsls	r3, r3, #28
 80027b6:	d501      	bpl.n	80027bc <_vfiprintf_r+0x34>
 80027b8:	692b      	ldr	r3, [r5, #16]
 80027ba:	b99b      	cbnz	r3, 80027e4 <_vfiprintf_r+0x5c>
 80027bc:	4629      	mov	r1, r5
 80027be:	4630      	mov	r0, r6
 80027c0:	f7ff fde4 	bl	800238c <__swsetup_r>
 80027c4:	b170      	cbz	r0, 80027e4 <_vfiprintf_r+0x5c>
 80027c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80027c8:	07dc      	lsls	r4, r3, #31
 80027ca:	d504      	bpl.n	80027d6 <_vfiprintf_r+0x4e>
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	b01d      	add	sp, #116	@ 0x74
 80027d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027d6:	89ab      	ldrh	r3, [r5, #12]
 80027d8:	0598      	lsls	r0, r3, #22
 80027da:	d4f7      	bmi.n	80027cc <_vfiprintf_r+0x44>
 80027dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80027de:	f7ff fea5 	bl	800252c <__retarget_lock_release_recursive>
 80027e2:	e7f3      	b.n	80027cc <_vfiprintf_r+0x44>
 80027e4:	2300      	movs	r3, #0
 80027e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80027e8:	2320      	movs	r3, #32
 80027ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80027ee:	2330      	movs	r3, #48	@ 0x30
 80027f0:	f04f 0901 	mov.w	r9, #1
 80027f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80027f8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80029a4 <_vfiprintf_r+0x21c>
 80027fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002800:	4623      	mov	r3, r4
 8002802:	469a      	mov	sl, r3
 8002804:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002808:	b10a      	cbz	r2, 800280e <_vfiprintf_r+0x86>
 800280a:	2a25      	cmp	r2, #37	@ 0x25
 800280c:	d1f9      	bne.n	8002802 <_vfiprintf_r+0x7a>
 800280e:	ebba 0b04 	subs.w	fp, sl, r4
 8002812:	d00b      	beq.n	800282c <_vfiprintf_r+0xa4>
 8002814:	465b      	mov	r3, fp
 8002816:	4622      	mov	r2, r4
 8002818:	4629      	mov	r1, r5
 800281a:	4630      	mov	r0, r6
 800281c:	f7ff ffa1 	bl	8002762 <__sfputs_r>
 8002820:	3001      	adds	r0, #1
 8002822:	f000 80a7 	beq.w	8002974 <_vfiprintf_r+0x1ec>
 8002826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002828:	445a      	add	r2, fp
 800282a:	9209      	str	r2, [sp, #36]	@ 0x24
 800282c:	f89a 3000 	ldrb.w	r3, [sl]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 809f 	beq.w	8002974 <_vfiprintf_r+0x1ec>
 8002836:	2300      	movs	r3, #0
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002840:	f10a 0a01 	add.w	sl, sl, #1
 8002844:	9304      	str	r3, [sp, #16]
 8002846:	9307      	str	r3, [sp, #28]
 8002848:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800284c:	931a      	str	r3, [sp, #104]	@ 0x68
 800284e:	4654      	mov	r4, sl
 8002850:	2205      	movs	r2, #5
 8002852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002856:	4853      	ldr	r0, [pc, #332]	@ (80029a4 <_vfiprintf_r+0x21c>)
 8002858:	f000 fb7c 	bl	8002f54 <memchr>
 800285c:	9a04      	ldr	r2, [sp, #16]
 800285e:	b9d8      	cbnz	r0, 8002898 <_vfiprintf_r+0x110>
 8002860:	06d1      	lsls	r1, r2, #27
 8002862:	bf44      	itt	mi
 8002864:	2320      	movmi	r3, #32
 8002866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800286a:	0713      	lsls	r3, r2, #28
 800286c:	bf44      	itt	mi
 800286e:	232b      	movmi	r3, #43	@ 0x2b
 8002870:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002874:	f89a 3000 	ldrb.w	r3, [sl]
 8002878:	2b2a      	cmp	r3, #42	@ 0x2a
 800287a:	d015      	beq.n	80028a8 <_vfiprintf_r+0x120>
 800287c:	4654      	mov	r4, sl
 800287e:	2000      	movs	r0, #0
 8002880:	f04f 0c0a 	mov.w	ip, #10
 8002884:	9a07      	ldr	r2, [sp, #28]
 8002886:	4621      	mov	r1, r4
 8002888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800288c:	3b30      	subs	r3, #48	@ 0x30
 800288e:	2b09      	cmp	r3, #9
 8002890:	d94b      	bls.n	800292a <_vfiprintf_r+0x1a2>
 8002892:	b1b0      	cbz	r0, 80028c2 <_vfiprintf_r+0x13a>
 8002894:	9207      	str	r2, [sp, #28]
 8002896:	e014      	b.n	80028c2 <_vfiprintf_r+0x13a>
 8002898:	eba0 0308 	sub.w	r3, r0, r8
 800289c:	fa09 f303 	lsl.w	r3, r9, r3
 80028a0:	4313      	orrs	r3, r2
 80028a2:	46a2      	mov	sl, r4
 80028a4:	9304      	str	r3, [sp, #16]
 80028a6:	e7d2      	b.n	800284e <_vfiprintf_r+0xc6>
 80028a8:	9b03      	ldr	r3, [sp, #12]
 80028aa:	1d19      	adds	r1, r3, #4
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	9103      	str	r1, [sp, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bfbb      	ittet	lt
 80028b4:	425b      	neglt	r3, r3
 80028b6:	f042 0202 	orrlt.w	r2, r2, #2
 80028ba:	9307      	strge	r3, [sp, #28]
 80028bc:	9307      	strlt	r3, [sp, #28]
 80028be:	bfb8      	it	lt
 80028c0:	9204      	strlt	r2, [sp, #16]
 80028c2:	7823      	ldrb	r3, [r4, #0]
 80028c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80028c6:	d10a      	bne.n	80028de <_vfiprintf_r+0x156>
 80028c8:	7863      	ldrb	r3, [r4, #1]
 80028ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80028cc:	d132      	bne.n	8002934 <_vfiprintf_r+0x1ac>
 80028ce:	9b03      	ldr	r3, [sp, #12]
 80028d0:	3402      	adds	r4, #2
 80028d2:	1d1a      	adds	r2, r3, #4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	9203      	str	r2, [sp, #12]
 80028d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80028dc:	9305      	str	r3, [sp, #20]
 80028de:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80029a8 <_vfiprintf_r+0x220>
 80028e2:	2203      	movs	r2, #3
 80028e4:	4650      	mov	r0, sl
 80028e6:	7821      	ldrb	r1, [r4, #0]
 80028e8:	f000 fb34 	bl	8002f54 <memchr>
 80028ec:	b138      	cbz	r0, 80028fe <_vfiprintf_r+0x176>
 80028ee:	2240      	movs	r2, #64	@ 0x40
 80028f0:	9b04      	ldr	r3, [sp, #16]
 80028f2:	eba0 000a 	sub.w	r0, r0, sl
 80028f6:	4082      	lsls	r2, r0
 80028f8:	4313      	orrs	r3, r2
 80028fa:	3401      	adds	r4, #1
 80028fc:	9304      	str	r3, [sp, #16]
 80028fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002902:	2206      	movs	r2, #6
 8002904:	4829      	ldr	r0, [pc, #164]	@ (80029ac <_vfiprintf_r+0x224>)
 8002906:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800290a:	f000 fb23 	bl	8002f54 <memchr>
 800290e:	2800      	cmp	r0, #0
 8002910:	d03f      	beq.n	8002992 <_vfiprintf_r+0x20a>
 8002912:	4b27      	ldr	r3, [pc, #156]	@ (80029b0 <_vfiprintf_r+0x228>)
 8002914:	bb1b      	cbnz	r3, 800295e <_vfiprintf_r+0x1d6>
 8002916:	9b03      	ldr	r3, [sp, #12]
 8002918:	3307      	adds	r3, #7
 800291a:	f023 0307 	bic.w	r3, r3, #7
 800291e:	3308      	adds	r3, #8
 8002920:	9303      	str	r3, [sp, #12]
 8002922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002924:	443b      	add	r3, r7
 8002926:	9309      	str	r3, [sp, #36]	@ 0x24
 8002928:	e76a      	b.n	8002800 <_vfiprintf_r+0x78>
 800292a:	460c      	mov	r4, r1
 800292c:	2001      	movs	r0, #1
 800292e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002932:	e7a8      	b.n	8002886 <_vfiprintf_r+0xfe>
 8002934:	2300      	movs	r3, #0
 8002936:	f04f 0c0a 	mov.w	ip, #10
 800293a:	4619      	mov	r1, r3
 800293c:	3401      	adds	r4, #1
 800293e:	9305      	str	r3, [sp, #20]
 8002940:	4620      	mov	r0, r4
 8002942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002946:	3a30      	subs	r2, #48	@ 0x30
 8002948:	2a09      	cmp	r2, #9
 800294a:	d903      	bls.n	8002954 <_vfiprintf_r+0x1cc>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0c6      	beq.n	80028de <_vfiprintf_r+0x156>
 8002950:	9105      	str	r1, [sp, #20]
 8002952:	e7c4      	b.n	80028de <_vfiprintf_r+0x156>
 8002954:	4604      	mov	r4, r0
 8002956:	2301      	movs	r3, #1
 8002958:	fb0c 2101 	mla	r1, ip, r1, r2
 800295c:	e7f0      	b.n	8002940 <_vfiprintf_r+0x1b8>
 800295e:	ab03      	add	r3, sp, #12
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	462a      	mov	r2, r5
 8002964:	4630      	mov	r0, r6
 8002966:	4b13      	ldr	r3, [pc, #76]	@ (80029b4 <_vfiprintf_r+0x22c>)
 8002968:	a904      	add	r1, sp, #16
 800296a:	f3af 8000 	nop.w
 800296e:	4607      	mov	r7, r0
 8002970:	1c78      	adds	r0, r7, #1
 8002972:	d1d6      	bne.n	8002922 <_vfiprintf_r+0x19a>
 8002974:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002976:	07d9      	lsls	r1, r3, #31
 8002978:	d405      	bmi.n	8002986 <_vfiprintf_r+0x1fe>
 800297a:	89ab      	ldrh	r3, [r5, #12]
 800297c:	059a      	lsls	r2, r3, #22
 800297e:	d402      	bmi.n	8002986 <_vfiprintf_r+0x1fe>
 8002980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002982:	f7ff fdd3 	bl	800252c <__retarget_lock_release_recursive>
 8002986:	89ab      	ldrh	r3, [r5, #12]
 8002988:	065b      	lsls	r3, r3, #25
 800298a:	f53f af1f 	bmi.w	80027cc <_vfiprintf_r+0x44>
 800298e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002990:	e71e      	b.n	80027d0 <_vfiprintf_r+0x48>
 8002992:	ab03      	add	r3, sp, #12
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	462a      	mov	r2, r5
 8002998:	4630      	mov	r0, r6
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <_vfiprintf_r+0x22c>)
 800299c:	a904      	add	r1, sp, #16
 800299e:	f000 f87d 	bl	8002a9c <_printf_i>
 80029a2:	e7e4      	b.n	800296e <_vfiprintf_r+0x1e6>
 80029a4:	08003042 	.word	0x08003042
 80029a8:	08003048 	.word	0x08003048
 80029ac:	0800304c 	.word	0x0800304c
 80029b0:	00000000 	.word	0x00000000
 80029b4:	08002763 	.word	0x08002763

080029b8 <_printf_common>:
 80029b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029bc:	4616      	mov	r6, r2
 80029be:	4698      	mov	r8, r3
 80029c0:	688a      	ldr	r2, [r1, #8]
 80029c2:	690b      	ldr	r3, [r1, #16]
 80029c4:	4607      	mov	r7, r0
 80029c6:	4293      	cmp	r3, r2
 80029c8:	bfb8      	it	lt
 80029ca:	4613      	movlt	r3, r2
 80029cc:	6033      	str	r3, [r6, #0]
 80029ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80029d2:	460c      	mov	r4, r1
 80029d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80029d8:	b10a      	cbz	r2, 80029de <_printf_common+0x26>
 80029da:	3301      	adds	r3, #1
 80029dc:	6033      	str	r3, [r6, #0]
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	0699      	lsls	r1, r3, #26
 80029e2:	bf42      	ittt	mi
 80029e4:	6833      	ldrmi	r3, [r6, #0]
 80029e6:	3302      	addmi	r3, #2
 80029e8:	6033      	strmi	r3, [r6, #0]
 80029ea:	6825      	ldr	r5, [r4, #0]
 80029ec:	f015 0506 	ands.w	r5, r5, #6
 80029f0:	d106      	bne.n	8002a00 <_printf_common+0x48>
 80029f2:	f104 0a19 	add.w	sl, r4, #25
 80029f6:	68e3      	ldr	r3, [r4, #12]
 80029f8:	6832      	ldr	r2, [r6, #0]
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	42ab      	cmp	r3, r5
 80029fe:	dc2b      	bgt.n	8002a58 <_printf_common+0xa0>
 8002a00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a04:	6822      	ldr	r2, [r4, #0]
 8002a06:	3b00      	subs	r3, #0
 8002a08:	bf18      	it	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	0692      	lsls	r2, r2, #26
 8002a0e:	d430      	bmi.n	8002a72 <_printf_common+0xba>
 8002a10:	4641      	mov	r1, r8
 8002a12:	4638      	mov	r0, r7
 8002a14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a18:	47c8      	blx	r9
 8002a1a:	3001      	adds	r0, #1
 8002a1c:	d023      	beq.n	8002a66 <_printf_common+0xae>
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	6922      	ldr	r2, [r4, #16]
 8002a22:	f003 0306 	and.w	r3, r3, #6
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	bf14      	ite	ne
 8002a2a:	2500      	movne	r5, #0
 8002a2c:	6833      	ldreq	r3, [r6, #0]
 8002a2e:	f04f 0600 	mov.w	r6, #0
 8002a32:	bf08      	it	eq
 8002a34:	68e5      	ldreq	r5, [r4, #12]
 8002a36:	f104 041a 	add.w	r4, r4, #26
 8002a3a:	bf08      	it	eq
 8002a3c:	1aed      	subeq	r5, r5, r3
 8002a3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002a42:	bf08      	it	eq
 8002a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	bfc4      	itt	gt
 8002a4c:	1a9b      	subgt	r3, r3, r2
 8002a4e:	18ed      	addgt	r5, r5, r3
 8002a50:	42b5      	cmp	r5, r6
 8002a52:	d11a      	bne.n	8002a8a <_printf_common+0xd2>
 8002a54:	2000      	movs	r0, #0
 8002a56:	e008      	b.n	8002a6a <_printf_common+0xb2>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	4652      	mov	r2, sl
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	4638      	mov	r0, r7
 8002a60:	47c8      	blx	r9
 8002a62:	3001      	adds	r0, #1
 8002a64:	d103      	bne.n	8002a6e <_printf_common+0xb6>
 8002a66:	f04f 30ff 	mov.w	r0, #4294967295
 8002a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a6e:	3501      	adds	r5, #1
 8002a70:	e7c1      	b.n	80029f6 <_printf_common+0x3e>
 8002a72:	2030      	movs	r0, #48	@ 0x30
 8002a74:	18e1      	adds	r1, r4, r3
 8002a76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002a80:	4422      	add	r2, r4
 8002a82:	3302      	adds	r3, #2
 8002a84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002a88:	e7c2      	b.n	8002a10 <_printf_common+0x58>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	4622      	mov	r2, r4
 8002a8e:	4641      	mov	r1, r8
 8002a90:	4638      	mov	r0, r7
 8002a92:	47c8      	blx	r9
 8002a94:	3001      	adds	r0, #1
 8002a96:	d0e6      	beq.n	8002a66 <_printf_common+0xae>
 8002a98:	3601      	adds	r6, #1
 8002a9a:	e7d9      	b.n	8002a50 <_printf_common+0x98>

08002a9c <_printf_i>:
 8002a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002aa0:	7e0f      	ldrb	r7, [r1, #24]
 8002aa2:	4691      	mov	r9, r2
 8002aa4:	2f78      	cmp	r7, #120	@ 0x78
 8002aa6:	4680      	mov	r8, r0
 8002aa8:	460c      	mov	r4, r1
 8002aaa:	469a      	mov	sl, r3
 8002aac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002aae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002ab2:	d807      	bhi.n	8002ac4 <_printf_i+0x28>
 8002ab4:	2f62      	cmp	r7, #98	@ 0x62
 8002ab6:	d80a      	bhi.n	8002ace <_printf_i+0x32>
 8002ab8:	2f00      	cmp	r7, #0
 8002aba:	f000 80d3 	beq.w	8002c64 <_printf_i+0x1c8>
 8002abe:	2f58      	cmp	r7, #88	@ 0x58
 8002ac0:	f000 80ba 	beq.w	8002c38 <_printf_i+0x19c>
 8002ac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ac8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002acc:	e03a      	b.n	8002b44 <_printf_i+0xa8>
 8002ace:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002ad2:	2b15      	cmp	r3, #21
 8002ad4:	d8f6      	bhi.n	8002ac4 <_printf_i+0x28>
 8002ad6:	a101      	add	r1, pc, #4	@ (adr r1, 8002adc <_printf_i+0x40>)
 8002ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002adc:	08002b35 	.word	0x08002b35
 8002ae0:	08002b49 	.word	0x08002b49
 8002ae4:	08002ac5 	.word	0x08002ac5
 8002ae8:	08002ac5 	.word	0x08002ac5
 8002aec:	08002ac5 	.word	0x08002ac5
 8002af0:	08002ac5 	.word	0x08002ac5
 8002af4:	08002b49 	.word	0x08002b49
 8002af8:	08002ac5 	.word	0x08002ac5
 8002afc:	08002ac5 	.word	0x08002ac5
 8002b00:	08002ac5 	.word	0x08002ac5
 8002b04:	08002ac5 	.word	0x08002ac5
 8002b08:	08002c4b 	.word	0x08002c4b
 8002b0c:	08002b73 	.word	0x08002b73
 8002b10:	08002c05 	.word	0x08002c05
 8002b14:	08002ac5 	.word	0x08002ac5
 8002b18:	08002ac5 	.word	0x08002ac5
 8002b1c:	08002c6d 	.word	0x08002c6d
 8002b20:	08002ac5 	.word	0x08002ac5
 8002b24:	08002b73 	.word	0x08002b73
 8002b28:	08002ac5 	.word	0x08002ac5
 8002b2c:	08002ac5 	.word	0x08002ac5
 8002b30:	08002c0d 	.word	0x08002c0d
 8002b34:	6833      	ldr	r3, [r6, #0]
 8002b36:	1d1a      	adds	r2, r3, #4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6032      	str	r2, [r6, #0]
 8002b3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b44:	2301      	movs	r3, #1
 8002b46:	e09e      	b.n	8002c86 <_printf_i+0x1ea>
 8002b48:	6833      	ldr	r3, [r6, #0]
 8002b4a:	6820      	ldr	r0, [r4, #0]
 8002b4c:	1d19      	adds	r1, r3, #4
 8002b4e:	6031      	str	r1, [r6, #0]
 8002b50:	0606      	lsls	r6, r0, #24
 8002b52:	d501      	bpl.n	8002b58 <_printf_i+0xbc>
 8002b54:	681d      	ldr	r5, [r3, #0]
 8002b56:	e003      	b.n	8002b60 <_printf_i+0xc4>
 8002b58:	0645      	lsls	r5, r0, #25
 8002b5a:	d5fb      	bpl.n	8002b54 <_printf_i+0xb8>
 8002b5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b60:	2d00      	cmp	r5, #0
 8002b62:	da03      	bge.n	8002b6c <_printf_i+0xd0>
 8002b64:	232d      	movs	r3, #45	@ 0x2d
 8002b66:	426d      	negs	r5, r5
 8002b68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b6c:	230a      	movs	r3, #10
 8002b6e:	4859      	ldr	r0, [pc, #356]	@ (8002cd4 <_printf_i+0x238>)
 8002b70:	e011      	b.n	8002b96 <_printf_i+0xfa>
 8002b72:	6821      	ldr	r1, [r4, #0]
 8002b74:	6833      	ldr	r3, [r6, #0]
 8002b76:	0608      	lsls	r0, r1, #24
 8002b78:	f853 5b04 	ldr.w	r5, [r3], #4
 8002b7c:	d402      	bmi.n	8002b84 <_printf_i+0xe8>
 8002b7e:	0649      	lsls	r1, r1, #25
 8002b80:	bf48      	it	mi
 8002b82:	b2ad      	uxthmi	r5, r5
 8002b84:	2f6f      	cmp	r7, #111	@ 0x6f
 8002b86:	6033      	str	r3, [r6, #0]
 8002b88:	bf14      	ite	ne
 8002b8a:	230a      	movne	r3, #10
 8002b8c:	2308      	moveq	r3, #8
 8002b8e:	4851      	ldr	r0, [pc, #324]	@ (8002cd4 <_printf_i+0x238>)
 8002b90:	2100      	movs	r1, #0
 8002b92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002b96:	6866      	ldr	r6, [r4, #4]
 8002b98:	2e00      	cmp	r6, #0
 8002b9a:	bfa8      	it	ge
 8002b9c:	6821      	ldrge	r1, [r4, #0]
 8002b9e:	60a6      	str	r6, [r4, #8]
 8002ba0:	bfa4      	itt	ge
 8002ba2:	f021 0104 	bicge.w	r1, r1, #4
 8002ba6:	6021      	strge	r1, [r4, #0]
 8002ba8:	b90d      	cbnz	r5, 8002bae <_printf_i+0x112>
 8002baa:	2e00      	cmp	r6, #0
 8002bac:	d04b      	beq.n	8002c46 <_printf_i+0x1aa>
 8002bae:	4616      	mov	r6, r2
 8002bb0:	fbb5 f1f3 	udiv	r1, r5, r3
 8002bb4:	fb03 5711 	mls	r7, r3, r1, r5
 8002bb8:	5dc7      	ldrb	r7, [r0, r7]
 8002bba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002bbe:	462f      	mov	r7, r5
 8002bc0:	42bb      	cmp	r3, r7
 8002bc2:	460d      	mov	r5, r1
 8002bc4:	d9f4      	bls.n	8002bb0 <_printf_i+0x114>
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d10b      	bne.n	8002be2 <_printf_i+0x146>
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	07df      	lsls	r7, r3, #31
 8002bce:	d508      	bpl.n	8002be2 <_printf_i+0x146>
 8002bd0:	6923      	ldr	r3, [r4, #16]
 8002bd2:	6861      	ldr	r1, [r4, #4]
 8002bd4:	4299      	cmp	r1, r3
 8002bd6:	bfde      	ittt	le
 8002bd8:	2330      	movle	r3, #48	@ 0x30
 8002bda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002bde:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002be2:	1b92      	subs	r2, r2, r6
 8002be4:	6122      	str	r2, [r4, #16]
 8002be6:	464b      	mov	r3, r9
 8002be8:	4621      	mov	r1, r4
 8002bea:	4640      	mov	r0, r8
 8002bec:	f8cd a000 	str.w	sl, [sp]
 8002bf0:	aa03      	add	r2, sp, #12
 8002bf2:	f7ff fee1 	bl	80029b8 <_printf_common>
 8002bf6:	3001      	adds	r0, #1
 8002bf8:	d14a      	bne.n	8002c90 <_printf_i+0x1f4>
 8002bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfe:	b004      	add	sp, #16
 8002c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	f043 0320 	orr.w	r3, r3, #32
 8002c0a:	6023      	str	r3, [r4, #0]
 8002c0c:	2778      	movs	r7, #120	@ 0x78
 8002c0e:	4832      	ldr	r0, [pc, #200]	@ (8002cd8 <_printf_i+0x23c>)
 8002c10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	6831      	ldr	r1, [r6, #0]
 8002c18:	061f      	lsls	r7, r3, #24
 8002c1a:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c1e:	d402      	bmi.n	8002c26 <_printf_i+0x18a>
 8002c20:	065f      	lsls	r7, r3, #25
 8002c22:	bf48      	it	mi
 8002c24:	b2ad      	uxthmi	r5, r5
 8002c26:	6031      	str	r1, [r6, #0]
 8002c28:	07d9      	lsls	r1, r3, #31
 8002c2a:	bf44      	itt	mi
 8002c2c:	f043 0320 	orrmi.w	r3, r3, #32
 8002c30:	6023      	strmi	r3, [r4, #0]
 8002c32:	b11d      	cbz	r5, 8002c3c <_printf_i+0x1a0>
 8002c34:	2310      	movs	r3, #16
 8002c36:	e7ab      	b.n	8002b90 <_printf_i+0xf4>
 8002c38:	4826      	ldr	r0, [pc, #152]	@ (8002cd4 <_printf_i+0x238>)
 8002c3a:	e7e9      	b.n	8002c10 <_printf_i+0x174>
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	f023 0320 	bic.w	r3, r3, #32
 8002c42:	6023      	str	r3, [r4, #0]
 8002c44:	e7f6      	b.n	8002c34 <_printf_i+0x198>
 8002c46:	4616      	mov	r6, r2
 8002c48:	e7bd      	b.n	8002bc6 <_printf_i+0x12a>
 8002c4a:	6833      	ldr	r3, [r6, #0]
 8002c4c:	6825      	ldr	r5, [r4, #0]
 8002c4e:	1d18      	adds	r0, r3, #4
 8002c50:	6961      	ldr	r1, [r4, #20]
 8002c52:	6030      	str	r0, [r6, #0]
 8002c54:	062e      	lsls	r6, r5, #24
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	d501      	bpl.n	8002c5e <_printf_i+0x1c2>
 8002c5a:	6019      	str	r1, [r3, #0]
 8002c5c:	e002      	b.n	8002c64 <_printf_i+0x1c8>
 8002c5e:	0668      	lsls	r0, r5, #25
 8002c60:	d5fb      	bpl.n	8002c5a <_printf_i+0x1be>
 8002c62:	8019      	strh	r1, [r3, #0]
 8002c64:	2300      	movs	r3, #0
 8002c66:	4616      	mov	r6, r2
 8002c68:	6123      	str	r3, [r4, #16]
 8002c6a:	e7bc      	b.n	8002be6 <_printf_i+0x14a>
 8002c6c:	6833      	ldr	r3, [r6, #0]
 8002c6e:	2100      	movs	r1, #0
 8002c70:	1d1a      	adds	r2, r3, #4
 8002c72:	6032      	str	r2, [r6, #0]
 8002c74:	681e      	ldr	r6, [r3, #0]
 8002c76:	6862      	ldr	r2, [r4, #4]
 8002c78:	4630      	mov	r0, r6
 8002c7a:	f000 f96b 	bl	8002f54 <memchr>
 8002c7e:	b108      	cbz	r0, 8002c84 <_printf_i+0x1e8>
 8002c80:	1b80      	subs	r0, r0, r6
 8002c82:	6060      	str	r0, [r4, #4]
 8002c84:	6863      	ldr	r3, [r4, #4]
 8002c86:	6123      	str	r3, [r4, #16]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c8e:	e7aa      	b.n	8002be6 <_printf_i+0x14a>
 8002c90:	4632      	mov	r2, r6
 8002c92:	4649      	mov	r1, r9
 8002c94:	4640      	mov	r0, r8
 8002c96:	6923      	ldr	r3, [r4, #16]
 8002c98:	47d0      	blx	sl
 8002c9a:	3001      	adds	r0, #1
 8002c9c:	d0ad      	beq.n	8002bfa <_printf_i+0x15e>
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	079b      	lsls	r3, r3, #30
 8002ca2:	d413      	bmi.n	8002ccc <_printf_i+0x230>
 8002ca4:	68e0      	ldr	r0, [r4, #12]
 8002ca6:	9b03      	ldr	r3, [sp, #12]
 8002ca8:	4298      	cmp	r0, r3
 8002caa:	bfb8      	it	lt
 8002cac:	4618      	movlt	r0, r3
 8002cae:	e7a6      	b.n	8002bfe <_printf_i+0x162>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	4632      	mov	r2, r6
 8002cb4:	4649      	mov	r1, r9
 8002cb6:	4640      	mov	r0, r8
 8002cb8:	47d0      	blx	sl
 8002cba:	3001      	adds	r0, #1
 8002cbc:	d09d      	beq.n	8002bfa <_printf_i+0x15e>
 8002cbe:	3501      	adds	r5, #1
 8002cc0:	68e3      	ldr	r3, [r4, #12]
 8002cc2:	9903      	ldr	r1, [sp, #12]
 8002cc4:	1a5b      	subs	r3, r3, r1
 8002cc6:	42ab      	cmp	r3, r5
 8002cc8:	dcf2      	bgt.n	8002cb0 <_printf_i+0x214>
 8002cca:	e7eb      	b.n	8002ca4 <_printf_i+0x208>
 8002ccc:	2500      	movs	r5, #0
 8002cce:	f104 0619 	add.w	r6, r4, #25
 8002cd2:	e7f5      	b.n	8002cc0 <_printf_i+0x224>
 8002cd4:	08003053 	.word	0x08003053
 8002cd8:	08003064 	.word	0x08003064

08002cdc <__sflush_r>:
 8002cdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	0716      	lsls	r6, r2, #28
 8002ce4:	4605      	mov	r5, r0
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	d454      	bmi.n	8002d94 <__sflush_r+0xb8>
 8002cea:	684b      	ldr	r3, [r1, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	dc02      	bgt.n	8002cf6 <__sflush_r+0x1a>
 8002cf0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	dd48      	ble.n	8002d88 <__sflush_r+0xac>
 8002cf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002cf8:	2e00      	cmp	r6, #0
 8002cfa:	d045      	beq.n	8002d88 <__sflush_r+0xac>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002d02:	682f      	ldr	r7, [r5, #0]
 8002d04:	6a21      	ldr	r1, [r4, #32]
 8002d06:	602b      	str	r3, [r5, #0]
 8002d08:	d030      	beq.n	8002d6c <__sflush_r+0x90>
 8002d0a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d0c:	89a3      	ldrh	r3, [r4, #12]
 8002d0e:	0759      	lsls	r1, r3, #29
 8002d10:	d505      	bpl.n	8002d1e <__sflush_r+0x42>
 8002d12:	6863      	ldr	r3, [r4, #4]
 8002d14:	1ad2      	subs	r2, r2, r3
 8002d16:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d18:	b10b      	cbz	r3, 8002d1e <__sflush_r+0x42>
 8002d1a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d1c:	1ad2      	subs	r2, r2, r3
 8002d1e:	2300      	movs	r3, #0
 8002d20:	4628      	mov	r0, r5
 8002d22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d24:	6a21      	ldr	r1, [r4, #32]
 8002d26:	47b0      	blx	r6
 8002d28:	1c43      	adds	r3, r0, #1
 8002d2a:	89a3      	ldrh	r3, [r4, #12]
 8002d2c:	d106      	bne.n	8002d3c <__sflush_r+0x60>
 8002d2e:	6829      	ldr	r1, [r5, #0]
 8002d30:	291d      	cmp	r1, #29
 8002d32:	d82b      	bhi.n	8002d8c <__sflush_r+0xb0>
 8002d34:	4a28      	ldr	r2, [pc, #160]	@ (8002dd8 <__sflush_r+0xfc>)
 8002d36:	410a      	asrs	r2, r1
 8002d38:	07d6      	lsls	r6, r2, #31
 8002d3a:	d427      	bmi.n	8002d8c <__sflush_r+0xb0>
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	6062      	str	r2, [r4, #4]
 8002d40:	6922      	ldr	r2, [r4, #16]
 8002d42:	04d9      	lsls	r1, r3, #19
 8002d44:	6022      	str	r2, [r4, #0]
 8002d46:	d504      	bpl.n	8002d52 <__sflush_r+0x76>
 8002d48:	1c42      	adds	r2, r0, #1
 8002d4a:	d101      	bne.n	8002d50 <__sflush_r+0x74>
 8002d4c:	682b      	ldr	r3, [r5, #0]
 8002d4e:	b903      	cbnz	r3, 8002d52 <__sflush_r+0x76>
 8002d50:	6560      	str	r0, [r4, #84]	@ 0x54
 8002d52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d54:	602f      	str	r7, [r5, #0]
 8002d56:	b1b9      	cbz	r1, 8002d88 <__sflush_r+0xac>
 8002d58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d5c:	4299      	cmp	r1, r3
 8002d5e:	d002      	beq.n	8002d66 <__sflush_r+0x8a>
 8002d60:	4628      	mov	r0, r5
 8002d62:	f7ff fbf3 	bl	800254c <_free_r>
 8002d66:	2300      	movs	r3, #0
 8002d68:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d6a:	e00d      	b.n	8002d88 <__sflush_r+0xac>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	4628      	mov	r0, r5
 8002d70:	47b0      	blx	r6
 8002d72:	4602      	mov	r2, r0
 8002d74:	1c50      	adds	r0, r2, #1
 8002d76:	d1c9      	bne.n	8002d0c <__sflush_r+0x30>
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0c6      	beq.n	8002d0c <__sflush_r+0x30>
 8002d7e:	2b1d      	cmp	r3, #29
 8002d80:	d001      	beq.n	8002d86 <__sflush_r+0xaa>
 8002d82:	2b16      	cmp	r3, #22
 8002d84:	d11d      	bne.n	8002dc2 <__sflush_r+0xe6>
 8002d86:	602f      	str	r7, [r5, #0]
 8002d88:	2000      	movs	r0, #0
 8002d8a:	e021      	b.n	8002dd0 <__sflush_r+0xf4>
 8002d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d90:	b21b      	sxth	r3, r3
 8002d92:	e01a      	b.n	8002dca <__sflush_r+0xee>
 8002d94:	690f      	ldr	r7, [r1, #16]
 8002d96:	2f00      	cmp	r7, #0
 8002d98:	d0f6      	beq.n	8002d88 <__sflush_r+0xac>
 8002d9a:	0793      	lsls	r3, r2, #30
 8002d9c:	bf18      	it	ne
 8002d9e:	2300      	movne	r3, #0
 8002da0:	680e      	ldr	r6, [r1, #0]
 8002da2:	bf08      	it	eq
 8002da4:	694b      	ldreq	r3, [r1, #20]
 8002da6:	1bf6      	subs	r6, r6, r7
 8002da8:	600f      	str	r7, [r1, #0]
 8002daa:	608b      	str	r3, [r1, #8]
 8002dac:	2e00      	cmp	r6, #0
 8002dae:	ddeb      	ble.n	8002d88 <__sflush_r+0xac>
 8002db0:	4633      	mov	r3, r6
 8002db2:	463a      	mov	r2, r7
 8002db4:	4628      	mov	r0, r5
 8002db6:	6a21      	ldr	r1, [r4, #32]
 8002db8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002dbc:	47e0      	blx	ip
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	dc07      	bgt.n	8002dd2 <__sflush_r+0xf6>
 8002dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dca:	f04f 30ff 	mov.w	r0, #4294967295
 8002dce:	81a3      	strh	r3, [r4, #12]
 8002dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd2:	4407      	add	r7, r0
 8002dd4:	1a36      	subs	r6, r6, r0
 8002dd6:	e7e9      	b.n	8002dac <__sflush_r+0xd0>
 8002dd8:	dfbffffe 	.word	0xdfbffffe

08002ddc <_fflush_r>:
 8002ddc:	b538      	push	{r3, r4, r5, lr}
 8002dde:	690b      	ldr	r3, [r1, #16]
 8002de0:	4605      	mov	r5, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	b913      	cbnz	r3, 8002dec <_fflush_r+0x10>
 8002de6:	2500      	movs	r5, #0
 8002de8:	4628      	mov	r0, r5
 8002dea:	bd38      	pop	{r3, r4, r5, pc}
 8002dec:	b118      	cbz	r0, 8002df6 <_fflush_r+0x1a>
 8002dee:	6a03      	ldr	r3, [r0, #32]
 8002df0:	b90b      	cbnz	r3, 8002df6 <_fflush_r+0x1a>
 8002df2:	f7ff f9a3 	bl	800213c <__sinit>
 8002df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f3      	beq.n	8002de6 <_fflush_r+0xa>
 8002dfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002e00:	07d0      	lsls	r0, r2, #31
 8002e02:	d404      	bmi.n	8002e0e <_fflush_r+0x32>
 8002e04:	0599      	lsls	r1, r3, #22
 8002e06:	d402      	bmi.n	8002e0e <_fflush_r+0x32>
 8002e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e0a:	f7ff fb8e 	bl	800252a <__retarget_lock_acquire_recursive>
 8002e0e:	4628      	mov	r0, r5
 8002e10:	4621      	mov	r1, r4
 8002e12:	f7ff ff63 	bl	8002cdc <__sflush_r>
 8002e16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e18:	4605      	mov	r5, r0
 8002e1a:	07da      	lsls	r2, r3, #31
 8002e1c:	d4e4      	bmi.n	8002de8 <_fflush_r+0xc>
 8002e1e:	89a3      	ldrh	r3, [r4, #12]
 8002e20:	059b      	lsls	r3, r3, #22
 8002e22:	d4e1      	bmi.n	8002de8 <_fflush_r+0xc>
 8002e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e26:	f7ff fb81 	bl	800252c <__retarget_lock_release_recursive>
 8002e2a:	e7dd      	b.n	8002de8 <_fflush_r+0xc>

08002e2c <__swhatbuf_r>:
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	460c      	mov	r4, r1
 8002e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e34:	4615      	mov	r5, r2
 8002e36:	2900      	cmp	r1, #0
 8002e38:	461e      	mov	r6, r3
 8002e3a:	b096      	sub	sp, #88	@ 0x58
 8002e3c:	da0c      	bge.n	8002e58 <__swhatbuf_r+0x2c>
 8002e3e:	89a3      	ldrh	r3, [r4, #12]
 8002e40:	2100      	movs	r1, #0
 8002e42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002e46:	bf14      	ite	ne
 8002e48:	2340      	movne	r3, #64	@ 0x40
 8002e4a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002e4e:	2000      	movs	r0, #0
 8002e50:	6031      	str	r1, [r6, #0]
 8002e52:	602b      	str	r3, [r5, #0]
 8002e54:	b016      	add	sp, #88	@ 0x58
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
 8002e58:	466a      	mov	r2, sp
 8002e5a:	f000 f849 	bl	8002ef0 <_fstat_r>
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	dbed      	blt.n	8002e3e <__swhatbuf_r+0x12>
 8002e62:	9901      	ldr	r1, [sp, #4]
 8002e64:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002e68:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002e6c:	4259      	negs	r1, r3
 8002e6e:	4159      	adcs	r1, r3
 8002e70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e74:	e7eb      	b.n	8002e4e <__swhatbuf_r+0x22>

08002e76 <__smakebuf_r>:
 8002e76:	898b      	ldrh	r3, [r1, #12]
 8002e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e7a:	079d      	lsls	r5, r3, #30
 8002e7c:	4606      	mov	r6, r0
 8002e7e:	460c      	mov	r4, r1
 8002e80:	d507      	bpl.n	8002e92 <__smakebuf_r+0x1c>
 8002e82:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002e86:	6023      	str	r3, [r4, #0]
 8002e88:	6123      	str	r3, [r4, #16]
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	6163      	str	r3, [r4, #20]
 8002e8e:	b003      	add	sp, #12
 8002e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e92:	466a      	mov	r2, sp
 8002e94:	ab01      	add	r3, sp, #4
 8002e96:	f7ff ffc9 	bl	8002e2c <__swhatbuf_r>
 8002e9a:	9f00      	ldr	r7, [sp, #0]
 8002e9c:	4605      	mov	r5, r0
 8002e9e:	4639      	mov	r1, r7
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	f7ff fbbd 	bl	8002620 <_malloc_r>
 8002ea6:	b948      	cbnz	r0, 8002ebc <__smakebuf_r+0x46>
 8002ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eac:	059a      	lsls	r2, r3, #22
 8002eae:	d4ee      	bmi.n	8002e8e <__smakebuf_r+0x18>
 8002eb0:	f023 0303 	bic.w	r3, r3, #3
 8002eb4:	f043 0302 	orr.w	r3, r3, #2
 8002eb8:	81a3      	strh	r3, [r4, #12]
 8002eba:	e7e2      	b.n	8002e82 <__smakebuf_r+0xc>
 8002ebc:	89a3      	ldrh	r3, [r4, #12]
 8002ebe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ec6:	81a3      	strh	r3, [r4, #12]
 8002ec8:	9b01      	ldr	r3, [sp, #4]
 8002eca:	6020      	str	r0, [r4, #0]
 8002ecc:	b15b      	cbz	r3, 8002ee6 <__smakebuf_r+0x70>
 8002ece:	4630      	mov	r0, r6
 8002ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ed4:	f000 f81e 	bl	8002f14 <_isatty_r>
 8002ed8:	b128      	cbz	r0, 8002ee6 <__smakebuf_r+0x70>
 8002eda:	89a3      	ldrh	r3, [r4, #12]
 8002edc:	f023 0303 	bic.w	r3, r3, #3
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	81a3      	strh	r3, [r4, #12]
 8002ee6:	89a3      	ldrh	r3, [r4, #12]
 8002ee8:	431d      	orrs	r5, r3
 8002eea:	81a5      	strh	r5, [r4, #12]
 8002eec:	e7cf      	b.n	8002e8e <__smakebuf_r+0x18>
	...

08002ef0 <_fstat_r>:
 8002ef0:	b538      	push	{r3, r4, r5, lr}
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	4d06      	ldr	r5, [pc, #24]	@ (8002f10 <_fstat_r+0x20>)
 8002ef6:	4604      	mov	r4, r0
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	602b      	str	r3, [r5, #0]
 8002efe:	f7fd fbed 	bl	80006dc <_fstat>
 8002f02:	1c43      	adds	r3, r0, #1
 8002f04:	d102      	bne.n	8002f0c <_fstat_r+0x1c>
 8002f06:	682b      	ldr	r3, [r5, #0]
 8002f08:	b103      	cbz	r3, 8002f0c <_fstat_r+0x1c>
 8002f0a:	6023      	str	r3, [r4, #0]
 8002f0c:	bd38      	pop	{r3, r4, r5, pc}
 8002f0e:	bf00      	nop
 8002f10:	200001f4 	.word	0x200001f4

08002f14 <_isatty_r>:
 8002f14:	b538      	push	{r3, r4, r5, lr}
 8002f16:	2300      	movs	r3, #0
 8002f18:	4d05      	ldr	r5, [pc, #20]	@ (8002f30 <_isatty_r+0x1c>)
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	4608      	mov	r0, r1
 8002f1e:	602b      	str	r3, [r5, #0]
 8002f20:	f7fd fbeb 	bl	80006fa <_isatty>
 8002f24:	1c43      	adds	r3, r0, #1
 8002f26:	d102      	bne.n	8002f2e <_isatty_r+0x1a>
 8002f28:	682b      	ldr	r3, [r5, #0]
 8002f2a:	b103      	cbz	r3, 8002f2e <_isatty_r+0x1a>
 8002f2c:	6023      	str	r3, [r4, #0]
 8002f2e:	bd38      	pop	{r3, r4, r5, pc}
 8002f30:	200001f4 	.word	0x200001f4

08002f34 <_sbrk_r>:
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	2300      	movs	r3, #0
 8002f38:	4d05      	ldr	r5, [pc, #20]	@ (8002f50 <_sbrk_r+0x1c>)
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	602b      	str	r3, [r5, #0]
 8002f40:	f7fd fbf2 	bl	8000728 <_sbrk>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	d102      	bne.n	8002f4e <_sbrk_r+0x1a>
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	b103      	cbz	r3, 8002f4e <_sbrk_r+0x1a>
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	bd38      	pop	{r3, r4, r5, pc}
 8002f50:	200001f4 	.word	0x200001f4

08002f54 <memchr>:
 8002f54:	4603      	mov	r3, r0
 8002f56:	b510      	push	{r4, lr}
 8002f58:	b2c9      	uxtb	r1, r1
 8002f5a:	4402      	add	r2, r0
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	d101      	bne.n	8002f66 <memchr+0x12>
 8002f62:	2000      	movs	r0, #0
 8002f64:	e003      	b.n	8002f6e <memchr+0x1a>
 8002f66:	7804      	ldrb	r4, [r0, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	428c      	cmp	r4, r1
 8002f6c:	d1f6      	bne.n	8002f5c <memchr+0x8>
 8002f6e:	bd10      	pop	{r4, pc}

08002f70 <_init>:
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	bf00      	nop
 8002f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f76:	bc08      	pop	{r3}
 8002f78:	469e      	mov	lr, r3
 8002f7a:	4770      	bx	lr

08002f7c <_fini>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	bf00      	nop
 8002f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f82:	bc08      	pop	{r3}
 8002f84:	469e      	mov	lr, r3
 8002f86:	4770      	bx	lr
