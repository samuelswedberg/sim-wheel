
stm-pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e54  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08002f60  08002f60  00003f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003058  08003058  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003058  08003058  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003058  08003058  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003058  08003058  00004058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800305c  0800305c  0000405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003060  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000068  080030c8  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080030c8  00005200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005206  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001588  00000000  00000000  0000a297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  0000b820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000465  00000000  00000000  0000be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017933  00000000  00000000  0000c295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006c95  00000000  00000000  00023bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e68  00000000  00000000  0002a85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae6c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e98  00000000  00000000  000ae708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000b05a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f48 	.word	0x08002f48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002f48 	.word	0x08002f48

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb20 	bl	8000794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81c 	bl	8000190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ac 	bl	80002b4 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f858 	bl	8000210 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000160:	4809      	ldr	r0, [pc, #36]	@ (8000188 <main+0x3c>)
 8000162:	f000 fd61 	bl	8000c28 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000166:	2110      	movs	r1, #16
 8000168:	4807      	ldr	r0, [pc, #28]	@ (8000188 <main+0x3c>)
 800016a:	f000 fe70 	bl	8000e4e <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 800016e:	2201      	movs	r2, #1
 8000170:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000174:	4805      	ldr	r0, [pc, #20]	@ (800018c <main+0x40>)
 8000176:	f001 fb59 	bl	800182c <HAL_GPIO_WritePin>
  while (1)
  {
	 CAN_Transmit();
 800017a:	f000 f8e7 	bl	800034c <CAN_Transmit>
	 HAL_Delay(50);
 800017e:	2032      	movs	r0, #50	@ 0x32
 8000180:	f000 fb6a 	bl	8000858 <HAL_Delay>
	 CAN_Transmit();
 8000184:	bf00      	nop
 8000186:	e7f8      	b.n	800017a <main+0x2e>
 8000188:	20000084 	.word	0x20000084
 800018c:	40011000 	.word	0x40011000

08000190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b090      	sub	sp, #64	@ 0x40
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0318 	add.w	r3, r7, #24
 800019a:	2228      	movs	r2, #40	@ 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f002 f944 	bl	800242c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b2:	2302      	movs	r3, #2
 80001b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b6:	2301      	movs	r3, #1
 80001b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ba:	2310      	movs	r3, #16
 80001bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001be:	2302      	movs	r3, #2
 80001c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001c2:	2300      	movs	r3, #0
 80001c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001cc:	f107 0318 	add.w	r3, r7, #24
 80001d0:	4618      	mov	r0, r3
 80001d2:	f001 fb43 	bl	800185c <HAL_RCC_OscConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001dc:	f000 f916 	bl	800040c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e0:	230f      	movs	r3, #15
 80001e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e4:	2302      	movs	r3, #2
 80001e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2101      	movs	r1, #1
 80001f8:	4618      	mov	r0, r3
 80001fa:	f001 fdb1 	bl	8001d60 <HAL_RCC_ClockConfig>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000204:	f000 f902 	bl	800040c <Error_Handler>
  }
}
 8000208:	bf00      	nop
 800020a:	3740      	adds	r7, #64	@ 0x40
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b08a      	sub	sp, #40	@ 0x28
 8000214:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000216:	4b25      	ldr	r3, [pc, #148]	@ (80002ac <MX_CAN_Init+0x9c>)
 8000218:	4a25      	ldr	r2, [pc, #148]	@ (80002b0 <MX_CAN_Init+0xa0>)
 800021a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 800021c:	4b23      	ldr	r3, [pc, #140]	@ (80002ac <MX_CAN_Init+0x9c>)
 800021e:	2203      	movs	r2, #3
 8000220:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000222:	4b22      	ldr	r3, [pc, #136]	@ (80002ac <MX_CAN_Init+0x9c>)
 8000224:	2200      	movs	r2, #0
 8000226:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000228:	4b20      	ldr	r3, [pc, #128]	@ (80002ac <MX_CAN_Init+0x9c>)
 800022a:	2200      	movs	r2, #0
 800022c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 800022e:	4b1f      	ldr	r3, [pc, #124]	@ (80002ac <MX_CAN_Init+0x9c>)
 8000230:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000234:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000236:	4b1d      	ldr	r3, [pc, #116]	@ (80002ac <MX_CAN_Init+0x9c>)
 8000238:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800023c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800023e:	4b1b      	ldr	r3, [pc, #108]	@ (80002ac <MX_CAN_Init+0x9c>)
 8000240:	2200      	movs	r2, #0
 8000242:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000244:	4b19      	ldr	r3, [pc, #100]	@ (80002ac <MX_CAN_Init+0x9c>)
 8000246:	2200      	movs	r2, #0
 8000248:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800024a:	4b18      	ldr	r3, [pc, #96]	@ (80002ac <MX_CAN_Init+0x9c>)
 800024c:	2200      	movs	r2, #0
 800024e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000250:	4b16      	ldr	r3, [pc, #88]	@ (80002ac <MX_CAN_Init+0x9c>)
 8000252:	2200      	movs	r2, #0
 8000254:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000256:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <MX_CAN_Init+0x9c>)
 8000258:	2200      	movs	r2, #0
 800025a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800025c:	4b13      	ldr	r3, [pc, #76]	@ (80002ac <MX_CAN_Init+0x9c>)
 800025e:	2200      	movs	r2, #0
 8000260:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000262:	4812      	ldr	r0, [pc, #72]	@ (80002ac <MX_CAN_Init+0x9c>)
 8000264:	f000 fb1c 	bl	80008a0 <HAL_CAN_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800026e:	f000 f8cd 	bl	800040c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;
 8000272:	2300      	movs	r3, #0
 8000274:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000276:	2300      	movs	r3, #0
 8000278:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800027a:	2301      	movs	r3, #1
 800027c:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x002 << 5;
 800027e:	2340      	movs	r3, #64	@ 0x40
 8000280:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0x0000;
 8000282:	2300      	movs	r3, #0
 8000284:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0x7FF << 5;
 8000286:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800028a:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0x0000;
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000290:	2301      	movs	r3, #1
 8000292:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 8000294:	2301      	movs	r3, #1
 8000296:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 8000298:	463b      	mov	r3, r7
 800029a:	4619      	mov	r1, r3
 800029c:	4803      	ldr	r0, [pc, #12]	@ (80002ac <MX_CAN_Init+0x9c>)
 800029e:	f000 fbfa 	bl	8000a96 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 80002a2:	bf00      	nop
 80002a4:	3728      	adds	r7, #40	@ 0x28
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000084 	.word	0x20000084
 80002b0:	40006400 	.word	0x40006400

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b088      	sub	sp, #32
 80002b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ba:	f107 0310 	add.w	r3, r7, #16
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000344 <MX_GPIO_Init+0x90>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000344 <MX_GPIO_Init+0x90>)
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <MX_GPIO_Init+0x90>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0310 	and.w	r3, r3, #16
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e0:	4b18      	ldr	r3, [pc, #96]	@ (8000344 <MX_GPIO_Init+0x90>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a17      	ldr	r2, [pc, #92]	@ (8000344 <MX_GPIO_Init+0x90>)
 80002e6:	f043 0320 	orr.w	r3, r3, #32
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b15      	ldr	r3, [pc, #84]	@ (8000344 <MX_GPIO_Init+0x90>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0320 	and.w	r3, r3, #32
 80002f4:	60bb      	str	r3, [r7, #8]
 80002f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f8:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <MX_GPIO_Init+0x90>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a11      	ldr	r2, [pc, #68]	@ (8000344 <MX_GPIO_Init+0x90>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <MX_GPIO_Init+0x90>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0304 	and.w	r3, r3, #4
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000316:	480c      	ldr	r0, [pc, #48]	@ (8000348 <MX_GPIO_Init+0x94>)
 8000318:	f001 fa88 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800031c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	2301      	movs	r3, #1
 8000324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032a:	2302      	movs	r3, #2
 800032c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800032e:	f107 0310 	add.w	r3, r7, #16
 8000332:	4619      	mov	r1, r3
 8000334:	4804      	ldr	r0, [pc, #16]	@ (8000348 <MX_GPIO_Init+0x94>)
 8000336:	f001 f8f5 	bl	8001524 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800033a:	bf00      	nop
 800033c:	3720      	adds	r7, #32
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000
 8000348:	40011000 	.word	0x40011000

0800034c <CAN_Transmit>:

/* USER CODE BEGIN 4 */
/*
 * CAN BUS FUNCTIONS
 */
void CAN_Transmit() {
 800034c:	b580      	push	{r7, lr}
 800034e:	b08c      	sub	sp, #48	@ 0x30
 8000350:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000358:	4825      	ldr	r0, [pc, #148]	@ (80003f0 <CAN_Transmit+0xa4>)
 800035a:	f001 fa67 	bl	800182c <HAL_GPIO_WritePin>

    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;
    uint8_t data[8] = {10, 20, 30, 40, 50, 60, 70, 80}; // Example data
 800035e:	4a25      	ldr	r2, [pc, #148]	@ (80003f4 <CAN_Transmit+0xa8>)
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000366:	e883 0003 	stmia.w	r3, {r0, r1}

	txHeader.StdId = 0x002;
 800036a:	2302      	movs	r3, #2
 800036c:	613b      	str	r3, [r7, #16]
	txHeader.ExtId = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
	txHeader.IDE = CAN_ID_STD;
 8000372:	2300      	movs	r3, #0
 8000374:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = CAN_RTR_DATA;
 8000376:	2300      	movs	r3, #0
 8000378:	61fb      	str	r3, [r7, #28]
	txHeader.DLC = 8;
 800037a:	2308      	movs	r3, #8
 800037c:	623b      	str	r3, [r7, #32]

    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &txMailbox);
 800037e:	f107 030c 	add.w	r3, r7, #12
 8000382:	1d3a      	adds	r2, r7, #4
 8000384:	f107 0110 	add.w	r1, r7, #16
 8000388:	481b      	ldr	r0, [pc, #108]	@ (80003f8 <CAN_Transmit+0xac>)
 800038a:	f000 fc91 	bl	8000cb0 <HAL_CAN_AddTxMessage>
 800038e:	4603      	mov	r3, r0
 8000390:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status != HAL_OK) {
 8000394:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000398:	2b00      	cmp	r3, #0
 800039a:	d01e      	beq.n	80003da <CAN_Transmit+0x8e>
		// Inspect the error
		if (status == HAL_ERROR) {
 800039c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d103      	bne.n	80003ac <CAN_Transmit+0x60>
			printf("HAL_CAN_AddTxMessage failed: HAL_ERROR\n");
 80003a4:	4815      	ldr	r0, [pc, #84]	@ (80003fc <CAN_Transmit+0xb0>)
 80003a6:	f001 ff61 	bl	800226c <puts>
 80003aa:	e00e      	b.n	80003ca <CAN_Transmit+0x7e>
		} else if (status == HAL_BUSY) {
 80003ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80003b0:	2b02      	cmp	r3, #2
 80003b2:	d103      	bne.n	80003bc <CAN_Transmit+0x70>
			printf("HAL_CAN_AddTxMessage failed: HAL_BUSY\n");
 80003b4:	4812      	ldr	r0, [pc, #72]	@ (8000400 <CAN_Transmit+0xb4>)
 80003b6:	f001 ff59 	bl	800226c <puts>
 80003ba:	e006      	b.n	80003ca <CAN_Transmit+0x7e>
		} else if (status == HAL_TIMEOUT) {
 80003bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	d102      	bne.n	80003ca <CAN_Transmit+0x7e>
			printf("HAL_CAN_AddTxMessage failed: HAL_TIMEOUT\n");
 80003c4:	480f      	ldr	r0, [pc, #60]	@ (8000404 <CAN_Transmit+0xb8>)
 80003c6:	f001 ff51 	bl	800226c <puts>
		}

		// Optionally log the state of CAN error counters
		uint32_t error = HAL_CAN_GetError(&hcan);
 80003ca:	480b      	ldr	r0, [pc, #44]	@ (80003f8 <CAN_Transmit+0xac>)
 80003cc:	f000 ff90 	bl	80012f0 <HAL_CAN_GetError>
 80003d0:	62b8      	str	r0, [r7, #40]	@ 0x28
		printf("CAN Error Code: 0x%08lx\n", error); // Only if you decide to stop execution
 80003d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80003d4:	480c      	ldr	r0, [pc, #48]	@ (8000408 <CAN_Transmit+0xbc>)
 80003d6:	f001 fee1 	bl	800219c <iprintf>
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003e0:	4803      	ldr	r0, [pc, #12]	@ (80003f0 <CAN_Transmit+0xa4>)
 80003e2:	f001 fa23 	bl	800182c <HAL_GPIO_WritePin>
}
 80003e6:	bf00      	nop
 80003e8:	3730      	adds	r7, #48	@ 0x30
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40011000 	.word	0x40011000
 80003f4:	08002ff8 	.word	0x08002ff8
 80003f8:	20000084 	.word	0x20000084
 80003fc:	08002f60 	.word	0x08002f60
 8000400:	08002f88 	.word	0x08002f88
 8000404:	08002fb0 	.word	0x08002fb0
 8000408:	08002fdc 	.word	0x08002fdc

0800040c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000410:	b672      	cpsid	i
}
 8000412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <Error_Handler+0x8>

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041e:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <HAL_MspInit+0x5c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a14      	ldr	r2, [pc, #80]	@ (8000474 <HAL_MspInit+0x5c>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	@ (8000474 <HAL_MspInit+0x5c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a0e      	ldr	r2, [pc, #56]	@ (8000474 <HAL_MspInit+0x5c>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044e:	4b0a      	ldr	r3, [pc, #40]	@ (8000478 <HAL_MspInit+0x60>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	4a04      	ldr	r2, [pc, #16]	@ (8000478 <HAL_MspInit+0x60>)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000
 8000478:	40010000 	.word	0x40010000

0800047c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a2c      	ldr	r2, [pc, #176]	@ (8000548 <HAL_CAN_MspInit+0xcc>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d151      	bne.n	8000540 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800049c:	4b2b      	ldr	r3, [pc, #172]	@ (800054c <HAL_CAN_MspInit+0xd0>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	4a2a      	ldr	r2, [pc, #168]	@ (800054c <HAL_CAN_MspInit+0xd0>)
 80004a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004a6:	61d3      	str	r3, [r2, #28]
 80004a8:	4b28      	ldr	r3, [pc, #160]	@ (800054c <HAL_CAN_MspInit+0xd0>)
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4b25      	ldr	r3, [pc, #148]	@ (800054c <HAL_CAN_MspInit+0xd0>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a24      	ldr	r2, [pc, #144]	@ (800054c <HAL_CAN_MspInit+0xd0>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b22      	ldr	r3, [pc, #136]	@ (800054c <HAL_CAN_MspInit+0xd0>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80004cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80004d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d2:	2300      	movs	r3, #0
 80004d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	481b      	ldr	r0, [pc, #108]	@ (8000550 <HAL_CAN_MspInit+0xd4>)
 80004e2:	f001 f81f 	bl	8001524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ec:	2302      	movs	r3, #2
 80004ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f0:	2303      	movs	r3, #3
 80004f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	4619      	mov	r1, r3
 80004fa:	4815      	ldr	r0, [pc, #84]	@ (8000550 <HAL_CAN_MspInit+0xd4>)
 80004fc:	f001 f812 	bl	8001524 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000500:	2200      	movs	r2, #0
 8000502:	2100      	movs	r1, #0
 8000504:	2013      	movs	r0, #19
 8000506:	f000 ffd6 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800050a:	2013      	movs	r0, #19
 800050c:	f000 ffef 	bl	80014ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	2100      	movs	r1, #0
 8000514:	2014      	movs	r0, #20
 8000516:	f000 ffce 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800051a:	2014      	movs	r0, #20
 800051c:	f000 ffe7 	bl	80014ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000520:	2200      	movs	r2, #0
 8000522:	2100      	movs	r1, #0
 8000524:	2015      	movs	r0, #21
 8000526:	f000 ffc6 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800052a:	2015      	movs	r0, #21
 800052c:	f000 ffdf 	bl	80014ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2100      	movs	r1, #0
 8000534:	2016      	movs	r0, #22
 8000536:	f000 ffbe 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800053a:	2016      	movs	r0, #22
 800053c:	f000 ffd7 	bl	80014ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40006400 	.word	0x40006400
 800054c:	40021000 	.word	0x40021000
 8000550:	40010800 	.word	0x40010800

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <NMI_Handler+0x4>

0800055c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <MemManage_Handler+0x4>

0800056c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <BusFault_Handler+0x4>

08000574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <UsageFault_Handler+0x4>

0800057c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a4:	f000 f93c 	bl	8000820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80005b2:	f000 fc71 	bl	8000e98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000084 	.word	0x20000084

080005c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005c6:	f000 fc67 	bl	8000e98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000084 	.word	0x20000084

080005d4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005d8:	4802      	ldr	r0, [pc, #8]	@ (80005e4 <CAN1_RX1_IRQHandler+0x10>)
 80005da:	f000 fc5d 	bl	8000e98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000084 	.word	0x20000084

080005e8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005ec:	4802      	ldr	r0, [pc, #8]	@ (80005f8 <CAN1_SCE_IRQHandler+0x10>)
 80005ee:	f000 fc53 	bl	8000e98 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000084 	.word	0x20000084

080005fc <_read>:
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	e00a      	b.n	8000624 <_read+0x28>
 800060e:	f3af 8000 	nop.w
 8000612:	4601      	mov	r1, r0
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	60ba      	str	r2, [r7, #8]
 800061a:	b2ca      	uxtb	r2, r1
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	3301      	adds	r3, #1
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	697a      	ldr	r2, [r7, #20]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	429a      	cmp	r2, r3
 800062a:	dbf0      	blt.n	800060e <_read+0x12>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <_write>:
 8000636:	b580      	push	{r7, lr}
 8000638:	b086      	sub	sp, #24
 800063a:	af00      	add	r7, sp, #0
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	e009      	b.n	800065c <_write+0x26>
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	60ba      	str	r2, [r7, #8]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f3af 8000 	nop.w
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	3301      	adds	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	429a      	cmp	r2, r3
 8000662:	dbf1      	blt.n	8000648 <_write+0x12>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4618      	mov	r0, r3
 8000668:	3718      	adds	r7, #24
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <_close>:
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <_fstat>:
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	2300      	movs	r3, #0
 8000698:	4618      	mov	r0, r3
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr

080006a2 <_isatty>:
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	2301      	movs	r3, #1
 80006ac:	4618      	mov	r0, r3
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <_lseek>:
 80006b6:	b480      	push	{r7}
 80006b8:	b085      	sub	sp, #20
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	60f8      	str	r0, [r7, #12]
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
 80006c2:	2300      	movs	r3, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
	...

080006d0 <_sbrk>:
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	4a14      	ldr	r2, [pc, #80]	@ (800072c <_sbrk+0x5c>)
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <_sbrk+0x60>)
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <_sbrk+0x64>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d102      	bne.n	80006f2 <_sbrk+0x22>
 80006ec:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <_sbrk+0x64>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <_sbrk+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <_sbrk+0x64>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d207      	bcs.n	8000710 <_sbrk+0x40>
 8000700:	f001 fee2 	bl	80024c8 <__errno>
 8000704:	4603      	mov	r3, r0
 8000706:	220c      	movs	r2, #12
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	e009      	b.n	8000724 <_sbrk+0x54>
 8000710:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <_sbrk+0x64>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <_sbrk+0x64>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	4a05      	ldr	r2, [pc, #20]	@ (8000734 <_sbrk+0x64>)
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20005000 	.word	0x20005000
 8000730:	00000400 	.word	0x00000400
 8000734:	200000ac 	.word	0x200000ac
 8000738:	20000200 	.word	0x20000200

0800073c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <Reset_Handler>:
 8000748:	f7ff fff8 	bl	800073c <SystemInit>
 800074c:	480b      	ldr	r0, [pc, #44]	@ (800077c <LoopFillZerobss+0xe>)
 800074e:	490c      	ldr	r1, [pc, #48]	@ (8000780 <LoopFillZerobss+0x12>)
 8000750:	4a0c      	ldr	r2, [pc, #48]	@ (8000784 <LoopFillZerobss+0x16>)
 8000752:	2300      	movs	r3, #0
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:
 8000756:	58d4      	ldr	r4, [r2, r3]
 8000758:	50c4      	str	r4, [r0, r3]
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:
 800075c:	18c4      	adds	r4, r0, r3
 800075e:	428c      	cmp	r4, r1
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
 8000762:	4a09      	ldr	r2, [pc, #36]	@ (8000788 <LoopFillZerobss+0x1a>)
 8000764:	4c09      	ldr	r4, [pc, #36]	@ (800078c <LoopFillZerobss+0x1e>)
 8000766:	2300      	movs	r3, #0
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:
 800076e:	42a2      	cmp	r2, r4
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>
 8000772:	f001 feaf 	bl	80024d4 <__libc_init_array>
 8000776:	f7ff fce9 	bl	800014c <main>
 800077a:	4770      	bx	lr
 800077c:	20000000 	.word	0x20000000
 8000780:	20000068 	.word	0x20000068
 8000784:	08003060 	.word	0x08003060
 8000788:	20000068 	.word	0x20000068
 800078c:	20000200 	.word	0x20000200

08000790 <ADC1_2_IRQHandler>:
 8000790:	e7fe      	b.n	8000790 <ADC1_2_IRQHandler>
	...

08000794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000798:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <HAL_Init+0x28>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a07      	ldr	r2, [pc, #28]	@ (80007bc <HAL_Init+0x28>)
 800079e:	f043 0310 	orr.w	r3, r3, #16
 80007a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a4:	2003      	movs	r0, #3
 80007a6:	f000 fe7b 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007aa:	200f      	movs	r0, #15
 80007ac:	f000 f808 	bl	80007c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b0:	f7ff fe32 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40022000 	.word	0x40022000

080007c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <HAL_InitTick+0x54>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <HAL_InitTick+0x58>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007da:	fbb2 f3f3 	udiv	r3, r2, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 fe93 	bl	800150a <HAL_SYSTICK_Config>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e00e      	b.n	800080c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b0f      	cmp	r3, #15
 80007f2:	d80a      	bhi.n	800080a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f4:	2200      	movs	r2, #0
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	f000 fe5b 	bl	80014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000800:	4a06      	ldr	r2, [pc, #24]	@ (800081c <HAL_InitTick+0x5c>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
 8000808:	e000      	b.n	800080c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000000 	.word	0x20000000
 8000818:	20000008 	.word	0x20000008
 800081c:	20000004 	.word	0x20000004

08000820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000824:	4b05      	ldr	r3, [pc, #20]	@ (800083c <HAL_IncTick+0x1c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <HAL_IncTick+0x20>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4413      	add	r3, r2
 8000830:	4a03      	ldr	r2, [pc, #12]	@ (8000840 <HAL_IncTick+0x20>)
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000008 	.word	0x20000008
 8000840:	200000b0 	.word	0x200000b0

08000844 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return uwTick;
 8000848:	4b02      	ldr	r3, [pc, #8]	@ (8000854 <HAL_GetTick+0x10>)
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	200000b0 	.word	0x200000b0

08000858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000860:	f7ff fff0 	bl	8000844 <HAL_GetTick>
 8000864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000870:	d005      	beq.n	800087e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000872:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <HAL_Delay+0x44>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4413      	add	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800087e:	bf00      	nop
 8000880:	f7ff ffe0 	bl	8000844 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	429a      	cmp	r2, r3
 800088e:	d8f7      	bhi.n	8000880 <HAL_Delay+0x28>
  {
  }
}
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000008 	.word	0x20000008

080008a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d101      	bne.n	80008b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e0ed      	b.n	8000a8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d102      	bne.n	80008c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff fddc 	bl	800047c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f042 0201 	orr.w	r2, r2, #1
 80008d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008d4:	f7ff ffb6 	bl	8000844 <HAL_GetTick>
 80008d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008da:	e012      	b.n	8000902 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008dc:	f7ff ffb2 	bl	8000844 <HAL_GetTick>
 80008e0:	4602      	mov	r2, r0
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	2b0a      	cmp	r3, #10
 80008e8:	d90b      	bls.n	8000902 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2205      	movs	r2, #5
 80008fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e0c5      	b.n	8000a8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0e5      	beq.n	80008dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f022 0202 	bic.w	r2, r2, #2
 800091e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000920:	f7ff ff90 	bl	8000844 <HAL_GetTick>
 8000924:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000926:	e012      	b.n	800094e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000928:	f7ff ff8c 	bl	8000844 <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	2b0a      	cmp	r3, #10
 8000934:	d90b      	bls.n	800094e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800093a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2205      	movs	r2, #5
 8000946:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e09f      	b.n	8000a8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f003 0302 	and.w	r3, r3, #2
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1e5      	bne.n	8000928 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	7e1b      	ldrb	r3, [r3, #24]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d108      	bne.n	8000976 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	e007      	b.n	8000986 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000984:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	7e5b      	ldrb	r3, [r3, #25]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d108      	bne.n	80009a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	e007      	b.n	80009b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80009ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7e9b      	ldrb	r3, [r3, #26]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d108      	bne.n	80009ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f042 0220 	orr.w	r2, r2, #32
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	e007      	b.n	80009da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f022 0220 	bic.w	r2, r2, #32
 80009d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	7edb      	ldrb	r3, [r3, #27]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d108      	bne.n	80009f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f022 0210 	bic.w	r2, r2, #16
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	e007      	b.n	8000a04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f042 0210 	orr.w	r2, r2, #16
 8000a02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7f1b      	ldrb	r3, [r3, #28]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d108      	bne.n	8000a1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f042 0208 	orr.w	r2, r2, #8
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	e007      	b.n	8000a2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f022 0208 	bic.w	r2, r2, #8
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7f5b      	ldrb	r3, [r3, #29]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d108      	bne.n	8000a48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f042 0204 	orr.w	r2, r2, #4
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	e007      	b.n	8000a58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f022 0204 	bic.w	r2, r2, #4
 8000a56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689a      	ldr	r2, [r3, #8]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	431a      	orrs	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	691b      	ldr	r3, [r3, #16]
 8000a66:	431a      	orrs	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	ea42 0103 	orr.w	r1, r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	1e5a      	subs	r2, r3, #1
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2201      	movs	r2, #1
 8000a88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b087      	sub	sp, #28
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aac:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000aae:	7cfb      	ldrb	r3, [r7, #19]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d003      	beq.n	8000abc <HAL_CAN_ConfigFilter+0x26>
 8000ab4:	7cfb      	ldrb	r3, [r7, #19]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	f040 80aa 	bne.w	8000c10 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ac2:	f043 0201 	orr.w	r2, r3, #1
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	f003 031f 	and.w	r3, r3, #31
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d123      	bne.n	8000b3e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	43db      	mvns	r3, r3
 8000b00:	401a      	ands	r2, r3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b18:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3248      	adds	r2, #72	@ 0x48
 8000b1e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b32:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b34:	6979      	ldr	r1, [r7, #20]
 8000b36:	3348      	adds	r3, #72	@ 0x48
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	440b      	add	r3, r1
 8000b3c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d122      	bne.n	8000b8c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b62:	683a      	ldr	r2, [r7, #0]
 8000b64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3248      	adds	r2, #72	@ 0x48
 8000b6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b82:	6979      	ldr	r1, [r7, #20]
 8000b84:	3348      	adds	r3, #72	@ 0x48
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	440b      	add	r3, r1
 8000b8a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d109      	bne.n	8000ba8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000ba6:	e007      	b.n	8000bb8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d109      	bne.n	8000bd4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000bd2:	e007      	b.n	8000be4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	6a1b      	ldr	r3, [r3, #32]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d107      	bne.n	8000bfc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c02:	f023 0201 	bic.w	r2, r3, #1
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e006      	b.n	8000c1e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c14:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
  }
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	371c      	adds	r7, #28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d12e      	bne.n	8000c9a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2202      	movs	r2, #2
 8000c40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 0201 	bic.w	r2, r2, #1
 8000c52:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c54:	f7ff fdf6 	bl	8000844 <HAL_GetTick>
 8000c58:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c5a:	e012      	b.n	8000c82 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c5c:	f7ff fdf2 	bl	8000844 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b0a      	cmp	r3, #10
 8000c68:	d90b      	bls.n	8000c82 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c6e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2205      	movs	r2, #5
 8000c7a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e012      	b.n	8000ca8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1e5      	bne.n	8000c5c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e006      	b.n	8000ca8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
  }
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	@ 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cc4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cce:	7ffb      	ldrb	r3, [r7, #31]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d003      	beq.n	8000cdc <HAL_CAN_AddTxMessage+0x2c>
 8000cd4:	7ffb      	ldrb	r3, [r7, #31]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	f040 80ad 	bne.w	8000e36 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10a      	bne.n	8000cfc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d105      	bne.n	8000cfc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 8095 	beq.w	8000e26 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	0e1b      	lsrs	r3, r3, #24
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d06:	2201      	movs	r2, #1
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10d      	bne.n	8000d34 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d22:	68f9      	ldr	r1, [r7, #12]
 8000d24:	6809      	ldr	r1, [r1, #0]
 8000d26:	431a      	orrs	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3318      	adds	r3, #24
 8000d2c:	011b      	lsls	r3, r3, #4
 8000d2e:	440b      	add	r3, r1
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	e00f      	b.n	8000d54 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d3e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d44:	68f9      	ldr	r1, [r7, #12]
 8000d46:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d48:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3318      	adds	r3, #24
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	440b      	add	r3, r1
 8000d52:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6819      	ldr	r1, [r3, #0]
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	691a      	ldr	r2, [r3, #16]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3318      	adds	r3, #24
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	440b      	add	r3, r1
 8000d64:	3304      	adds	r3, #4
 8000d66:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	7d1b      	ldrb	r3, [r3, #20]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d111      	bne.n	8000d94 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3318      	adds	r3, #24
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	4413      	add	r3, r2
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	6811      	ldr	r1, [r2, #0]
 8000d84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3318      	adds	r3, #24
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	440b      	add	r3, r1
 8000d90:	3304      	adds	r3, #4
 8000d92:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3307      	adds	r3, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	061a      	lsls	r2, r3, #24
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3306      	adds	r3, #6
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	041b      	lsls	r3, r3, #16
 8000da4:	431a      	orrs	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3305      	adds	r3, #5
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	4313      	orrs	r3, r2
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	3204      	adds	r2, #4
 8000db4:	7812      	ldrb	r2, [r2, #0]
 8000db6:	4610      	mov	r0, r2
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	6811      	ldr	r1, [r2, #0]
 8000dbc:	ea43 0200 	orr.w	r2, r3, r0
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	011b      	lsls	r3, r3, #4
 8000dc4:	440b      	add	r3, r1
 8000dc6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000dca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3303      	adds	r3, #3
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	061a      	lsls	r2, r3, #24
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	041b      	lsls	r3, r3, #16
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3301      	adds	r3, #1
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	4313      	orrs	r3, r2
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	7812      	ldrb	r2, [r2, #0]
 8000dec:	4610      	mov	r0, r2
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	6811      	ldr	r1, [r2, #0]
 8000df2:	ea43 0200 	orr.w	r2, r3, r0
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e00:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3318      	adds	r3, #24
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	4413      	add	r3, r2
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	6811      	ldr	r1, [r2, #0]
 8000e14:	f043 0201 	orr.w	r2, r3, #1
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3318      	adds	r3, #24
 8000e1c:	011b      	lsls	r3, r3, #4
 8000e1e:	440b      	add	r3, r1
 8000e20:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e00e      	b.n	8000e44 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e2a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e006      	b.n	8000e44 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
  }
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3724      	adds	r7, #36	@ 0x24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b085      	sub	sp, #20
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e5e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d002      	beq.n	8000e6c <HAL_CAN_ActivateNotification+0x1e>
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d109      	bne.n	8000e80 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6959      	ldr	r1, [r3, #20]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e006      	b.n	8000e8e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e84:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
  }
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d07c      	beq.n	8000fd8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d023      	beq.n	8000f30 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2201      	movs	r2, #1
 8000eee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f983 	bl	8001206 <HAL_CAN_TxMailbox0CompleteCallback>
 8000f00:	e016      	b.n	8000f30 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d004      	beq.n	8000f16 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f14:	e00c      	b.n	8000f30 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	f003 0308 	and.w	r3, r3, #8
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d004      	beq.n	8000f2a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f28:	e002      	b.n	8000f30 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f986 	bl	800123c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d024      	beq.n	8000f84 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f962 	bl	8001218 <HAL_CAN_TxMailbox1CompleteCallback>
 8000f54:	e016      	b.n	8000f84 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d004      	beq.n	8000f6a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f68:	e00c      	b.n	8000f84 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d004      	beq.n	8000f7e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f7c:	e002      	b.n	8000f84 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f965 	bl	800124e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d024      	beq.n	8000fd8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f941 	bl	800122a <HAL_CAN_TxMailbox2CompleteCallback>
 8000fa8:	e016      	b.n	8000fd8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d004      	beq.n	8000fbe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fbc:	e00c      	b.n	8000fd8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fd0:	e002      	b.n	8000fd8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f944 	bl	8001260 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00c      	beq.n	8000ffc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f003 0310 	and.w	r3, r3, #16
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d007      	beq.n	8000ffc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2210      	movs	r2, #16
 8000ffa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000ffc:	6a3b      	ldr	r3, [r7, #32]
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	2b00      	cmp	r3, #0
 800100e:	d006      	beq.n	800101e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2208      	movs	r2, #8
 8001016:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 f933 	bl	8001284 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d009      	beq.n	800103c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f91b 	bl	8001272 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00c      	beq.n	8001060 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	f003 0310 	and.w	r3, r3, #16
 800104c:	2b00      	cmp	r3, #0
 800104e:	d007      	beq.n	8001060 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2210      	movs	r2, #16
 800105e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00b      	beq.n	8001082 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2208      	movs	r2, #8
 800107a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f913 	bl	80012a8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	f003 0310 	and.w	r3, r3, #16
 8001088:	2b00      	cmp	r3, #0
 800108a:	d009      	beq.n	80010a0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f8fb 	bl	8001296 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00b      	beq.n	80010c2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d006      	beq.n	80010c2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2210      	movs	r2, #16
 80010ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 f8fc 	bl	80012ba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80010c2:	6a3b      	ldr	r3, [r7, #32]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00b      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d006      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2208      	movs	r2, #8
 80010dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f8f4 	bl	80012cc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d07b      	beq.n	80011e6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d072      	beq.n	80011de <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d008      	beq.n	8001114 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800110c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800111a:	2b00      	cmp	r3, #0
 800111c:	d008      	beq.n	8001130 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001136:	2b00      	cmp	r3, #0
 8001138:	d008      	beq.n	800114c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001152:	2b00      	cmp	r3, #0
 8001154:	d043      	beq.n	80011de <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800115c:	2b00      	cmp	r3, #0
 800115e:	d03e      	beq.n	80011de <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001166:	2b60      	cmp	r3, #96	@ 0x60
 8001168:	d02b      	beq.n	80011c2 <HAL_CAN_IRQHandler+0x32a>
 800116a:	2b60      	cmp	r3, #96	@ 0x60
 800116c:	d82e      	bhi.n	80011cc <HAL_CAN_IRQHandler+0x334>
 800116e:	2b50      	cmp	r3, #80	@ 0x50
 8001170:	d022      	beq.n	80011b8 <HAL_CAN_IRQHandler+0x320>
 8001172:	2b50      	cmp	r3, #80	@ 0x50
 8001174:	d82a      	bhi.n	80011cc <HAL_CAN_IRQHandler+0x334>
 8001176:	2b40      	cmp	r3, #64	@ 0x40
 8001178:	d019      	beq.n	80011ae <HAL_CAN_IRQHandler+0x316>
 800117a:	2b40      	cmp	r3, #64	@ 0x40
 800117c:	d826      	bhi.n	80011cc <HAL_CAN_IRQHandler+0x334>
 800117e:	2b30      	cmp	r3, #48	@ 0x30
 8001180:	d010      	beq.n	80011a4 <HAL_CAN_IRQHandler+0x30c>
 8001182:	2b30      	cmp	r3, #48	@ 0x30
 8001184:	d822      	bhi.n	80011cc <HAL_CAN_IRQHandler+0x334>
 8001186:	2b10      	cmp	r3, #16
 8001188:	d002      	beq.n	8001190 <HAL_CAN_IRQHandler+0x2f8>
 800118a:	2b20      	cmp	r3, #32
 800118c:	d005      	beq.n	800119a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800118e:	e01d      	b.n	80011cc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001198:	e019      	b.n	80011ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800119a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119c:	f043 0310 	orr.w	r3, r3, #16
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011a2:	e014      	b.n	80011ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80011a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011ac:	e00f      	b.n	80011ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80011ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011b6:	e00a      	b.n	80011ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80011b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011c0:	e005      	b.n	80011ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011ca:	e000      	b.n	80011ce <HAL_CAN_IRQHandler+0x336>
            break;
 80011cc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	699a      	ldr	r2, [r3, #24]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80011dc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2204      	movs	r2, #4
 80011e4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f870 	bl	80012de <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	@ 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001330:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	@ (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4906      	ldr	r1, [pc, #24]	@ (80013a0 <__NVIC_EnableIRQ+0x34>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	@ (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	@ (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	@ 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	@ 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f7ff ff90 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	@ (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff2d 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff42 	bl	8001350 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff90 	bl	80013f8 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5f 	bl	80013a4 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff35 	bl	800136c <__NVIC_EnableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffa2 	bl	800145c <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b08b      	sub	sp, #44	@ 0x2c
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001536:	e169      	b.n	800180c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001538:	2201      	movs	r2, #1
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	429a      	cmp	r2, r3
 8001552:	f040 8158 	bne.w	8001806 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4a9a      	ldr	r2, [pc, #616]	@ (80017c4 <HAL_GPIO_Init+0x2a0>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d05e      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 8001560:	4a98      	ldr	r2, [pc, #608]	@ (80017c4 <HAL_GPIO_Init+0x2a0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d875      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 8001566:	4a98      	ldr	r2, [pc, #608]	@ (80017c8 <HAL_GPIO_Init+0x2a4>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d058      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 800156c:	4a96      	ldr	r2, [pc, #600]	@ (80017c8 <HAL_GPIO_Init+0x2a4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d86f      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 8001572:	4a96      	ldr	r2, [pc, #600]	@ (80017cc <HAL_GPIO_Init+0x2a8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d052      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 8001578:	4a94      	ldr	r2, [pc, #592]	@ (80017cc <HAL_GPIO_Init+0x2a8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d869      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 800157e:	4a94      	ldr	r2, [pc, #592]	@ (80017d0 <HAL_GPIO_Init+0x2ac>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d04c      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 8001584:	4a92      	ldr	r2, [pc, #584]	@ (80017d0 <HAL_GPIO_Init+0x2ac>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d863      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 800158a:	4a92      	ldr	r2, [pc, #584]	@ (80017d4 <HAL_GPIO_Init+0x2b0>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d046      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 8001590:	4a90      	ldr	r2, [pc, #576]	@ (80017d4 <HAL_GPIO_Init+0x2b0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d85d      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 8001596:	2b12      	cmp	r3, #18
 8001598:	d82a      	bhi.n	80015f0 <HAL_GPIO_Init+0xcc>
 800159a:	2b12      	cmp	r3, #18
 800159c:	d859      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 800159e:	a201      	add	r2, pc, #4	@ (adr r2, 80015a4 <HAL_GPIO_Init+0x80>)
 80015a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a4:	0800161f 	.word	0x0800161f
 80015a8:	080015f9 	.word	0x080015f9
 80015ac:	0800160b 	.word	0x0800160b
 80015b0:	0800164d 	.word	0x0800164d
 80015b4:	08001653 	.word	0x08001653
 80015b8:	08001653 	.word	0x08001653
 80015bc:	08001653 	.word	0x08001653
 80015c0:	08001653 	.word	0x08001653
 80015c4:	08001653 	.word	0x08001653
 80015c8:	08001653 	.word	0x08001653
 80015cc:	08001653 	.word	0x08001653
 80015d0:	08001653 	.word	0x08001653
 80015d4:	08001653 	.word	0x08001653
 80015d8:	08001653 	.word	0x08001653
 80015dc:	08001653 	.word	0x08001653
 80015e0:	08001653 	.word	0x08001653
 80015e4:	08001653 	.word	0x08001653
 80015e8:	08001601 	.word	0x08001601
 80015ec:	08001615 	.word	0x08001615
 80015f0:	4a79      	ldr	r2, [pc, #484]	@ (80017d8 <HAL_GPIO_Init+0x2b4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015f6:	e02c      	b.n	8001652 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	623b      	str	r3, [r7, #32]
          break;
 80015fe:	e029      	b.n	8001654 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	3304      	adds	r3, #4
 8001606:	623b      	str	r3, [r7, #32]
          break;
 8001608:	e024      	b.n	8001654 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	3308      	adds	r3, #8
 8001610:	623b      	str	r3, [r7, #32]
          break;
 8001612:	e01f      	b.n	8001654 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	330c      	adds	r3, #12
 800161a:	623b      	str	r3, [r7, #32]
          break;
 800161c:	e01a      	b.n	8001654 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d102      	bne.n	800162c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001626:	2304      	movs	r3, #4
 8001628:	623b      	str	r3, [r7, #32]
          break;
 800162a:	e013      	b.n	8001654 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d105      	bne.n	8001640 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001634:	2308      	movs	r3, #8
 8001636:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	611a      	str	r2, [r3, #16]
          break;
 800163e:	e009      	b.n	8001654 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001640:	2308      	movs	r3, #8
 8001642:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	615a      	str	r2, [r3, #20]
          break;
 800164a:	e003      	b.n	8001654 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
          break;
 8001650:	e000      	b.n	8001654 <HAL_GPIO_Init+0x130>
          break;
 8001652:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2bff      	cmp	r3, #255	@ 0xff
 8001658:	d801      	bhi.n	800165e <HAL_GPIO_Init+0x13a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	e001      	b.n	8001662 <HAL_GPIO_Init+0x13e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3304      	adds	r3, #4
 8001662:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2bff      	cmp	r3, #255	@ 0xff
 8001668:	d802      	bhi.n	8001670 <HAL_GPIO_Init+0x14c>
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	e002      	b.n	8001676 <HAL_GPIO_Init+0x152>
 8001670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001672:	3b08      	subs	r3, #8
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	210f      	movs	r1, #15
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	401a      	ands	r2, r3
 8001688:	6a39      	ldr	r1, [r7, #32]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	431a      	orrs	r2, r3
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80b1 	beq.w	8001806 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016a4:	4b4d      	ldr	r3, [pc, #308]	@ (80017dc <HAL_GPIO_Init+0x2b8>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a4c      	ldr	r2, [pc, #304]	@ (80017dc <HAL_GPIO_Init+0x2b8>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b4a      	ldr	r3, [pc, #296]	@ (80017dc <HAL_GPIO_Init+0x2b8>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016bc:	4a48      	ldr	r2, [pc, #288]	@ (80017e0 <HAL_GPIO_Init+0x2bc>)
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a40      	ldr	r2, [pc, #256]	@ (80017e4 <HAL_GPIO_Init+0x2c0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d013      	beq.n	8001710 <HAL_GPIO_Init+0x1ec>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a3f      	ldr	r2, [pc, #252]	@ (80017e8 <HAL_GPIO_Init+0x2c4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d00d      	beq.n	800170c <HAL_GPIO_Init+0x1e8>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a3e      	ldr	r2, [pc, #248]	@ (80017ec <HAL_GPIO_Init+0x2c8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d007      	beq.n	8001708 <HAL_GPIO_Init+0x1e4>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a3d      	ldr	r2, [pc, #244]	@ (80017f0 <HAL_GPIO_Init+0x2cc>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d101      	bne.n	8001704 <HAL_GPIO_Init+0x1e0>
 8001700:	2303      	movs	r3, #3
 8001702:	e006      	b.n	8001712 <HAL_GPIO_Init+0x1ee>
 8001704:	2304      	movs	r3, #4
 8001706:	e004      	b.n	8001712 <HAL_GPIO_Init+0x1ee>
 8001708:	2302      	movs	r3, #2
 800170a:	e002      	b.n	8001712 <HAL_GPIO_Init+0x1ee>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_GPIO_Init+0x1ee>
 8001710:	2300      	movs	r3, #0
 8001712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001714:	f002 0203 	and.w	r2, r2, #3
 8001718:	0092      	lsls	r2, r2, #2
 800171a:	4093      	lsls	r3, r2
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001722:	492f      	ldr	r1, [pc, #188]	@ (80017e0 <HAL_GPIO_Init+0x2bc>)
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800173c:	4b2d      	ldr	r3, [pc, #180]	@ (80017f4 <HAL_GPIO_Init+0x2d0>)
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	492c      	ldr	r1, [pc, #176]	@ (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	608b      	str	r3, [r1, #8]
 8001748:	e006      	b.n	8001758 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800174a:	4b2a      	ldr	r3, [pc, #168]	@ (80017f4 <HAL_GPIO_Init+0x2d0>)
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	43db      	mvns	r3, r3
 8001752:	4928      	ldr	r1, [pc, #160]	@ (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001754:	4013      	ands	r3, r2
 8001756:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001764:	4b23      	ldr	r3, [pc, #140]	@ (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	4922      	ldr	r1, [pc, #136]	@ (80017f4 <HAL_GPIO_Init+0x2d0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	60cb      	str	r3, [r1, #12]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001772:	4b20      	ldr	r3, [pc, #128]	@ (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	491e      	ldr	r1, [pc, #120]	@ (80017f4 <HAL_GPIO_Init+0x2d0>)
 800177c:	4013      	ands	r3, r2
 800177e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800178c:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <HAL_GPIO_Init+0x2d0>)
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4918      	ldr	r1, [pc, #96]	@ (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800179a:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <HAL_GPIO_Init+0x2d0>)
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	4914      	ldr	r1, [pc, #80]	@ (80017f4 <HAL_GPIO_Init+0x2d0>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d021      	beq.n	80017f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017b4:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <HAL_GPIO_Init+0x2d0>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	490e      	ldr	r1, [pc, #56]	@ (80017f4 <HAL_GPIO_Init+0x2d0>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]
 80017c0:	e021      	b.n	8001806 <HAL_GPIO_Init+0x2e2>
 80017c2:	bf00      	nop
 80017c4:	10320000 	.word	0x10320000
 80017c8:	10310000 	.word	0x10310000
 80017cc:	10220000 	.word	0x10220000
 80017d0:	10210000 	.word	0x10210000
 80017d4:	10120000 	.word	0x10120000
 80017d8:	10110000 	.word	0x10110000
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40010000 	.word	0x40010000
 80017e4:	40010800 	.word	0x40010800
 80017e8:	40010c00 	.word	0x40010c00
 80017ec:	40011000 	.word	0x40011000
 80017f0:	40011400 	.word	0x40011400
 80017f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <HAL_GPIO_Init+0x304>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	43db      	mvns	r3, r3
 8001800:	4909      	ldr	r1, [pc, #36]	@ (8001828 <HAL_GPIO_Init+0x304>)
 8001802:	4013      	ands	r3, r2
 8001804:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	3301      	adds	r3, #1
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001812:	fa22 f303 	lsr.w	r3, r2, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	f47f ae8e 	bne.w	8001538 <HAL_GPIO_Init+0x14>
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	372c      	adds	r7, #44	@ 0x2c
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40010400 	.word	0x40010400

0800182c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
 8001838:	4613      	mov	r3, r2
 800183a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800183c:	787b      	ldrb	r3, [r7, #1]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001848:	e003      	b.n	8001852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	041a      	lsls	r2, r3, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	611a      	str	r2, [r3, #16]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e272      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 8087 	beq.w	800198a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800187c:	4b92      	ldr	r3, [pc, #584]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b04      	cmp	r3, #4
 8001886:	d00c      	beq.n	80018a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001888:	4b8f      	ldr	r3, [pc, #572]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b08      	cmp	r3, #8
 8001892:	d112      	bne.n	80018ba <HAL_RCC_OscConfig+0x5e>
 8001894:	4b8c      	ldr	r3, [pc, #560]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800189c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018a0:	d10b      	bne.n	80018ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a2:	4b89      	ldr	r3, [pc, #548]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d06c      	beq.n	8001988 <HAL_RCC_OscConfig+0x12c>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d168      	bne.n	8001988 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e24c      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c2:	d106      	bne.n	80018d2 <HAL_RCC_OscConfig+0x76>
 80018c4:	4b80      	ldr	r3, [pc, #512]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	e02e      	b.n	8001930 <HAL_RCC_OscConfig+0xd4>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x98>
 80018da:	4b7b      	ldr	r3, [pc, #492]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a7a      	ldr	r2, [pc, #488]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b78      	ldr	r3, [pc, #480]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a77      	ldr	r2, [pc, #476]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e01d      	b.n	8001930 <HAL_RCC_OscConfig+0xd4>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0xbc>
 80018fe:	4b72      	ldr	r3, [pc, #456]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a71      	ldr	r2, [pc, #452]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0xd4>
 8001918:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 800191e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b68      	ldr	r3, [pc, #416]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a67      	ldr	r2, [pc, #412]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 800192a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800192e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7fe ff84 	bl	8000844 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7fe ff80 	bl	8000844 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	@ 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e200      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0xe4>
 800195e:	e014      	b.n	800198a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7fe ff70 	bl	8000844 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7fe ff6c 	bl	8000844 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	@ 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e1ec      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	4b53      	ldr	r3, [pc, #332]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x10c>
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d063      	beq.n	8001a5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001996:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00b      	beq.n	80019ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019a2:	4b49      	ldr	r3, [pc, #292]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d11c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x18c>
 80019ae:	4b46      	ldr	r3, [pc, #280]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d116      	bne.n	80019e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	4b43      	ldr	r3, [pc, #268]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <HAL_RCC_OscConfig+0x176>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e1c0      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4939      	ldr	r1, [pc, #228]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	e03a      	b.n	8001a5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f0:	4b36      	ldr	r3, [pc, #216]	@ (8001acc <HAL_RCC_OscConfig+0x270>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7fe ff25 	bl	8000844 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fe:	f7fe ff21 	bl	8000844 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e1a1      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a10:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4927      	ldr	r1, [pc, #156]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
 8001a30:	e015      	b.n	8001a5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a32:	4b26      	ldr	r3, [pc, #152]	@ (8001acc <HAL_RCC_OscConfig+0x270>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7fe ff04 	bl	8000844 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a40:	f7fe ff00 	bl	8000844 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e180      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d03a      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d019      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a72:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <HAL_RCC_OscConfig+0x274>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a78:	f7fe fee4 	bl	8000844 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a80:	f7fe fee0 	bl	8000844 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e160      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f000 fa9c 	bl	8001fdc <RCC_Delay>
 8001aa4:	e01c      	b.n	8001ae0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aac:	f7fe feca 	bl	8000844 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab2:	e00f      	b.n	8001ad4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7fe fec6 	bl	8000844 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d908      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e146      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	42420000 	.word	0x42420000
 8001ad0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	4b92      	ldr	r3, [pc, #584]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1e9      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80a6 	beq.w	8001c3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af2:	4b8b      	ldr	r3, [pc, #556]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10d      	bne.n	8001b1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	4b88      	ldr	r3, [pc, #544]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a87      	ldr	r2, [pc, #540]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b85      	ldr	r3, [pc, #532]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b16:	2301      	movs	r3, #1
 8001b18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	4b82      	ldr	r3, [pc, #520]	@ (8001d24 <HAL_RCC_OscConfig+0x4c8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d118      	bne.n	8001b58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b26:	4b7f      	ldr	r3, [pc, #508]	@ (8001d24 <HAL_RCC_OscConfig+0x4c8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d24 <HAL_RCC_OscConfig+0x4c8>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b32:	f7fe fe87 	bl	8000844 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3a:	f7fe fe83 	bl	8000844 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b64      	cmp	r3, #100	@ 0x64
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e103      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	4b75      	ldr	r3, [pc, #468]	@ (8001d24 <HAL_RCC_OscConfig+0x4c8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCC_OscConfig+0x312>
 8001b60:	4b6f      	ldr	r3, [pc, #444]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4a6e      	ldr	r2, [pc, #440]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6213      	str	r3, [r2, #32]
 8001b6c:	e02d      	b.n	8001bca <HAL_RCC_OscConfig+0x36e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x334>
 8001b76:	4b6a      	ldr	r3, [pc, #424]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a69      	ldr	r2, [pc, #420]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	6213      	str	r3, [r2, #32]
 8001b82:	4b67      	ldr	r3, [pc, #412]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a66      	ldr	r2, [pc, #408]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	f023 0304 	bic.w	r3, r3, #4
 8001b8c:	6213      	str	r3, [r2, #32]
 8001b8e:	e01c      	b.n	8001bca <HAL_RCC_OscConfig+0x36e>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	d10c      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x356>
 8001b98:	4b61      	ldr	r3, [pc, #388]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4a60      	ldr	r2, [pc, #384]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	6213      	str	r3, [r2, #32]
 8001ba4:	4b5e      	ldr	r3, [pc, #376]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4a5d      	ldr	r2, [pc, #372]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6213      	str	r3, [r2, #32]
 8001bb0:	e00b      	b.n	8001bca <HAL_RCC_OscConfig+0x36e>
 8001bb2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a5a      	ldr	r2, [pc, #360]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	6213      	str	r3, [r2, #32]
 8001bbe:	4b58      	ldr	r3, [pc, #352]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	4a57      	ldr	r2, [pc, #348]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	f023 0304 	bic.w	r3, r3, #4
 8001bc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d015      	beq.n	8001bfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd2:	f7fe fe37 	bl	8000844 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7fe fe33 	bl	8000844 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e0b1      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0ee      	beq.n	8001bda <HAL_RCC_OscConfig+0x37e>
 8001bfc:	e014      	b.n	8001c28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfe:	f7fe fe21 	bl	8000844 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f7fe fe1d 	bl	8000844 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e09b      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1c:	4b40      	ldr	r3, [pc, #256]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1ee      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d105      	bne.n	8001c3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a3b      	ldr	r2, [pc, #236]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 8087 	beq.w	8001d52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c44:	4b36      	ldr	r3, [pc, #216]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d061      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d146      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c58:	4b33      	ldr	r3, [pc, #204]	@ (8001d28 <HAL_RCC_OscConfig+0x4cc>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7fe fdf1 	bl	8000844 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c66:	f7fe fded 	bl	8000844 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e06d      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c78:	4b29      	ldr	r3, [pc, #164]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c8c:	d108      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c8e:	4b24      	ldr	r3, [pc, #144]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	4921      	ldr	r1, [pc, #132]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a19      	ldr	r1, [r3, #32]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	491b      	ldr	r1, [pc, #108]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <HAL_RCC_OscConfig+0x4cc>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7fe fdc1 	bl	8000844 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7fe fdbd 	bl	8000844 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e03d      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x46a>
 8001ce4:	e035      	b.n	8001d52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <HAL_RCC_OscConfig+0x4cc>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7fe fdaa 	bl	8000844 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7fe fda6 	bl	8000844 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e026      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x498>
 8001d12:	e01e      	b.n	8001d52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e019      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40007000 	.word	0x40007000
 8001d28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_RCC_OscConfig+0x500>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d106      	bne.n	8001d4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021000 	.word	0x40021000

08001d60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0d0      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d74:	4b6a      	ldr	r3, [pc, #424]	@ (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d910      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b67      	ldr	r3, [pc, #412]	@ (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 0207 	bic.w	r2, r3, #7
 8001d8a:	4965      	ldr	r1, [pc, #404]	@ (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b63      	ldr	r3, [pc, #396]	@ (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0b8      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dbc:	4b59      	ldr	r3, [pc, #356]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4a58      	ldr	r2, [pc, #352]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd4:	4b53      	ldr	r3, [pc, #332]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4a52      	ldr	r2, [pc, #328]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001dde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b50      	ldr	r3, [pc, #320]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	494d      	ldr	r1, [pc, #308]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d040      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4b47      	ldr	r3, [pc, #284]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d115      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e07f      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1e:	4b41      	ldr	r3, [pc, #260]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d109      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e073      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e06b      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3e:	4b39      	ldr	r3, [pc, #228]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f023 0203 	bic.w	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4936      	ldr	r1, [pc, #216]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e50:	f7fe fcf8 	bl	8000844 <HAL_GetTick>
 8001e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e58:	f7fe fcf4 	bl	8000844 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e053      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 020c 	and.w	r2, r3, #12
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d1eb      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e80:	4b27      	ldr	r3, [pc, #156]	@ (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d210      	bcs.n	8001eb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b24      	ldr	r3, [pc, #144]	@ (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0207 	bic.w	r2, r3, #7
 8001e96:	4922      	ldr	r1, [pc, #136]	@ (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b20      	ldr	r3, [pc, #128]	@ (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e032      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ebc:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4916      	ldr	r1, [pc, #88]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eda:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	490e      	ldr	r1, [pc, #56]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eee:	f000 f821 	bl	8001f34 <HAL_RCC_GetSysClockFreq>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	490a      	ldr	r1, [pc, #40]	@ (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001f00:	5ccb      	ldrb	r3, [r1, r3]
 8001f02:	fa22 f303 	lsr.w	r3, r2, r3
 8001f06:	4a09      	ldr	r2, [pc, #36]	@ (8001f2c <HAL_RCC_ClockConfig+0x1cc>)
 8001f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <HAL_RCC_ClockConfig+0x1d0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fc56 	bl	80007c0 <HAL_InitTick>

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40022000 	.word	0x40022000
 8001f24:	40021000 	.word	0x40021000
 8001f28:	08003000 	.word	0x08003000
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	20000004 	.word	0x20000004

08001f34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d002      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x30>
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d003      	beq.n	8001f6a <HAL_RCC_GetSysClockFreq+0x36>
 8001f62:	e027      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001f66:	613b      	str	r3, [r7, #16]
      break;
 8001f68:	e027      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	0c9b      	lsrs	r3, r3, #18
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	4a17      	ldr	r2, [pc, #92]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f74:	5cd3      	ldrb	r3, [r2, r3]
 8001f76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d010      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f82:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	0c5b      	lsrs	r3, r3, #17
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	4a11      	ldr	r2, [pc, #68]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a0d      	ldr	r2, [pc, #52]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001f96:	fb03 f202 	mul.w	r2, r3, r2
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e004      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fa8:	fb02 f303 	mul.w	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	613b      	str	r3, [r7, #16]
      break;
 8001fb2:	e002      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb6:	613b      	str	r3, [r7, #16]
      break;
 8001fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fba:	693b      	ldr	r3, [r7, #16]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	007a1200 	.word	0x007a1200
 8001fd0:	08003010 	.word	0x08003010
 8001fd4:	08003020 	.word	0x08003020
 8001fd8:	003d0900 	.word	0x003d0900

08001fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <RCC_Delay+0x34>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <RCC_Delay+0x38>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0a5b      	lsrs	r3, r3, #9
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ff8:	bf00      	nop
  }
  while (Delay --);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1e5a      	subs	r2, r3, #1
 8001ffe:	60fa      	str	r2, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f9      	bne.n	8001ff8 <RCC_Delay+0x1c>
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	20000000 	.word	0x20000000
 8002014:	10624dd3 	.word	0x10624dd3

08002018 <std>:
 8002018:	2300      	movs	r3, #0
 800201a:	b510      	push	{r4, lr}
 800201c:	4604      	mov	r4, r0
 800201e:	e9c0 3300 	strd	r3, r3, [r0]
 8002022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002026:	6083      	str	r3, [r0, #8]
 8002028:	8181      	strh	r1, [r0, #12]
 800202a:	6643      	str	r3, [r0, #100]	@ 0x64
 800202c:	81c2      	strh	r2, [r0, #14]
 800202e:	6183      	str	r3, [r0, #24]
 8002030:	4619      	mov	r1, r3
 8002032:	2208      	movs	r2, #8
 8002034:	305c      	adds	r0, #92	@ 0x5c
 8002036:	f000 f9f9 	bl	800242c <memset>
 800203a:	4b0d      	ldr	r3, [pc, #52]	@ (8002070 <std+0x58>)
 800203c:	6224      	str	r4, [r4, #32]
 800203e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <std+0x5c>)
 8002042:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002044:	4b0c      	ldr	r3, [pc, #48]	@ (8002078 <std+0x60>)
 8002046:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002048:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <std+0x64>)
 800204a:	6323      	str	r3, [r4, #48]	@ 0x30
 800204c:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <std+0x68>)
 800204e:	429c      	cmp	r4, r3
 8002050:	d006      	beq.n	8002060 <std+0x48>
 8002052:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002056:	4294      	cmp	r4, r2
 8002058:	d002      	beq.n	8002060 <std+0x48>
 800205a:	33d0      	adds	r3, #208	@ 0xd0
 800205c:	429c      	cmp	r4, r3
 800205e:	d105      	bne.n	800206c <std+0x54>
 8002060:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002068:	f000 ba58 	b.w	800251c <__retarget_lock_init_recursive>
 800206c:	bd10      	pop	{r4, pc}
 800206e:	bf00      	nop
 8002070:	0800227d 	.word	0x0800227d
 8002074:	0800229f 	.word	0x0800229f
 8002078:	080022d7 	.word	0x080022d7
 800207c:	080022fb 	.word	0x080022fb
 8002080:	200000b4 	.word	0x200000b4

08002084 <stdio_exit_handler>:
 8002084:	4a02      	ldr	r2, [pc, #8]	@ (8002090 <stdio_exit_handler+0xc>)
 8002086:	4903      	ldr	r1, [pc, #12]	@ (8002094 <stdio_exit_handler+0x10>)
 8002088:	4803      	ldr	r0, [pc, #12]	@ (8002098 <stdio_exit_handler+0x14>)
 800208a:	f000 b869 	b.w	8002160 <_fwalk_sglue>
 800208e:	bf00      	nop
 8002090:	2000000c 	.word	0x2000000c
 8002094:	08002db5 	.word	0x08002db5
 8002098:	2000001c 	.word	0x2000001c

0800209c <cleanup_stdio>:
 800209c:	6841      	ldr	r1, [r0, #4]
 800209e:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <cleanup_stdio+0x34>)
 80020a0:	b510      	push	{r4, lr}
 80020a2:	4299      	cmp	r1, r3
 80020a4:	4604      	mov	r4, r0
 80020a6:	d001      	beq.n	80020ac <cleanup_stdio+0x10>
 80020a8:	f000 fe84 	bl	8002db4 <_fflush_r>
 80020ac:	68a1      	ldr	r1, [r4, #8]
 80020ae:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <cleanup_stdio+0x38>)
 80020b0:	4299      	cmp	r1, r3
 80020b2:	d002      	beq.n	80020ba <cleanup_stdio+0x1e>
 80020b4:	4620      	mov	r0, r4
 80020b6:	f000 fe7d 	bl	8002db4 <_fflush_r>
 80020ba:	68e1      	ldr	r1, [r4, #12]
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <cleanup_stdio+0x3c>)
 80020be:	4299      	cmp	r1, r3
 80020c0:	d004      	beq.n	80020cc <cleanup_stdio+0x30>
 80020c2:	4620      	mov	r0, r4
 80020c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020c8:	f000 be74 	b.w	8002db4 <_fflush_r>
 80020cc:	bd10      	pop	{r4, pc}
 80020ce:	bf00      	nop
 80020d0:	200000b4 	.word	0x200000b4
 80020d4:	2000011c 	.word	0x2000011c
 80020d8:	20000184 	.word	0x20000184

080020dc <global_stdio_init.part.0>:
 80020dc:	b510      	push	{r4, lr}
 80020de:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <global_stdio_init.part.0+0x30>)
 80020e0:	4c0b      	ldr	r4, [pc, #44]	@ (8002110 <global_stdio_init.part.0+0x34>)
 80020e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002114 <global_stdio_init.part.0+0x38>)
 80020e4:	4620      	mov	r0, r4
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	2104      	movs	r1, #4
 80020ea:	2200      	movs	r2, #0
 80020ec:	f7ff ff94 	bl	8002018 <std>
 80020f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80020f4:	2201      	movs	r2, #1
 80020f6:	2109      	movs	r1, #9
 80020f8:	f7ff ff8e 	bl	8002018 <std>
 80020fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002100:	2202      	movs	r2, #2
 8002102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002106:	2112      	movs	r1, #18
 8002108:	f7ff bf86 	b.w	8002018 <std>
 800210c:	200001ec 	.word	0x200001ec
 8002110:	200000b4 	.word	0x200000b4
 8002114:	08002085 	.word	0x08002085

08002118 <__sfp_lock_acquire>:
 8002118:	4801      	ldr	r0, [pc, #4]	@ (8002120 <__sfp_lock_acquire+0x8>)
 800211a:	f000 ba00 	b.w	800251e <__retarget_lock_acquire_recursive>
 800211e:	bf00      	nop
 8002120:	200001f5 	.word	0x200001f5

08002124 <__sfp_lock_release>:
 8002124:	4801      	ldr	r0, [pc, #4]	@ (800212c <__sfp_lock_release+0x8>)
 8002126:	f000 b9fb 	b.w	8002520 <__retarget_lock_release_recursive>
 800212a:	bf00      	nop
 800212c:	200001f5 	.word	0x200001f5

08002130 <__sinit>:
 8002130:	b510      	push	{r4, lr}
 8002132:	4604      	mov	r4, r0
 8002134:	f7ff fff0 	bl	8002118 <__sfp_lock_acquire>
 8002138:	6a23      	ldr	r3, [r4, #32]
 800213a:	b11b      	cbz	r3, 8002144 <__sinit+0x14>
 800213c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002140:	f7ff bff0 	b.w	8002124 <__sfp_lock_release>
 8002144:	4b04      	ldr	r3, [pc, #16]	@ (8002158 <__sinit+0x28>)
 8002146:	6223      	str	r3, [r4, #32]
 8002148:	4b04      	ldr	r3, [pc, #16]	@ (800215c <__sinit+0x2c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f5      	bne.n	800213c <__sinit+0xc>
 8002150:	f7ff ffc4 	bl	80020dc <global_stdio_init.part.0>
 8002154:	e7f2      	b.n	800213c <__sinit+0xc>
 8002156:	bf00      	nop
 8002158:	0800209d 	.word	0x0800209d
 800215c:	200001ec 	.word	0x200001ec

08002160 <_fwalk_sglue>:
 8002160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002164:	4607      	mov	r7, r0
 8002166:	4688      	mov	r8, r1
 8002168:	4614      	mov	r4, r2
 800216a:	2600      	movs	r6, #0
 800216c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002170:	f1b9 0901 	subs.w	r9, r9, #1
 8002174:	d505      	bpl.n	8002182 <_fwalk_sglue+0x22>
 8002176:	6824      	ldr	r4, [r4, #0]
 8002178:	2c00      	cmp	r4, #0
 800217a:	d1f7      	bne.n	800216c <_fwalk_sglue+0xc>
 800217c:	4630      	mov	r0, r6
 800217e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002182:	89ab      	ldrh	r3, [r5, #12]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d907      	bls.n	8002198 <_fwalk_sglue+0x38>
 8002188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800218c:	3301      	adds	r3, #1
 800218e:	d003      	beq.n	8002198 <_fwalk_sglue+0x38>
 8002190:	4629      	mov	r1, r5
 8002192:	4638      	mov	r0, r7
 8002194:	47c0      	blx	r8
 8002196:	4306      	orrs	r6, r0
 8002198:	3568      	adds	r5, #104	@ 0x68
 800219a:	e7e9      	b.n	8002170 <_fwalk_sglue+0x10>

0800219c <iprintf>:
 800219c:	b40f      	push	{r0, r1, r2, r3}
 800219e:	b507      	push	{r0, r1, r2, lr}
 80021a0:	4906      	ldr	r1, [pc, #24]	@ (80021bc <iprintf+0x20>)
 80021a2:	ab04      	add	r3, sp, #16
 80021a4:	6808      	ldr	r0, [r1, #0]
 80021a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80021aa:	6881      	ldr	r1, [r0, #8]
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	f000 fad7 	bl	8002760 <_vfiprintf_r>
 80021b2:	b003      	add	sp, #12
 80021b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80021b8:	b004      	add	sp, #16
 80021ba:	4770      	bx	lr
 80021bc:	20000018 	.word	0x20000018

080021c0 <_puts_r>:
 80021c0:	6a03      	ldr	r3, [r0, #32]
 80021c2:	b570      	push	{r4, r5, r6, lr}
 80021c4:	4605      	mov	r5, r0
 80021c6:	460e      	mov	r6, r1
 80021c8:	6884      	ldr	r4, [r0, #8]
 80021ca:	b90b      	cbnz	r3, 80021d0 <_puts_r+0x10>
 80021cc:	f7ff ffb0 	bl	8002130 <__sinit>
 80021d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80021d2:	07db      	lsls	r3, r3, #31
 80021d4:	d405      	bmi.n	80021e2 <_puts_r+0x22>
 80021d6:	89a3      	ldrh	r3, [r4, #12]
 80021d8:	0598      	lsls	r0, r3, #22
 80021da:	d402      	bmi.n	80021e2 <_puts_r+0x22>
 80021dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021de:	f000 f99e 	bl	800251e <__retarget_lock_acquire_recursive>
 80021e2:	89a3      	ldrh	r3, [r4, #12]
 80021e4:	0719      	lsls	r1, r3, #28
 80021e6:	d502      	bpl.n	80021ee <_puts_r+0x2e>
 80021e8:	6923      	ldr	r3, [r4, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d135      	bne.n	800225a <_puts_r+0x9a>
 80021ee:	4621      	mov	r1, r4
 80021f0:	4628      	mov	r0, r5
 80021f2:	f000 f8c5 	bl	8002380 <__swsetup_r>
 80021f6:	b380      	cbz	r0, 800225a <_puts_r+0x9a>
 80021f8:	f04f 35ff 	mov.w	r5, #4294967295
 80021fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80021fe:	07da      	lsls	r2, r3, #31
 8002200:	d405      	bmi.n	800220e <_puts_r+0x4e>
 8002202:	89a3      	ldrh	r3, [r4, #12]
 8002204:	059b      	lsls	r3, r3, #22
 8002206:	d402      	bmi.n	800220e <_puts_r+0x4e>
 8002208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800220a:	f000 f989 	bl	8002520 <__retarget_lock_release_recursive>
 800220e:	4628      	mov	r0, r5
 8002210:	bd70      	pop	{r4, r5, r6, pc}
 8002212:	2b00      	cmp	r3, #0
 8002214:	da04      	bge.n	8002220 <_puts_r+0x60>
 8002216:	69a2      	ldr	r2, [r4, #24]
 8002218:	429a      	cmp	r2, r3
 800221a:	dc17      	bgt.n	800224c <_puts_r+0x8c>
 800221c:	290a      	cmp	r1, #10
 800221e:	d015      	beq.n	800224c <_puts_r+0x8c>
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	6022      	str	r2, [r4, #0]
 8002226:	7019      	strb	r1, [r3, #0]
 8002228:	68a3      	ldr	r3, [r4, #8]
 800222a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800222e:	3b01      	subs	r3, #1
 8002230:	60a3      	str	r3, [r4, #8]
 8002232:	2900      	cmp	r1, #0
 8002234:	d1ed      	bne.n	8002212 <_puts_r+0x52>
 8002236:	2b00      	cmp	r3, #0
 8002238:	da11      	bge.n	800225e <_puts_r+0x9e>
 800223a:	4622      	mov	r2, r4
 800223c:	210a      	movs	r1, #10
 800223e:	4628      	mov	r0, r5
 8002240:	f000 f85f 	bl	8002302 <__swbuf_r>
 8002244:	3001      	adds	r0, #1
 8002246:	d0d7      	beq.n	80021f8 <_puts_r+0x38>
 8002248:	250a      	movs	r5, #10
 800224a:	e7d7      	b.n	80021fc <_puts_r+0x3c>
 800224c:	4622      	mov	r2, r4
 800224e:	4628      	mov	r0, r5
 8002250:	f000 f857 	bl	8002302 <__swbuf_r>
 8002254:	3001      	adds	r0, #1
 8002256:	d1e7      	bne.n	8002228 <_puts_r+0x68>
 8002258:	e7ce      	b.n	80021f8 <_puts_r+0x38>
 800225a:	3e01      	subs	r6, #1
 800225c:	e7e4      	b.n	8002228 <_puts_r+0x68>
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	6022      	str	r2, [r4, #0]
 8002264:	220a      	movs	r2, #10
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e7ee      	b.n	8002248 <_puts_r+0x88>
	...

0800226c <puts>:
 800226c:	4b02      	ldr	r3, [pc, #8]	@ (8002278 <puts+0xc>)
 800226e:	4601      	mov	r1, r0
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	f7ff bfa5 	b.w	80021c0 <_puts_r>
 8002276:	bf00      	nop
 8002278:	20000018 	.word	0x20000018

0800227c <__sread>:
 800227c:	b510      	push	{r4, lr}
 800227e:	460c      	mov	r4, r1
 8002280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002284:	f000 f8fc 	bl	8002480 <_read_r>
 8002288:	2800      	cmp	r0, #0
 800228a:	bfab      	itete	ge
 800228c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800228e:	89a3      	ldrhlt	r3, [r4, #12]
 8002290:	181b      	addge	r3, r3, r0
 8002292:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002296:	bfac      	ite	ge
 8002298:	6563      	strge	r3, [r4, #84]	@ 0x54
 800229a:	81a3      	strhlt	r3, [r4, #12]
 800229c:	bd10      	pop	{r4, pc}

0800229e <__swrite>:
 800229e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a2:	461f      	mov	r7, r3
 80022a4:	898b      	ldrh	r3, [r1, #12]
 80022a6:	4605      	mov	r5, r0
 80022a8:	05db      	lsls	r3, r3, #23
 80022aa:	460c      	mov	r4, r1
 80022ac:	4616      	mov	r6, r2
 80022ae:	d505      	bpl.n	80022bc <__swrite+0x1e>
 80022b0:	2302      	movs	r3, #2
 80022b2:	2200      	movs	r2, #0
 80022b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022b8:	f000 f8d0 	bl	800245c <_lseek_r>
 80022bc:	89a3      	ldrh	r3, [r4, #12]
 80022be:	4632      	mov	r2, r6
 80022c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022c4:	81a3      	strh	r3, [r4, #12]
 80022c6:	4628      	mov	r0, r5
 80022c8:	463b      	mov	r3, r7
 80022ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022d2:	f000 b8e7 	b.w	80024a4 <_write_r>

080022d6 <__sseek>:
 80022d6:	b510      	push	{r4, lr}
 80022d8:	460c      	mov	r4, r1
 80022da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022de:	f000 f8bd 	bl	800245c <_lseek_r>
 80022e2:	1c43      	adds	r3, r0, #1
 80022e4:	89a3      	ldrh	r3, [r4, #12]
 80022e6:	bf15      	itete	ne
 80022e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80022ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80022ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80022f2:	81a3      	strheq	r3, [r4, #12]
 80022f4:	bf18      	it	ne
 80022f6:	81a3      	strhne	r3, [r4, #12]
 80022f8:	bd10      	pop	{r4, pc}

080022fa <__sclose>:
 80022fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022fe:	f000 b89d 	b.w	800243c <_close_r>

08002302 <__swbuf_r>:
 8002302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002304:	460e      	mov	r6, r1
 8002306:	4614      	mov	r4, r2
 8002308:	4605      	mov	r5, r0
 800230a:	b118      	cbz	r0, 8002314 <__swbuf_r+0x12>
 800230c:	6a03      	ldr	r3, [r0, #32]
 800230e:	b90b      	cbnz	r3, 8002314 <__swbuf_r+0x12>
 8002310:	f7ff ff0e 	bl	8002130 <__sinit>
 8002314:	69a3      	ldr	r3, [r4, #24]
 8002316:	60a3      	str	r3, [r4, #8]
 8002318:	89a3      	ldrh	r3, [r4, #12]
 800231a:	071a      	lsls	r2, r3, #28
 800231c:	d501      	bpl.n	8002322 <__swbuf_r+0x20>
 800231e:	6923      	ldr	r3, [r4, #16]
 8002320:	b943      	cbnz	r3, 8002334 <__swbuf_r+0x32>
 8002322:	4621      	mov	r1, r4
 8002324:	4628      	mov	r0, r5
 8002326:	f000 f82b 	bl	8002380 <__swsetup_r>
 800232a:	b118      	cbz	r0, 8002334 <__swbuf_r+0x32>
 800232c:	f04f 37ff 	mov.w	r7, #4294967295
 8002330:	4638      	mov	r0, r7
 8002332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	6922      	ldr	r2, [r4, #16]
 8002338:	b2f6      	uxtb	r6, r6
 800233a:	1a98      	subs	r0, r3, r2
 800233c:	6963      	ldr	r3, [r4, #20]
 800233e:	4637      	mov	r7, r6
 8002340:	4283      	cmp	r3, r0
 8002342:	dc05      	bgt.n	8002350 <__swbuf_r+0x4e>
 8002344:	4621      	mov	r1, r4
 8002346:	4628      	mov	r0, r5
 8002348:	f000 fd34 	bl	8002db4 <_fflush_r>
 800234c:	2800      	cmp	r0, #0
 800234e:	d1ed      	bne.n	800232c <__swbuf_r+0x2a>
 8002350:	68a3      	ldr	r3, [r4, #8]
 8002352:	3b01      	subs	r3, #1
 8002354:	60a3      	str	r3, [r4, #8]
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	6022      	str	r2, [r4, #0]
 800235c:	701e      	strb	r6, [r3, #0]
 800235e:	6962      	ldr	r2, [r4, #20]
 8002360:	1c43      	adds	r3, r0, #1
 8002362:	429a      	cmp	r2, r3
 8002364:	d004      	beq.n	8002370 <__swbuf_r+0x6e>
 8002366:	89a3      	ldrh	r3, [r4, #12]
 8002368:	07db      	lsls	r3, r3, #31
 800236a:	d5e1      	bpl.n	8002330 <__swbuf_r+0x2e>
 800236c:	2e0a      	cmp	r6, #10
 800236e:	d1df      	bne.n	8002330 <__swbuf_r+0x2e>
 8002370:	4621      	mov	r1, r4
 8002372:	4628      	mov	r0, r5
 8002374:	f000 fd1e 	bl	8002db4 <_fflush_r>
 8002378:	2800      	cmp	r0, #0
 800237a:	d0d9      	beq.n	8002330 <__swbuf_r+0x2e>
 800237c:	e7d6      	b.n	800232c <__swbuf_r+0x2a>
	...

08002380 <__swsetup_r>:
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	4b29      	ldr	r3, [pc, #164]	@ (8002428 <__swsetup_r+0xa8>)
 8002384:	4605      	mov	r5, r0
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	460c      	mov	r4, r1
 800238a:	b118      	cbz	r0, 8002394 <__swsetup_r+0x14>
 800238c:	6a03      	ldr	r3, [r0, #32]
 800238e:	b90b      	cbnz	r3, 8002394 <__swsetup_r+0x14>
 8002390:	f7ff fece 	bl	8002130 <__sinit>
 8002394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002398:	0719      	lsls	r1, r3, #28
 800239a:	d422      	bmi.n	80023e2 <__swsetup_r+0x62>
 800239c:	06da      	lsls	r2, r3, #27
 800239e:	d407      	bmi.n	80023b0 <__swsetup_r+0x30>
 80023a0:	2209      	movs	r2, #9
 80023a2:	602a      	str	r2, [r5, #0]
 80023a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	81a3      	strh	r3, [r4, #12]
 80023ae:	e033      	b.n	8002418 <__swsetup_r+0x98>
 80023b0:	0758      	lsls	r0, r3, #29
 80023b2:	d512      	bpl.n	80023da <__swsetup_r+0x5a>
 80023b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80023b6:	b141      	cbz	r1, 80023ca <__swsetup_r+0x4a>
 80023b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80023bc:	4299      	cmp	r1, r3
 80023be:	d002      	beq.n	80023c6 <__swsetup_r+0x46>
 80023c0:	4628      	mov	r0, r5
 80023c2:	f000 f8af 	bl	8002524 <_free_r>
 80023c6:	2300      	movs	r3, #0
 80023c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80023ca:	89a3      	ldrh	r3, [r4, #12]
 80023cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80023d0:	81a3      	strh	r3, [r4, #12]
 80023d2:	2300      	movs	r3, #0
 80023d4:	6063      	str	r3, [r4, #4]
 80023d6:	6923      	ldr	r3, [r4, #16]
 80023d8:	6023      	str	r3, [r4, #0]
 80023da:	89a3      	ldrh	r3, [r4, #12]
 80023dc:	f043 0308 	orr.w	r3, r3, #8
 80023e0:	81a3      	strh	r3, [r4, #12]
 80023e2:	6923      	ldr	r3, [r4, #16]
 80023e4:	b94b      	cbnz	r3, 80023fa <__swsetup_r+0x7a>
 80023e6:	89a3      	ldrh	r3, [r4, #12]
 80023e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80023ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023f0:	d003      	beq.n	80023fa <__swsetup_r+0x7a>
 80023f2:	4621      	mov	r1, r4
 80023f4:	4628      	mov	r0, r5
 80023f6:	f000 fd2a 	bl	8002e4e <__smakebuf_r>
 80023fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023fe:	f013 0201 	ands.w	r2, r3, #1
 8002402:	d00a      	beq.n	800241a <__swsetup_r+0x9a>
 8002404:	2200      	movs	r2, #0
 8002406:	60a2      	str	r2, [r4, #8]
 8002408:	6962      	ldr	r2, [r4, #20]
 800240a:	4252      	negs	r2, r2
 800240c:	61a2      	str	r2, [r4, #24]
 800240e:	6922      	ldr	r2, [r4, #16]
 8002410:	b942      	cbnz	r2, 8002424 <__swsetup_r+0xa4>
 8002412:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002416:	d1c5      	bne.n	80023a4 <__swsetup_r+0x24>
 8002418:	bd38      	pop	{r3, r4, r5, pc}
 800241a:	0799      	lsls	r1, r3, #30
 800241c:	bf58      	it	pl
 800241e:	6962      	ldrpl	r2, [r4, #20]
 8002420:	60a2      	str	r2, [r4, #8]
 8002422:	e7f4      	b.n	800240e <__swsetup_r+0x8e>
 8002424:	2000      	movs	r0, #0
 8002426:	e7f7      	b.n	8002418 <__swsetup_r+0x98>
 8002428:	20000018 	.word	0x20000018

0800242c <memset>:
 800242c:	4603      	mov	r3, r0
 800242e:	4402      	add	r2, r0
 8002430:	4293      	cmp	r3, r2
 8002432:	d100      	bne.n	8002436 <memset+0xa>
 8002434:	4770      	bx	lr
 8002436:	f803 1b01 	strb.w	r1, [r3], #1
 800243a:	e7f9      	b.n	8002430 <memset+0x4>

0800243c <_close_r>:
 800243c:	b538      	push	{r3, r4, r5, lr}
 800243e:	2300      	movs	r3, #0
 8002440:	4d05      	ldr	r5, [pc, #20]	@ (8002458 <_close_r+0x1c>)
 8002442:	4604      	mov	r4, r0
 8002444:	4608      	mov	r0, r1
 8002446:	602b      	str	r3, [r5, #0]
 8002448:	f7fe f911 	bl	800066e <_close>
 800244c:	1c43      	adds	r3, r0, #1
 800244e:	d102      	bne.n	8002456 <_close_r+0x1a>
 8002450:	682b      	ldr	r3, [r5, #0]
 8002452:	b103      	cbz	r3, 8002456 <_close_r+0x1a>
 8002454:	6023      	str	r3, [r4, #0]
 8002456:	bd38      	pop	{r3, r4, r5, pc}
 8002458:	200001f0 	.word	0x200001f0

0800245c <_lseek_r>:
 800245c:	b538      	push	{r3, r4, r5, lr}
 800245e:	4604      	mov	r4, r0
 8002460:	4608      	mov	r0, r1
 8002462:	4611      	mov	r1, r2
 8002464:	2200      	movs	r2, #0
 8002466:	4d05      	ldr	r5, [pc, #20]	@ (800247c <_lseek_r+0x20>)
 8002468:	602a      	str	r2, [r5, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	f7fe f923 	bl	80006b6 <_lseek>
 8002470:	1c43      	adds	r3, r0, #1
 8002472:	d102      	bne.n	800247a <_lseek_r+0x1e>
 8002474:	682b      	ldr	r3, [r5, #0]
 8002476:	b103      	cbz	r3, 800247a <_lseek_r+0x1e>
 8002478:	6023      	str	r3, [r4, #0]
 800247a:	bd38      	pop	{r3, r4, r5, pc}
 800247c:	200001f0 	.word	0x200001f0

08002480 <_read_r>:
 8002480:	b538      	push	{r3, r4, r5, lr}
 8002482:	4604      	mov	r4, r0
 8002484:	4608      	mov	r0, r1
 8002486:	4611      	mov	r1, r2
 8002488:	2200      	movs	r2, #0
 800248a:	4d05      	ldr	r5, [pc, #20]	@ (80024a0 <_read_r+0x20>)
 800248c:	602a      	str	r2, [r5, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	f7fe f8b4 	bl	80005fc <_read>
 8002494:	1c43      	adds	r3, r0, #1
 8002496:	d102      	bne.n	800249e <_read_r+0x1e>
 8002498:	682b      	ldr	r3, [r5, #0]
 800249a:	b103      	cbz	r3, 800249e <_read_r+0x1e>
 800249c:	6023      	str	r3, [r4, #0]
 800249e:	bd38      	pop	{r3, r4, r5, pc}
 80024a0:	200001f0 	.word	0x200001f0

080024a4 <_write_r>:
 80024a4:	b538      	push	{r3, r4, r5, lr}
 80024a6:	4604      	mov	r4, r0
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	2200      	movs	r2, #0
 80024ae:	4d05      	ldr	r5, [pc, #20]	@ (80024c4 <_write_r+0x20>)
 80024b0:	602a      	str	r2, [r5, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f7fe f8bf 	bl	8000636 <_write>
 80024b8:	1c43      	adds	r3, r0, #1
 80024ba:	d102      	bne.n	80024c2 <_write_r+0x1e>
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	b103      	cbz	r3, 80024c2 <_write_r+0x1e>
 80024c0:	6023      	str	r3, [r4, #0]
 80024c2:	bd38      	pop	{r3, r4, r5, pc}
 80024c4:	200001f0 	.word	0x200001f0

080024c8 <__errno>:
 80024c8:	4b01      	ldr	r3, [pc, #4]	@ (80024d0 <__errno+0x8>)
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000018 	.word	0x20000018

080024d4 <__libc_init_array>:
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	2600      	movs	r6, #0
 80024d8:	4d0c      	ldr	r5, [pc, #48]	@ (800250c <__libc_init_array+0x38>)
 80024da:	4c0d      	ldr	r4, [pc, #52]	@ (8002510 <__libc_init_array+0x3c>)
 80024dc:	1b64      	subs	r4, r4, r5
 80024de:	10a4      	asrs	r4, r4, #2
 80024e0:	42a6      	cmp	r6, r4
 80024e2:	d109      	bne.n	80024f8 <__libc_init_array+0x24>
 80024e4:	f000 fd30 	bl	8002f48 <_init>
 80024e8:	2600      	movs	r6, #0
 80024ea:	4d0a      	ldr	r5, [pc, #40]	@ (8002514 <__libc_init_array+0x40>)
 80024ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002518 <__libc_init_array+0x44>)
 80024ee:	1b64      	subs	r4, r4, r5
 80024f0:	10a4      	asrs	r4, r4, #2
 80024f2:	42a6      	cmp	r6, r4
 80024f4:	d105      	bne.n	8002502 <__libc_init_array+0x2e>
 80024f6:	bd70      	pop	{r4, r5, r6, pc}
 80024f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80024fc:	4798      	blx	r3
 80024fe:	3601      	adds	r6, #1
 8002500:	e7ee      	b.n	80024e0 <__libc_init_array+0xc>
 8002502:	f855 3b04 	ldr.w	r3, [r5], #4
 8002506:	4798      	blx	r3
 8002508:	3601      	adds	r6, #1
 800250a:	e7f2      	b.n	80024f2 <__libc_init_array+0x1e>
 800250c:	08003058 	.word	0x08003058
 8002510:	08003058 	.word	0x08003058
 8002514:	08003058 	.word	0x08003058
 8002518:	0800305c 	.word	0x0800305c

0800251c <__retarget_lock_init_recursive>:
 800251c:	4770      	bx	lr

0800251e <__retarget_lock_acquire_recursive>:
 800251e:	4770      	bx	lr

08002520 <__retarget_lock_release_recursive>:
 8002520:	4770      	bx	lr
	...

08002524 <_free_r>:
 8002524:	b538      	push	{r3, r4, r5, lr}
 8002526:	4605      	mov	r5, r0
 8002528:	2900      	cmp	r1, #0
 800252a:	d040      	beq.n	80025ae <_free_r+0x8a>
 800252c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002530:	1f0c      	subs	r4, r1, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	bfb8      	it	lt
 8002536:	18e4      	addlt	r4, r4, r3
 8002538:	f000 f8de 	bl	80026f8 <__malloc_lock>
 800253c:	4a1c      	ldr	r2, [pc, #112]	@ (80025b0 <_free_r+0x8c>)
 800253e:	6813      	ldr	r3, [r2, #0]
 8002540:	b933      	cbnz	r3, 8002550 <_free_r+0x2c>
 8002542:	6063      	str	r3, [r4, #4]
 8002544:	6014      	str	r4, [r2, #0]
 8002546:	4628      	mov	r0, r5
 8002548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800254c:	f000 b8da 	b.w	8002704 <__malloc_unlock>
 8002550:	42a3      	cmp	r3, r4
 8002552:	d908      	bls.n	8002566 <_free_r+0x42>
 8002554:	6820      	ldr	r0, [r4, #0]
 8002556:	1821      	adds	r1, r4, r0
 8002558:	428b      	cmp	r3, r1
 800255a:	bf01      	itttt	eq
 800255c:	6819      	ldreq	r1, [r3, #0]
 800255e:	685b      	ldreq	r3, [r3, #4]
 8002560:	1809      	addeq	r1, r1, r0
 8002562:	6021      	streq	r1, [r4, #0]
 8002564:	e7ed      	b.n	8002542 <_free_r+0x1e>
 8002566:	461a      	mov	r2, r3
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	b10b      	cbz	r3, 8002570 <_free_r+0x4c>
 800256c:	42a3      	cmp	r3, r4
 800256e:	d9fa      	bls.n	8002566 <_free_r+0x42>
 8002570:	6811      	ldr	r1, [r2, #0]
 8002572:	1850      	adds	r0, r2, r1
 8002574:	42a0      	cmp	r0, r4
 8002576:	d10b      	bne.n	8002590 <_free_r+0x6c>
 8002578:	6820      	ldr	r0, [r4, #0]
 800257a:	4401      	add	r1, r0
 800257c:	1850      	adds	r0, r2, r1
 800257e:	4283      	cmp	r3, r0
 8002580:	6011      	str	r1, [r2, #0]
 8002582:	d1e0      	bne.n	8002546 <_free_r+0x22>
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4408      	add	r0, r1
 800258a:	6010      	str	r0, [r2, #0]
 800258c:	6053      	str	r3, [r2, #4]
 800258e:	e7da      	b.n	8002546 <_free_r+0x22>
 8002590:	d902      	bls.n	8002598 <_free_r+0x74>
 8002592:	230c      	movs	r3, #12
 8002594:	602b      	str	r3, [r5, #0]
 8002596:	e7d6      	b.n	8002546 <_free_r+0x22>
 8002598:	6820      	ldr	r0, [r4, #0]
 800259a:	1821      	adds	r1, r4, r0
 800259c:	428b      	cmp	r3, r1
 800259e:	bf01      	itttt	eq
 80025a0:	6819      	ldreq	r1, [r3, #0]
 80025a2:	685b      	ldreq	r3, [r3, #4]
 80025a4:	1809      	addeq	r1, r1, r0
 80025a6:	6021      	streq	r1, [r4, #0]
 80025a8:	6063      	str	r3, [r4, #4]
 80025aa:	6054      	str	r4, [r2, #4]
 80025ac:	e7cb      	b.n	8002546 <_free_r+0x22>
 80025ae:	bd38      	pop	{r3, r4, r5, pc}
 80025b0:	200001fc 	.word	0x200001fc

080025b4 <sbrk_aligned>:
 80025b4:	b570      	push	{r4, r5, r6, lr}
 80025b6:	4e0f      	ldr	r6, [pc, #60]	@ (80025f4 <sbrk_aligned+0x40>)
 80025b8:	460c      	mov	r4, r1
 80025ba:	6831      	ldr	r1, [r6, #0]
 80025bc:	4605      	mov	r5, r0
 80025be:	b911      	cbnz	r1, 80025c6 <sbrk_aligned+0x12>
 80025c0:	f000 fca4 	bl	8002f0c <_sbrk_r>
 80025c4:	6030      	str	r0, [r6, #0]
 80025c6:	4621      	mov	r1, r4
 80025c8:	4628      	mov	r0, r5
 80025ca:	f000 fc9f 	bl	8002f0c <_sbrk_r>
 80025ce:	1c43      	adds	r3, r0, #1
 80025d0:	d103      	bne.n	80025da <sbrk_aligned+0x26>
 80025d2:	f04f 34ff 	mov.w	r4, #4294967295
 80025d6:	4620      	mov	r0, r4
 80025d8:	bd70      	pop	{r4, r5, r6, pc}
 80025da:	1cc4      	adds	r4, r0, #3
 80025dc:	f024 0403 	bic.w	r4, r4, #3
 80025e0:	42a0      	cmp	r0, r4
 80025e2:	d0f8      	beq.n	80025d6 <sbrk_aligned+0x22>
 80025e4:	1a21      	subs	r1, r4, r0
 80025e6:	4628      	mov	r0, r5
 80025e8:	f000 fc90 	bl	8002f0c <_sbrk_r>
 80025ec:	3001      	adds	r0, #1
 80025ee:	d1f2      	bne.n	80025d6 <sbrk_aligned+0x22>
 80025f0:	e7ef      	b.n	80025d2 <sbrk_aligned+0x1e>
 80025f2:	bf00      	nop
 80025f4:	200001f8 	.word	0x200001f8

080025f8 <_malloc_r>:
 80025f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025fc:	1ccd      	adds	r5, r1, #3
 80025fe:	f025 0503 	bic.w	r5, r5, #3
 8002602:	3508      	adds	r5, #8
 8002604:	2d0c      	cmp	r5, #12
 8002606:	bf38      	it	cc
 8002608:	250c      	movcc	r5, #12
 800260a:	2d00      	cmp	r5, #0
 800260c:	4606      	mov	r6, r0
 800260e:	db01      	blt.n	8002614 <_malloc_r+0x1c>
 8002610:	42a9      	cmp	r1, r5
 8002612:	d904      	bls.n	800261e <_malloc_r+0x26>
 8002614:	230c      	movs	r3, #12
 8002616:	6033      	str	r3, [r6, #0]
 8002618:	2000      	movs	r0, #0
 800261a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800261e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80026f4 <_malloc_r+0xfc>
 8002622:	f000 f869 	bl	80026f8 <__malloc_lock>
 8002626:	f8d8 3000 	ldr.w	r3, [r8]
 800262a:	461c      	mov	r4, r3
 800262c:	bb44      	cbnz	r4, 8002680 <_malloc_r+0x88>
 800262e:	4629      	mov	r1, r5
 8002630:	4630      	mov	r0, r6
 8002632:	f7ff ffbf 	bl	80025b4 <sbrk_aligned>
 8002636:	1c43      	adds	r3, r0, #1
 8002638:	4604      	mov	r4, r0
 800263a:	d158      	bne.n	80026ee <_malloc_r+0xf6>
 800263c:	f8d8 4000 	ldr.w	r4, [r8]
 8002640:	4627      	mov	r7, r4
 8002642:	2f00      	cmp	r7, #0
 8002644:	d143      	bne.n	80026ce <_malloc_r+0xd6>
 8002646:	2c00      	cmp	r4, #0
 8002648:	d04b      	beq.n	80026e2 <_malloc_r+0xea>
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	4639      	mov	r1, r7
 800264e:	4630      	mov	r0, r6
 8002650:	eb04 0903 	add.w	r9, r4, r3
 8002654:	f000 fc5a 	bl	8002f0c <_sbrk_r>
 8002658:	4581      	cmp	r9, r0
 800265a:	d142      	bne.n	80026e2 <_malloc_r+0xea>
 800265c:	6821      	ldr	r1, [r4, #0]
 800265e:	4630      	mov	r0, r6
 8002660:	1a6d      	subs	r5, r5, r1
 8002662:	4629      	mov	r1, r5
 8002664:	f7ff ffa6 	bl	80025b4 <sbrk_aligned>
 8002668:	3001      	adds	r0, #1
 800266a:	d03a      	beq.n	80026e2 <_malloc_r+0xea>
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	442b      	add	r3, r5
 8002670:	6023      	str	r3, [r4, #0]
 8002672:	f8d8 3000 	ldr.w	r3, [r8]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	bb62      	cbnz	r2, 80026d4 <_malloc_r+0xdc>
 800267a:	f8c8 7000 	str.w	r7, [r8]
 800267e:	e00f      	b.n	80026a0 <_malloc_r+0xa8>
 8002680:	6822      	ldr	r2, [r4, #0]
 8002682:	1b52      	subs	r2, r2, r5
 8002684:	d420      	bmi.n	80026c8 <_malloc_r+0xd0>
 8002686:	2a0b      	cmp	r2, #11
 8002688:	d917      	bls.n	80026ba <_malloc_r+0xc2>
 800268a:	1961      	adds	r1, r4, r5
 800268c:	42a3      	cmp	r3, r4
 800268e:	6025      	str	r5, [r4, #0]
 8002690:	bf18      	it	ne
 8002692:	6059      	strne	r1, [r3, #4]
 8002694:	6863      	ldr	r3, [r4, #4]
 8002696:	bf08      	it	eq
 8002698:	f8c8 1000 	streq.w	r1, [r8]
 800269c:	5162      	str	r2, [r4, r5]
 800269e:	604b      	str	r3, [r1, #4]
 80026a0:	4630      	mov	r0, r6
 80026a2:	f000 f82f 	bl	8002704 <__malloc_unlock>
 80026a6:	f104 000b 	add.w	r0, r4, #11
 80026aa:	1d23      	adds	r3, r4, #4
 80026ac:	f020 0007 	bic.w	r0, r0, #7
 80026b0:	1ac2      	subs	r2, r0, r3
 80026b2:	bf1c      	itt	ne
 80026b4:	1a1b      	subne	r3, r3, r0
 80026b6:	50a3      	strne	r3, [r4, r2]
 80026b8:	e7af      	b.n	800261a <_malloc_r+0x22>
 80026ba:	6862      	ldr	r2, [r4, #4]
 80026bc:	42a3      	cmp	r3, r4
 80026be:	bf0c      	ite	eq
 80026c0:	f8c8 2000 	streq.w	r2, [r8]
 80026c4:	605a      	strne	r2, [r3, #4]
 80026c6:	e7eb      	b.n	80026a0 <_malloc_r+0xa8>
 80026c8:	4623      	mov	r3, r4
 80026ca:	6864      	ldr	r4, [r4, #4]
 80026cc:	e7ae      	b.n	800262c <_malloc_r+0x34>
 80026ce:	463c      	mov	r4, r7
 80026d0:	687f      	ldr	r7, [r7, #4]
 80026d2:	e7b6      	b.n	8002642 <_malloc_r+0x4a>
 80026d4:	461a      	mov	r2, r3
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	42a3      	cmp	r3, r4
 80026da:	d1fb      	bne.n	80026d4 <_malloc_r+0xdc>
 80026dc:	2300      	movs	r3, #0
 80026de:	6053      	str	r3, [r2, #4]
 80026e0:	e7de      	b.n	80026a0 <_malloc_r+0xa8>
 80026e2:	230c      	movs	r3, #12
 80026e4:	4630      	mov	r0, r6
 80026e6:	6033      	str	r3, [r6, #0]
 80026e8:	f000 f80c 	bl	8002704 <__malloc_unlock>
 80026ec:	e794      	b.n	8002618 <_malloc_r+0x20>
 80026ee:	6005      	str	r5, [r0, #0]
 80026f0:	e7d6      	b.n	80026a0 <_malloc_r+0xa8>
 80026f2:	bf00      	nop
 80026f4:	200001fc 	.word	0x200001fc

080026f8 <__malloc_lock>:
 80026f8:	4801      	ldr	r0, [pc, #4]	@ (8002700 <__malloc_lock+0x8>)
 80026fa:	f7ff bf10 	b.w	800251e <__retarget_lock_acquire_recursive>
 80026fe:	bf00      	nop
 8002700:	200001f4 	.word	0x200001f4

08002704 <__malloc_unlock>:
 8002704:	4801      	ldr	r0, [pc, #4]	@ (800270c <__malloc_unlock+0x8>)
 8002706:	f7ff bf0b 	b.w	8002520 <__retarget_lock_release_recursive>
 800270a:	bf00      	nop
 800270c:	200001f4 	.word	0x200001f4

08002710 <__sfputc_r>:
 8002710:	6893      	ldr	r3, [r2, #8]
 8002712:	b410      	push	{r4}
 8002714:	3b01      	subs	r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	6093      	str	r3, [r2, #8]
 800271a:	da07      	bge.n	800272c <__sfputc_r+0x1c>
 800271c:	6994      	ldr	r4, [r2, #24]
 800271e:	42a3      	cmp	r3, r4
 8002720:	db01      	blt.n	8002726 <__sfputc_r+0x16>
 8002722:	290a      	cmp	r1, #10
 8002724:	d102      	bne.n	800272c <__sfputc_r+0x1c>
 8002726:	bc10      	pop	{r4}
 8002728:	f7ff bdeb 	b.w	8002302 <__swbuf_r>
 800272c:	6813      	ldr	r3, [r2, #0]
 800272e:	1c58      	adds	r0, r3, #1
 8002730:	6010      	str	r0, [r2, #0]
 8002732:	7019      	strb	r1, [r3, #0]
 8002734:	4608      	mov	r0, r1
 8002736:	bc10      	pop	{r4}
 8002738:	4770      	bx	lr

0800273a <__sfputs_r>:
 800273a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273c:	4606      	mov	r6, r0
 800273e:	460f      	mov	r7, r1
 8002740:	4614      	mov	r4, r2
 8002742:	18d5      	adds	r5, r2, r3
 8002744:	42ac      	cmp	r4, r5
 8002746:	d101      	bne.n	800274c <__sfputs_r+0x12>
 8002748:	2000      	movs	r0, #0
 800274a:	e007      	b.n	800275c <__sfputs_r+0x22>
 800274c:	463a      	mov	r2, r7
 800274e:	4630      	mov	r0, r6
 8002750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002754:	f7ff ffdc 	bl	8002710 <__sfputc_r>
 8002758:	1c43      	adds	r3, r0, #1
 800275a:	d1f3      	bne.n	8002744 <__sfputs_r+0xa>
 800275c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002760 <_vfiprintf_r>:
 8002760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002764:	460d      	mov	r5, r1
 8002766:	4614      	mov	r4, r2
 8002768:	4698      	mov	r8, r3
 800276a:	4606      	mov	r6, r0
 800276c:	b09d      	sub	sp, #116	@ 0x74
 800276e:	b118      	cbz	r0, 8002778 <_vfiprintf_r+0x18>
 8002770:	6a03      	ldr	r3, [r0, #32]
 8002772:	b90b      	cbnz	r3, 8002778 <_vfiprintf_r+0x18>
 8002774:	f7ff fcdc 	bl	8002130 <__sinit>
 8002778:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800277a:	07d9      	lsls	r1, r3, #31
 800277c:	d405      	bmi.n	800278a <_vfiprintf_r+0x2a>
 800277e:	89ab      	ldrh	r3, [r5, #12]
 8002780:	059a      	lsls	r2, r3, #22
 8002782:	d402      	bmi.n	800278a <_vfiprintf_r+0x2a>
 8002784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002786:	f7ff feca 	bl	800251e <__retarget_lock_acquire_recursive>
 800278a:	89ab      	ldrh	r3, [r5, #12]
 800278c:	071b      	lsls	r3, r3, #28
 800278e:	d501      	bpl.n	8002794 <_vfiprintf_r+0x34>
 8002790:	692b      	ldr	r3, [r5, #16]
 8002792:	b99b      	cbnz	r3, 80027bc <_vfiprintf_r+0x5c>
 8002794:	4629      	mov	r1, r5
 8002796:	4630      	mov	r0, r6
 8002798:	f7ff fdf2 	bl	8002380 <__swsetup_r>
 800279c:	b170      	cbz	r0, 80027bc <_vfiprintf_r+0x5c>
 800279e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80027a0:	07dc      	lsls	r4, r3, #31
 80027a2:	d504      	bpl.n	80027ae <_vfiprintf_r+0x4e>
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	b01d      	add	sp, #116	@ 0x74
 80027aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ae:	89ab      	ldrh	r3, [r5, #12]
 80027b0:	0598      	lsls	r0, r3, #22
 80027b2:	d4f7      	bmi.n	80027a4 <_vfiprintf_r+0x44>
 80027b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80027b6:	f7ff feb3 	bl	8002520 <__retarget_lock_release_recursive>
 80027ba:	e7f3      	b.n	80027a4 <_vfiprintf_r+0x44>
 80027bc:	2300      	movs	r3, #0
 80027be:	9309      	str	r3, [sp, #36]	@ 0x24
 80027c0:	2320      	movs	r3, #32
 80027c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80027c6:	2330      	movs	r3, #48	@ 0x30
 80027c8:	f04f 0901 	mov.w	r9, #1
 80027cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80027d0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800297c <_vfiprintf_r+0x21c>
 80027d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80027d8:	4623      	mov	r3, r4
 80027da:	469a      	mov	sl, r3
 80027dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027e0:	b10a      	cbz	r2, 80027e6 <_vfiprintf_r+0x86>
 80027e2:	2a25      	cmp	r2, #37	@ 0x25
 80027e4:	d1f9      	bne.n	80027da <_vfiprintf_r+0x7a>
 80027e6:	ebba 0b04 	subs.w	fp, sl, r4
 80027ea:	d00b      	beq.n	8002804 <_vfiprintf_r+0xa4>
 80027ec:	465b      	mov	r3, fp
 80027ee:	4622      	mov	r2, r4
 80027f0:	4629      	mov	r1, r5
 80027f2:	4630      	mov	r0, r6
 80027f4:	f7ff ffa1 	bl	800273a <__sfputs_r>
 80027f8:	3001      	adds	r0, #1
 80027fa:	f000 80a7 	beq.w	800294c <_vfiprintf_r+0x1ec>
 80027fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002800:	445a      	add	r2, fp
 8002802:	9209      	str	r2, [sp, #36]	@ 0x24
 8002804:	f89a 3000 	ldrb.w	r3, [sl]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 809f 	beq.w	800294c <_vfiprintf_r+0x1ec>
 800280e:	2300      	movs	r3, #0
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002818:	f10a 0a01 	add.w	sl, sl, #1
 800281c:	9304      	str	r3, [sp, #16]
 800281e:	9307      	str	r3, [sp, #28]
 8002820:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002824:	931a      	str	r3, [sp, #104]	@ 0x68
 8002826:	4654      	mov	r4, sl
 8002828:	2205      	movs	r2, #5
 800282a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800282e:	4853      	ldr	r0, [pc, #332]	@ (800297c <_vfiprintf_r+0x21c>)
 8002830:	f000 fb7c 	bl	8002f2c <memchr>
 8002834:	9a04      	ldr	r2, [sp, #16]
 8002836:	b9d8      	cbnz	r0, 8002870 <_vfiprintf_r+0x110>
 8002838:	06d1      	lsls	r1, r2, #27
 800283a:	bf44      	itt	mi
 800283c:	2320      	movmi	r3, #32
 800283e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002842:	0713      	lsls	r3, r2, #28
 8002844:	bf44      	itt	mi
 8002846:	232b      	movmi	r3, #43	@ 0x2b
 8002848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800284c:	f89a 3000 	ldrb.w	r3, [sl]
 8002850:	2b2a      	cmp	r3, #42	@ 0x2a
 8002852:	d015      	beq.n	8002880 <_vfiprintf_r+0x120>
 8002854:	4654      	mov	r4, sl
 8002856:	2000      	movs	r0, #0
 8002858:	f04f 0c0a 	mov.w	ip, #10
 800285c:	9a07      	ldr	r2, [sp, #28]
 800285e:	4621      	mov	r1, r4
 8002860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002864:	3b30      	subs	r3, #48	@ 0x30
 8002866:	2b09      	cmp	r3, #9
 8002868:	d94b      	bls.n	8002902 <_vfiprintf_r+0x1a2>
 800286a:	b1b0      	cbz	r0, 800289a <_vfiprintf_r+0x13a>
 800286c:	9207      	str	r2, [sp, #28]
 800286e:	e014      	b.n	800289a <_vfiprintf_r+0x13a>
 8002870:	eba0 0308 	sub.w	r3, r0, r8
 8002874:	fa09 f303 	lsl.w	r3, r9, r3
 8002878:	4313      	orrs	r3, r2
 800287a:	46a2      	mov	sl, r4
 800287c:	9304      	str	r3, [sp, #16]
 800287e:	e7d2      	b.n	8002826 <_vfiprintf_r+0xc6>
 8002880:	9b03      	ldr	r3, [sp, #12]
 8002882:	1d19      	adds	r1, r3, #4
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	9103      	str	r1, [sp, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	bfbb      	ittet	lt
 800288c:	425b      	neglt	r3, r3
 800288e:	f042 0202 	orrlt.w	r2, r2, #2
 8002892:	9307      	strge	r3, [sp, #28]
 8002894:	9307      	strlt	r3, [sp, #28]
 8002896:	bfb8      	it	lt
 8002898:	9204      	strlt	r2, [sp, #16]
 800289a:	7823      	ldrb	r3, [r4, #0]
 800289c:	2b2e      	cmp	r3, #46	@ 0x2e
 800289e:	d10a      	bne.n	80028b6 <_vfiprintf_r+0x156>
 80028a0:	7863      	ldrb	r3, [r4, #1]
 80028a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80028a4:	d132      	bne.n	800290c <_vfiprintf_r+0x1ac>
 80028a6:	9b03      	ldr	r3, [sp, #12]
 80028a8:	3402      	adds	r4, #2
 80028aa:	1d1a      	adds	r2, r3, #4
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	9203      	str	r2, [sp, #12]
 80028b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80028b4:	9305      	str	r3, [sp, #20]
 80028b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002980 <_vfiprintf_r+0x220>
 80028ba:	2203      	movs	r2, #3
 80028bc:	4650      	mov	r0, sl
 80028be:	7821      	ldrb	r1, [r4, #0]
 80028c0:	f000 fb34 	bl	8002f2c <memchr>
 80028c4:	b138      	cbz	r0, 80028d6 <_vfiprintf_r+0x176>
 80028c6:	2240      	movs	r2, #64	@ 0x40
 80028c8:	9b04      	ldr	r3, [sp, #16]
 80028ca:	eba0 000a 	sub.w	r0, r0, sl
 80028ce:	4082      	lsls	r2, r0
 80028d0:	4313      	orrs	r3, r2
 80028d2:	3401      	adds	r4, #1
 80028d4:	9304      	str	r3, [sp, #16]
 80028d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028da:	2206      	movs	r2, #6
 80028dc:	4829      	ldr	r0, [pc, #164]	@ (8002984 <_vfiprintf_r+0x224>)
 80028de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80028e2:	f000 fb23 	bl	8002f2c <memchr>
 80028e6:	2800      	cmp	r0, #0
 80028e8:	d03f      	beq.n	800296a <_vfiprintf_r+0x20a>
 80028ea:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <_vfiprintf_r+0x228>)
 80028ec:	bb1b      	cbnz	r3, 8002936 <_vfiprintf_r+0x1d6>
 80028ee:	9b03      	ldr	r3, [sp, #12]
 80028f0:	3307      	adds	r3, #7
 80028f2:	f023 0307 	bic.w	r3, r3, #7
 80028f6:	3308      	adds	r3, #8
 80028f8:	9303      	str	r3, [sp, #12]
 80028fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80028fc:	443b      	add	r3, r7
 80028fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8002900:	e76a      	b.n	80027d8 <_vfiprintf_r+0x78>
 8002902:	460c      	mov	r4, r1
 8002904:	2001      	movs	r0, #1
 8002906:	fb0c 3202 	mla	r2, ip, r2, r3
 800290a:	e7a8      	b.n	800285e <_vfiprintf_r+0xfe>
 800290c:	2300      	movs	r3, #0
 800290e:	f04f 0c0a 	mov.w	ip, #10
 8002912:	4619      	mov	r1, r3
 8002914:	3401      	adds	r4, #1
 8002916:	9305      	str	r3, [sp, #20]
 8002918:	4620      	mov	r0, r4
 800291a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800291e:	3a30      	subs	r2, #48	@ 0x30
 8002920:	2a09      	cmp	r2, #9
 8002922:	d903      	bls.n	800292c <_vfiprintf_r+0x1cc>
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0c6      	beq.n	80028b6 <_vfiprintf_r+0x156>
 8002928:	9105      	str	r1, [sp, #20]
 800292a:	e7c4      	b.n	80028b6 <_vfiprintf_r+0x156>
 800292c:	4604      	mov	r4, r0
 800292e:	2301      	movs	r3, #1
 8002930:	fb0c 2101 	mla	r1, ip, r1, r2
 8002934:	e7f0      	b.n	8002918 <_vfiprintf_r+0x1b8>
 8002936:	ab03      	add	r3, sp, #12
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	462a      	mov	r2, r5
 800293c:	4630      	mov	r0, r6
 800293e:	4b13      	ldr	r3, [pc, #76]	@ (800298c <_vfiprintf_r+0x22c>)
 8002940:	a904      	add	r1, sp, #16
 8002942:	f3af 8000 	nop.w
 8002946:	4607      	mov	r7, r0
 8002948:	1c78      	adds	r0, r7, #1
 800294a:	d1d6      	bne.n	80028fa <_vfiprintf_r+0x19a>
 800294c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800294e:	07d9      	lsls	r1, r3, #31
 8002950:	d405      	bmi.n	800295e <_vfiprintf_r+0x1fe>
 8002952:	89ab      	ldrh	r3, [r5, #12]
 8002954:	059a      	lsls	r2, r3, #22
 8002956:	d402      	bmi.n	800295e <_vfiprintf_r+0x1fe>
 8002958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800295a:	f7ff fde1 	bl	8002520 <__retarget_lock_release_recursive>
 800295e:	89ab      	ldrh	r3, [r5, #12]
 8002960:	065b      	lsls	r3, r3, #25
 8002962:	f53f af1f 	bmi.w	80027a4 <_vfiprintf_r+0x44>
 8002966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002968:	e71e      	b.n	80027a8 <_vfiprintf_r+0x48>
 800296a:	ab03      	add	r3, sp, #12
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	462a      	mov	r2, r5
 8002970:	4630      	mov	r0, r6
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <_vfiprintf_r+0x22c>)
 8002974:	a904      	add	r1, sp, #16
 8002976:	f000 f87d 	bl	8002a74 <_printf_i>
 800297a:	e7e4      	b.n	8002946 <_vfiprintf_r+0x1e6>
 800297c:	08003022 	.word	0x08003022
 8002980:	08003028 	.word	0x08003028
 8002984:	0800302c 	.word	0x0800302c
 8002988:	00000000 	.word	0x00000000
 800298c:	0800273b 	.word	0x0800273b

08002990 <_printf_common>:
 8002990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002994:	4616      	mov	r6, r2
 8002996:	4698      	mov	r8, r3
 8002998:	688a      	ldr	r2, [r1, #8]
 800299a:	690b      	ldr	r3, [r1, #16]
 800299c:	4607      	mov	r7, r0
 800299e:	4293      	cmp	r3, r2
 80029a0:	bfb8      	it	lt
 80029a2:	4613      	movlt	r3, r2
 80029a4:	6033      	str	r3, [r6, #0]
 80029a6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80029aa:	460c      	mov	r4, r1
 80029ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80029b0:	b10a      	cbz	r2, 80029b6 <_printf_common+0x26>
 80029b2:	3301      	adds	r3, #1
 80029b4:	6033      	str	r3, [r6, #0]
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	0699      	lsls	r1, r3, #26
 80029ba:	bf42      	ittt	mi
 80029bc:	6833      	ldrmi	r3, [r6, #0]
 80029be:	3302      	addmi	r3, #2
 80029c0:	6033      	strmi	r3, [r6, #0]
 80029c2:	6825      	ldr	r5, [r4, #0]
 80029c4:	f015 0506 	ands.w	r5, r5, #6
 80029c8:	d106      	bne.n	80029d8 <_printf_common+0x48>
 80029ca:	f104 0a19 	add.w	sl, r4, #25
 80029ce:	68e3      	ldr	r3, [r4, #12]
 80029d0:	6832      	ldr	r2, [r6, #0]
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	42ab      	cmp	r3, r5
 80029d6:	dc2b      	bgt.n	8002a30 <_printf_common+0xa0>
 80029d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80029dc:	6822      	ldr	r2, [r4, #0]
 80029de:	3b00      	subs	r3, #0
 80029e0:	bf18      	it	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	0692      	lsls	r2, r2, #26
 80029e6:	d430      	bmi.n	8002a4a <_printf_common+0xba>
 80029e8:	4641      	mov	r1, r8
 80029ea:	4638      	mov	r0, r7
 80029ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80029f0:	47c8      	blx	r9
 80029f2:	3001      	adds	r0, #1
 80029f4:	d023      	beq.n	8002a3e <_printf_common+0xae>
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	6922      	ldr	r2, [r4, #16]
 80029fa:	f003 0306 	and.w	r3, r3, #6
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	bf14      	ite	ne
 8002a02:	2500      	movne	r5, #0
 8002a04:	6833      	ldreq	r3, [r6, #0]
 8002a06:	f04f 0600 	mov.w	r6, #0
 8002a0a:	bf08      	it	eq
 8002a0c:	68e5      	ldreq	r5, [r4, #12]
 8002a0e:	f104 041a 	add.w	r4, r4, #26
 8002a12:	bf08      	it	eq
 8002a14:	1aed      	subeq	r5, r5, r3
 8002a16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002a1a:	bf08      	it	eq
 8002a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a20:	4293      	cmp	r3, r2
 8002a22:	bfc4      	itt	gt
 8002a24:	1a9b      	subgt	r3, r3, r2
 8002a26:	18ed      	addgt	r5, r5, r3
 8002a28:	42b5      	cmp	r5, r6
 8002a2a:	d11a      	bne.n	8002a62 <_printf_common+0xd2>
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	e008      	b.n	8002a42 <_printf_common+0xb2>
 8002a30:	2301      	movs	r3, #1
 8002a32:	4652      	mov	r2, sl
 8002a34:	4641      	mov	r1, r8
 8002a36:	4638      	mov	r0, r7
 8002a38:	47c8      	blx	r9
 8002a3a:	3001      	adds	r0, #1
 8002a3c:	d103      	bne.n	8002a46 <_printf_common+0xb6>
 8002a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a46:	3501      	adds	r5, #1
 8002a48:	e7c1      	b.n	80029ce <_printf_common+0x3e>
 8002a4a:	2030      	movs	r0, #48	@ 0x30
 8002a4c:	18e1      	adds	r1, r4, r3
 8002a4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002a58:	4422      	add	r2, r4
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002a60:	e7c2      	b.n	80029e8 <_printf_common+0x58>
 8002a62:	2301      	movs	r3, #1
 8002a64:	4622      	mov	r2, r4
 8002a66:	4641      	mov	r1, r8
 8002a68:	4638      	mov	r0, r7
 8002a6a:	47c8      	blx	r9
 8002a6c:	3001      	adds	r0, #1
 8002a6e:	d0e6      	beq.n	8002a3e <_printf_common+0xae>
 8002a70:	3601      	adds	r6, #1
 8002a72:	e7d9      	b.n	8002a28 <_printf_common+0x98>

08002a74 <_printf_i>:
 8002a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a78:	7e0f      	ldrb	r7, [r1, #24]
 8002a7a:	4691      	mov	r9, r2
 8002a7c:	2f78      	cmp	r7, #120	@ 0x78
 8002a7e:	4680      	mov	r8, r0
 8002a80:	460c      	mov	r4, r1
 8002a82:	469a      	mov	sl, r3
 8002a84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002a86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002a8a:	d807      	bhi.n	8002a9c <_printf_i+0x28>
 8002a8c:	2f62      	cmp	r7, #98	@ 0x62
 8002a8e:	d80a      	bhi.n	8002aa6 <_printf_i+0x32>
 8002a90:	2f00      	cmp	r7, #0
 8002a92:	f000 80d3 	beq.w	8002c3c <_printf_i+0x1c8>
 8002a96:	2f58      	cmp	r7, #88	@ 0x58
 8002a98:	f000 80ba 	beq.w	8002c10 <_printf_i+0x19c>
 8002a9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002aa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002aa4:	e03a      	b.n	8002b1c <_printf_i+0xa8>
 8002aa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002aaa:	2b15      	cmp	r3, #21
 8002aac:	d8f6      	bhi.n	8002a9c <_printf_i+0x28>
 8002aae:	a101      	add	r1, pc, #4	@ (adr r1, 8002ab4 <_printf_i+0x40>)
 8002ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ab4:	08002b0d 	.word	0x08002b0d
 8002ab8:	08002b21 	.word	0x08002b21
 8002abc:	08002a9d 	.word	0x08002a9d
 8002ac0:	08002a9d 	.word	0x08002a9d
 8002ac4:	08002a9d 	.word	0x08002a9d
 8002ac8:	08002a9d 	.word	0x08002a9d
 8002acc:	08002b21 	.word	0x08002b21
 8002ad0:	08002a9d 	.word	0x08002a9d
 8002ad4:	08002a9d 	.word	0x08002a9d
 8002ad8:	08002a9d 	.word	0x08002a9d
 8002adc:	08002a9d 	.word	0x08002a9d
 8002ae0:	08002c23 	.word	0x08002c23
 8002ae4:	08002b4b 	.word	0x08002b4b
 8002ae8:	08002bdd 	.word	0x08002bdd
 8002aec:	08002a9d 	.word	0x08002a9d
 8002af0:	08002a9d 	.word	0x08002a9d
 8002af4:	08002c45 	.word	0x08002c45
 8002af8:	08002a9d 	.word	0x08002a9d
 8002afc:	08002b4b 	.word	0x08002b4b
 8002b00:	08002a9d 	.word	0x08002a9d
 8002b04:	08002a9d 	.word	0x08002a9d
 8002b08:	08002be5 	.word	0x08002be5
 8002b0c:	6833      	ldr	r3, [r6, #0]
 8002b0e:	1d1a      	adds	r2, r3, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6032      	str	r2, [r6, #0]
 8002b14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e09e      	b.n	8002c5e <_printf_i+0x1ea>
 8002b20:	6833      	ldr	r3, [r6, #0]
 8002b22:	6820      	ldr	r0, [r4, #0]
 8002b24:	1d19      	adds	r1, r3, #4
 8002b26:	6031      	str	r1, [r6, #0]
 8002b28:	0606      	lsls	r6, r0, #24
 8002b2a:	d501      	bpl.n	8002b30 <_printf_i+0xbc>
 8002b2c:	681d      	ldr	r5, [r3, #0]
 8002b2e:	e003      	b.n	8002b38 <_printf_i+0xc4>
 8002b30:	0645      	lsls	r5, r0, #25
 8002b32:	d5fb      	bpl.n	8002b2c <_printf_i+0xb8>
 8002b34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b38:	2d00      	cmp	r5, #0
 8002b3a:	da03      	bge.n	8002b44 <_printf_i+0xd0>
 8002b3c:	232d      	movs	r3, #45	@ 0x2d
 8002b3e:	426d      	negs	r5, r5
 8002b40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b44:	230a      	movs	r3, #10
 8002b46:	4859      	ldr	r0, [pc, #356]	@ (8002cac <_printf_i+0x238>)
 8002b48:	e011      	b.n	8002b6e <_printf_i+0xfa>
 8002b4a:	6821      	ldr	r1, [r4, #0]
 8002b4c:	6833      	ldr	r3, [r6, #0]
 8002b4e:	0608      	lsls	r0, r1, #24
 8002b50:	f853 5b04 	ldr.w	r5, [r3], #4
 8002b54:	d402      	bmi.n	8002b5c <_printf_i+0xe8>
 8002b56:	0649      	lsls	r1, r1, #25
 8002b58:	bf48      	it	mi
 8002b5a:	b2ad      	uxthmi	r5, r5
 8002b5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002b5e:	6033      	str	r3, [r6, #0]
 8002b60:	bf14      	ite	ne
 8002b62:	230a      	movne	r3, #10
 8002b64:	2308      	moveq	r3, #8
 8002b66:	4851      	ldr	r0, [pc, #324]	@ (8002cac <_printf_i+0x238>)
 8002b68:	2100      	movs	r1, #0
 8002b6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002b6e:	6866      	ldr	r6, [r4, #4]
 8002b70:	2e00      	cmp	r6, #0
 8002b72:	bfa8      	it	ge
 8002b74:	6821      	ldrge	r1, [r4, #0]
 8002b76:	60a6      	str	r6, [r4, #8]
 8002b78:	bfa4      	itt	ge
 8002b7a:	f021 0104 	bicge.w	r1, r1, #4
 8002b7e:	6021      	strge	r1, [r4, #0]
 8002b80:	b90d      	cbnz	r5, 8002b86 <_printf_i+0x112>
 8002b82:	2e00      	cmp	r6, #0
 8002b84:	d04b      	beq.n	8002c1e <_printf_i+0x1aa>
 8002b86:	4616      	mov	r6, r2
 8002b88:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b8c:	fb03 5711 	mls	r7, r3, r1, r5
 8002b90:	5dc7      	ldrb	r7, [r0, r7]
 8002b92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b96:	462f      	mov	r7, r5
 8002b98:	42bb      	cmp	r3, r7
 8002b9a:	460d      	mov	r5, r1
 8002b9c:	d9f4      	bls.n	8002b88 <_printf_i+0x114>
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d10b      	bne.n	8002bba <_printf_i+0x146>
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	07df      	lsls	r7, r3, #31
 8002ba6:	d508      	bpl.n	8002bba <_printf_i+0x146>
 8002ba8:	6923      	ldr	r3, [r4, #16]
 8002baa:	6861      	ldr	r1, [r4, #4]
 8002bac:	4299      	cmp	r1, r3
 8002bae:	bfde      	ittt	le
 8002bb0:	2330      	movle	r3, #48	@ 0x30
 8002bb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002bb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002bba:	1b92      	subs	r2, r2, r6
 8002bbc:	6122      	str	r2, [r4, #16]
 8002bbe:	464b      	mov	r3, r9
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	4640      	mov	r0, r8
 8002bc4:	f8cd a000 	str.w	sl, [sp]
 8002bc8:	aa03      	add	r2, sp, #12
 8002bca:	f7ff fee1 	bl	8002990 <_printf_common>
 8002bce:	3001      	adds	r0, #1
 8002bd0:	d14a      	bne.n	8002c68 <_printf_i+0x1f4>
 8002bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd6:	b004      	add	sp, #16
 8002bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	f043 0320 	orr.w	r3, r3, #32
 8002be2:	6023      	str	r3, [r4, #0]
 8002be4:	2778      	movs	r7, #120	@ 0x78
 8002be6:	4832      	ldr	r0, [pc, #200]	@ (8002cb0 <_printf_i+0x23c>)
 8002be8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	6831      	ldr	r1, [r6, #0]
 8002bf0:	061f      	lsls	r7, r3, #24
 8002bf2:	f851 5b04 	ldr.w	r5, [r1], #4
 8002bf6:	d402      	bmi.n	8002bfe <_printf_i+0x18a>
 8002bf8:	065f      	lsls	r7, r3, #25
 8002bfa:	bf48      	it	mi
 8002bfc:	b2ad      	uxthmi	r5, r5
 8002bfe:	6031      	str	r1, [r6, #0]
 8002c00:	07d9      	lsls	r1, r3, #31
 8002c02:	bf44      	itt	mi
 8002c04:	f043 0320 	orrmi.w	r3, r3, #32
 8002c08:	6023      	strmi	r3, [r4, #0]
 8002c0a:	b11d      	cbz	r5, 8002c14 <_printf_i+0x1a0>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	e7ab      	b.n	8002b68 <_printf_i+0xf4>
 8002c10:	4826      	ldr	r0, [pc, #152]	@ (8002cac <_printf_i+0x238>)
 8002c12:	e7e9      	b.n	8002be8 <_printf_i+0x174>
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	f023 0320 	bic.w	r3, r3, #32
 8002c1a:	6023      	str	r3, [r4, #0]
 8002c1c:	e7f6      	b.n	8002c0c <_printf_i+0x198>
 8002c1e:	4616      	mov	r6, r2
 8002c20:	e7bd      	b.n	8002b9e <_printf_i+0x12a>
 8002c22:	6833      	ldr	r3, [r6, #0]
 8002c24:	6825      	ldr	r5, [r4, #0]
 8002c26:	1d18      	adds	r0, r3, #4
 8002c28:	6961      	ldr	r1, [r4, #20]
 8002c2a:	6030      	str	r0, [r6, #0]
 8002c2c:	062e      	lsls	r6, r5, #24
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	d501      	bpl.n	8002c36 <_printf_i+0x1c2>
 8002c32:	6019      	str	r1, [r3, #0]
 8002c34:	e002      	b.n	8002c3c <_printf_i+0x1c8>
 8002c36:	0668      	lsls	r0, r5, #25
 8002c38:	d5fb      	bpl.n	8002c32 <_printf_i+0x1be>
 8002c3a:	8019      	strh	r1, [r3, #0]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	4616      	mov	r6, r2
 8002c40:	6123      	str	r3, [r4, #16]
 8002c42:	e7bc      	b.n	8002bbe <_printf_i+0x14a>
 8002c44:	6833      	ldr	r3, [r6, #0]
 8002c46:	2100      	movs	r1, #0
 8002c48:	1d1a      	adds	r2, r3, #4
 8002c4a:	6032      	str	r2, [r6, #0]
 8002c4c:	681e      	ldr	r6, [r3, #0]
 8002c4e:	6862      	ldr	r2, [r4, #4]
 8002c50:	4630      	mov	r0, r6
 8002c52:	f000 f96b 	bl	8002f2c <memchr>
 8002c56:	b108      	cbz	r0, 8002c5c <_printf_i+0x1e8>
 8002c58:	1b80      	subs	r0, r0, r6
 8002c5a:	6060      	str	r0, [r4, #4]
 8002c5c:	6863      	ldr	r3, [r4, #4]
 8002c5e:	6123      	str	r3, [r4, #16]
 8002c60:	2300      	movs	r3, #0
 8002c62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c66:	e7aa      	b.n	8002bbe <_printf_i+0x14a>
 8002c68:	4632      	mov	r2, r6
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	6923      	ldr	r3, [r4, #16]
 8002c70:	47d0      	blx	sl
 8002c72:	3001      	adds	r0, #1
 8002c74:	d0ad      	beq.n	8002bd2 <_printf_i+0x15e>
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	079b      	lsls	r3, r3, #30
 8002c7a:	d413      	bmi.n	8002ca4 <_printf_i+0x230>
 8002c7c:	68e0      	ldr	r0, [r4, #12]
 8002c7e:	9b03      	ldr	r3, [sp, #12]
 8002c80:	4298      	cmp	r0, r3
 8002c82:	bfb8      	it	lt
 8002c84:	4618      	movlt	r0, r3
 8002c86:	e7a6      	b.n	8002bd6 <_printf_i+0x162>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	4632      	mov	r2, r6
 8002c8c:	4649      	mov	r1, r9
 8002c8e:	4640      	mov	r0, r8
 8002c90:	47d0      	blx	sl
 8002c92:	3001      	adds	r0, #1
 8002c94:	d09d      	beq.n	8002bd2 <_printf_i+0x15e>
 8002c96:	3501      	adds	r5, #1
 8002c98:	68e3      	ldr	r3, [r4, #12]
 8002c9a:	9903      	ldr	r1, [sp, #12]
 8002c9c:	1a5b      	subs	r3, r3, r1
 8002c9e:	42ab      	cmp	r3, r5
 8002ca0:	dcf2      	bgt.n	8002c88 <_printf_i+0x214>
 8002ca2:	e7eb      	b.n	8002c7c <_printf_i+0x208>
 8002ca4:	2500      	movs	r5, #0
 8002ca6:	f104 0619 	add.w	r6, r4, #25
 8002caa:	e7f5      	b.n	8002c98 <_printf_i+0x224>
 8002cac:	08003033 	.word	0x08003033
 8002cb0:	08003044 	.word	0x08003044

08002cb4 <__sflush_r>:
 8002cb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	0716      	lsls	r6, r2, #28
 8002cbc:	4605      	mov	r5, r0
 8002cbe:	460c      	mov	r4, r1
 8002cc0:	d454      	bmi.n	8002d6c <__sflush_r+0xb8>
 8002cc2:	684b      	ldr	r3, [r1, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	dc02      	bgt.n	8002cce <__sflush_r+0x1a>
 8002cc8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	dd48      	ble.n	8002d60 <__sflush_r+0xac>
 8002cce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002cd0:	2e00      	cmp	r6, #0
 8002cd2:	d045      	beq.n	8002d60 <__sflush_r+0xac>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002cda:	682f      	ldr	r7, [r5, #0]
 8002cdc:	6a21      	ldr	r1, [r4, #32]
 8002cde:	602b      	str	r3, [r5, #0]
 8002ce0:	d030      	beq.n	8002d44 <__sflush_r+0x90>
 8002ce2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002ce4:	89a3      	ldrh	r3, [r4, #12]
 8002ce6:	0759      	lsls	r1, r3, #29
 8002ce8:	d505      	bpl.n	8002cf6 <__sflush_r+0x42>
 8002cea:	6863      	ldr	r3, [r4, #4]
 8002cec:	1ad2      	subs	r2, r2, r3
 8002cee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002cf0:	b10b      	cbz	r3, 8002cf6 <__sflush_r+0x42>
 8002cf2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002cf4:	1ad2      	subs	r2, r2, r3
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002cfc:	6a21      	ldr	r1, [r4, #32]
 8002cfe:	47b0      	blx	r6
 8002d00:	1c43      	adds	r3, r0, #1
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	d106      	bne.n	8002d14 <__sflush_r+0x60>
 8002d06:	6829      	ldr	r1, [r5, #0]
 8002d08:	291d      	cmp	r1, #29
 8002d0a:	d82b      	bhi.n	8002d64 <__sflush_r+0xb0>
 8002d0c:	4a28      	ldr	r2, [pc, #160]	@ (8002db0 <__sflush_r+0xfc>)
 8002d0e:	410a      	asrs	r2, r1
 8002d10:	07d6      	lsls	r6, r2, #31
 8002d12:	d427      	bmi.n	8002d64 <__sflush_r+0xb0>
 8002d14:	2200      	movs	r2, #0
 8002d16:	6062      	str	r2, [r4, #4]
 8002d18:	6922      	ldr	r2, [r4, #16]
 8002d1a:	04d9      	lsls	r1, r3, #19
 8002d1c:	6022      	str	r2, [r4, #0]
 8002d1e:	d504      	bpl.n	8002d2a <__sflush_r+0x76>
 8002d20:	1c42      	adds	r2, r0, #1
 8002d22:	d101      	bne.n	8002d28 <__sflush_r+0x74>
 8002d24:	682b      	ldr	r3, [r5, #0]
 8002d26:	b903      	cbnz	r3, 8002d2a <__sflush_r+0x76>
 8002d28:	6560      	str	r0, [r4, #84]	@ 0x54
 8002d2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d2c:	602f      	str	r7, [r5, #0]
 8002d2e:	b1b9      	cbz	r1, 8002d60 <__sflush_r+0xac>
 8002d30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d34:	4299      	cmp	r1, r3
 8002d36:	d002      	beq.n	8002d3e <__sflush_r+0x8a>
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f7ff fbf3 	bl	8002524 <_free_r>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d42:	e00d      	b.n	8002d60 <__sflush_r+0xac>
 8002d44:	2301      	movs	r3, #1
 8002d46:	4628      	mov	r0, r5
 8002d48:	47b0      	blx	r6
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	1c50      	adds	r0, r2, #1
 8002d4e:	d1c9      	bne.n	8002ce4 <__sflush_r+0x30>
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0c6      	beq.n	8002ce4 <__sflush_r+0x30>
 8002d56:	2b1d      	cmp	r3, #29
 8002d58:	d001      	beq.n	8002d5e <__sflush_r+0xaa>
 8002d5a:	2b16      	cmp	r3, #22
 8002d5c:	d11d      	bne.n	8002d9a <__sflush_r+0xe6>
 8002d5e:	602f      	str	r7, [r5, #0]
 8002d60:	2000      	movs	r0, #0
 8002d62:	e021      	b.n	8002da8 <__sflush_r+0xf4>
 8002d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d68:	b21b      	sxth	r3, r3
 8002d6a:	e01a      	b.n	8002da2 <__sflush_r+0xee>
 8002d6c:	690f      	ldr	r7, [r1, #16]
 8002d6e:	2f00      	cmp	r7, #0
 8002d70:	d0f6      	beq.n	8002d60 <__sflush_r+0xac>
 8002d72:	0793      	lsls	r3, r2, #30
 8002d74:	bf18      	it	ne
 8002d76:	2300      	movne	r3, #0
 8002d78:	680e      	ldr	r6, [r1, #0]
 8002d7a:	bf08      	it	eq
 8002d7c:	694b      	ldreq	r3, [r1, #20]
 8002d7e:	1bf6      	subs	r6, r6, r7
 8002d80:	600f      	str	r7, [r1, #0]
 8002d82:	608b      	str	r3, [r1, #8]
 8002d84:	2e00      	cmp	r6, #0
 8002d86:	ddeb      	ble.n	8002d60 <__sflush_r+0xac>
 8002d88:	4633      	mov	r3, r6
 8002d8a:	463a      	mov	r2, r7
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	6a21      	ldr	r1, [r4, #32]
 8002d90:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002d94:	47e0      	blx	ip
 8002d96:	2800      	cmp	r0, #0
 8002d98:	dc07      	bgt.n	8002daa <__sflush_r+0xf6>
 8002d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002da2:	f04f 30ff 	mov.w	r0, #4294967295
 8002da6:	81a3      	strh	r3, [r4, #12]
 8002da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002daa:	4407      	add	r7, r0
 8002dac:	1a36      	subs	r6, r6, r0
 8002dae:	e7e9      	b.n	8002d84 <__sflush_r+0xd0>
 8002db0:	dfbffffe 	.word	0xdfbffffe

08002db4 <_fflush_r>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	690b      	ldr	r3, [r1, #16]
 8002db8:	4605      	mov	r5, r0
 8002dba:	460c      	mov	r4, r1
 8002dbc:	b913      	cbnz	r3, 8002dc4 <_fflush_r+0x10>
 8002dbe:	2500      	movs	r5, #0
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	bd38      	pop	{r3, r4, r5, pc}
 8002dc4:	b118      	cbz	r0, 8002dce <_fflush_r+0x1a>
 8002dc6:	6a03      	ldr	r3, [r0, #32]
 8002dc8:	b90b      	cbnz	r3, 8002dce <_fflush_r+0x1a>
 8002dca:	f7ff f9b1 	bl	8002130 <__sinit>
 8002dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f3      	beq.n	8002dbe <_fflush_r+0xa>
 8002dd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002dd8:	07d0      	lsls	r0, r2, #31
 8002dda:	d404      	bmi.n	8002de6 <_fflush_r+0x32>
 8002ddc:	0599      	lsls	r1, r3, #22
 8002dde:	d402      	bmi.n	8002de6 <_fflush_r+0x32>
 8002de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002de2:	f7ff fb9c 	bl	800251e <__retarget_lock_acquire_recursive>
 8002de6:	4628      	mov	r0, r5
 8002de8:	4621      	mov	r1, r4
 8002dea:	f7ff ff63 	bl	8002cb4 <__sflush_r>
 8002dee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002df0:	4605      	mov	r5, r0
 8002df2:	07da      	lsls	r2, r3, #31
 8002df4:	d4e4      	bmi.n	8002dc0 <_fflush_r+0xc>
 8002df6:	89a3      	ldrh	r3, [r4, #12]
 8002df8:	059b      	lsls	r3, r3, #22
 8002dfa:	d4e1      	bmi.n	8002dc0 <_fflush_r+0xc>
 8002dfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002dfe:	f7ff fb8f 	bl	8002520 <__retarget_lock_release_recursive>
 8002e02:	e7dd      	b.n	8002dc0 <_fflush_r+0xc>

08002e04 <__swhatbuf_r>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	460c      	mov	r4, r1
 8002e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e0c:	4615      	mov	r5, r2
 8002e0e:	2900      	cmp	r1, #0
 8002e10:	461e      	mov	r6, r3
 8002e12:	b096      	sub	sp, #88	@ 0x58
 8002e14:	da0c      	bge.n	8002e30 <__swhatbuf_r+0x2c>
 8002e16:	89a3      	ldrh	r3, [r4, #12]
 8002e18:	2100      	movs	r1, #0
 8002e1a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002e1e:	bf14      	ite	ne
 8002e20:	2340      	movne	r3, #64	@ 0x40
 8002e22:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002e26:	2000      	movs	r0, #0
 8002e28:	6031      	str	r1, [r6, #0]
 8002e2a:	602b      	str	r3, [r5, #0]
 8002e2c:	b016      	add	sp, #88	@ 0x58
 8002e2e:	bd70      	pop	{r4, r5, r6, pc}
 8002e30:	466a      	mov	r2, sp
 8002e32:	f000 f849 	bl	8002ec8 <_fstat_r>
 8002e36:	2800      	cmp	r0, #0
 8002e38:	dbed      	blt.n	8002e16 <__swhatbuf_r+0x12>
 8002e3a:	9901      	ldr	r1, [sp, #4]
 8002e3c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002e40:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002e44:	4259      	negs	r1, r3
 8002e46:	4159      	adcs	r1, r3
 8002e48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e4c:	e7eb      	b.n	8002e26 <__swhatbuf_r+0x22>

08002e4e <__smakebuf_r>:
 8002e4e:	898b      	ldrh	r3, [r1, #12]
 8002e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e52:	079d      	lsls	r5, r3, #30
 8002e54:	4606      	mov	r6, r0
 8002e56:	460c      	mov	r4, r1
 8002e58:	d507      	bpl.n	8002e6a <__smakebuf_r+0x1c>
 8002e5a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002e5e:	6023      	str	r3, [r4, #0]
 8002e60:	6123      	str	r3, [r4, #16]
 8002e62:	2301      	movs	r3, #1
 8002e64:	6163      	str	r3, [r4, #20]
 8002e66:	b003      	add	sp, #12
 8002e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e6a:	466a      	mov	r2, sp
 8002e6c:	ab01      	add	r3, sp, #4
 8002e6e:	f7ff ffc9 	bl	8002e04 <__swhatbuf_r>
 8002e72:	9f00      	ldr	r7, [sp, #0]
 8002e74:	4605      	mov	r5, r0
 8002e76:	4639      	mov	r1, r7
 8002e78:	4630      	mov	r0, r6
 8002e7a:	f7ff fbbd 	bl	80025f8 <_malloc_r>
 8002e7e:	b948      	cbnz	r0, 8002e94 <__smakebuf_r+0x46>
 8002e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e84:	059a      	lsls	r2, r3, #22
 8002e86:	d4ee      	bmi.n	8002e66 <__smakebuf_r+0x18>
 8002e88:	f023 0303 	bic.w	r3, r3, #3
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	e7e2      	b.n	8002e5a <__smakebuf_r+0xc>
 8002e94:	89a3      	ldrh	r3, [r4, #12]
 8002e96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e9e:	81a3      	strh	r3, [r4, #12]
 8002ea0:	9b01      	ldr	r3, [sp, #4]
 8002ea2:	6020      	str	r0, [r4, #0]
 8002ea4:	b15b      	cbz	r3, 8002ebe <__smakebuf_r+0x70>
 8002ea6:	4630      	mov	r0, r6
 8002ea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002eac:	f000 f81e 	bl	8002eec <_isatty_r>
 8002eb0:	b128      	cbz	r0, 8002ebe <__smakebuf_r+0x70>
 8002eb2:	89a3      	ldrh	r3, [r4, #12]
 8002eb4:	f023 0303 	bic.w	r3, r3, #3
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	81a3      	strh	r3, [r4, #12]
 8002ebe:	89a3      	ldrh	r3, [r4, #12]
 8002ec0:	431d      	orrs	r5, r3
 8002ec2:	81a5      	strh	r5, [r4, #12]
 8002ec4:	e7cf      	b.n	8002e66 <__smakebuf_r+0x18>
	...

08002ec8 <_fstat_r>:
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	2300      	movs	r3, #0
 8002ecc:	4d06      	ldr	r5, [pc, #24]	@ (8002ee8 <_fstat_r+0x20>)
 8002ece:	4604      	mov	r4, r0
 8002ed0:	4608      	mov	r0, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	602b      	str	r3, [r5, #0]
 8002ed6:	f7fd fbd5 	bl	8000684 <_fstat>
 8002eda:	1c43      	adds	r3, r0, #1
 8002edc:	d102      	bne.n	8002ee4 <_fstat_r+0x1c>
 8002ede:	682b      	ldr	r3, [r5, #0]
 8002ee0:	b103      	cbz	r3, 8002ee4 <_fstat_r+0x1c>
 8002ee2:	6023      	str	r3, [r4, #0]
 8002ee4:	bd38      	pop	{r3, r4, r5, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200001f0 	.word	0x200001f0

08002eec <_isatty_r>:
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	2300      	movs	r3, #0
 8002ef0:	4d05      	ldr	r5, [pc, #20]	@ (8002f08 <_isatty_r+0x1c>)
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	602b      	str	r3, [r5, #0]
 8002ef8:	f7fd fbd3 	bl	80006a2 <_isatty>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	d102      	bne.n	8002f06 <_isatty_r+0x1a>
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	b103      	cbz	r3, 8002f06 <_isatty_r+0x1a>
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
 8002f08:	200001f0 	.word	0x200001f0

08002f0c <_sbrk_r>:
 8002f0c:	b538      	push	{r3, r4, r5, lr}
 8002f0e:	2300      	movs	r3, #0
 8002f10:	4d05      	ldr	r5, [pc, #20]	@ (8002f28 <_sbrk_r+0x1c>)
 8002f12:	4604      	mov	r4, r0
 8002f14:	4608      	mov	r0, r1
 8002f16:	602b      	str	r3, [r5, #0]
 8002f18:	f7fd fbda 	bl	80006d0 <_sbrk>
 8002f1c:	1c43      	adds	r3, r0, #1
 8002f1e:	d102      	bne.n	8002f26 <_sbrk_r+0x1a>
 8002f20:	682b      	ldr	r3, [r5, #0]
 8002f22:	b103      	cbz	r3, 8002f26 <_sbrk_r+0x1a>
 8002f24:	6023      	str	r3, [r4, #0]
 8002f26:	bd38      	pop	{r3, r4, r5, pc}
 8002f28:	200001f0 	.word	0x200001f0

08002f2c <memchr>:
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	b510      	push	{r4, lr}
 8002f30:	b2c9      	uxtb	r1, r1
 8002f32:	4402      	add	r2, r0
 8002f34:	4293      	cmp	r3, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	d101      	bne.n	8002f3e <memchr+0x12>
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	e003      	b.n	8002f46 <memchr+0x1a>
 8002f3e:	7804      	ldrb	r4, [r0, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	428c      	cmp	r4, r1
 8002f44:	d1f6      	bne.n	8002f34 <memchr+0x8>
 8002f46:	bd10      	pop	{r4, pc}

08002f48 <_init>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	bf00      	nop
 8002f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4e:	bc08      	pop	{r3}
 8002f50:	469e      	mov	lr, r3
 8002f52:	4770      	bx	lr

08002f54 <_fini>:
 8002f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f56:	bf00      	nop
 8002f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5a:	bc08      	pop	{r3}
 8002f5c:	469e      	mov	lr, r3
 8002f5e:	4770      	bx	lr
