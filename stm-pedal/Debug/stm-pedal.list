
stm-pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c80  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08003d8c  08003d8c  00004d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e98  08003e98  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003e98  08003e98  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e98  08003e98  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e98  08003e98  00004e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e9c  08003e9c  00004e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003ea0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000068  08003f08  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08003f08  00005248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e0b  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2a  00000000  00000000  0000be9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0000d8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000567  00000000  00000000  0000e028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001836d  00000000  00000000  0000e58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008921  00000000  00000000  000268fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000890d8  00000000  00000000  0002f21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b82f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002420  00000000  00000000  000b8338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000ba758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d74 	.word	0x08003d74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003d74 	.word	0x08003d74

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc6c 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f826 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f928 	bl	80003ac <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f8d2 	bl	8000304 <MX_CAN_Init>
  MX_ADC1_Init();
 8000160:	f000 f874 	bl	800024c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000164:	480d      	ldr	r0, [pc, #52]	@ (800019c <main+0x50>)
 8000166:	f001 fb02 	bl	800176e <HAL_CAN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 800016a:	2201      	movs	r2, #1
 800016c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000170:	480b      	ldr	r0, [pc, #44]	@ (80001a0 <main+0x54>)
 8000172:	f002 f8d9 	bl	8002328 <HAL_GPIO_WritePin>
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 8000176:	2200      	movs	r2, #0
 8000178:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800017c:	4808      	ldr	r0, [pc, #32]	@ (80001a0 <main+0x54>)
 800017e:	f002 f8d3 	bl	8002328 <HAL_GPIO_WritePin>
	  Read_Potentiometers();
 8000182:	f000 fa0d 	bl	80005a0 <Read_Potentiometers>
	 CAN_Transmit();
 8000186:	f000 f95d 	bl	8000444 <CAN_Transmit>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 800018a:	2201      	movs	r2, #1
 800018c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000190:	4803      	ldr	r0, [pc, #12]	@ (80001a0 <main+0x54>)
 8000192:	f002 f8c9 	bl	8002328 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 8000196:	bf00      	nop
 8000198:	e7ed      	b.n	8000176 <main+0x2a>
 800019a:	bf00      	nop
 800019c:	200000bc 	.word	0x200000bc
 80001a0:	40011000 	.word	0x40011000

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b094      	sub	sp, #80	@ 0x50
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ae:	2228      	movs	r2, #40	@ 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f003 f842 	bl	800323c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	f107 0314 	add.w	r3, r7, #20
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
 80001c0:	605a      	str	r2, [r3, #4]
 80001c2:	609a      	str	r2, [r3, #8]
 80001c4:	60da      	str	r2, [r3, #12]
 80001c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d4:	2302      	movs	r3, #2
 80001d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d8:	2301      	movs	r3, #1
 80001da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001dc:	2310      	movs	r3, #16
 80001de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e0:	2302      	movs	r3, #2
 80001e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001e4:	2300      	movs	r3, #0
 80001e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80001e8:	2300      	movs	r3, #0
 80001ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001f0:	4618      	mov	r0, r3
 80001f2:	f002 f8b1 	bl	8002358 <HAL_RCC_OscConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80001fc:	f000 fa16 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000200:	230f      	movs	r3, #15
 8000202:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000204:	2302      	movs	r3, #2
 8000206:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000214:	f107 0314 	add.w	r3, r7, #20
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 fb1e 	bl	800285c <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000226:	f000 fa01 	bl	800062c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800022a:	2302      	movs	r3, #2
 800022c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800022e:	2300      	movs	r3, #0
 8000230:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f002 fc8b 	bl	8002b50 <HAL_RCCEx_PeriphCLKConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000240:	f000 f9f4 	bl	800062c <Error_Handler>
  }
}
 8000244:	bf00      	nop
 8000246:	3750      	adds	r7, #80	@ 0x50
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800025c:	4b27      	ldr	r3, [pc, #156]	@ (80002fc <MX_ADC1_Init+0xb0>)
 800025e:	4a28      	ldr	r2, [pc, #160]	@ (8000300 <MX_ADC1_Init+0xb4>)
 8000260:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000262:	4b26      	ldr	r3, [pc, #152]	@ (80002fc <MX_ADC1_Init+0xb0>)
 8000264:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000268:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800026a:	4b24      	ldr	r3, [pc, #144]	@ (80002fc <MX_ADC1_Init+0xb0>)
 800026c:	2201      	movs	r2, #1
 800026e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000270:	4b22      	ldr	r3, [pc, #136]	@ (80002fc <MX_ADC1_Init+0xb0>)
 8000272:	2200      	movs	r2, #0
 8000274:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000276:	4b21      	ldr	r3, [pc, #132]	@ (80002fc <MX_ADC1_Init+0xb0>)
 8000278:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800027c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800027e:	4b1f      	ldr	r3, [pc, #124]	@ (80002fc <MX_ADC1_Init+0xb0>)
 8000280:	2200      	movs	r2, #0
 8000282:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000284:	4b1d      	ldr	r3, [pc, #116]	@ (80002fc <MX_ADC1_Init+0xb0>)
 8000286:	2203      	movs	r2, #3
 8000288:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800028a:	481c      	ldr	r0, [pc, #112]	@ (80002fc <MX_ADC1_Init+0xb0>)
 800028c:	f000 fc54 	bl	8000b38 <HAL_ADC_Init>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000296:	f000 f9c9 	bl	800062c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800029a:	2300      	movs	r3, #0
 800029c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800029e:	2301      	movs	r3, #1
 80002a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80002a2:	2304      	movs	r3, #4
 80002a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4619      	mov	r1, r3
 80002aa:	4814      	ldr	r0, [pc, #80]	@ (80002fc <MX_ADC1_Init+0xb0>)
 80002ac:	f000 ff08 	bl	80010c0 <HAL_ADC_ConfigChannel>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002b6:	f000 f9b9 	bl	800062c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002be:	2302      	movs	r3, #2
 80002c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4619      	mov	r1, r3
 80002c6:	480d      	ldr	r0, [pc, #52]	@ (80002fc <MX_ADC1_Init+0xb0>)
 80002c8:	f000 fefa 	bl	80010c0 <HAL_ADC_ConfigChannel>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002d2:	f000 f9ab 	bl	800062c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002d6:	2302      	movs	r3, #2
 80002d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002da:	2303      	movs	r3, #3
 80002dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4619      	mov	r1, r3
 80002e2:	4806      	ldr	r0, [pc, #24]	@ (80002fc <MX_ADC1_Init+0xb0>)
 80002e4:	f000 feec 	bl	80010c0 <HAL_ADC_ConfigChannel>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002ee:	f000 f99d 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	2000008c 	.word	0x2000008c
 8000300:	40012400 	.word	0x40012400

08000304 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b08a      	sub	sp, #40	@ 0x28
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800030a:	4b26      	ldr	r3, [pc, #152]	@ (80003a4 <MX_CAN_Init+0xa0>)
 800030c:	4a26      	ldr	r2, [pc, #152]	@ (80003a8 <MX_CAN_Init+0xa4>)
 800030e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8000310:	4b24      	ldr	r3, [pc, #144]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000312:	2201      	movs	r2, #1
 8000314:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000316:	4b23      	ldr	r3, [pc, #140]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800031c:	4b21      	ldr	r3, [pc, #132]	@ (80003a4 <MX_CAN_Init+0xa0>)
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000322:	4b20      	ldr	r3, [pc, #128]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000324:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000328:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800032a:	4b1e      	ldr	r3, [pc, #120]	@ (80003a4 <MX_CAN_Init+0xa0>)
 800032c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000330:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000332:	4b1c      	ldr	r3, [pc, #112]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000334:	2200      	movs	r2, #0
 8000336:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000338:	4b1a      	ldr	r3, [pc, #104]	@ (80003a4 <MX_CAN_Init+0xa0>)
 800033a:	2200      	movs	r2, #0
 800033c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800033e:	4b19      	ldr	r3, [pc, #100]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000340:	2200      	movs	r2, #0
 8000342:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000344:	4b17      	ldr	r3, [pc, #92]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000346:	2200      	movs	r2, #0
 8000348:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800034a:	4b16      	ldr	r3, [pc, #88]	@ (80003a4 <MX_CAN_Init+0xa0>)
 800034c:	2200      	movs	r2, #0
 800034e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000350:	4b14      	ldr	r3, [pc, #80]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000352:	2200      	movs	r2, #0
 8000354:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000356:	4813      	ldr	r0, [pc, #76]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000358:	f001 f845 	bl	80013e6 <HAL_CAN_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000362:	f000 f963 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;                  // Use filter bank 0 (adjust if needed)
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Mask mode
 800036a:	2300      	movs	r3, #0
 800036c:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // 32-bit scale
 800036e:	2301      	movs	r3, #1
 8000370:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0xFFFF;           // Invalid ID
 8000372:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000376:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0xFFFF;            // Invalid ID
 8000378:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800037c:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0xFFFF;       // Mask blocks all
 800037e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000382:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0xFFFF;        // Mask blocks all
 8000384:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000388:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1; // Assign to FIFO0 (or FIFO1 if used)
 800038a:	2301      	movs	r3, #1
 800038c:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;       // Activate the filter
 800038e:	2301      	movs	r3, #1
 8000390:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 8000392:	463b      	mov	r3, r7
 8000394:	4619      	mov	r1, r3
 8000396:	4803      	ldr	r0, [pc, #12]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000398:	f001 f920 	bl	80015dc <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	3728      	adds	r7, #40	@ 0x28
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	200000bc 	.word	0x200000bc
 80003a8:	40006400 	.word	0x40006400

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c0:	4b1e      	ldr	r3, [pc, #120]	@ (800043c <MX_GPIO_Init+0x90>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a1d      	ldr	r2, [pc, #116]	@ (800043c <MX_GPIO_Init+0x90>)
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <MX_GPIO_Init+0x90>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0310 	and.w	r3, r3, #16
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d8:	4b18      	ldr	r3, [pc, #96]	@ (800043c <MX_GPIO_Init+0x90>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a17      	ldr	r2, [pc, #92]	@ (800043c <MX_GPIO_Init+0x90>)
 80003de:	f043 0320 	orr.w	r3, r3, #32
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b15      	ldr	r3, [pc, #84]	@ (800043c <MX_GPIO_Init+0x90>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0320 	and.w	r3, r3, #32
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b12      	ldr	r3, [pc, #72]	@ (800043c <MX_GPIO_Init+0x90>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a11      	ldr	r2, [pc, #68]	@ (800043c <MX_GPIO_Init+0x90>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <MX_GPIO_Init+0x90>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800040e:	480c      	ldr	r0, [pc, #48]	@ (8000440 <MX_GPIO_Init+0x94>)
 8000410:	f001 ff8a 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000414:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	2301      	movs	r3, #1
 800041c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000422:	2302      	movs	r3, #2
 8000424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4619      	mov	r1, r3
 800042c:	4804      	ldr	r0, [pc, #16]	@ (8000440 <MX_GPIO_Init+0x94>)
 800042e:	f001 fdf7 	bl	8002020 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000432:	bf00      	nop
 8000434:	3720      	adds	r7, #32
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000
 8000440:	40011000 	.word	0x40011000

08000444 <CAN_Transmit>:
/* USER CODE BEGIN 4 */
/*
 * CAN BUS FUNCTIONS
 */

void CAN_Transmit() {
 8000444:	b580      	push	{r7, lr}
 8000446:	b092      	sub	sp, #72	@ 0x48
 8000448:	af00      	add	r7, sp, #0
	uint32_t currentTime = HAL_GetTick();
 800044a:	f000 fb47 	bl	8000adc <HAL_GetTick>
 800044e:	6438      	str	r0, [r7, #64]	@ 0x40

	if(currentTime - lastSendTime >= 20) {
 8000450:	4b38      	ldr	r3, [pc, #224]	@ (8000534 <CAN_Transmit+0xf0>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000456:	1ad3      	subs	r3, r2, r3
 8000458:	2b13      	cmp	r3, #19
 800045a:	d966      	bls.n	800052a <CAN_Transmit+0xe6>
		CAN_TxHeaderTypeDef TxHeader;
		uint32_t TxMailbox;

		// Create a telemetry_packet instance and initialize its fields
		pedal_data_t dataToSend = pedal_data;
 800045c:	4a36      	ldr	r2, [pc, #216]	@ (8000538 <CAN_Transmit+0xf4>)
 800045e:	f107 0308 	add.w	r3, r7, #8
 8000462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000466:	6018      	str	r0, [r3, #0]
 8000468:	3304      	adds	r3, #4
 800046a:	8019      	strh	r1, [r3, #0]
//		dataToSend.encoder_1 = 1234;         // Example: Encoder 1 value
//		dataToSend.encoder_2 = -2234;        // Example: Encoder 2 value
//		dataToSend.encoder_3 = 5234;         // Example: Encoder 3 value

		uint8_t* rawData = (uint8_t*)&dataToSend;
 800046c:	f107 0308 	add.w	r3, r7, #8
 8000470:	63fb      	str	r3, [r7, #60]	@ 0x3c

		// Initialize CAN Header
		TxHeader.StdId = 0x102;           // CAN ID for the message
 8000472:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000476:	617b      	str	r3, [r7, #20]
		TxHeader.ExtId = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	61bb      	str	r3, [r7, #24]
		TxHeader.IDE = CAN_ID_STD;        // Use Standard ID
 800047c:	2300      	movs	r3, #0
 800047e:	61fb      	str	r3, [r7, #28]
		TxHeader.RTR = CAN_RTR_DATA;      // Data frame
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]
		TxHeader.DLC = 8;                 // Maximum data length for each CAN frame
 8000484:	2308      	movs	r3, #8
 8000486:	627b      	str	r3, [r7, #36]	@ 0x24

		uint8_t frameData[8];             // Temporary buffer for each CAN frame

		// Calculate the size of the telemetry_packet struct
		int totalSize = sizeof(pedal_data_t);
 8000488:	2306      	movs	r3, #6
 800048a:	63bb      	str	r3, [r7, #56]	@ 0x38

		// Split the telemetry_packet into CAN frames
		for (int i = 0; i < totalSize; i += 8) {
 800048c:	2300      	movs	r3, #0
 800048e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000490:	e047      	b.n	8000522 <CAN_Transmit+0xde>
			// Calculate the size of the current chunk (for the last frame)
			int chunkSize = (totalSize - i >= 8) ? 8 : (totalSize - i);
 8000492:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000496:	1ad3      	subs	r3, r2, r3
 8000498:	2b08      	cmp	r3, #8
 800049a:	bfa8      	it	ge
 800049c:	2308      	movge	r3, #8
 800049e:	637b      	str	r3, [r7, #52]	@ 0x34

			// Copy the next chunk of data into the frame buffer
			memcpy(frameData, &rawData[i], chunkSize);
 80004a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80004a4:	18d1      	adds	r1, r2, r3
 80004a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80004a8:	463b      	mov	r3, r7
 80004aa:	4618      	mov	r0, r3
 80004ac:	f002 ff41 	bl	8003332 <memcpy>

			// Adjust DLC for the last frame
			TxHeader.DLC = chunkSize;
 80004b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004b2:	627b      	str	r3, [r7, #36]	@ 0x24

			HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, frameData, &TxMailbox);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	463a      	mov	r2, r7
 80004ba:	f107 0114 	add.w	r1, r7, #20
 80004be:	481f      	ldr	r0, [pc, #124]	@ (800053c <CAN_Transmit+0xf8>)
 80004c0:	f001 f999 	bl	80017f6 <HAL_CAN_AddTxMessage>
 80004c4:	4603      	mov	r3, r0
 80004c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			if (status != HAL_OK) {
 80004ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d01e      	beq.n	8000510 <CAN_Transmit+0xcc>
				// Inspect the error
				if (status == HAL_ERROR) {
 80004d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d103      	bne.n	80004e2 <CAN_Transmit+0x9e>
					printf("HAL_CAN_AddTxMessage failed: HAL_ERROR\n");
 80004da:	4819      	ldr	r0, [pc, #100]	@ (8000540 <CAN_Transmit+0xfc>)
 80004dc:	f002 fdce 	bl	800307c <puts>
 80004e0:	e00e      	b.n	8000500 <CAN_Transmit+0xbc>
				} else if (status == HAL_BUSY) {
 80004e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80004e6:	2b02      	cmp	r3, #2
 80004e8:	d103      	bne.n	80004f2 <CAN_Transmit+0xae>
					printf("HAL_CAN_AddTxMessage failed: HAL_BUSY\n");
 80004ea:	4816      	ldr	r0, [pc, #88]	@ (8000544 <CAN_Transmit+0x100>)
 80004ec:	f002 fdc6 	bl	800307c <puts>
 80004f0:	e006      	b.n	8000500 <CAN_Transmit+0xbc>
				} else if (status == HAL_TIMEOUT) {
 80004f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80004f6:	2b03      	cmp	r3, #3
 80004f8:	d102      	bne.n	8000500 <CAN_Transmit+0xbc>
					printf("HAL_CAN_AddTxMessage failed: HAL_TIMEOUT\n");
 80004fa:	4813      	ldr	r0, [pc, #76]	@ (8000548 <CAN_Transmit+0x104>)
 80004fc:	f002 fdbe 	bl	800307c <puts>
				}

				// Optionally log the state of CAN error counters
				uint32_t error = HAL_CAN_GetError(&hcan);
 8000500:	480e      	ldr	r0, [pc, #56]	@ (800053c <CAN_Transmit+0xf8>)
 8000502:	f001 fc73 	bl	8001dec <HAL_CAN_GetError>
 8000506:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("CAN Error Code: 0x%08lx\n", error); // Only if you decide to stop execution
 8000508:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800050a:	4810      	ldr	r0, [pc, #64]	@ (800054c <CAN_Transmit+0x108>)
 800050c:	f002 fd4e 	bl	8002fac <iprintf>
			}
			lastSendTime = currentTime;  // Update last transmission time
 8000510:	4a08      	ldr	r2, [pc, #32]	@ (8000534 <CAN_Transmit+0xf0>)
 8000512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000514:	6013      	str	r3, [r2, #0]
			HAL_Delay(1);
 8000516:	2001      	movs	r0, #1
 8000518:	f000 faea 	bl	8000af0 <HAL_Delay>
		for (int i = 0; i < totalSize; i += 8) {
 800051c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800051e:	3308      	adds	r3, #8
 8000520:	647b      	str	r3, [r7, #68]	@ 0x44
 8000522:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000526:	429a      	cmp	r2, r3
 8000528:	dbb3      	blt.n	8000492 <CAN_Transmit+0x4e>
		}
	}
}
 800052a:	bf00      	nop
 800052c:	3748      	adds	r7, #72	@ 0x48
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200000e4 	.word	0x200000e4
 8000538:	20000084 	.word	0x20000084
 800053c:	200000bc 	.word	0x200000bc
 8000540:	08003d8c 	.word	0x08003d8c
 8000544:	08003db4 	.word	0x08003db4
 8000548:	08003ddc 	.word	0x08003ddc
 800054c:	08003e08 	.word	0x08003e08

08000550 <Read_ADC_Value>:

void Read_ADC_Value() {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8000556:	4810      	ldr	r0, [pc, #64]	@ (8000598 <Read_ADC_Value+0x48>)
 8000558:	f000 fbc6 	bl	8000ce8 <HAL_ADC_Start>

    for (int i = 0; i < 3; i++) {
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	e00f      	b.n	8000582 <Read_ADC_Value+0x32>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000562:	f04f 31ff 	mov.w	r1, #4294967295
 8000566:	480c      	ldr	r0, [pc, #48]	@ (8000598 <Read_ADC_Value+0x48>)
 8000568:	f000 fc98 	bl	8000e9c <HAL_ADC_PollForConversion>
        adc_values[i] = HAL_ADC_GetValue(&hadc1);
 800056c:	480a      	ldr	r0, [pc, #40]	@ (8000598 <Read_ADC_Value+0x48>)
 800056e:	f000 fd9b 	bl	80010a8 <HAL_ADC_GetValue>
 8000572:	4602      	mov	r2, r0
 8000574:	4909      	ldr	r1, [pc, #36]	@ (800059c <Read_ADC_Value+0x4c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3301      	adds	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b02      	cmp	r3, #2
 8000586:	ddec      	ble.n	8000562 <Read_ADC_Value+0x12>
    }

    HAL_ADC_Stop(&hadc1);
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <Read_ADC_Value+0x48>)
 800058a:	f000 fc5b 	bl	8000e44 <HAL_ADC_Stop>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000008c 	.word	0x2000008c
 800059c:	200000e8 	.word	0x200000e8

080005a0 <Read_Potentiometers>:

void Read_Potentiometers() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	Read_ADC_Value();
 80005a4:	f7ff ffd4 	bl	8000550 <Read_ADC_Value>
	pedal_data.encoder_1 = map_adc_to_8bit(adc_values[0]);  // Read PA0 (ADC1_IN0)
 80005a8:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <Read_Potentiometers+0x48>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f81e 	bl	80005f0 <map_adc_to_8bit>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <Read_Potentiometers+0x4c>)
 80005ba:	801a      	strh	r2, [r3, #0]
	pedal_data.encoder_2 = map_adc_to_8bit(adc_values[1]);  // Read PA1 (ADC1_IN1)
 80005bc:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <Read_Potentiometers+0x48>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f814 	bl	80005f0 <map_adc_to_8bit>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b21a      	sxth	r2, r3
 80005cc:	4b07      	ldr	r3, [pc, #28]	@ (80005ec <Read_Potentiometers+0x4c>)
 80005ce:	805a      	strh	r2, [r3, #2]
	pedal_data.encoder_3 = map_adc_to_8bit(adc_values[2]);  // Read PA2 (ADC1_IN2)
 80005d0:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <Read_Potentiometers+0x48>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f80a 	bl	80005f0 <map_adc_to_8bit>
 80005dc:	4603      	mov	r3, r0
 80005de:	b21a      	sxth	r2, r3
 80005e0:	4b02      	ldr	r3, [pc, #8]	@ (80005ec <Read_Potentiometers+0x4c>)
 80005e2:	809a      	strh	r2, [r3, #4]
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000e8 	.word	0x200000e8
 80005ec:	20000084 	.word	0x20000084

080005f0 <map_adc_to_8bit>:

uint8_t map_adc_to_8bit(uint16_t adc_value) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
    if (adc_value > 4000) adc_value = 4000;  // Ensure it stays within range
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000600:	d902      	bls.n	8000608 <map_adc_to_8bit+0x18>
 8000602:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000606:	80fb      	strh	r3, [r7, #6]
    return (uint8_t)((adc_value * 255) / 4000);
 8000608:	88fa      	ldrh	r2, [r7, #6]
 800060a:	4613      	mov	r3, r2
 800060c:	021b      	lsls	r3, r3, #8
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	4a05      	ldr	r2, [pc, #20]	@ (8000628 <map_adc_to_8bit+0x38>)
 8000612:	fb82 1203 	smull	r1, r2, r2, r3
 8000616:	1212      	asrs	r2, r2, #8
 8000618:	17db      	asrs	r3, r3, #31
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	b2db      	uxtb	r3, r3
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	10624dd3 	.word	0x10624dd3

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <Error_Handler+0x8>

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063e:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <HAL_MspInit+0x5c>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a14      	ldr	r2, [pc, #80]	@ (8000694 <HAL_MspInit+0x5c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <HAL_MspInit+0x5c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <HAL_MspInit+0x5c>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a0e      	ldr	r2, [pc, #56]	@ (8000694 <HAL_MspInit+0x5c>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <HAL_MspInit+0x5c>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066e:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <HAL_MspInit+0x60>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	4a04      	ldr	r2, [pc, #16]	@ (8000698 <HAL_MspInit+0x60>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	40021000 	.word	0x40021000
 8000698:	40010000 	.word	0x40010000

0800069c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a14      	ldr	r2, [pc, #80]	@ (8000708 <HAL_ADC_MspInit+0x6c>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d121      	bne.n	8000700 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006bc:	4b13      	ldr	r3, [pc, #76]	@ (800070c <HAL_ADC_MspInit+0x70>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a12      	ldr	r2, [pc, #72]	@ (800070c <HAL_ADC_MspInit+0x70>)
 80006c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b10      	ldr	r3, [pc, #64]	@ (800070c <HAL_ADC_MspInit+0x70>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <HAL_ADC_MspInit+0x70>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a0c      	ldr	r2, [pc, #48]	@ (800070c <HAL_ADC_MspInit+0x70>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <HAL_ADC_MspInit+0x70>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006ec:	2307      	movs	r3, #7
 80006ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f0:	2303      	movs	r3, #3
 80006f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <HAL_ADC_MspInit+0x74>)
 80006fc:	f001 fc90 	bl	8002020 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40012400 	.word	0x40012400
 800070c:	40021000 	.word	0x40021000
 8000710:	40010800 	.word	0x40010800

08000714 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a2c      	ldr	r2, [pc, #176]	@ (80007e0 <HAL_CAN_MspInit+0xcc>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d151      	bne.n	80007d8 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000734:	4b2b      	ldr	r3, [pc, #172]	@ (80007e4 <HAL_CAN_MspInit+0xd0>)
 8000736:	69db      	ldr	r3, [r3, #28]
 8000738:	4a2a      	ldr	r2, [pc, #168]	@ (80007e4 <HAL_CAN_MspInit+0xd0>)
 800073a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800073e:	61d3      	str	r3, [r2, #28]
 8000740:	4b28      	ldr	r3, [pc, #160]	@ (80007e4 <HAL_CAN_MspInit+0xd0>)
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <HAL_CAN_MspInit+0xd0>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a24      	ldr	r2, [pc, #144]	@ (80007e4 <HAL_CAN_MspInit+0xd0>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <HAL_CAN_MspInit+0xd0>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000764:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000768:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	4619      	mov	r1, r3
 8000778:	481b      	ldr	r0, [pc, #108]	@ (80007e8 <HAL_CAN_MspInit+0xd4>)
 800077a:	f001 fc51 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800077e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4619      	mov	r1, r3
 8000792:	4815      	ldr	r0, [pc, #84]	@ (80007e8 <HAL_CAN_MspInit+0xd4>)
 8000794:	f001 fc44 	bl	8002020 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	2013      	movs	r0, #19
 800079e:	f001 fc08 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80007a2:	2013      	movs	r0, #19
 80007a4:	f001 fc21 	bl	8001fea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2100      	movs	r1, #0
 80007ac:	2014      	movs	r0, #20
 80007ae:	f001 fc00 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80007b2:	2014      	movs	r0, #20
 80007b4:	f001 fc19 	bl	8001fea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	2015      	movs	r0, #21
 80007be:	f001 fbf8 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80007c2:	2015      	movs	r0, #21
 80007c4:	f001 fc11 	bl	8001fea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2100      	movs	r1, #0
 80007cc:	2016      	movs	r0, #22
 80007ce:	f001 fbf0 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80007d2:	2016      	movs	r0, #22
 80007d4:	f001 fc09 	bl	8001fea <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40006400 	.word	0x40006400
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010800 	.word	0x40010800

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <NMI_Handler+0x4>

080007f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <MemManage_Handler+0x4>

08000804 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <BusFault_Handler+0x4>

0800080c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <UsageFault_Handler+0x4>

08000814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 f93c 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000848:	4802      	ldr	r0, [pc, #8]	@ (8000854 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800084a:	f001 f8a3 	bl	8001994 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000bc 	.word	0x200000bc

08000858 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800085c:	4802      	ldr	r0, [pc, #8]	@ (8000868 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800085e:	f001 f899 	bl	8001994 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000bc 	.word	0x200000bc

0800086c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000870:	4802      	ldr	r0, [pc, #8]	@ (800087c <CAN1_RX1_IRQHandler+0x10>)
 8000872:	f001 f88f 	bl	8001994 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000bc 	.word	0x200000bc

08000880 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000884:	4802      	ldr	r0, [pc, #8]	@ (8000890 <CAN1_SCE_IRQHandler+0x10>)
 8000886:	f001 f885 	bl	8001994 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000bc 	.word	0x200000bc

08000894 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	e00a      	b.n	80008bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008a6:	f3af 8000 	nop.w
 80008aa:	4601      	mov	r1, r0
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	60ba      	str	r2, [r7, #8]
 80008b2:	b2ca      	uxtb	r2, r1
 80008b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	3301      	adds	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dbf0      	blt.n	80008a6 <_read+0x12>
  }

  return len;
 80008c4:	687b      	ldr	r3, [r7, #4]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	60f8      	str	r0, [r7, #12]
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	e009      	b.n	80008f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	60ba      	str	r2, [r7, #8]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3301      	adds	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	dbf1      	blt.n	80008e0 <_write+0x12>
  }
  return len;
 80008fc:	687b      	ldr	r3, [r7, #4]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <_close>:

int _close(int file)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000912:	4618      	mov	r0, r3
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800092c:	605a      	str	r2, [r3, #4]
  return 0;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr

0800093a <_isatty>:

int _isatty(int file)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800094e:	b480      	push	{r7}
 8000950:	b085      	sub	sp, #20
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
	...

08000968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000970:	4a14      	ldr	r2, [pc, #80]	@ (80009c4 <_sbrk+0x5c>)
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <_sbrk+0x60>)
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800097c:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <_sbrk+0x64>)
 8000986:	4a12      	ldr	r2, [pc, #72]	@ (80009d0 <_sbrk+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	429a      	cmp	r2, r3
 8000996:	d207      	bcs.n	80009a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000998:	f002 fc9e 	bl	80032d8 <__errno>
 800099c:	4603      	mov	r3, r0
 800099e:	220c      	movs	r2, #12
 80009a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	e009      	b.n	80009bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a8:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ae:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <_sbrk+0x64>)
 80009b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ba:	68fb      	ldr	r3, [r7, #12]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20005000 	.word	0x20005000
 80009c8:	00000400 	.word	0x00000400
 80009cc:	200000f4 	.word	0x200000f4
 80009d0:	20000248 	.word	0x20000248

080009d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e0:	f7ff fff8 	bl	80009d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009e6:	490c      	ldr	r1, [pc, #48]	@ (8000a18 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009e8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a1c <LoopFillZerobss+0x16>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a09      	ldr	r2, [pc, #36]	@ (8000a20 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009fc:	4c09      	ldr	r4, [pc, #36]	@ (8000a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f002 fc6b 	bl	80032e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0e:	f7ff fb9d 	bl	800014c <main>
  bx lr
 8000a12:	4770      	bx	lr
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a1c:	08003ea0 	.word	0x08003ea0
  ldr r2, =_sbss
 8000a20:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a24:	20000248 	.word	0x20000248

08000a28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC1_2_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <HAL_Init+0x28>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <HAL_Init+0x28>)
 8000a36:	f043 0310 	orr.w	r3, r3, #16
 8000a3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f001 faad 	bl	8001f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a42:	200f      	movs	r0, #15
 8000a44:	f000 f808 	bl	8000a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff fdf6 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40022000 	.word	0x40022000

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_InitTick+0x54>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <HAL_InitTick+0x58>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 fac5 	bl	8002006 <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00e      	b.n	8000aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d80a      	bhi.n	8000aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f001 fa8d 	bl	8001fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a98:	4a06      	ldr	r2, [pc, #24]	@ (8000ab4 <HAL_InitTick+0x5c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000004 	.word	0x20000004

08000ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <HAL_IncTick+0x1c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a03      	ldr	r2, [pc, #12]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	200000f8 	.word	0x200000f8

08000adc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b02      	ldr	r3, [pc, #8]	@ (8000aec <HAL_GetTick+0x10>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	200000f8 	.word	0x200000f8

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff fff0 	bl	8000adc <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffe0 	bl	8000adc <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008

08000b38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d101      	bne.n	8000b5a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e0be      	b.n	8000cd8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d109      	bne.n	8000b7c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff fd90 	bl	800069c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 fbf1 	bl	8001364 <ADC_ConversionStop_Disable>
 8000b82:	4603      	mov	r3, r0
 8000b84:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f040 8099 	bne.w	8000cc6 <HAL_ADC_Init+0x18e>
 8000b94:	7dfb      	ldrb	r3, [r7, #23]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8095 	bne.w	8000cc6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ba0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ba4:	f023 0302 	bic.w	r3, r3, #2
 8000ba8:	f043 0202 	orr.w	r2, r3, #2
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bb8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7b1b      	ldrb	r3, [r3, #12]
 8000bbe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bc0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bd0:	d003      	beq.n	8000bda <HAL_ADC_Init+0xa2>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d102      	bne.n	8000be0 <HAL_ADC_Init+0xa8>
 8000bda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bde:	e000      	b.n	8000be2 <HAL_ADC_Init+0xaa>
 8000be0:	2300      	movs	r3, #0
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	7d1b      	ldrb	r3, [r3, #20]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d119      	bne.n	8000c24 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7b1b      	ldrb	r3, [r3, #12]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	035a      	lsls	r2, r3, #13
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	e00b      	b.n	8000c24 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c10:	f043 0220 	orr.w	r2, r3, #32
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c1c:	f043 0201 	orr.w	r2, r3, #1
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	430a      	orrs	r2, r1
 8000c36:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <HAL_ADC_Init+0x1a8>)
 8000c40:	4013      	ands	r3, r2
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	6812      	ldr	r2, [r2, #0]
 8000c46:	68b9      	ldr	r1, [r7, #8]
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c54:	d003      	beq.n	8000c5e <HAL_ADC_Init+0x126>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d104      	bne.n	8000c68 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	051b      	lsls	r3, r3, #20
 8000c66:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <HAL_ADC_Init+0x1ac>)
 8000c84:	4013      	ands	r3, r2
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d10b      	bne.n	8000ca4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c96:	f023 0303 	bic.w	r3, r3, #3
 8000c9a:	f043 0201 	orr.w	r2, r3, #1
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ca2:	e018      	b.n	8000cd6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca8:	f023 0312 	bic.w	r3, r3, #18
 8000cac:	f043 0210 	orr.w	r2, r3, #16
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb8:	f043 0201 	orr.w	r2, r3, #1
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cc4:	e007      	b.n	8000cd6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cca:	f043 0210 	orr.w	r2, r3, #16
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ce4:	ff1f0efe 	.word	0xff1f0efe

08000ce8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d101      	bne.n	8000d02 <HAL_ADC_Start+0x1a>
 8000cfe:	2302      	movs	r3, #2
 8000d00:	e098      	b.n	8000e34 <HAL_ADC_Start+0x14c>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2201      	movs	r2, #1
 8000d06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 fad0 	bl	80012b0 <ADC_Enable>
 8000d10:	4603      	mov	r3, r0
 8000d12:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8087 	bne.w	8000e2a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d24:	f023 0301 	bic.w	r3, r3, #1
 8000d28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a41      	ldr	r2, [pc, #260]	@ (8000e3c <HAL_ADC_Start+0x154>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d105      	bne.n	8000d46 <HAL_ADC_Start+0x5e>
 8000d3a:	4b41      	ldr	r3, [pc, #260]	@ (8000e40 <HAL_ADC_Start+0x158>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d115      	bne.n	8000d72 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d4a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d026      	beq.n	8000dae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d64:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d68:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d70:	e01d      	b.n	8000dae <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a2f      	ldr	r2, [pc, #188]	@ (8000e40 <HAL_ADC_Start+0x158>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d004      	beq.n	8000d92 <HAL_ADC_Start+0xaa>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8000e3c <HAL_ADC_Start+0x154>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d10d      	bne.n	8000dae <HAL_ADC_Start+0xc6>
 8000d92:	4b2b      	ldr	r3, [pc, #172]	@ (8000e40 <HAL_ADC_Start+0x158>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d007      	beq.n	8000dae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000da2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000da6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d006      	beq.n	8000dc8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dbe:	f023 0206 	bic.w	r2, r3, #6
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dc6:	e002      	b.n	8000dce <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f06f 0202 	mvn.w	r2, #2
 8000dde:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000dea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000dee:	d113      	bne.n	8000e18 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000df4:	4a11      	ldr	r2, [pc, #68]	@ (8000e3c <HAL_ADC_Start+0x154>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d105      	bne.n	8000e06 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000dfa:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <HAL_ADC_Start+0x158>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d108      	bne.n	8000e18 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	e00c      	b.n	8000e32 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	e003      	b.n	8000e32 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40012800 	.word	0x40012800
 8000e40:	40012400 	.word	0x40012400

08000e44 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d101      	bne.n	8000e5e <HAL_ADC_Stop+0x1a>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e01a      	b.n	8000e94 <HAL_ADC_Stop+0x50>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f000 fa7c 	bl	8001364 <ADC_ConversionStop_Disable>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d109      	bne.n	8000e8a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e7e:	f023 0301 	bic.w	r3, r3, #1
 8000e82:	f043 0201 	orr.w	r2, r3, #1
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000eb2:	f7ff fe13 	bl	8000adc <HAL_GetTick>
 8000eb6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00b      	beq.n	8000ede <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eca:	f043 0220 	orr.w	r2, r3, #32
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e0d3      	b.n	8001086 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d131      	bne.n	8000f50 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d12a      	bne.n	8000f50 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000efa:	e021      	b.n	8000f40 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f02:	d01d      	beq.n	8000f40 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d007      	beq.n	8000f1a <HAL_ADC_PollForConversion+0x7e>
 8000f0a:	f7ff fde7 	bl	8000adc <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d212      	bcs.n	8000f40 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d10b      	bne.n	8000f40 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2c:	f043 0204 	orr.w	r2, r3, #4
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e0a2      	b.n	8001086 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0d6      	beq.n	8000efc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f4e:	e070      	b.n	8001032 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f50:	4b4f      	ldr	r3, [pc, #316]	@ (8001090 <HAL_ADC_PollForConversion+0x1f4>)
 8000f52:	681c      	ldr	r4, [r3, #0]
 8000f54:	2002      	movs	r0, #2
 8000f56:	f001 feb1 	bl	8002cbc <HAL_RCCEx_GetPeriphCLKFreq>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6919      	ldr	r1, [r3, #16]
 8000f66:	4b4b      	ldr	r3, [pc, #300]	@ (8001094 <HAL_ADC_PollForConversion+0x1f8>)
 8000f68:	400b      	ands	r3, r1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d118      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0x104>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68d9      	ldr	r1, [r3, #12]
 8000f74:	4b48      	ldr	r3, [pc, #288]	@ (8001098 <HAL_ADC_PollForConversion+0x1fc>)
 8000f76:	400b      	ands	r3, r1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d111      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0x104>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6919      	ldr	r1, [r3, #16]
 8000f82:	4b46      	ldr	r3, [pc, #280]	@ (800109c <HAL_ADC_PollForConversion+0x200>)
 8000f84:	400b      	ands	r3, r1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d108      	bne.n	8000f9c <HAL_ADC_PollForConversion+0x100>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68d9      	ldr	r1, [r3, #12]
 8000f90:	4b43      	ldr	r3, [pc, #268]	@ (80010a0 <HAL_ADC_PollForConversion+0x204>)
 8000f92:	400b      	ands	r3, r1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <HAL_ADC_PollForConversion+0x100>
 8000f98:	2314      	movs	r3, #20
 8000f9a:	e020      	b.n	8000fde <HAL_ADC_PollForConversion+0x142>
 8000f9c:	2329      	movs	r3, #41	@ 0x29
 8000f9e:	e01e      	b.n	8000fde <HAL_ADC_PollForConversion+0x142>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6919      	ldr	r1, [r3, #16]
 8000fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800109c <HAL_ADC_PollForConversion+0x200>)
 8000fa8:	400b      	ands	r3, r1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d106      	bne.n	8000fbc <HAL_ADC_PollForConversion+0x120>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68d9      	ldr	r1, [r3, #12]
 8000fb4:	4b3a      	ldr	r3, [pc, #232]	@ (80010a0 <HAL_ADC_PollForConversion+0x204>)
 8000fb6:	400b      	ands	r3, r1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00d      	beq.n	8000fd8 <HAL_ADC_PollForConversion+0x13c>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6919      	ldr	r1, [r3, #16]
 8000fc2:	4b38      	ldr	r3, [pc, #224]	@ (80010a4 <HAL_ADC_PollForConversion+0x208>)
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d108      	bne.n	8000fdc <HAL_ADC_PollForConversion+0x140>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68d9      	ldr	r1, [r3, #12]
 8000fd0:	4b34      	ldr	r3, [pc, #208]	@ (80010a4 <HAL_ADC_PollForConversion+0x208>)
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <HAL_ADC_PollForConversion+0x140>
 8000fd8:	2354      	movs	r3, #84	@ 0x54
 8000fda:	e000      	b.n	8000fde <HAL_ADC_PollForConversion+0x142>
 8000fdc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fe4:	e021      	b.n	800102a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d01a      	beq.n	8001024 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <HAL_ADC_PollForConversion+0x168>
 8000ff4:	f7ff fd72 	bl	8000adc <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	d20f      	bcs.n	8001024 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	d90b      	bls.n	8001024 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001010:	f043 0204 	orr.w	r2, r3, #4
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e030      	b.n	8001086 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	429a      	cmp	r2, r3
 8001030:	d8d9      	bhi.n	8000fe6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f06f 0212 	mvn.w	r2, #18
 800103a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001040:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001052:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001056:	d115      	bne.n	8001084 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800105c:	2b00      	cmp	r3, #0
 800105e:	d111      	bne.n	8001084 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001064:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001070:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d105      	bne.n	8001084 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800107c:	f043 0201 	orr.w	r2, r3, #1
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	bf00      	nop
 8001090:	20000000 	.word	0x20000000
 8001094:	24924924 	.word	0x24924924
 8001098:	00924924 	.word	0x00924924
 800109c:	12492492 	.word	0x12492492
 80010a0:	00492492 	.word	0x00492492
 80010a4:	00249249 	.word	0x00249249

080010a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x20>
 80010dc:	2302      	movs	r3, #2
 80010de:	e0dc      	b.n	800129a <HAL_ADC_ConfigChannel+0x1da>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b06      	cmp	r3, #6
 80010ee:	d81c      	bhi.n	800112a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	3b05      	subs	r3, #5
 8001102:	221f      	movs	r2, #31
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	4019      	ands	r1, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	3b05      	subs	r3, #5
 800111c:	fa00 f203 	lsl.w	r2, r0, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	635a      	str	r2, [r3, #52]	@ 0x34
 8001128:	e03c      	b.n	80011a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b0c      	cmp	r3, #12
 8001130:	d81c      	bhi.n	800116c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	3b23      	subs	r3, #35	@ 0x23
 8001144:	221f      	movs	r2, #31
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	4019      	ands	r1, r3
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	3b23      	subs	r3, #35	@ 0x23
 800115e:	fa00 f203 	lsl.w	r2, r0, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	631a      	str	r2, [r3, #48]	@ 0x30
 800116a:	e01b      	b.n	80011a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	3b41      	subs	r3, #65	@ 0x41
 800117e:	221f      	movs	r2, #31
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	4019      	ands	r1, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	3b41      	subs	r3, #65	@ 0x41
 8001198:	fa00 f203 	lsl.w	r2, r0, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b09      	cmp	r3, #9
 80011aa:	d91c      	bls.n	80011e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68d9      	ldr	r1, [r3, #12]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	3b1e      	subs	r3, #30
 80011be:	2207      	movs	r2, #7
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	4019      	ands	r1, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	6898      	ldr	r0, [r3, #8]
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	3b1e      	subs	r3, #30
 80011d8:	fa00 f203 	lsl.w	r2, r0, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	e019      	b.n	800121a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6919      	ldr	r1, [r3, #16]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	2207      	movs	r2, #7
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4019      	ands	r1, r3
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	6898      	ldr	r0, [r3, #8]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	fa00 f203 	lsl.w	r2, r0, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	430a      	orrs	r2, r1
 8001218:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b10      	cmp	r3, #16
 8001220:	d003      	beq.n	800122a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001226:	2b11      	cmp	r3, #17
 8001228:	d132      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a1d      	ldr	r2, [pc, #116]	@ (80012a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d125      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d126      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001250:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b10      	cmp	r3, #16
 8001258:	d11a      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a13      	ldr	r2, [pc, #76]	@ (80012ac <HAL_ADC_ConfigChannel+0x1ec>)
 8001260:	fba2 2303 	umull	r2, r3, r2, r3
 8001264:	0c9a      	lsrs	r2, r3, #18
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001270:	e002      	b.n	8001278 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	3b01      	subs	r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f9      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x1b2>
 800127e:	e007      	b.n	8001290 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001284:	f043 0220 	orr.w	r2, r3, #32
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	40012400 	.word	0x40012400
 80012a8:	20000000 	.word	0x20000000
 80012ac:	431bde83 	.word	0x431bde83

080012b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d040      	beq.n	8001350 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 0201 	orr.w	r2, r2, #1
 80012dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012de:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <ADC_Enable+0xac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001360 <ADC_Enable+0xb0>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	0c9b      	lsrs	r3, r3, #18
 80012ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012ec:	e002      	b.n	80012f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f9      	bne.n	80012ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012fa:	f7ff fbef 	bl	8000adc <HAL_GetTick>
 80012fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001300:	e01f      	b.n	8001342 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001302:	f7ff fbeb 	bl	8000adc <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d918      	bls.n	8001342 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b01      	cmp	r3, #1
 800131c:	d011      	beq.n	8001342 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001322:	f043 0210 	orr.w	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132e:	f043 0201 	orr.w	r2, r3, #1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e007      	b.n	8001352 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b01      	cmp	r3, #1
 800134e:	d1d8      	bne.n	8001302 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000000 	.word	0x20000000
 8001360:	431bde83 	.word	0x431bde83

08001364 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b01      	cmp	r3, #1
 800137c:	d12e      	bne.n	80013dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0201 	bic.w	r2, r2, #1
 800138c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800138e:	f7ff fba5 	bl	8000adc <HAL_GetTick>
 8001392:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001394:	e01b      	b.n	80013ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001396:	f7ff fba1 	bl	8000adc <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d914      	bls.n	80013ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d10d      	bne.n	80013ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b6:	f043 0210 	orr.w	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c2:	f043 0201 	orr.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e007      	b.n	80013de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d0dc      	beq.n	8001396 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0ed      	b.n	80015d4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff f985 	bl	8000714 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0201 	orr.w	r2, r2, #1
 8001418:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800141a:	f7ff fb5f 	bl	8000adc <HAL_GetTick>
 800141e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001420:	e012      	b.n	8001448 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001422:	f7ff fb5b 	bl	8000adc <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b0a      	cmp	r3, #10
 800142e:	d90b      	bls.n	8001448 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001434:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2205      	movs	r2, #5
 8001440:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0c5      	b.n	80015d4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0e5      	beq.n	8001422 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0202 	bic.w	r2, r2, #2
 8001464:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001466:	f7ff fb39 	bl	8000adc <HAL_GetTick>
 800146a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800146c:	e012      	b.n	8001494 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800146e:	f7ff fb35 	bl	8000adc <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b0a      	cmp	r3, #10
 800147a:	d90b      	bls.n	8001494 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001480:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2205      	movs	r2, #5
 800148c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e09f      	b.n	80015d4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1e5      	bne.n	800146e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	7e1b      	ldrb	r3, [r3, #24]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d108      	bne.n	80014bc <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e007      	b.n	80014cc <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7e5b      	ldrb	r3, [r3, #25]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d108      	bne.n	80014e6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e007      	b.n	80014f6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7e9b      	ldrb	r3, [r3, #26]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d108      	bne.n	8001510 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f042 0220 	orr.w	r2, r2, #32
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	e007      	b.n	8001520 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0220 	bic.w	r2, r2, #32
 800151e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7edb      	ldrb	r3, [r3, #27]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d108      	bne.n	800153a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0210 	bic.w	r2, r2, #16
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e007      	b.n	800154a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 0210 	orr.w	r2, r2, #16
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7f1b      	ldrb	r3, [r3, #28]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d108      	bne.n	8001564 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0208 	orr.w	r2, r2, #8
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	e007      	b.n	8001574 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0208 	bic.w	r2, r2, #8
 8001572:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7f5b      	ldrb	r3, [r3, #29]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d108      	bne.n	800158e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0204 	orr.w	r2, r2, #4
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e007      	b.n	800159e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0204 	bic.w	r2, r2, #4
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	ea42 0103 	orr.w	r1, r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	1e5a      	subs	r2, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80015f4:	7cfb      	ldrb	r3, [r7, #19]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d003      	beq.n	8001602 <HAL_CAN_ConfigFilter+0x26>
 80015fa:	7cfb      	ldrb	r3, [r7, #19]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	f040 80aa 	bne.w	8001756 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001608:	f043 0201 	orr.w	r2, r3, #1
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	2201      	movs	r2, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43db      	mvns	r3, r3
 800162c:	401a      	ands	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d123      	bne.n	8001684 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43db      	mvns	r3, r3
 8001646:	401a      	ands	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800165e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	3248      	adds	r2, #72	@ 0x48
 8001664:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001678:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800167a:	6979      	ldr	r1, [r7, #20]
 800167c:	3348      	adds	r3, #72	@ 0x48
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	440b      	add	r3, r1
 8001682:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d122      	bne.n	80016d2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	431a      	orrs	r2, r3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3248      	adds	r2, #72	@ 0x48
 80016b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016c8:	6979      	ldr	r1, [r7, #20]
 80016ca:	3348      	adds	r3, #72	@ 0x48
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	401a      	ands	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80016ec:	e007      	b.n	80016fe <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d109      	bne.n	800171a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43db      	mvns	r3, r3
 8001710:	401a      	ands	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001718:	e007      	b.n	800172a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	431a      	orrs	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d107      	bne.n	8001742 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	431a      	orrs	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001748:	f023 0201 	bic.w	r2, r3, #1
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e006      	b.n	8001764 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
  }
}
 8001764:	4618      	mov	r0, r3
 8001766:	371c      	adds	r7, #28
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b01      	cmp	r3, #1
 8001780:	d12e      	bne.n	80017e0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2202      	movs	r2, #2
 8001786:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800179a:	f7ff f99f 	bl	8000adc <HAL_GetTick>
 800179e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017a0:	e012      	b.n	80017c8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017a2:	f7ff f99b 	bl	8000adc <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b0a      	cmp	r3, #10
 80017ae:	d90b      	bls.n	80017c8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2205      	movs	r2, #5
 80017c0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e012      	b.n	80017ee <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1e5      	bne.n	80017a2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	e006      	b.n	80017ee <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
  }
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b089      	sub	sp, #36	@ 0x24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001814:	7ffb      	ldrb	r3, [r7, #31]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d003      	beq.n	8001822 <HAL_CAN_AddTxMessage+0x2c>
 800181a:	7ffb      	ldrb	r3, [r7, #31]
 800181c:	2b02      	cmp	r3, #2
 800181e:	f040 80ad 	bne.w	800197c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10a      	bne.n	8001842 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001832:	2b00      	cmp	r3, #0
 8001834:	d105      	bne.n	8001842 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8095 	beq.w	800196c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	0e1b      	lsrs	r3, r3, #24
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800184c:	2201      	movs	r2, #1
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	409a      	lsls	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10d      	bne.n	800187a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001868:	68f9      	ldr	r1, [r7, #12]
 800186a:	6809      	ldr	r1, [r1, #0]
 800186c:	431a      	orrs	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3318      	adds	r3, #24
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	440b      	add	r3, r1
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e00f      	b.n	800189a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001884:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800188a:	68f9      	ldr	r1, [r7, #12]
 800188c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800188e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3318      	adds	r3, #24
 8001894:	011b      	lsls	r3, r3, #4
 8001896:	440b      	add	r3, r1
 8001898:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6819      	ldr	r1, [r3, #0]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	3318      	adds	r3, #24
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	440b      	add	r3, r1
 80018aa:	3304      	adds	r3, #4
 80018ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	7d1b      	ldrb	r3, [r3, #20]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d111      	bne.n	80018da <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	3318      	adds	r3, #24
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	4413      	add	r3, r2
 80018c2:	3304      	adds	r3, #4
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	6811      	ldr	r1, [r2, #0]
 80018ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3318      	adds	r3, #24
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	440b      	add	r3, r1
 80018d6:	3304      	adds	r3, #4
 80018d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3307      	adds	r3, #7
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	061a      	lsls	r2, r3, #24
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3306      	adds	r3, #6
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3305      	adds	r3, #5
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	4313      	orrs	r3, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	3204      	adds	r2, #4
 80018fa:	7812      	ldrb	r2, [r2, #0]
 80018fc:	4610      	mov	r0, r2
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	6811      	ldr	r1, [r2, #0]
 8001902:	ea43 0200 	orr.w	r2, r3, r0
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	440b      	add	r3, r1
 800190c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001910:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3303      	adds	r3, #3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	061a      	lsls	r2, r3, #24
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3302      	adds	r3, #2
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3301      	adds	r3, #1
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	4313      	orrs	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	7812      	ldrb	r2, [r2, #0]
 8001932:	4610      	mov	r0, r2
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	6811      	ldr	r1, [r2, #0]
 8001938:	ea43 0200 	orr.w	r2, r3, r0
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	440b      	add	r3, r1
 8001942:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001946:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3318      	adds	r3, #24
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	4413      	add	r3, r2
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	6811      	ldr	r1, [r2, #0]
 800195a:	f043 0201 	orr.w	r2, r3, #1
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3318      	adds	r3, #24
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	440b      	add	r3, r1
 8001966:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	e00e      	b.n	800198a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e006      	b.n	800198a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
  }
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	@ 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	@ 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d07c      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d023      	beq.n	8001a2c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2201      	movs	r2, #1
 80019ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f983 	bl	8001d02 <HAL_CAN_TxMailbox0CompleteCallback>
 80019fc:	e016      	b.n	8001a2c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a10:	e00c      	b.n	8001a2c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a24:	e002      	b.n	8001a2c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f986 	bl	8001d38 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d024      	beq.n	8001a80 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f962 	bl	8001d14 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a50:	e016      	b.n	8001a80 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a64:	e00c      	b.n	8001a80 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d004      	beq.n	8001a7a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a78:	e002      	b.n	8001a80 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f965 	bl	8001d4a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d024      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f941 	bl	8001d26 <HAL_CAN_TxMailbox2CompleteCallback>
 8001aa4:	e016      	b.n	8001ad4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d004      	beq.n	8001aba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab8:	e00c      	b.n	8001ad4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001acc:	e002      	b.n	8001ad4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f944 	bl	8001d5c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00c      	beq.n	8001af8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2210      	movs	r2, #16
 8001af6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00b      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2208      	movs	r2, #8
 8001b12:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f933 	bl	8001d80 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d009      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f91b 	bl	8001d6e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2210      	movs	r2, #16
 8001b5a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2208      	movs	r2, #8
 8001b76:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f913 	bl	8001da4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d009      	beq.n	8001b9c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f8fb 	bl	8001d92 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d006      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2210      	movs	r2, #16
 8001bb6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8fc 	bl	8001db6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00b      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d006      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f8f4 	bl	8001dc8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d07b      	beq.n	8001ce2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d072      	beq.n	8001cda <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d008      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	f043 0302 	orr.w	r3, r3, #2
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d008      	beq.n	8001c48 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d043      	beq.n	8001cda <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d03e      	beq.n	8001cda <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c62:	2b60      	cmp	r3, #96	@ 0x60
 8001c64:	d02b      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x32a>
 8001c66:	2b60      	cmp	r3, #96	@ 0x60
 8001c68:	d82e      	bhi.n	8001cc8 <HAL_CAN_IRQHandler+0x334>
 8001c6a:	2b50      	cmp	r3, #80	@ 0x50
 8001c6c:	d022      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x320>
 8001c6e:	2b50      	cmp	r3, #80	@ 0x50
 8001c70:	d82a      	bhi.n	8001cc8 <HAL_CAN_IRQHandler+0x334>
 8001c72:	2b40      	cmp	r3, #64	@ 0x40
 8001c74:	d019      	beq.n	8001caa <HAL_CAN_IRQHandler+0x316>
 8001c76:	2b40      	cmp	r3, #64	@ 0x40
 8001c78:	d826      	bhi.n	8001cc8 <HAL_CAN_IRQHandler+0x334>
 8001c7a:	2b30      	cmp	r3, #48	@ 0x30
 8001c7c:	d010      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x30c>
 8001c7e:	2b30      	cmp	r3, #48	@ 0x30
 8001c80:	d822      	bhi.n	8001cc8 <HAL_CAN_IRQHandler+0x334>
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d002      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x2f8>
 8001c86:	2b20      	cmp	r3, #32
 8001c88:	d005      	beq.n	8001c96 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c8a:	e01d      	b.n	8001cc8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	f043 0308 	orr.w	r3, r3, #8
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c94:	e019      	b.n	8001cca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	f043 0310 	orr.w	r3, r3, #16
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c9e:	e014      	b.n	8001cca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	f043 0320 	orr.w	r3, r3, #32
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ca8:	e00f      	b.n	8001cca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cb2:	e00a      	b.n	8001cca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cbc:	e005      	b.n	8001cca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cc6:	e000      	b.n	8001cca <HAL_CAN_IRQHandler+0x336>
            break;
 8001cc8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699a      	ldr	r2, [r3, #24]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001cd8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2204      	movs	r2, #4
 8001ce0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f870 	bl	8001dda <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	3728      	adds	r7, #40	@ 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
	...

08001e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e14:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e50:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <__NVIC_GetPriorityGrouping+0x18>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0307 	and.w	r3, r3, #7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	db0b      	blt.n	8001e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4906      	ldr	r1, [pc, #24]	@ (8001e9c <__NVIC_EnableIRQ+0x34>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2001      	movs	r0, #1
 8001e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	e000e100 	.word	0xe000e100

08001ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	db0a      	blt.n	8001eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	490c      	ldr	r1, [pc, #48]	@ (8001eec <__NVIC_SetPriority+0x4c>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	0112      	lsls	r2, r2, #4
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec8:	e00a      	b.n	8001ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4908      	ldr	r1, [pc, #32]	@ (8001ef0 <__NVIC_SetPriority+0x50>)
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	3b04      	subs	r3, #4
 8001ed8:	0112      	lsls	r2, r2, #4
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	440b      	add	r3, r1
 8001ede:	761a      	strb	r2, [r3, #24]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000e100 	.word	0xe000e100
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	@ 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f1c3 0307 	rsb	r3, r3, #7
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	bf28      	it	cs
 8001f12:	2304      	movcs	r3, #4
 8001f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d902      	bls.n	8001f24 <NVIC_EncodePriority+0x30>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3b03      	subs	r3, #3
 8001f22:	e000      	b.n	8001f26 <NVIC_EncodePriority+0x32>
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	401a      	ands	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	43d9      	mvns	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	4313      	orrs	r3, r2
         );
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3724      	adds	r7, #36	@ 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f68:	d301      	bcc.n	8001f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00f      	b.n	8001f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f98 <SysTick_Config+0x40>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f76:	210f      	movs	r1, #15
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f7ff ff90 	bl	8001ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <SysTick_Config+0x40>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f86:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <SysTick_Config+0x40>)
 8001f88:	2207      	movs	r2, #7
 8001f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	e000e010 	.word	0xe000e010

08001f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff2d 	bl	8001e04 <__NVIC_SetPriorityGrouping>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b086      	sub	sp, #24
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc4:	f7ff ff42 	bl	8001e4c <__NVIC_GetPriorityGrouping>
 8001fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	6978      	ldr	r0, [r7, #20]
 8001fd0:	f7ff ff90 	bl	8001ef4 <NVIC_EncodePriority>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff5f 	bl	8001ea0 <__NVIC_SetPriority>
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff35 	bl	8001e68 <__NVIC_EnableIRQ>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ffa2 	bl	8001f58 <SysTick_Config>
 8002014:	4603      	mov	r3, r0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002020:	b480      	push	{r7}
 8002022:	b08b      	sub	sp, #44	@ 0x2c
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002032:	e169      	b.n	8002308 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002034:	2201      	movs	r2, #1
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	429a      	cmp	r2, r3
 800204e:	f040 8158 	bne.w	8002302 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4a9a      	ldr	r2, [pc, #616]	@ (80022c0 <HAL_GPIO_Init+0x2a0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d05e      	beq.n	800211a <HAL_GPIO_Init+0xfa>
 800205c:	4a98      	ldr	r2, [pc, #608]	@ (80022c0 <HAL_GPIO_Init+0x2a0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d875      	bhi.n	800214e <HAL_GPIO_Init+0x12e>
 8002062:	4a98      	ldr	r2, [pc, #608]	@ (80022c4 <HAL_GPIO_Init+0x2a4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d058      	beq.n	800211a <HAL_GPIO_Init+0xfa>
 8002068:	4a96      	ldr	r2, [pc, #600]	@ (80022c4 <HAL_GPIO_Init+0x2a4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d86f      	bhi.n	800214e <HAL_GPIO_Init+0x12e>
 800206e:	4a96      	ldr	r2, [pc, #600]	@ (80022c8 <HAL_GPIO_Init+0x2a8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d052      	beq.n	800211a <HAL_GPIO_Init+0xfa>
 8002074:	4a94      	ldr	r2, [pc, #592]	@ (80022c8 <HAL_GPIO_Init+0x2a8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d869      	bhi.n	800214e <HAL_GPIO_Init+0x12e>
 800207a:	4a94      	ldr	r2, [pc, #592]	@ (80022cc <HAL_GPIO_Init+0x2ac>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d04c      	beq.n	800211a <HAL_GPIO_Init+0xfa>
 8002080:	4a92      	ldr	r2, [pc, #584]	@ (80022cc <HAL_GPIO_Init+0x2ac>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d863      	bhi.n	800214e <HAL_GPIO_Init+0x12e>
 8002086:	4a92      	ldr	r2, [pc, #584]	@ (80022d0 <HAL_GPIO_Init+0x2b0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d046      	beq.n	800211a <HAL_GPIO_Init+0xfa>
 800208c:	4a90      	ldr	r2, [pc, #576]	@ (80022d0 <HAL_GPIO_Init+0x2b0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d85d      	bhi.n	800214e <HAL_GPIO_Init+0x12e>
 8002092:	2b12      	cmp	r3, #18
 8002094:	d82a      	bhi.n	80020ec <HAL_GPIO_Init+0xcc>
 8002096:	2b12      	cmp	r3, #18
 8002098:	d859      	bhi.n	800214e <HAL_GPIO_Init+0x12e>
 800209a:	a201      	add	r2, pc, #4	@ (adr r2, 80020a0 <HAL_GPIO_Init+0x80>)
 800209c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a0:	0800211b 	.word	0x0800211b
 80020a4:	080020f5 	.word	0x080020f5
 80020a8:	08002107 	.word	0x08002107
 80020ac:	08002149 	.word	0x08002149
 80020b0:	0800214f 	.word	0x0800214f
 80020b4:	0800214f 	.word	0x0800214f
 80020b8:	0800214f 	.word	0x0800214f
 80020bc:	0800214f 	.word	0x0800214f
 80020c0:	0800214f 	.word	0x0800214f
 80020c4:	0800214f 	.word	0x0800214f
 80020c8:	0800214f 	.word	0x0800214f
 80020cc:	0800214f 	.word	0x0800214f
 80020d0:	0800214f 	.word	0x0800214f
 80020d4:	0800214f 	.word	0x0800214f
 80020d8:	0800214f 	.word	0x0800214f
 80020dc:	0800214f 	.word	0x0800214f
 80020e0:	0800214f 	.word	0x0800214f
 80020e4:	080020fd 	.word	0x080020fd
 80020e8:	08002111 	.word	0x08002111
 80020ec:	4a79      	ldr	r2, [pc, #484]	@ (80022d4 <HAL_GPIO_Init+0x2b4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020f2:	e02c      	b.n	800214e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	623b      	str	r3, [r7, #32]
          break;
 80020fa:	e029      	b.n	8002150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	3304      	adds	r3, #4
 8002102:	623b      	str	r3, [r7, #32]
          break;
 8002104:	e024      	b.n	8002150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	3308      	adds	r3, #8
 800210c:	623b      	str	r3, [r7, #32]
          break;
 800210e:	e01f      	b.n	8002150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	330c      	adds	r3, #12
 8002116:	623b      	str	r3, [r7, #32]
          break;
 8002118:	e01a      	b.n	8002150 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002122:	2304      	movs	r3, #4
 8002124:	623b      	str	r3, [r7, #32]
          break;
 8002126:	e013      	b.n	8002150 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002130:	2308      	movs	r3, #8
 8002132:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	611a      	str	r2, [r3, #16]
          break;
 800213a:	e009      	b.n	8002150 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800213c:	2308      	movs	r3, #8
 800213e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	615a      	str	r2, [r3, #20]
          break;
 8002146:	e003      	b.n	8002150 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
          break;
 800214c:	e000      	b.n	8002150 <HAL_GPIO_Init+0x130>
          break;
 800214e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2bff      	cmp	r3, #255	@ 0xff
 8002154:	d801      	bhi.n	800215a <HAL_GPIO_Init+0x13a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	e001      	b.n	800215e <HAL_GPIO_Init+0x13e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3304      	adds	r3, #4
 800215e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2bff      	cmp	r3, #255	@ 0xff
 8002164:	d802      	bhi.n	800216c <HAL_GPIO_Init+0x14c>
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	e002      	b.n	8002172 <HAL_GPIO_Init+0x152>
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	3b08      	subs	r3, #8
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	210f      	movs	r1, #15
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	401a      	ands	r2, r3
 8002184:	6a39      	ldr	r1, [r7, #32]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	fa01 f303 	lsl.w	r3, r1, r3
 800218c:	431a      	orrs	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80b1 	beq.w	8002302 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021a0:	4b4d      	ldr	r3, [pc, #308]	@ (80022d8 <HAL_GPIO_Init+0x2b8>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	4a4c      	ldr	r2, [pc, #304]	@ (80022d8 <HAL_GPIO_Init+0x2b8>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6193      	str	r3, [r2, #24]
 80021ac:	4b4a      	ldr	r3, [pc, #296]	@ (80022d8 <HAL_GPIO_Init+0x2b8>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021b8:	4a48      	ldr	r2, [pc, #288]	@ (80022dc <HAL_GPIO_Init+0x2bc>)
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	3302      	adds	r3, #2
 80021c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	220f      	movs	r2, #15
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4013      	ands	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a40      	ldr	r2, [pc, #256]	@ (80022e0 <HAL_GPIO_Init+0x2c0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d013      	beq.n	800220c <HAL_GPIO_Init+0x1ec>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a3f      	ldr	r2, [pc, #252]	@ (80022e4 <HAL_GPIO_Init+0x2c4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00d      	beq.n	8002208 <HAL_GPIO_Init+0x1e8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a3e      	ldr	r2, [pc, #248]	@ (80022e8 <HAL_GPIO_Init+0x2c8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d007      	beq.n	8002204 <HAL_GPIO_Init+0x1e4>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a3d      	ldr	r2, [pc, #244]	@ (80022ec <HAL_GPIO_Init+0x2cc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d101      	bne.n	8002200 <HAL_GPIO_Init+0x1e0>
 80021fc:	2303      	movs	r3, #3
 80021fe:	e006      	b.n	800220e <HAL_GPIO_Init+0x1ee>
 8002200:	2304      	movs	r3, #4
 8002202:	e004      	b.n	800220e <HAL_GPIO_Init+0x1ee>
 8002204:	2302      	movs	r3, #2
 8002206:	e002      	b.n	800220e <HAL_GPIO_Init+0x1ee>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_GPIO_Init+0x1ee>
 800220c:	2300      	movs	r3, #0
 800220e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002210:	f002 0203 	and.w	r2, r2, #3
 8002214:	0092      	lsls	r2, r2, #2
 8002216:	4093      	lsls	r3, r2
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800221e:	492f      	ldr	r1, [pc, #188]	@ (80022dc <HAL_GPIO_Init+0x2bc>)
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3302      	adds	r3, #2
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d006      	beq.n	8002246 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002238:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <HAL_GPIO_Init+0x2d0>)
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	492c      	ldr	r1, [pc, #176]	@ (80022f0 <HAL_GPIO_Init+0x2d0>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	608b      	str	r3, [r1, #8]
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002246:	4b2a      	ldr	r3, [pc, #168]	@ (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	43db      	mvns	r3, r3
 800224e:	4928      	ldr	r1, [pc, #160]	@ (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002250:	4013      	ands	r3, r2
 8002252:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d006      	beq.n	800226e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002260:	4b23      	ldr	r3, [pc, #140]	@ (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	4922      	ldr	r1, [pc, #136]	@ (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	60cb      	str	r3, [r1, #12]
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800226e:	4b20      	ldr	r3, [pc, #128]	@ (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	43db      	mvns	r3, r3
 8002276:	491e      	ldr	r1, [pc, #120]	@ (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002278:	4013      	ands	r3, r2
 800227a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d006      	beq.n	8002296 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002288:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <HAL_GPIO_Init+0x2d0>)
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	4918      	ldr	r1, [pc, #96]	@ (80022f0 <HAL_GPIO_Init+0x2d0>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002296:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	43db      	mvns	r3, r3
 800229e:	4914      	ldr	r1, [pc, #80]	@ (80022f0 <HAL_GPIO_Init+0x2d0>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d021      	beq.n	80022f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022b0:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <HAL_GPIO_Init+0x2d0>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	490e      	ldr	r1, [pc, #56]	@ (80022f0 <HAL_GPIO_Init+0x2d0>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]
 80022bc:	e021      	b.n	8002302 <HAL_GPIO_Init+0x2e2>
 80022be:	bf00      	nop
 80022c0:	10320000 	.word	0x10320000
 80022c4:	10310000 	.word	0x10310000
 80022c8:	10220000 	.word	0x10220000
 80022cc:	10210000 	.word	0x10210000
 80022d0:	10120000 	.word	0x10120000
 80022d4:	10110000 	.word	0x10110000
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40010000 	.word	0x40010000
 80022e0:	40010800 	.word	0x40010800
 80022e4:	40010c00 	.word	0x40010c00
 80022e8:	40011000 	.word	0x40011000
 80022ec:	40011400 	.word	0x40011400
 80022f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <HAL_GPIO_Init+0x304>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	4909      	ldr	r1, [pc, #36]	@ (8002324 <HAL_GPIO_Init+0x304>)
 80022fe:	4013      	ands	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	3301      	adds	r3, #1
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	f47f ae8e 	bne.w	8002034 <HAL_GPIO_Init+0x14>
  }
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	372c      	adds	r7, #44	@ 0x2c
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	40010400 	.word	0x40010400

08002328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002338:	787b      	ldrb	r3, [r7, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002344:	e003      	b.n	800234e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	041a      	lsls	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	611a      	str	r2, [r3, #16]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e272      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8087 	beq.w	8002486 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002378:	4b92      	ldr	r3, [pc, #584]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b04      	cmp	r3, #4
 8002382:	d00c      	beq.n	800239e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002384:	4b8f      	ldr	r3, [pc, #572]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b08      	cmp	r3, #8
 800238e:	d112      	bne.n	80023b6 <HAL_RCC_OscConfig+0x5e>
 8002390:	4b8c      	ldr	r3, [pc, #560]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800239c:	d10b      	bne.n	80023b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239e:	4b89      	ldr	r3, [pc, #548]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d06c      	beq.n	8002484 <HAL_RCC_OscConfig+0x12c>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d168      	bne.n	8002484 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e24c      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023be:	d106      	bne.n	80023ce <HAL_RCC_OscConfig+0x76>
 80023c0:	4b80      	ldr	r3, [pc, #512]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a7f      	ldr	r2, [pc, #508]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	e02e      	b.n	800242c <HAL_RCC_OscConfig+0xd4>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x98>
 80023d6:	4b7b      	ldr	r3, [pc, #492]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a7a      	ldr	r2, [pc, #488]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b78      	ldr	r3, [pc, #480]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a77      	ldr	r2, [pc, #476]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e01d      	b.n	800242c <HAL_RCC_OscConfig+0xd4>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0xbc>
 80023fa:	4b72      	ldr	r3, [pc, #456]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a71      	ldr	r2, [pc, #452]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 8002400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b6f      	ldr	r3, [pc, #444]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a6e      	ldr	r2, [pc, #440]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0xd4>
 8002414:	4b6b      	ldr	r3, [pc, #428]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a6a      	ldr	r2, [pc, #424]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 800241a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	4b68      	ldr	r3, [pc, #416]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a67      	ldr	r2, [pc, #412]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 8002426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800242a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d013      	beq.n	800245c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fe fb52 	bl	8000adc <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243c:	f7fe fb4e 	bl	8000adc <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	@ 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e200      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b5d      	ldr	r3, [pc, #372]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0xe4>
 800245a:	e014      	b.n	8002486 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe fb3e 	bl	8000adc <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002464:	f7fe fb3a 	bl	8000adc <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	@ 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e1ec      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002476:	4b53      	ldr	r3, [pc, #332]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x10c>
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d063      	beq.n	800255a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002492:	4b4c      	ldr	r3, [pc, #304]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00b      	beq.n	80024b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800249e:	4b49      	ldr	r3, [pc, #292]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d11c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x18c>
 80024aa:	4b46      	ldr	r3, [pc, #280]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d116      	bne.n	80024e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b6:	4b43      	ldr	r3, [pc, #268]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <HAL_RCC_OscConfig+0x176>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d001      	beq.n	80024ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e1c0      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ce:	4b3d      	ldr	r3, [pc, #244]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4939      	ldr	r1, [pc, #228]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e2:	e03a      	b.n	800255a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d020      	beq.n	800252e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ec:	4b36      	ldr	r3, [pc, #216]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7fe faf3 	bl	8000adc <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fa:	f7fe faef 	bl	8000adc <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e1a1      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250c:	4b2d      	ldr	r3, [pc, #180]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002518:	4b2a      	ldr	r3, [pc, #168]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4927      	ldr	r1, [pc, #156]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]
 800252c:	e015      	b.n	800255a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252e:	4b26      	ldr	r3, [pc, #152]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe fad2 	bl	8000adc <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253c:	f7fe face 	bl	8000adc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e180      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d03a      	beq.n	80025dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d019      	beq.n	80025a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256e:	4b17      	ldr	r3, [pc, #92]	@ (80025cc <HAL_RCC_OscConfig+0x274>)
 8002570:	2201      	movs	r2, #1
 8002572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002574:	f7fe fab2 	bl	8000adc <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257c:	f7fe faae 	bl	8000adc <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e160      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258e:	4b0d      	ldr	r3, [pc, #52]	@ (80025c4 <HAL_RCC_OscConfig+0x26c>)
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800259a:	2001      	movs	r0, #1
 800259c:	f000 faba 	bl	8002b14 <RCC_Delay>
 80025a0:	e01c      	b.n	80025dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a2:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <HAL_RCC_OscConfig+0x274>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a8:	f7fe fa98 	bl	8000adc <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ae:	e00f      	b.n	80025d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b0:	f7fe fa94 	bl	8000adc <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d908      	bls.n	80025d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e146      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	42420000 	.word	0x42420000
 80025cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d0:	4b92      	ldr	r3, [pc, #584]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e9      	bne.n	80025b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80a6 	beq.w	8002736 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ee:	4b8b      	ldr	r3, [pc, #556]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10d      	bne.n	8002616 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	4b88      	ldr	r3, [pc, #544]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	4a87      	ldr	r2, [pc, #540]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002604:	61d3      	str	r3, [r2, #28]
 8002606:	4b85      	ldr	r3, [pc, #532]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	4b82      	ldr	r3, [pc, #520]	@ (8002820 <HAL_RCC_OscConfig+0x4c8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d118      	bne.n	8002654 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002622:	4b7f      	ldr	r3, [pc, #508]	@ (8002820 <HAL_RCC_OscConfig+0x4c8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a7e      	ldr	r2, [pc, #504]	@ (8002820 <HAL_RCC_OscConfig+0x4c8>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262e:	f7fe fa55 	bl	8000adc <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002636:	f7fe fa51 	bl	8000adc <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b64      	cmp	r3, #100	@ 0x64
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e103      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	4b75      	ldr	r3, [pc, #468]	@ (8002820 <HAL_RCC_OscConfig+0x4c8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x312>
 800265c:	4b6f      	ldr	r3, [pc, #444]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4a6e      	ldr	r2, [pc, #440]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6213      	str	r3, [r2, #32]
 8002668:	e02d      	b.n	80026c6 <HAL_RCC_OscConfig+0x36e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x334>
 8002672:	4b6a      	ldr	r3, [pc, #424]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a69      	ldr	r2, [pc, #420]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6213      	str	r3, [r2, #32]
 800267e:	4b67      	ldr	r3, [pc, #412]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a66      	ldr	r2, [pc, #408]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 8002684:	f023 0304 	bic.w	r3, r3, #4
 8002688:	6213      	str	r3, [r2, #32]
 800268a:	e01c      	b.n	80026c6 <HAL_RCC_OscConfig+0x36e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b05      	cmp	r3, #5
 8002692:	d10c      	bne.n	80026ae <HAL_RCC_OscConfig+0x356>
 8002694:	4b61      	ldr	r3, [pc, #388]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4a60      	ldr	r2, [pc, #384]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 800269a:	f043 0304 	orr.w	r3, r3, #4
 800269e:	6213      	str	r3, [r2, #32]
 80026a0:	4b5e      	ldr	r3, [pc, #376]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4a5d      	ldr	r2, [pc, #372]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6213      	str	r3, [r2, #32]
 80026ac:	e00b      	b.n	80026c6 <HAL_RCC_OscConfig+0x36e>
 80026ae:	4b5b      	ldr	r3, [pc, #364]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	4a5a      	ldr	r2, [pc, #360]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	6213      	str	r3, [r2, #32]
 80026ba:	4b58      	ldr	r3, [pc, #352]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4a57      	ldr	r2, [pc, #348]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	f023 0304 	bic.w	r3, r3, #4
 80026c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d015      	beq.n	80026fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7fe fa05 	bl	8000adc <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	e00a      	b.n	80026ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7fe fa01 	bl	8000adc <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e0b1      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ec:	4b4b      	ldr	r3, [pc, #300]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ee      	beq.n	80026d6 <HAL_RCC_OscConfig+0x37e>
 80026f8:	e014      	b.n	8002724 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fa:	f7fe f9ef 	bl	8000adc <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7fe f9eb 	bl	8000adc <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e09b      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002718:	4b40      	ldr	r3, [pc, #256]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1ee      	bne.n	8002702 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d105      	bne.n	8002736 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272a:	4b3c      	ldr	r3, [pc, #240]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	4a3b      	ldr	r2, [pc, #236]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 8002730:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002734:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 8087 	beq.w	800284e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002740:	4b36      	ldr	r3, [pc, #216]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b08      	cmp	r3, #8
 800274a:	d061      	beq.n	8002810 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d146      	bne.n	80027e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002754:	4b33      	ldr	r3, [pc, #204]	@ (8002824 <HAL_RCC_OscConfig+0x4cc>)
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7fe f9bf 	bl	8000adc <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002762:	f7fe f9bb 	bl	8000adc <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e06d      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002774:	4b29      	ldr	r3, [pc, #164]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f0      	bne.n	8002762 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002788:	d108      	bne.n	800279c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800278a:	4b24      	ldr	r3, [pc, #144]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	4921      	ldr	r1, [pc, #132]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800279c:	4b1f      	ldr	r3, [pc, #124]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a19      	ldr	r1, [r3, #32]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	430b      	orrs	r3, r1
 80027ae:	491b      	ldr	r1, [pc, #108]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <HAL_RCC_OscConfig+0x4cc>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7fe f98f 	bl	8000adc <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c2:	f7fe f98b 	bl	8000adc <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e03d      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d4:	4b11      	ldr	r3, [pc, #68]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x46a>
 80027e0:	e035      	b.n	800284e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <HAL_RCC_OscConfig+0x4cc>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe f978 	bl	8000adc <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe f974 	bl	8000adc <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e026      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002802:	4b06      	ldr	r3, [pc, #24]	@ (800281c <HAL_RCC_OscConfig+0x4c4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x498>
 800280e:	e01e      	b.n	800284e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d107      	bne.n	8002828 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e019      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
 800281c:	40021000 	.word	0x40021000
 8002820:	40007000 	.word	0x40007000
 8002824:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_RCC_OscConfig+0x500>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	429a      	cmp	r2, r3
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d001      	beq.n	800284e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000

0800285c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0d0      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002870:	4b6a      	ldr	r3, [pc, #424]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d910      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b67      	ldr	r3, [pc, #412]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 0207 	bic.w	r2, r3, #7
 8002886:	4965      	ldr	r1, [pc, #404]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b63      	ldr	r3, [pc, #396]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b8      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d020      	beq.n	80028ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b8:	4b59      	ldr	r3, [pc, #356]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a58      	ldr	r2, [pc, #352]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d0:	4b53      	ldr	r3, [pc, #332]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a52      	ldr	r2, [pc, #328]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028dc:	4b50      	ldr	r3, [pc, #320]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	494d      	ldr	r1, [pc, #308]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d040      	beq.n	800297c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	4b47      	ldr	r3, [pc, #284]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d115      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e07f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291a:	4b41      	ldr	r3, [pc, #260]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e073      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e06b      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293a:	4b39      	ldr	r3, [pc, #228]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f023 0203 	bic.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4936      	ldr	r1, [pc, #216]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800294c:	f7fe f8c6 	bl	8000adc <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	e00a      	b.n	800296a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7fe f8c2 	bl	8000adc <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e053      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 020c 	and.w	r2, r3, #12
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	429a      	cmp	r2, r3
 800297a:	d1eb      	bne.n	8002954 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800297c:	4b27      	ldr	r3, [pc, #156]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d210      	bcs.n	80029ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b24      	ldr	r3, [pc, #144]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 0207 	bic.w	r2, r3, #7
 8002992:	4922      	ldr	r1, [pc, #136]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b20      	ldr	r3, [pc, #128]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e032      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b8:	4b19      	ldr	r3, [pc, #100]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4916      	ldr	r1, [pc, #88]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029d6:	4b12      	ldr	r3, [pc, #72]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	490e      	ldr	r1, [pc, #56]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ea:	f000 f821 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 80029ee:	4602      	mov	r2, r0
 80029f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	490a      	ldr	r1, [pc, #40]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c8>)
 80029fc:	5ccb      	ldrb	r3, [r1, r3]
 80029fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002a02:	4a09      	ldr	r2, [pc, #36]	@ (8002a28 <HAL_RCC_ClockConfig+0x1cc>)
 8002a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a06:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <HAL_RCC_ClockConfig+0x1d0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe f824 	bl	8000a58 <HAL_InitTick>

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40022000 	.word	0x40022000
 8002a20:	40021000 	.word	0x40021000
 8002a24:	08003e24 	.word	0x08003e24
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	20000004 	.word	0x20000004

08002a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d002      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x30>
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d003      	beq.n	8002a66 <HAL_RCC_GetSysClockFreq+0x36>
 8002a5e:	e027      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a60:	4b19      	ldr	r3, [pc, #100]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a62:	613b      	str	r3, [r7, #16]
      break;
 8002a64:	e027      	b.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	0c9b      	lsrs	r3, r3, #18
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	4a17      	ldr	r2, [pc, #92]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a70:	5cd3      	ldrb	r3, [r2, r3]
 8002a72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d010      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a7e:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	0c5b      	lsrs	r3, r3, #17
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	4a11      	ldr	r2, [pc, #68]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a92:	fb03 f202 	mul.w	r2, r3, r2
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	e004      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	613b      	str	r3, [r7, #16]
      break;
 8002aae:	e002      	b.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ab0:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ab2:	613b      	str	r3, [r7, #16]
      break;
 8002ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab6:	693b      	ldr	r3, [r7, #16]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	007a1200 	.word	0x007a1200
 8002acc:	08003e3c 	.word	0x08003e3c
 8002ad0:	08003e4c 	.word	0x08003e4c
 8002ad4:	003d0900 	.word	0x003d0900

08002ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002adc:	4b02      	ldr	r3, [pc, #8]	@ (8002ae8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	20000000 	.word	0x20000000

08002aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002af0:	f7ff fff2 	bl	8002ad8 <HAL_RCC_GetHCLKFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	0adb      	lsrs	r3, r3, #11
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	4903      	ldr	r1, [pc, #12]	@ (8002b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	08003e34 	.word	0x08003e34

08002b14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b48 <RCC_Delay+0x34>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0a      	ldr	r2, [pc, #40]	@ (8002b4c <RCC_Delay+0x38>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0a5b      	lsrs	r3, r3, #9
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b30:	bf00      	nop
  }
  while (Delay --);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1e5a      	subs	r2, r3, #1
 8002b36:	60fa      	str	r2, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f9      	bne.n	8002b30 <RCC_Delay+0x1c>
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	10624dd3 	.word	0x10624dd3

08002b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d07d      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b70:	4b4f      	ldr	r3, [pc, #316]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10d      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7c:	4b4c      	ldr	r3, [pc, #304]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	4a4b      	ldr	r2, [pc, #300]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	61d3      	str	r3, [r2, #28]
 8002b88:	4b49      	ldr	r3, [pc, #292]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b94:	2301      	movs	r3, #1
 8002b96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b98:	4b46      	ldr	r3, [pc, #280]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d118      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba4:	4b43      	ldr	r3, [pc, #268]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a42      	ldr	r2, [pc, #264]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb0:	f7fd ff94 	bl	8000adc <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb6:	e008      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb8:	f7fd ff90 	bl	8000adc <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	@ 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e06d      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bd6:	4b36      	ldr	r3, [pc, #216]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d02e      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d027      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c04:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c0a:	4a29      	ldr	r2, [pc, #164]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d014      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fd ff5f 	bl	8000adc <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7fd ff5b 	bl	8000adc <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e036      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c38:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0ee      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c44:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4917      	ldr	r1, [pc, #92]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d105      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5c:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	4a13      	ldr	r2, [pc, #76]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c74:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	490b      	ldr	r1, [pc, #44]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c92:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4904      	ldr	r1, [pc, #16]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	42420440 	.word	0x42420440

08002cbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b10      	cmp	r3, #16
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	f200 808a 	bhi.w	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d045      	beq.n	8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d075      	beq.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002cf2:	e082      	b.n	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002cf4:	4b46      	ldr	r3, [pc, #280]	@ (8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002cfa:	4b45      	ldr	r3, [pc, #276]	@ (8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d07b      	beq.n	8002dfe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	0c9b      	lsrs	r3, r3, #18
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	4a41      	ldr	r2, [pc, #260]	@ (8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002d10:	5cd3      	ldrb	r3, [r2, r3]
 8002d12:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d015      	beq.n	8002d4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d1e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	0c5b      	lsrs	r3, r3, #17
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	4a3b      	ldr	r2, [pc, #236]	@ (8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002d2a:	5cd3      	ldrb	r3, [r2, r3]
 8002d2c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00d      	beq.n	8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d38:	4a38      	ldr	r2, [pc, #224]	@ (8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	e004      	b.n	8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4a34      	ldr	r2, [pc, #208]	@ (8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002d4e:	fb02 f303 	mul.w	r3, r2, r3
 8002d52:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d54:	4b2e      	ldr	r3, [pc, #184]	@ (8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d60:	d102      	bne.n	8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	61bb      	str	r3, [r7, #24]
      break;
 8002d66:	e04a      	b.n	8002dfe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	085b      	lsrs	r3, r3, #1
 8002d74:	61bb      	str	r3, [r7, #24]
      break;
 8002d76:	e042      	b.n	8002dfe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002d78:	4b25      	ldr	r3, [pc, #148]	@ (8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d88:	d108      	bne.n	8002d9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002d94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	e01f      	b.n	8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002da2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002da6:	d109      	bne.n	8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002da8:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002db4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002db8:	61bb      	str	r3, [r7, #24]
 8002dba:	e00f      	b.n	8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002dc6:	d11c      	bne.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002dc8:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d016      	beq.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002dd4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002dd8:	61bb      	str	r3, [r7, #24]
      break;
 8002dda:	e012      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ddc:	e011      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002dde:	f7ff fe85 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 8002de2:	4602      	mov	r2, r0
 8002de4:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	0b9b      	lsrs	r3, r3, #14
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	3301      	adds	r3, #1
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	61bb      	str	r3, [r7, #24]
      break;
 8002df8:	e004      	b.n	8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e002      	b.n	8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e000      	b.n	8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e02:	bf00      	nop
    }
  }
  return (frequency);
 8002e04:	69bb      	ldr	r3, [r7, #24]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	08003e50 	.word	0x08003e50
 8002e18:	08003e60 	.word	0x08003e60
 8002e1c:	007a1200 	.word	0x007a1200
 8002e20:	003d0900 	.word	0x003d0900
 8002e24:	aaaaaaab 	.word	0xaaaaaaab

08002e28 <std>:
 8002e28:	2300      	movs	r3, #0
 8002e2a:	b510      	push	{r4, lr}
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8002e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e36:	6083      	str	r3, [r0, #8]
 8002e38:	8181      	strh	r1, [r0, #12]
 8002e3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002e3c:	81c2      	strh	r2, [r0, #14]
 8002e3e:	6183      	str	r3, [r0, #24]
 8002e40:	4619      	mov	r1, r3
 8002e42:	2208      	movs	r2, #8
 8002e44:	305c      	adds	r0, #92	@ 0x5c
 8002e46:	f000 f9f9 	bl	800323c <memset>
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e80 <std+0x58>)
 8002e4c:	6224      	str	r4, [r4, #32]
 8002e4e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002e50:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <std+0x5c>)
 8002e52:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <std+0x60>)
 8002e56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002e58:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <std+0x64>)
 8002e5a:	6323      	str	r3, [r4, #48]	@ 0x30
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e90 <std+0x68>)
 8002e5e:	429c      	cmp	r4, r3
 8002e60:	d006      	beq.n	8002e70 <std+0x48>
 8002e62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002e66:	4294      	cmp	r4, r2
 8002e68:	d002      	beq.n	8002e70 <std+0x48>
 8002e6a:	33d0      	adds	r3, #208	@ 0xd0
 8002e6c:	429c      	cmp	r4, r3
 8002e6e:	d105      	bne.n	8002e7c <std+0x54>
 8002e70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e78:	f000 ba58 	b.w	800332c <__retarget_lock_init_recursive>
 8002e7c:	bd10      	pop	{r4, pc}
 8002e7e:	bf00      	nop
 8002e80:	0800308d 	.word	0x0800308d
 8002e84:	080030af 	.word	0x080030af
 8002e88:	080030e7 	.word	0x080030e7
 8002e8c:	0800310b 	.word	0x0800310b
 8002e90:	200000fc 	.word	0x200000fc

08002e94 <stdio_exit_handler>:
 8002e94:	4a02      	ldr	r2, [pc, #8]	@ (8002ea0 <stdio_exit_handler+0xc>)
 8002e96:	4903      	ldr	r1, [pc, #12]	@ (8002ea4 <stdio_exit_handler+0x10>)
 8002e98:	4803      	ldr	r0, [pc, #12]	@ (8002ea8 <stdio_exit_handler+0x14>)
 8002e9a:	f000 b869 	b.w	8002f70 <_fwalk_sglue>
 8002e9e:	bf00      	nop
 8002ea0:	2000000c 	.word	0x2000000c
 8002ea4:	08003be1 	.word	0x08003be1
 8002ea8:	2000001c 	.word	0x2000001c

08002eac <cleanup_stdio>:
 8002eac:	6841      	ldr	r1, [r0, #4]
 8002eae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee0 <cleanup_stdio+0x34>)
 8002eb0:	b510      	push	{r4, lr}
 8002eb2:	4299      	cmp	r1, r3
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	d001      	beq.n	8002ebc <cleanup_stdio+0x10>
 8002eb8:	f000 fe92 	bl	8003be0 <_fflush_r>
 8002ebc:	68a1      	ldr	r1, [r4, #8]
 8002ebe:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <cleanup_stdio+0x38>)
 8002ec0:	4299      	cmp	r1, r3
 8002ec2:	d002      	beq.n	8002eca <cleanup_stdio+0x1e>
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f000 fe8b 	bl	8003be0 <_fflush_r>
 8002eca:	68e1      	ldr	r1, [r4, #12]
 8002ecc:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <cleanup_stdio+0x3c>)
 8002ece:	4299      	cmp	r1, r3
 8002ed0:	d004      	beq.n	8002edc <cleanup_stdio+0x30>
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ed8:	f000 be82 	b.w	8003be0 <_fflush_r>
 8002edc:	bd10      	pop	{r4, pc}
 8002ede:	bf00      	nop
 8002ee0:	200000fc 	.word	0x200000fc
 8002ee4:	20000164 	.word	0x20000164
 8002ee8:	200001cc 	.word	0x200001cc

08002eec <global_stdio_init.part.0>:
 8002eec:	b510      	push	{r4, lr}
 8002eee:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <global_stdio_init.part.0+0x30>)
 8002ef0:	4c0b      	ldr	r4, [pc, #44]	@ (8002f20 <global_stdio_init.part.0+0x34>)
 8002ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8002f24 <global_stdio_init.part.0+0x38>)
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	2104      	movs	r1, #4
 8002efa:	2200      	movs	r2, #0
 8002efc:	f7ff ff94 	bl	8002e28 <std>
 8002f00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002f04:	2201      	movs	r2, #1
 8002f06:	2109      	movs	r1, #9
 8002f08:	f7ff ff8e 	bl	8002e28 <std>
 8002f0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002f10:	2202      	movs	r2, #2
 8002f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f16:	2112      	movs	r1, #18
 8002f18:	f7ff bf86 	b.w	8002e28 <std>
 8002f1c:	20000234 	.word	0x20000234
 8002f20:	200000fc 	.word	0x200000fc
 8002f24:	08002e95 	.word	0x08002e95

08002f28 <__sfp_lock_acquire>:
 8002f28:	4801      	ldr	r0, [pc, #4]	@ (8002f30 <__sfp_lock_acquire+0x8>)
 8002f2a:	f000 ba00 	b.w	800332e <__retarget_lock_acquire_recursive>
 8002f2e:	bf00      	nop
 8002f30:	2000023d 	.word	0x2000023d

08002f34 <__sfp_lock_release>:
 8002f34:	4801      	ldr	r0, [pc, #4]	@ (8002f3c <__sfp_lock_release+0x8>)
 8002f36:	f000 b9fb 	b.w	8003330 <__retarget_lock_release_recursive>
 8002f3a:	bf00      	nop
 8002f3c:	2000023d 	.word	0x2000023d

08002f40 <__sinit>:
 8002f40:	b510      	push	{r4, lr}
 8002f42:	4604      	mov	r4, r0
 8002f44:	f7ff fff0 	bl	8002f28 <__sfp_lock_acquire>
 8002f48:	6a23      	ldr	r3, [r4, #32]
 8002f4a:	b11b      	cbz	r3, 8002f54 <__sinit+0x14>
 8002f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f50:	f7ff bff0 	b.w	8002f34 <__sfp_lock_release>
 8002f54:	4b04      	ldr	r3, [pc, #16]	@ (8002f68 <__sinit+0x28>)
 8002f56:	6223      	str	r3, [r4, #32]
 8002f58:	4b04      	ldr	r3, [pc, #16]	@ (8002f6c <__sinit+0x2c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f5      	bne.n	8002f4c <__sinit+0xc>
 8002f60:	f7ff ffc4 	bl	8002eec <global_stdio_init.part.0>
 8002f64:	e7f2      	b.n	8002f4c <__sinit+0xc>
 8002f66:	bf00      	nop
 8002f68:	08002ead 	.word	0x08002ead
 8002f6c:	20000234 	.word	0x20000234

08002f70 <_fwalk_sglue>:
 8002f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f74:	4607      	mov	r7, r0
 8002f76:	4688      	mov	r8, r1
 8002f78:	4614      	mov	r4, r2
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f80:	f1b9 0901 	subs.w	r9, r9, #1
 8002f84:	d505      	bpl.n	8002f92 <_fwalk_sglue+0x22>
 8002f86:	6824      	ldr	r4, [r4, #0]
 8002f88:	2c00      	cmp	r4, #0
 8002f8a:	d1f7      	bne.n	8002f7c <_fwalk_sglue+0xc>
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f92:	89ab      	ldrh	r3, [r5, #12]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d907      	bls.n	8002fa8 <_fwalk_sglue+0x38>
 8002f98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	d003      	beq.n	8002fa8 <_fwalk_sglue+0x38>
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	4638      	mov	r0, r7
 8002fa4:	47c0      	blx	r8
 8002fa6:	4306      	orrs	r6, r0
 8002fa8:	3568      	adds	r5, #104	@ 0x68
 8002faa:	e7e9      	b.n	8002f80 <_fwalk_sglue+0x10>

08002fac <iprintf>:
 8002fac:	b40f      	push	{r0, r1, r2, r3}
 8002fae:	b507      	push	{r0, r1, r2, lr}
 8002fb0:	4906      	ldr	r1, [pc, #24]	@ (8002fcc <iprintf+0x20>)
 8002fb2:	ab04      	add	r3, sp, #16
 8002fb4:	6808      	ldr	r0, [r1, #0]
 8002fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fba:	6881      	ldr	r1, [r0, #8]
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	f000 fae5 	bl	800358c <_vfiprintf_r>
 8002fc2:	b003      	add	sp, #12
 8002fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fc8:	b004      	add	sp, #16
 8002fca:	4770      	bx	lr
 8002fcc:	20000018 	.word	0x20000018

08002fd0 <_puts_r>:
 8002fd0:	6a03      	ldr	r3, [r0, #32]
 8002fd2:	b570      	push	{r4, r5, r6, lr}
 8002fd4:	4605      	mov	r5, r0
 8002fd6:	460e      	mov	r6, r1
 8002fd8:	6884      	ldr	r4, [r0, #8]
 8002fda:	b90b      	cbnz	r3, 8002fe0 <_puts_r+0x10>
 8002fdc:	f7ff ffb0 	bl	8002f40 <__sinit>
 8002fe0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002fe2:	07db      	lsls	r3, r3, #31
 8002fe4:	d405      	bmi.n	8002ff2 <_puts_r+0x22>
 8002fe6:	89a3      	ldrh	r3, [r4, #12]
 8002fe8:	0598      	lsls	r0, r3, #22
 8002fea:	d402      	bmi.n	8002ff2 <_puts_r+0x22>
 8002fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fee:	f000 f99e 	bl	800332e <__retarget_lock_acquire_recursive>
 8002ff2:	89a3      	ldrh	r3, [r4, #12]
 8002ff4:	0719      	lsls	r1, r3, #28
 8002ff6:	d502      	bpl.n	8002ffe <_puts_r+0x2e>
 8002ff8:	6923      	ldr	r3, [r4, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d135      	bne.n	800306a <_puts_r+0x9a>
 8002ffe:	4621      	mov	r1, r4
 8003000:	4628      	mov	r0, r5
 8003002:	f000 f8c5 	bl	8003190 <__swsetup_r>
 8003006:	b380      	cbz	r0, 800306a <_puts_r+0x9a>
 8003008:	f04f 35ff 	mov.w	r5, #4294967295
 800300c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800300e:	07da      	lsls	r2, r3, #31
 8003010:	d405      	bmi.n	800301e <_puts_r+0x4e>
 8003012:	89a3      	ldrh	r3, [r4, #12]
 8003014:	059b      	lsls	r3, r3, #22
 8003016:	d402      	bmi.n	800301e <_puts_r+0x4e>
 8003018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800301a:	f000 f989 	bl	8003330 <__retarget_lock_release_recursive>
 800301e:	4628      	mov	r0, r5
 8003020:	bd70      	pop	{r4, r5, r6, pc}
 8003022:	2b00      	cmp	r3, #0
 8003024:	da04      	bge.n	8003030 <_puts_r+0x60>
 8003026:	69a2      	ldr	r2, [r4, #24]
 8003028:	429a      	cmp	r2, r3
 800302a:	dc17      	bgt.n	800305c <_puts_r+0x8c>
 800302c:	290a      	cmp	r1, #10
 800302e:	d015      	beq.n	800305c <_puts_r+0x8c>
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	6022      	str	r2, [r4, #0]
 8003036:	7019      	strb	r1, [r3, #0]
 8003038:	68a3      	ldr	r3, [r4, #8]
 800303a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800303e:	3b01      	subs	r3, #1
 8003040:	60a3      	str	r3, [r4, #8]
 8003042:	2900      	cmp	r1, #0
 8003044:	d1ed      	bne.n	8003022 <_puts_r+0x52>
 8003046:	2b00      	cmp	r3, #0
 8003048:	da11      	bge.n	800306e <_puts_r+0x9e>
 800304a:	4622      	mov	r2, r4
 800304c:	210a      	movs	r1, #10
 800304e:	4628      	mov	r0, r5
 8003050:	f000 f85f 	bl	8003112 <__swbuf_r>
 8003054:	3001      	adds	r0, #1
 8003056:	d0d7      	beq.n	8003008 <_puts_r+0x38>
 8003058:	250a      	movs	r5, #10
 800305a:	e7d7      	b.n	800300c <_puts_r+0x3c>
 800305c:	4622      	mov	r2, r4
 800305e:	4628      	mov	r0, r5
 8003060:	f000 f857 	bl	8003112 <__swbuf_r>
 8003064:	3001      	adds	r0, #1
 8003066:	d1e7      	bne.n	8003038 <_puts_r+0x68>
 8003068:	e7ce      	b.n	8003008 <_puts_r+0x38>
 800306a:	3e01      	subs	r6, #1
 800306c:	e7e4      	b.n	8003038 <_puts_r+0x68>
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	6022      	str	r2, [r4, #0]
 8003074:	220a      	movs	r2, #10
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	e7ee      	b.n	8003058 <_puts_r+0x88>
	...

0800307c <puts>:
 800307c:	4b02      	ldr	r3, [pc, #8]	@ (8003088 <puts+0xc>)
 800307e:	4601      	mov	r1, r0
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	f7ff bfa5 	b.w	8002fd0 <_puts_r>
 8003086:	bf00      	nop
 8003088:	20000018 	.word	0x20000018

0800308c <__sread>:
 800308c:	b510      	push	{r4, lr}
 800308e:	460c      	mov	r4, r1
 8003090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003094:	f000 f8fc 	bl	8003290 <_read_r>
 8003098:	2800      	cmp	r0, #0
 800309a:	bfab      	itete	ge
 800309c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800309e:	89a3      	ldrhlt	r3, [r4, #12]
 80030a0:	181b      	addge	r3, r3, r0
 80030a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80030a6:	bfac      	ite	ge
 80030a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80030aa:	81a3      	strhlt	r3, [r4, #12]
 80030ac:	bd10      	pop	{r4, pc}

080030ae <__swrite>:
 80030ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030b2:	461f      	mov	r7, r3
 80030b4:	898b      	ldrh	r3, [r1, #12]
 80030b6:	4605      	mov	r5, r0
 80030b8:	05db      	lsls	r3, r3, #23
 80030ba:	460c      	mov	r4, r1
 80030bc:	4616      	mov	r6, r2
 80030be:	d505      	bpl.n	80030cc <__swrite+0x1e>
 80030c0:	2302      	movs	r3, #2
 80030c2:	2200      	movs	r2, #0
 80030c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030c8:	f000 f8d0 	bl	800326c <_lseek_r>
 80030cc:	89a3      	ldrh	r3, [r4, #12]
 80030ce:	4632      	mov	r2, r6
 80030d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030d4:	81a3      	strh	r3, [r4, #12]
 80030d6:	4628      	mov	r0, r5
 80030d8:	463b      	mov	r3, r7
 80030da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030e2:	f000 b8e7 	b.w	80032b4 <_write_r>

080030e6 <__sseek>:
 80030e6:	b510      	push	{r4, lr}
 80030e8:	460c      	mov	r4, r1
 80030ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030ee:	f000 f8bd 	bl	800326c <_lseek_r>
 80030f2:	1c43      	adds	r3, r0, #1
 80030f4:	89a3      	ldrh	r3, [r4, #12]
 80030f6:	bf15      	itete	ne
 80030f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80030fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80030fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003102:	81a3      	strheq	r3, [r4, #12]
 8003104:	bf18      	it	ne
 8003106:	81a3      	strhne	r3, [r4, #12]
 8003108:	bd10      	pop	{r4, pc}

0800310a <__sclose>:
 800310a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800310e:	f000 b89d 	b.w	800324c <_close_r>

08003112 <__swbuf_r>:
 8003112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003114:	460e      	mov	r6, r1
 8003116:	4614      	mov	r4, r2
 8003118:	4605      	mov	r5, r0
 800311a:	b118      	cbz	r0, 8003124 <__swbuf_r+0x12>
 800311c:	6a03      	ldr	r3, [r0, #32]
 800311e:	b90b      	cbnz	r3, 8003124 <__swbuf_r+0x12>
 8003120:	f7ff ff0e 	bl	8002f40 <__sinit>
 8003124:	69a3      	ldr	r3, [r4, #24]
 8003126:	60a3      	str	r3, [r4, #8]
 8003128:	89a3      	ldrh	r3, [r4, #12]
 800312a:	071a      	lsls	r2, r3, #28
 800312c:	d501      	bpl.n	8003132 <__swbuf_r+0x20>
 800312e:	6923      	ldr	r3, [r4, #16]
 8003130:	b943      	cbnz	r3, 8003144 <__swbuf_r+0x32>
 8003132:	4621      	mov	r1, r4
 8003134:	4628      	mov	r0, r5
 8003136:	f000 f82b 	bl	8003190 <__swsetup_r>
 800313a:	b118      	cbz	r0, 8003144 <__swbuf_r+0x32>
 800313c:	f04f 37ff 	mov.w	r7, #4294967295
 8003140:	4638      	mov	r0, r7
 8003142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	6922      	ldr	r2, [r4, #16]
 8003148:	b2f6      	uxtb	r6, r6
 800314a:	1a98      	subs	r0, r3, r2
 800314c:	6963      	ldr	r3, [r4, #20]
 800314e:	4637      	mov	r7, r6
 8003150:	4283      	cmp	r3, r0
 8003152:	dc05      	bgt.n	8003160 <__swbuf_r+0x4e>
 8003154:	4621      	mov	r1, r4
 8003156:	4628      	mov	r0, r5
 8003158:	f000 fd42 	bl	8003be0 <_fflush_r>
 800315c:	2800      	cmp	r0, #0
 800315e:	d1ed      	bne.n	800313c <__swbuf_r+0x2a>
 8003160:	68a3      	ldr	r3, [r4, #8]
 8003162:	3b01      	subs	r3, #1
 8003164:	60a3      	str	r3, [r4, #8]
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	6022      	str	r2, [r4, #0]
 800316c:	701e      	strb	r6, [r3, #0]
 800316e:	6962      	ldr	r2, [r4, #20]
 8003170:	1c43      	adds	r3, r0, #1
 8003172:	429a      	cmp	r2, r3
 8003174:	d004      	beq.n	8003180 <__swbuf_r+0x6e>
 8003176:	89a3      	ldrh	r3, [r4, #12]
 8003178:	07db      	lsls	r3, r3, #31
 800317a:	d5e1      	bpl.n	8003140 <__swbuf_r+0x2e>
 800317c:	2e0a      	cmp	r6, #10
 800317e:	d1df      	bne.n	8003140 <__swbuf_r+0x2e>
 8003180:	4621      	mov	r1, r4
 8003182:	4628      	mov	r0, r5
 8003184:	f000 fd2c 	bl	8003be0 <_fflush_r>
 8003188:	2800      	cmp	r0, #0
 800318a:	d0d9      	beq.n	8003140 <__swbuf_r+0x2e>
 800318c:	e7d6      	b.n	800313c <__swbuf_r+0x2a>
	...

08003190 <__swsetup_r>:
 8003190:	b538      	push	{r3, r4, r5, lr}
 8003192:	4b29      	ldr	r3, [pc, #164]	@ (8003238 <__swsetup_r+0xa8>)
 8003194:	4605      	mov	r5, r0
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	460c      	mov	r4, r1
 800319a:	b118      	cbz	r0, 80031a4 <__swsetup_r+0x14>
 800319c:	6a03      	ldr	r3, [r0, #32]
 800319e:	b90b      	cbnz	r3, 80031a4 <__swsetup_r+0x14>
 80031a0:	f7ff fece 	bl	8002f40 <__sinit>
 80031a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031a8:	0719      	lsls	r1, r3, #28
 80031aa:	d422      	bmi.n	80031f2 <__swsetup_r+0x62>
 80031ac:	06da      	lsls	r2, r3, #27
 80031ae:	d407      	bmi.n	80031c0 <__swsetup_r+0x30>
 80031b0:	2209      	movs	r2, #9
 80031b2:	602a      	str	r2, [r5, #0]
 80031b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295
 80031bc:	81a3      	strh	r3, [r4, #12]
 80031be:	e033      	b.n	8003228 <__swsetup_r+0x98>
 80031c0:	0758      	lsls	r0, r3, #29
 80031c2:	d512      	bpl.n	80031ea <__swsetup_r+0x5a>
 80031c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80031c6:	b141      	cbz	r1, 80031da <__swsetup_r+0x4a>
 80031c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80031cc:	4299      	cmp	r1, r3
 80031ce:	d002      	beq.n	80031d6 <__swsetup_r+0x46>
 80031d0:	4628      	mov	r0, r5
 80031d2:	f000 f8bd 	bl	8003350 <_free_r>
 80031d6:	2300      	movs	r3, #0
 80031d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80031da:	89a3      	ldrh	r3, [r4, #12]
 80031dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80031e0:	81a3      	strh	r3, [r4, #12]
 80031e2:	2300      	movs	r3, #0
 80031e4:	6063      	str	r3, [r4, #4]
 80031e6:	6923      	ldr	r3, [r4, #16]
 80031e8:	6023      	str	r3, [r4, #0]
 80031ea:	89a3      	ldrh	r3, [r4, #12]
 80031ec:	f043 0308 	orr.w	r3, r3, #8
 80031f0:	81a3      	strh	r3, [r4, #12]
 80031f2:	6923      	ldr	r3, [r4, #16]
 80031f4:	b94b      	cbnz	r3, 800320a <__swsetup_r+0x7a>
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80031fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003200:	d003      	beq.n	800320a <__swsetup_r+0x7a>
 8003202:	4621      	mov	r1, r4
 8003204:	4628      	mov	r0, r5
 8003206:	f000 fd38 	bl	8003c7a <__smakebuf_r>
 800320a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800320e:	f013 0201 	ands.w	r2, r3, #1
 8003212:	d00a      	beq.n	800322a <__swsetup_r+0x9a>
 8003214:	2200      	movs	r2, #0
 8003216:	60a2      	str	r2, [r4, #8]
 8003218:	6962      	ldr	r2, [r4, #20]
 800321a:	4252      	negs	r2, r2
 800321c:	61a2      	str	r2, [r4, #24]
 800321e:	6922      	ldr	r2, [r4, #16]
 8003220:	b942      	cbnz	r2, 8003234 <__swsetup_r+0xa4>
 8003222:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003226:	d1c5      	bne.n	80031b4 <__swsetup_r+0x24>
 8003228:	bd38      	pop	{r3, r4, r5, pc}
 800322a:	0799      	lsls	r1, r3, #30
 800322c:	bf58      	it	pl
 800322e:	6962      	ldrpl	r2, [r4, #20]
 8003230:	60a2      	str	r2, [r4, #8]
 8003232:	e7f4      	b.n	800321e <__swsetup_r+0x8e>
 8003234:	2000      	movs	r0, #0
 8003236:	e7f7      	b.n	8003228 <__swsetup_r+0x98>
 8003238:	20000018 	.word	0x20000018

0800323c <memset>:
 800323c:	4603      	mov	r3, r0
 800323e:	4402      	add	r2, r0
 8003240:	4293      	cmp	r3, r2
 8003242:	d100      	bne.n	8003246 <memset+0xa>
 8003244:	4770      	bx	lr
 8003246:	f803 1b01 	strb.w	r1, [r3], #1
 800324a:	e7f9      	b.n	8003240 <memset+0x4>

0800324c <_close_r>:
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	2300      	movs	r3, #0
 8003250:	4d05      	ldr	r5, [pc, #20]	@ (8003268 <_close_r+0x1c>)
 8003252:	4604      	mov	r4, r0
 8003254:	4608      	mov	r0, r1
 8003256:	602b      	str	r3, [r5, #0]
 8003258:	f7fd fb55 	bl	8000906 <_close>
 800325c:	1c43      	adds	r3, r0, #1
 800325e:	d102      	bne.n	8003266 <_close_r+0x1a>
 8003260:	682b      	ldr	r3, [r5, #0]
 8003262:	b103      	cbz	r3, 8003266 <_close_r+0x1a>
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	bd38      	pop	{r3, r4, r5, pc}
 8003268:	20000238 	.word	0x20000238

0800326c <_lseek_r>:
 800326c:	b538      	push	{r3, r4, r5, lr}
 800326e:	4604      	mov	r4, r0
 8003270:	4608      	mov	r0, r1
 8003272:	4611      	mov	r1, r2
 8003274:	2200      	movs	r2, #0
 8003276:	4d05      	ldr	r5, [pc, #20]	@ (800328c <_lseek_r+0x20>)
 8003278:	602a      	str	r2, [r5, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	f7fd fb67 	bl	800094e <_lseek>
 8003280:	1c43      	adds	r3, r0, #1
 8003282:	d102      	bne.n	800328a <_lseek_r+0x1e>
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	b103      	cbz	r3, 800328a <_lseek_r+0x1e>
 8003288:	6023      	str	r3, [r4, #0]
 800328a:	bd38      	pop	{r3, r4, r5, pc}
 800328c:	20000238 	.word	0x20000238

08003290 <_read_r>:
 8003290:	b538      	push	{r3, r4, r5, lr}
 8003292:	4604      	mov	r4, r0
 8003294:	4608      	mov	r0, r1
 8003296:	4611      	mov	r1, r2
 8003298:	2200      	movs	r2, #0
 800329a:	4d05      	ldr	r5, [pc, #20]	@ (80032b0 <_read_r+0x20>)
 800329c:	602a      	str	r2, [r5, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	f7fd faf8 	bl	8000894 <_read>
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	d102      	bne.n	80032ae <_read_r+0x1e>
 80032a8:	682b      	ldr	r3, [r5, #0]
 80032aa:	b103      	cbz	r3, 80032ae <_read_r+0x1e>
 80032ac:	6023      	str	r3, [r4, #0]
 80032ae:	bd38      	pop	{r3, r4, r5, pc}
 80032b0:	20000238 	.word	0x20000238

080032b4 <_write_r>:
 80032b4:	b538      	push	{r3, r4, r5, lr}
 80032b6:	4604      	mov	r4, r0
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	2200      	movs	r2, #0
 80032be:	4d05      	ldr	r5, [pc, #20]	@ (80032d4 <_write_r+0x20>)
 80032c0:	602a      	str	r2, [r5, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	f7fd fb03 	bl	80008ce <_write>
 80032c8:	1c43      	adds	r3, r0, #1
 80032ca:	d102      	bne.n	80032d2 <_write_r+0x1e>
 80032cc:	682b      	ldr	r3, [r5, #0]
 80032ce:	b103      	cbz	r3, 80032d2 <_write_r+0x1e>
 80032d0:	6023      	str	r3, [r4, #0]
 80032d2:	bd38      	pop	{r3, r4, r5, pc}
 80032d4:	20000238 	.word	0x20000238

080032d8 <__errno>:
 80032d8:	4b01      	ldr	r3, [pc, #4]	@ (80032e0 <__errno+0x8>)
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000018 	.word	0x20000018

080032e4 <__libc_init_array>:
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	2600      	movs	r6, #0
 80032e8:	4d0c      	ldr	r5, [pc, #48]	@ (800331c <__libc_init_array+0x38>)
 80032ea:	4c0d      	ldr	r4, [pc, #52]	@ (8003320 <__libc_init_array+0x3c>)
 80032ec:	1b64      	subs	r4, r4, r5
 80032ee:	10a4      	asrs	r4, r4, #2
 80032f0:	42a6      	cmp	r6, r4
 80032f2:	d109      	bne.n	8003308 <__libc_init_array+0x24>
 80032f4:	f000 fd3e 	bl	8003d74 <_init>
 80032f8:	2600      	movs	r6, #0
 80032fa:	4d0a      	ldr	r5, [pc, #40]	@ (8003324 <__libc_init_array+0x40>)
 80032fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003328 <__libc_init_array+0x44>)
 80032fe:	1b64      	subs	r4, r4, r5
 8003300:	10a4      	asrs	r4, r4, #2
 8003302:	42a6      	cmp	r6, r4
 8003304:	d105      	bne.n	8003312 <__libc_init_array+0x2e>
 8003306:	bd70      	pop	{r4, r5, r6, pc}
 8003308:	f855 3b04 	ldr.w	r3, [r5], #4
 800330c:	4798      	blx	r3
 800330e:	3601      	adds	r6, #1
 8003310:	e7ee      	b.n	80032f0 <__libc_init_array+0xc>
 8003312:	f855 3b04 	ldr.w	r3, [r5], #4
 8003316:	4798      	blx	r3
 8003318:	3601      	adds	r6, #1
 800331a:	e7f2      	b.n	8003302 <__libc_init_array+0x1e>
 800331c:	08003e98 	.word	0x08003e98
 8003320:	08003e98 	.word	0x08003e98
 8003324:	08003e98 	.word	0x08003e98
 8003328:	08003e9c 	.word	0x08003e9c

0800332c <__retarget_lock_init_recursive>:
 800332c:	4770      	bx	lr

0800332e <__retarget_lock_acquire_recursive>:
 800332e:	4770      	bx	lr

08003330 <__retarget_lock_release_recursive>:
 8003330:	4770      	bx	lr

08003332 <memcpy>:
 8003332:	440a      	add	r2, r1
 8003334:	4291      	cmp	r1, r2
 8003336:	f100 33ff 	add.w	r3, r0, #4294967295
 800333a:	d100      	bne.n	800333e <memcpy+0xc>
 800333c:	4770      	bx	lr
 800333e:	b510      	push	{r4, lr}
 8003340:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003344:	4291      	cmp	r1, r2
 8003346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800334a:	d1f9      	bne.n	8003340 <memcpy+0xe>
 800334c:	bd10      	pop	{r4, pc}
	...

08003350 <_free_r>:
 8003350:	b538      	push	{r3, r4, r5, lr}
 8003352:	4605      	mov	r5, r0
 8003354:	2900      	cmp	r1, #0
 8003356:	d040      	beq.n	80033da <_free_r+0x8a>
 8003358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800335c:	1f0c      	subs	r4, r1, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	bfb8      	it	lt
 8003362:	18e4      	addlt	r4, r4, r3
 8003364:	f000 f8de 	bl	8003524 <__malloc_lock>
 8003368:	4a1c      	ldr	r2, [pc, #112]	@ (80033dc <_free_r+0x8c>)
 800336a:	6813      	ldr	r3, [r2, #0]
 800336c:	b933      	cbnz	r3, 800337c <_free_r+0x2c>
 800336e:	6063      	str	r3, [r4, #4]
 8003370:	6014      	str	r4, [r2, #0]
 8003372:	4628      	mov	r0, r5
 8003374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003378:	f000 b8da 	b.w	8003530 <__malloc_unlock>
 800337c:	42a3      	cmp	r3, r4
 800337e:	d908      	bls.n	8003392 <_free_r+0x42>
 8003380:	6820      	ldr	r0, [r4, #0]
 8003382:	1821      	adds	r1, r4, r0
 8003384:	428b      	cmp	r3, r1
 8003386:	bf01      	itttt	eq
 8003388:	6819      	ldreq	r1, [r3, #0]
 800338a:	685b      	ldreq	r3, [r3, #4]
 800338c:	1809      	addeq	r1, r1, r0
 800338e:	6021      	streq	r1, [r4, #0]
 8003390:	e7ed      	b.n	800336e <_free_r+0x1e>
 8003392:	461a      	mov	r2, r3
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	b10b      	cbz	r3, 800339c <_free_r+0x4c>
 8003398:	42a3      	cmp	r3, r4
 800339a:	d9fa      	bls.n	8003392 <_free_r+0x42>
 800339c:	6811      	ldr	r1, [r2, #0]
 800339e:	1850      	adds	r0, r2, r1
 80033a0:	42a0      	cmp	r0, r4
 80033a2:	d10b      	bne.n	80033bc <_free_r+0x6c>
 80033a4:	6820      	ldr	r0, [r4, #0]
 80033a6:	4401      	add	r1, r0
 80033a8:	1850      	adds	r0, r2, r1
 80033aa:	4283      	cmp	r3, r0
 80033ac:	6011      	str	r1, [r2, #0]
 80033ae:	d1e0      	bne.n	8003372 <_free_r+0x22>
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4408      	add	r0, r1
 80033b6:	6010      	str	r0, [r2, #0]
 80033b8:	6053      	str	r3, [r2, #4]
 80033ba:	e7da      	b.n	8003372 <_free_r+0x22>
 80033bc:	d902      	bls.n	80033c4 <_free_r+0x74>
 80033be:	230c      	movs	r3, #12
 80033c0:	602b      	str	r3, [r5, #0]
 80033c2:	e7d6      	b.n	8003372 <_free_r+0x22>
 80033c4:	6820      	ldr	r0, [r4, #0]
 80033c6:	1821      	adds	r1, r4, r0
 80033c8:	428b      	cmp	r3, r1
 80033ca:	bf01      	itttt	eq
 80033cc:	6819      	ldreq	r1, [r3, #0]
 80033ce:	685b      	ldreq	r3, [r3, #4]
 80033d0:	1809      	addeq	r1, r1, r0
 80033d2:	6021      	streq	r1, [r4, #0]
 80033d4:	6063      	str	r3, [r4, #4]
 80033d6:	6054      	str	r4, [r2, #4]
 80033d8:	e7cb      	b.n	8003372 <_free_r+0x22>
 80033da:	bd38      	pop	{r3, r4, r5, pc}
 80033dc:	20000244 	.word	0x20000244

080033e0 <sbrk_aligned>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4e0f      	ldr	r6, [pc, #60]	@ (8003420 <sbrk_aligned+0x40>)
 80033e4:	460c      	mov	r4, r1
 80033e6:	6831      	ldr	r1, [r6, #0]
 80033e8:	4605      	mov	r5, r0
 80033ea:	b911      	cbnz	r1, 80033f2 <sbrk_aligned+0x12>
 80033ec:	f000 fca4 	bl	8003d38 <_sbrk_r>
 80033f0:	6030      	str	r0, [r6, #0]
 80033f2:	4621      	mov	r1, r4
 80033f4:	4628      	mov	r0, r5
 80033f6:	f000 fc9f 	bl	8003d38 <_sbrk_r>
 80033fa:	1c43      	adds	r3, r0, #1
 80033fc:	d103      	bne.n	8003406 <sbrk_aligned+0x26>
 80033fe:	f04f 34ff 	mov.w	r4, #4294967295
 8003402:	4620      	mov	r0, r4
 8003404:	bd70      	pop	{r4, r5, r6, pc}
 8003406:	1cc4      	adds	r4, r0, #3
 8003408:	f024 0403 	bic.w	r4, r4, #3
 800340c:	42a0      	cmp	r0, r4
 800340e:	d0f8      	beq.n	8003402 <sbrk_aligned+0x22>
 8003410:	1a21      	subs	r1, r4, r0
 8003412:	4628      	mov	r0, r5
 8003414:	f000 fc90 	bl	8003d38 <_sbrk_r>
 8003418:	3001      	adds	r0, #1
 800341a:	d1f2      	bne.n	8003402 <sbrk_aligned+0x22>
 800341c:	e7ef      	b.n	80033fe <sbrk_aligned+0x1e>
 800341e:	bf00      	nop
 8003420:	20000240 	.word	0x20000240

08003424 <_malloc_r>:
 8003424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003428:	1ccd      	adds	r5, r1, #3
 800342a:	f025 0503 	bic.w	r5, r5, #3
 800342e:	3508      	adds	r5, #8
 8003430:	2d0c      	cmp	r5, #12
 8003432:	bf38      	it	cc
 8003434:	250c      	movcc	r5, #12
 8003436:	2d00      	cmp	r5, #0
 8003438:	4606      	mov	r6, r0
 800343a:	db01      	blt.n	8003440 <_malloc_r+0x1c>
 800343c:	42a9      	cmp	r1, r5
 800343e:	d904      	bls.n	800344a <_malloc_r+0x26>
 8003440:	230c      	movs	r3, #12
 8003442:	6033      	str	r3, [r6, #0]
 8003444:	2000      	movs	r0, #0
 8003446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800344a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003520 <_malloc_r+0xfc>
 800344e:	f000 f869 	bl	8003524 <__malloc_lock>
 8003452:	f8d8 3000 	ldr.w	r3, [r8]
 8003456:	461c      	mov	r4, r3
 8003458:	bb44      	cbnz	r4, 80034ac <_malloc_r+0x88>
 800345a:	4629      	mov	r1, r5
 800345c:	4630      	mov	r0, r6
 800345e:	f7ff ffbf 	bl	80033e0 <sbrk_aligned>
 8003462:	1c43      	adds	r3, r0, #1
 8003464:	4604      	mov	r4, r0
 8003466:	d158      	bne.n	800351a <_malloc_r+0xf6>
 8003468:	f8d8 4000 	ldr.w	r4, [r8]
 800346c:	4627      	mov	r7, r4
 800346e:	2f00      	cmp	r7, #0
 8003470:	d143      	bne.n	80034fa <_malloc_r+0xd6>
 8003472:	2c00      	cmp	r4, #0
 8003474:	d04b      	beq.n	800350e <_malloc_r+0xea>
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	4639      	mov	r1, r7
 800347a:	4630      	mov	r0, r6
 800347c:	eb04 0903 	add.w	r9, r4, r3
 8003480:	f000 fc5a 	bl	8003d38 <_sbrk_r>
 8003484:	4581      	cmp	r9, r0
 8003486:	d142      	bne.n	800350e <_malloc_r+0xea>
 8003488:	6821      	ldr	r1, [r4, #0]
 800348a:	4630      	mov	r0, r6
 800348c:	1a6d      	subs	r5, r5, r1
 800348e:	4629      	mov	r1, r5
 8003490:	f7ff ffa6 	bl	80033e0 <sbrk_aligned>
 8003494:	3001      	adds	r0, #1
 8003496:	d03a      	beq.n	800350e <_malloc_r+0xea>
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	442b      	add	r3, r5
 800349c:	6023      	str	r3, [r4, #0]
 800349e:	f8d8 3000 	ldr.w	r3, [r8]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	bb62      	cbnz	r2, 8003500 <_malloc_r+0xdc>
 80034a6:	f8c8 7000 	str.w	r7, [r8]
 80034aa:	e00f      	b.n	80034cc <_malloc_r+0xa8>
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	1b52      	subs	r2, r2, r5
 80034b0:	d420      	bmi.n	80034f4 <_malloc_r+0xd0>
 80034b2:	2a0b      	cmp	r2, #11
 80034b4:	d917      	bls.n	80034e6 <_malloc_r+0xc2>
 80034b6:	1961      	adds	r1, r4, r5
 80034b8:	42a3      	cmp	r3, r4
 80034ba:	6025      	str	r5, [r4, #0]
 80034bc:	bf18      	it	ne
 80034be:	6059      	strne	r1, [r3, #4]
 80034c0:	6863      	ldr	r3, [r4, #4]
 80034c2:	bf08      	it	eq
 80034c4:	f8c8 1000 	streq.w	r1, [r8]
 80034c8:	5162      	str	r2, [r4, r5]
 80034ca:	604b      	str	r3, [r1, #4]
 80034cc:	4630      	mov	r0, r6
 80034ce:	f000 f82f 	bl	8003530 <__malloc_unlock>
 80034d2:	f104 000b 	add.w	r0, r4, #11
 80034d6:	1d23      	adds	r3, r4, #4
 80034d8:	f020 0007 	bic.w	r0, r0, #7
 80034dc:	1ac2      	subs	r2, r0, r3
 80034de:	bf1c      	itt	ne
 80034e0:	1a1b      	subne	r3, r3, r0
 80034e2:	50a3      	strne	r3, [r4, r2]
 80034e4:	e7af      	b.n	8003446 <_malloc_r+0x22>
 80034e6:	6862      	ldr	r2, [r4, #4]
 80034e8:	42a3      	cmp	r3, r4
 80034ea:	bf0c      	ite	eq
 80034ec:	f8c8 2000 	streq.w	r2, [r8]
 80034f0:	605a      	strne	r2, [r3, #4]
 80034f2:	e7eb      	b.n	80034cc <_malloc_r+0xa8>
 80034f4:	4623      	mov	r3, r4
 80034f6:	6864      	ldr	r4, [r4, #4]
 80034f8:	e7ae      	b.n	8003458 <_malloc_r+0x34>
 80034fa:	463c      	mov	r4, r7
 80034fc:	687f      	ldr	r7, [r7, #4]
 80034fe:	e7b6      	b.n	800346e <_malloc_r+0x4a>
 8003500:	461a      	mov	r2, r3
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	42a3      	cmp	r3, r4
 8003506:	d1fb      	bne.n	8003500 <_malloc_r+0xdc>
 8003508:	2300      	movs	r3, #0
 800350a:	6053      	str	r3, [r2, #4]
 800350c:	e7de      	b.n	80034cc <_malloc_r+0xa8>
 800350e:	230c      	movs	r3, #12
 8003510:	4630      	mov	r0, r6
 8003512:	6033      	str	r3, [r6, #0]
 8003514:	f000 f80c 	bl	8003530 <__malloc_unlock>
 8003518:	e794      	b.n	8003444 <_malloc_r+0x20>
 800351a:	6005      	str	r5, [r0, #0]
 800351c:	e7d6      	b.n	80034cc <_malloc_r+0xa8>
 800351e:	bf00      	nop
 8003520:	20000244 	.word	0x20000244

08003524 <__malloc_lock>:
 8003524:	4801      	ldr	r0, [pc, #4]	@ (800352c <__malloc_lock+0x8>)
 8003526:	f7ff bf02 	b.w	800332e <__retarget_lock_acquire_recursive>
 800352a:	bf00      	nop
 800352c:	2000023c 	.word	0x2000023c

08003530 <__malloc_unlock>:
 8003530:	4801      	ldr	r0, [pc, #4]	@ (8003538 <__malloc_unlock+0x8>)
 8003532:	f7ff befd 	b.w	8003330 <__retarget_lock_release_recursive>
 8003536:	bf00      	nop
 8003538:	2000023c 	.word	0x2000023c

0800353c <__sfputc_r>:
 800353c:	6893      	ldr	r3, [r2, #8]
 800353e:	b410      	push	{r4}
 8003540:	3b01      	subs	r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	6093      	str	r3, [r2, #8]
 8003546:	da07      	bge.n	8003558 <__sfputc_r+0x1c>
 8003548:	6994      	ldr	r4, [r2, #24]
 800354a:	42a3      	cmp	r3, r4
 800354c:	db01      	blt.n	8003552 <__sfputc_r+0x16>
 800354e:	290a      	cmp	r1, #10
 8003550:	d102      	bne.n	8003558 <__sfputc_r+0x1c>
 8003552:	bc10      	pop	{r4}
 8003554:	f7ff bddd 	b.w	8003112 <__swbuf_r>
 8003558:	6813      	ldr	r3, [r2, #0]
 800355a:	1c58      	adds	r0, r3, #1
 800355c:	6010      	str	r0, [r2, #0]
 800355e:	7019      	strb	r1, [r3, #0]
 8003560:	4608      	mov	r0, r1
 8003562:	bc10      	pop	{r4}
 8003564:	4770      	bx	lr

08003566 <__sfputs_r>:
 8003566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003568:	4606      	mov	r6, r0
 800356a:	460f      	mov	r7, r1
 800356c:	4614      	mov	r4, r2
 800356e:	18d5      	adds	r5, r2, r3
 8003570:	42ac      	cmp	r4, r5
 8003572:	d101      	bne.n	8003578 <__sfputs_r+0x12>
 8003574:	2000      	movs	r0, #0
 8003576:	e007      	b.n	8003588 <__sfputs_r+0x22>
 8003578:	463a      	mov	r2, r7
 800357a:	4630      	mov	r0, r6
 800357c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003580:	f7ff ffdc 	bl	800353c <__sfputc_r>
 8003584:	1c43      	adds	r3, r0, #1
 8003586:	d1f3      	bne.n	8003570 <__sfputs_r+0xa>
 8003588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800358c <_vfiprintf_r>:
 800358c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003590:	460d      	mov	r5, r1
 8003592:	4614      	mov	r4, r2
 8003594:	4698      	mov	r8, r3
 8003596:	4606      	mov	r6, r0
 8003598:	b09d      	sub	sp, #116	@ 0x74
 800359a:	b118      	cbz	r0, 80035a4 <_vfiprintf_r+0x18>
 800359c:	6a03      	ldr	r3, [r0, #32]
 800359e:	b90b      	cbnz	r3, 80035a4 <_vfiprintf_r+0x18>
 80035a0:	f7ff fcce 	bl	8002f40 <__sinit>
 80035a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80035a6:	07d9      	lsls	r1, r3, #31
 80035a8:	d405      	bmi.n	80035b6 <_vfiprintf_r+0x2a>
 80035aa:	89ab      	ldrh	r3, [r5, #12]
 80035ac:	059a      	lsls	r2, r3, #22
 80035ae:	d402      	bmi.n	80035b6 <_vfiprintf_r+0x2a>
 80035b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80035b2:	f7ff febc 	bl	800332e <__retarget_lock_acquire_recursive>
 80035b6:	89ab      	ldrh	r3, [r5, #12]
 80035b8:	071b      	lsls	r3, r3, #28
 80035ba:	d501      	bpl.n	80035c0 <_vfiprintf_r+0x34>
 80035bc:	692b      	ldr	r3, [r5, #16]
 80035be:	b99b      	cbnz	r3, 80035e8 <_vfiprintf_r+0x5c>
 80035c0:	4629      	mov	r1, r5
 80035c2:	4630      	mov	r0, r6
 80035c4:	f7ff fde4 	bl	8003190 <__swsetup_r>
 80035c8:	b170      	cbz	r0, 80035e8 <_vfiprintf_r+0x5c>
 80035ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80035cc:	07dc      	lsls	r4, r3, #31
 80035ce:	d504      	bpl.n	80035da <_vfiprintf_r+0x4e>
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	b01d      	add	sp, #116	@ 0x74
 80035d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035da:	89ab      	ldrh	r3, [r5, #12]
 80035dc:	0598      	lsls	r0, r3, #22
 80035de:	d4f7      	bmi.n	80035d0 <_vfiprintf_r+0x44>
 80035e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80035e2:	f7ff fea5 	bl	8003330 <__retarget_lock_release_recursive>
 80035e6:	e7f3      	b.n	80035d0 <_vfiprintf_r+0x44>
 80035e8:	2300      	movs	r3, #0
 80035ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80035ec:	2320      	movs	r3, #32
 80035ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035f2:	2330      	movs	r3, #48	@ 0x30
 80035f4:	f04f 0901 	mov.w	r9, #1
 80035f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80035fc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80037a8 <_vfiprintf_r+0x21c>
 8003600:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003604:	4623      	mov	r3, r4
 8003606:	469a      	mov	sl, r3
 8003608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800360c:	b10a      	cbz	r2, 8003612 <_vfiprintf_r+0x86>
 800360e:	2a25      	cmp	r2, #37	@ 0x25
 8003610:	d1f9      	bne.n	8003606 <_vfiprintf_r+0x7a>
 8003612:	ebba 0b04 	subs.w	fp, sl, r4
 8003616:	d00b      	beq.n	8003630 <_vfiprintf_r+0xa4>
 8003618:	465b      	mov	r3, fp
 800361a:	4622      	mov	r2, r4
 800361c:	4629      	mov	r1, r5
 800361e:	4630      	mov	r0, r6
 8003620:	f7ff ffa1 	bl	8003566 <__sfputs_r>
 8003624:	3001      	adds	r0, #1
 8003626:	f000 80a7 	beq.w	8003778 <_vfiprintf_r+0x1ec>
 800362a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800362c:	445a      	add	r2, fp
 800362e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003630:	f89a 3000 	ldrb.w	r3, [sl]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 809f 	beq.w	8003778 <_vfiprintf_r+0x1ec>
 800363a:	2300      	movs	r3, #0
 800363c:	f04f 32ff 	mov.w	r2, #4294967295
 8003640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003644:	f10a 0a01 	add.w	sl, sl, #1
 8003648:	9304      	str	r3, [sp, #16]
 800364a:	9307      	str	r3, [sp, #28]
 800364c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003650:	931a      	str	r3, [sp, #104]	@ 0x68
 8003652:	4654      	mov	r4, sl
 8003654:	2205      	movs	r2, #5
 8003656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800365a:	4853      	ldr	r0, [pc, #332]	@ (80037a8 <_vfiprintf_r+0x21c>)
 800365c:	f000 fb7c 	bl	8003d58 <memchr>
 8003660:	9a04      	ldr	r2, [sp, #16]
 8003662:	b9d8      	cbnz	r0, 800369c <_vfiprintf_r+0x110>
 8003664:	06d1      	lsls	r1, r2, #27
 8003666:	bf44      	itt	mi
 8003668:	2320      	movmi	r3, #32
 800366a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800366e:	0713      	lsls	r3, r2, #28
 8003670:	bf44      	itt	mi
 8003672:	232b      	movmi	r3, #43	@ 0x2b
 8003674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003678:	f89a 3000 	ldrb.w	r3, [sl]
 800367c:	2b2a      	cmp	r3, #42	@ 0x2a
 800367e:	d015      	beq.n	80036ac <_vfiprintf_r+0x120>
 8003680:	4654      	mov	r4, sl
 8003682:	2000      	movs	r0, #0
 8003684:	f04f 0c0a 	mov.w	ip, #10
 8003688:	9a07      	ldr	r2, [sp, #28]
 800368a:	4621      	mov	r1, r4
 800368c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003690:	3b30      	subs	r3, #48	@ 0x30
 8003692:	2b09      	cmp	r3, #9
 8003694:	d94b      	bls.n	800372e <_vfiprintf_r+0x1a2>
 8003696:	b1b0      	cbz	r0, 80036c6 <_vfiprintf_r+0x13a>
 8003698:	9207      	str	r2, [sp, #28]
 800369a:	e014      	b.n	80036c6 <_vfiprintf_r+0x13a>
 800369c:	eba0 0308 	sub.w	r3, r0, r8
 80036a0:	fa09 f303 	lsl.w	r3, r9, r3
 80036a4:	4313      	orrs	r3, r2
 80036a6:	46a2      	mov	sl, r4
 80036a8:	9304      	str	r3, [sp, #16]
 80036aa:	e7d2      	b.n	8003652 <_vfiprintf_r+0xc6>
 80036ac:	9b03      	ldr	r3, [sp, #12]
 80036ae:	1d19      	adds	r1, r3, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	9103      	str	r1, [sp, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bfbb      	ittet	lt
 80036b8:	425b      	neglt	r3, r3
 80036ba:	f042 0202 	orrlt.w	r2, r2, #2
 80036be:	9307      	strge	r3, [sp, #28]
 80036c0:	9307      	strlt	r3, [sp, #28]
 80036c2:	bfb8      	it	lt
 80036c4:	9204      	strlt	r2, [sp, #16]
 80036c6:	7823      	ldrb	r3, [r4, #0]
 80036c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80036ca:	d10a      	bne.n	80036e2 <_vfiprintf_r+0x156>
 80036cc:	7863      	ldrb	r3, [r4, #1]
 80036ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80036d0:	d132      	bne.n	8003738 <_vfiprintf_r+0x1ac>
 80036d2:	9b03      	ldr	r3, [sp, #12]
 80036d4:	3402      	adds	r4, #2
 80036d6:	1d1a      	adds	r2, r3, #4
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	9203      	str	r2, [sp, #12]
 80036dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036e0:	9305      	str	r3, [sp, #20]
 80036e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80037ac <_vfiprintf_r+0x220>
 80036e6:	2203      	movs	r2, #3
 80036e8:	4650      	mov	r0, sl
 80036ea:	7821      	ldrb	r1, [r4, #0]
 80036ec:	f000 fb34 	bl	8003d58 <memchr>
 80036f0:	b138      	cbz	r0, 8003702 <_vfiprintf_r+0x176>
 80036f2:	2240      	movs	r2, #64	@ 0x40
 80036f4:	9b04      	ldr	r3, [sp, #16]
 80036f6:	eba0 000a 	sub.w	r0, r0, sl
 80036fa:	4082      	lsls	r2, r0
 80036fc:	4313      	orrs	r3, r2
 80036fe:	3401      	adds	r4, #1
 8003700:	9304      	str	r3, [sp, #16]
 8003702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003706:	2206      	movs	r2, #6
 8003708:	4829      	ldr	r0, [pc, #164]	@ (80037b0 <_vfiprintf_r+0x224>)
 800370a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800370e:	f000 fb23 	bl	8003d58 <memchr>
 8003712:	2800      	cmp	r0, #0
 8003714:	d03f      	beq.n	8003796 <_vfiprintf_r+0x20a>
 8003716:	4b27      	ldr	r3, [pc, #156]	@ (80037b4 <_vfiprintf_r+0x228>)
 8003718:	bb1b      	cbnz	r3, 8003762 <_vfiprintf_r+0x1d6>
 800371a:	9b03      	ldr	r3, [sp, #12]
 800371c:	3307      	adds	r3, #7
 800371e:	f023 0307 	bic.w	r3, r3, #7
 8003722:	3308      	adds	r3, #8
 8003724:	9303      	str	r3, [sp, #12]
 8003726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003728:	443b      	add	r3, r7
 800372a:	9309      	str	r3, [sp, #36]	@ 0x24
 800372c:	e76a      	b.n	8003604 <_vfiprintf_r+0x78>
 800372e:	460c      	mov	r4, r1
 8003730:	2001      	movs	r0, #1
 8003732:	fb0c 3202 	mla	r2, ip, r2, r3
 8003736:	e7a8      	b.n	800368a <_vfiprintf_r+0xfe>
 8003738:	2300      	movs	r3, #0
 800373a:	f04f 0c0a 	mov.w	ip, #10
 800373e:	4619      	mov	r1, r3
 8003740:	3401      	adds	r4, #1
 8003742:	9305      	str	r3, [sp, #20]
 8003744:	4620      	mov	r0, r4
 8003746:	f810 2b01 	ldrb.w	r2, [r0], #1
 800374a:	3a30      	subs	r2, #48	@ 0x30
 800374c:	2a09      	cmp	r2, #9
 800374e:	d903      	bls.n	8003758 <_vfiprintf_r+0x1cc>
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0c6      	beq.n	80036e2 <_vfiprintf_r+0x156>
 8003754:	9105      	str	r1, [sp, #20]
 8003756:	e7c4      	b.n	80036e2 <_vfiprintf_r+0x156>
 8003758:	4604      	mov	r4, r0
 800375a:	2301      	movs	r3, #1
 800375c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003760:	e7f0      	b.n	8003744 <_vfiprintf_r+0x1b8>
 8003762:	ab03      	add	r3, sp, #12
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	462a      	mov	r2, r5
 8003768:	4630      	mov	r0, r6
 800376a:	4b13      	ldr	r3, [pc, #76]	@ (80037b8 <_vfiprintf_r+0x22c>)
 800376c:	a904      	add	r1, sp, #16
 800376e:	f3af 8000 	nop.w
 8003772:	4607      	mov	r7, r0
 8003774:	1c78      	adds	r0, r7, #1
 8003776:	d1d6      	bne.n	8003726 <_vfiprintf_r+0x19a>
 8003778:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800377a:	07d9      	lsls	r1, r3, #31
 800377c:	d405      	bmi.n	800378a <_vfiprintf_r+0x1fe>
 800377e:	89ab      	ldrh	r3, [r5, #12]
 8003780:	059a      	lsls	r2, r3, #22
 8003782:	d402      	bmi.n	800378a <_vfiprintf_r+0x1fe>
 8003784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003786:	f7ff fdd3 	bl	8003330 <__retarget_lock_release_recursive>
 800378a:	89ab      	ldrh	r3, [r5, #12]
 800378c:	065b      	lsls	r3, r3, #25
 800378e:	f53f af1f 	bmi.w	80035d0 <_vfiprintf_r+0x44>
 8003792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003794:	e71e      	b.n	80035d4 <_vfiprintf_r+0x48>
 8003796:	ab03      	add	r3, sp, #12
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	462a      	mov	r2, r5
 800379c:	4630      	mov	r0, r6
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <_vfiprintf_r+0x22c>)
 80037a0:	a904      	add	r1, sp, #16
 80037a2:	f000 f87d 	bl	80038a0 <_printf_i>
 80037a6:	e7e4      	b.n	8003772 <_vfiprintf_r+0x1e6>
 80037a8:	08003e62 	.word	0x08003e62
 80037ac:	08003e68 	.word	0x08003e68
 80037b0:	08003e6c 	.word	0x08003e6c
 80037b4:	00000000 	.word	0x00000000
 80037b8:	08003567 	.word	0x08003567

080037bc <_printf_common>:
 80037bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c0:	4616      	mov	r6, r2
 80037c2:	4698      	mov	r8, r3
 80037c4:	688a      	ldr	r2, [r1, #8]
 80037c6:	690b      	ldr	r3, [r1, #16]
 80037c8:	4607      	mov	r7, r0
 80037ca:	4293      	cmp	r3, r2
 80037cc:	bfb8      	it	lt
 80037ce:	4613      	movlt	r3, r2
 80037d0:	6033      	str	r3, [r6, #0]
 80037d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037d6:	460c      	mov	r4, r1
 80037d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037dc:	b10a      	cbz	r2, 80037e2 <_printf_common+0x26>
 80037de:	3301      	adds	r3, #1
 80037e0:	6033      	str	r3, [r6, #0]
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	0699      	lsls	r1, r3, #26
 80037e6:	bf42      	ittt	mi
 80037e8:	6833      	ldrmi	r3, [r6, #0]
 80037ea:	3302      	addmi	r3, #2
 80037ec:	6033      	strmi	r3, [r6, #0]
 80037ee:	6825      	ldr	r5, [r4, #0]
 80037f0:	f015 0506 	ands.w	r5, r5, #6
 80037f4:	d106      	bne.n	8003804 <_printf_common+0x48>
 80037f6:	f104 0a19 	add.w	sl, r4, #25
 80037fa:	68e3      	ldr	r3, [r4, #12]
 80037fc:	6832      	ldr	r2, [r6, #0]
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	42ab      	cmp	r3, r5
 8003802:	dc2b      	bgt.n	800385c <_printf_common+0xa0>
 8003804:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003808:	6822      	ldr	r2, [r4, #0]
 800380a:	3b00      	subs	r3, #0
 800380c:	bf18      	it	ne
 800380e:	2301      	movne	r3, #1
 8003810:	0692      	lsls	r2, r2, #26
 8003812:	d430      	bmi.n	8003876 <_printf_common+0xba>
 8003814:	4641      	mov	r1, r8
 8003816:	4638      	mov	r0, r7
 8003818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800381c:	47c8      	blx	r9
 800381e:	3001      	adds	r0, #1
 8003820:	d023      	beq.n	800386a <_printf_common+0xae>
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	6922      	ldr	r2, [r4, #16]
 8003826:	f003 0306 	and.w	r3, r3, #6
 800382a:	2b04      	cmp	r3, #4
 800382c:	bf14      	ite	ne
 800382e:	2500      	movne	r5, #0
 8003830:	6833      	ldreq	r3, [r6, #0]
 8003832:	f04f 0600 	mov.w	r6, #0
 8003836:	bf08      	it	eq
 8003838:	68e5      	ldreq	r5, [r4, #12]
 800383a:	f104 041a 	add.w	r4, r4, #26
 800383e:	bf08      	it	eq
 8003840:	1aed      	subeq	r5, r5, r3
 8003842:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003846:	bf08      	it	eq
 8003848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800384c:	4293      	cmp	r3, r2
 800384e:	bfc4      	itt	gt
 8003850:	1a9b      	subgt	r3, r3, r2
 8003852:	18ed      	addgt	r5, r5, r3
 8003854:	42b5      	cmp	r5, r6
 8003856:	d11a      	bne.n	800388e <_printf_common+0xd2>
 8003858:	2000      	movs	r0, #0
 800385a:	e008      	b.n	800386e <_printf_common+0xb2>
 800385c:	2301      	movs	r3, #1
 800385e:	4652      	mov	r2, sl
 8003860:	4641      	mov	r1, r8
 8003862:	4638      	mov	r0, r7
 8003864:	47c8      	blx	r9
 8003866:	3001      	adds	r0, #1
 8003868:	d103      	bne.n	8003872 <_printf_common+0xb6>
 800386a:	f04f 30ff 	mov.w	r0, #4294967295
 800386e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003872:	3501      	adds	r5, #1
 8003874:	e7c1      	b.n	80037fa <_printf_common+0x3e>
 8003876:	2030      	movs	r0, #48	@ 0x30
 8003878:	18e1      	adds	r1, r4, r3
 800387a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003884:	4422      	add	r2, r4
 8003886:	3302      	adds	r3, #2
 8003888:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800388c:	e7c2      	b.n	8003814 <_printf_common+0x58>
 800388e:	2301      	movs	r3, #1
 8003890:	4622      	mov	r2, r4
 8003892:	4641      	mov	r1, r8
 8003894:	4638      	mov	r0, r7
 8003896:	47c8      	blx	r9
 8003898:	3001      	adds	r0, #1
 800389a:	d0e6      	beq.n	800386a <_printf_common+0xae>
 800389c:	3601      	adds	r6, #1
 800389e:	e7d9      	b.n	8003854 <_printf_common+0x98>

080038a0 <_printf_i>:
 80038a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038a4:	7e0f      	ldrb	r7, [r1, #24]
 80038a6:	4691      	mov	r9, r2
 80038a8:	2f78      	cmp	r7, #120	@ 0x78
 80038aa:	4680      	mov	r8, r0
 80038ac:	460c      	mov	r4, r1
 80038ae:	469a      	mov	sl, r3
 80038b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038b6:	d807      	bhi.n	80038c8 <_printf_i+0x28>
 80038b8:	2f62      	cmp	r7, #98	@ 0x62
 80038ba:	d80a      	bhi.n	80038d2 <_printf_i+0x32>
 80038bc:	2f00      	cmp	r7, #0
 80038be:	f000 80d3 	beq.w	8003a68 <_printf_i+0x1c8>
 80038c2:	2f58      	cmp	r7, #88	@ 0x58
 80038c4:	f000 80ba 	beq.w	8003a3c <_printf_i+0x19c>
 80038c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038d0:	e03a      	b.n	8003948 <_printf_i+0xa8>
 80038d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038d6:	2b15      	cmp	r3, #21
 80038d8:	d8f6      	bhi.n	80038c8 <_printf_i+0x28>
 80038da:	a101      	add	r1, pc, #4	@ (adr r1, 80038e0 <_printf_i+0x40>)
 80038dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038e0:	08003939 	.word	0x08003939
 80038e4:	0800394d 	.word	0x0800394d
 80038e8:	080038c9 	.word	0x080038c9
 80038ec:	080038c9 	.word	0x080038c9
 80038f0:	080038c9 	.word	0x080038c9
 80038f4:	080038c9 	.word	0x080038c9
 80038f8:	0800394d 	.word	0x0800394d
 80038fc:	080038c9 	.word	0x080038c9
 8003900:	080038c9 	.word	0x080038c9
 8003904:	080038c9 	.word	0x080038c9
 8003908:	080038c9 	.word	0x080038c9
 800390c:	08003a4f 	.word	0x08003a4f
 8003910:	08003977 	.word	0x08003977
 8003914:	08003a09 	.word	0x08003a09
 8003918:	080038c9 	.word	0x080038c9
 800391c:	080038c9 	.word	0x080038c9
 8003920:	08003a71 	.word	0x08003a71
 8003924:	080038c9 	.word	0x080038c9
 8003928:	08003977 	.word	0x08003977
 800392c:	080038c9 	.word	0x080038c9
 8003930:	080038c9 	.word	0x080038c9
 8003934:	08003a11 	.word	0x08003a11
 8003938:	6833      	ldr	r3, [r6, #0]
 800393a:	1d1a      	adds	r2, r3, #4
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6032      	str	r2, [r6, #0]
 8003940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003944:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003948:	2301      	movs	r3, #1
 800394a:	e09e      	b.n	8003a8a <_printf_i+0x1ea>
 800394c:	6833      	ldr	r3, [r6, #0]
 800394e:	6820      	ldr	r0, [r4, #0]
 8003950:	1d19      	adds	r1, r3, #4
 8003952:	6031      	str	r1, [r6, #0]
 8003954:	0606      	lsls	r6, r0, #24
 8003956:	d501      	bpl.n	800395c <_printf_i+0xbc>
 8003958:	681d      	ldr	r5, [r3, #0]
 800395a:	e003      	b.n	8003964 <_printf_i+0xc4>
 800395c:	0645      	lsls	r5, r0, #25
 800395e:	d5fb      	bpl.n	8003958 <_printf_i+0xb8>
 8003960:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003964:	2d00      	cmp	r5, #0
 8003966:	da03      	bge.n	8003970 <_printf_i+0xd0>
 8003968:	232d      	movs	r3, #45	@ 0x2d
 800396a:	426d      	negs	r5, r5
 800396c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003970:	230a      	movs	r3, #10
 8003972:	4859      	ldr	r0, [pc, #356]	@ (8003ad8 <_printf_i+0x238>)
 8003974:	e011      	b.n	800399a <_printf_i+0xfa>
 8003976:	6821      	ldr	r1, [r4, #0]
 8003978:	6833      	ldr	r3, [r6, #0]
 800397a:	0608      	lsls	r0, r1, #24
 800397c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003980:	d402      	bmi.n	8003988 <_printf_i+0xe8>
 8003982:	0649      	lsls	r1, r1, #25
 8003984:	bf48      	it	mi
 8003986:	b2ad      	uxthmi	r5, r5
 8003988:	2f6f      	cmp	r7, #111	@ 0x6f
 800398a:	6033      	str	r3, [r6, #0]
 800398c:	bf14      	ite	ne
 800398e:	230a      	movne	r3, #10
 8003990:	2308      	moveq	r3, #8
 8003992:	4851      	ldr	r0, [pc, #324]	@ (8003ad8 <_printf_i+0x238>)
 8003994:	2100      	movs	r1, #0
 8003996:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800399a:	6866      	ldr	r6, [r4, #4]
 800399c:	2e00      	cmp	r6, #0
 800399e:	bfa8      	it	ge
 80039a0:	6821      	ldrge	r1, [r4, #0]
 80039a2:	60a6      	str	r6, [r4, #8]
 80039a4:	bfa4      	itt	ge
 80039a6:	f021 0104 	bicge.w	r1, r1, #4
 80039aa:	6021      	strge	r1, [r4, #0]
 80039ac:	b90d      	cbnz	r5, 80039b2 <_printf_i+0x112>
 80039ae:	2e00      	cmp	r6, #0
 80039b0:	d04b      	beq.n	8003a4a <_printf_i+0x1aa>
 80039b2:	4616      	mov	r6, r2
 80039b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80039b8:	fb03 5711 	mls	r7, r3, r1, r5
 80039bc:	5dc7      	ldrb	r7, [r0, r7]
 80039be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039c2:	462f      	mov	r7, r5
 80039c4:	42bb      	cmp	r3, r7
 80039c6:	460d      	mov	r5, r1
 80039c8:	d9f4      	bls.n	80039b4 <_printf_i+0x114>
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d10b      	bne.n	80039e6 <_printf_i+0x146>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	07df      	lsls	r7, r3, #31
 80039d2:	d508      	bpl.n	80039e6 <_printf_i+0x146>
 80039d4:	6923      	ldr	r3, [r4, #16]
 80039d6:	6861      	ldr	r1, [r4, #4]
 80039d8:	4299      	cmp	r1, r3
 80039da:	bfde      	ittt	le
 80039dc:	2330      	movle	r3, #48	@ 0x30
 80039de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039e6:	1b92      	subs	r2, r2, r6
 80039e8:	6122      	str	r2, [r4, #16]
 80039ea:	464b      	mov	r3, r9
 80039ec:	4621      	mov	r1, r4
 80039ee:	4640      	mov	r0, r8
 80039f0:	f8cd a000 	str.w	sl, [sp]
 80039f4:	aa03      	add	r2, sp, #12
 80039f6:	f7ff fee1 	bl	80037bc <_printf_common>
 80039fa:	3001      	adds	r0, #1
 80039fc:	d14a      	bne.n	8003a94 <_printf_i+0x1f4>
 80039fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003a02:	b004      	add	sp, #16
 8003a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	f043 0320 	orr.w	r3, r3, #32
 8003a0e:	6023      	str	r3, [r4, #0]
 8003a10:	2778      	movs	r7, #120	@ 0x78
 8003a12:	4832      	ldr	r0, [pc, #200]	@ (8003adc <_printf_i+0x23c>)
 8003a14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	6831      	ldr	r1, [r6, #0]
 8003a1c:	061f      	lsls	r7, r3, #24
 8003a1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a22:	d402      	bmi.n	8003a2a <_printf_i+0x18a>
 8003a24:	065f      	lsls	r7, r3, #25
 8003a26:	bf48      	it	mi
 8003a28:	b2ad      	uxthmi	r5, r5
 8003a2a:	6031      	str	r1, [r6, #0]
 8003a2c:	07d9      	lsls	r1, r3, #31
 8003a2e:	bf44      	itt	mi
 8003a30:	f043 0320 	orrmi.w	r3, r3, #32
 8003a34:	6023      	strmi	r3, [r4, #0]
 8003a36:	b11d      	cbz	r5, 8003a40 <_printf_i+0x1a0>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	e7ab      	b.n	8003994 <_printf_i+0xf4>
 8003a3c:	4826      	ldr	r0, [pc, #152]	@ (8003ad8 <_printf_i+0x238>)
 8003a3e:	e7e9      	b.n	8003a14 <_printf_i+0x174>
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	f023 0320 	bic.w	r3, r3, #32
 8003a46:	6023      	str	r3, [r4, #0]
 8003a48:	e7f6      	b.n	8003a38 <_printf_i+0x198>
 8003a4a:	4616      	mov	r6, r2
 8003a4c:	e7bd      	b.n	80039ca <_printf_i+0x12a>
 8003a4e:	6833      	ldr	r3, [r6, #0]
 8003a50:	6825      	ldr	r5, [r4, #0]
 8003a52:	1d18      	adds	r0, r3, #4
 8003a54:	6961      	ldr	r1, [r4, #20]
 8003a56:	6030      	str	r0, [r6, #0]
 8003a58:	062e      	lsls	r6, r5, #24
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	d501      	bpl.n	8003a62 <_printf_i+0x1c2>
 8003a5e:	6019      	str	r1, [r3, #0]
 8003a60:	e002      	b.n	8003a68 <_printf_i+0x1c8>
 8003a62:	0668      	lsls	r0, r5, #25
 8003a64:	d5fb      	bpl.n	8003a5e <_printf_i+0x1be>
 8003a66:	8019      	strh	r1, [r3, #0]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	4616      	mov	r6, r2
 8003a6c:	6123      	str	r3, [r4, #16]
 8003a6e:	e7bc      	b.n	80039ea <_printf_i+0x14a>
 8003a70:	6833      	ldr	r3, [r6, #0]
 8003a72:	2100      	movs	r1, #0
 8003a74:	1d1a      	adds	r2, r3, #4
 8003a76:	6032      	str	r2, [r6, #0]
 8003a78:	681e      	ldr	r6, [r3, #0]
 8003a7a:	6862      	ldr	r2, [r4, #4]
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f000 f96b 	bl	8003d58 <memchr>
 8003a82:	b108      	cbz	r0, 8003a88 <_printf_i+0x1e8>
 8003a84:	1b80      	subs	r0, r0, r6
 8003a86:	6060      	str	r0, [r4, #4]
 8003a88:	6863      	ldr	r3, [r4, #4]
 8003a8a:	6123      	str	r3, [r4, #16]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a92:	e7aa      	b.n	80039ea <_printf_i+0x14a>
 8003a94:	4632      	mov	r2, r6
 8003a96:	4649      	mov	r1, r9
 8003a98:	4640      	mov	r0, r8
 8003a9a:	6923      	ldr	r3, [r4, #16]
 8003a9c:	47d0      	blx	sl
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	d0ad      	beq.n	80039fe <_printf_i+0x15e>
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	079b      	lsls	r3, r3, #30
 8003aa6:	d413      	bmi.n	8003ad0 <_printf_i+0x230>
 8003aa8:	68e0      	ldr	r0, [r4, #12]
 8003aaa:	9b03      	ldr	r3, [sp, #12]
 8003aac:	4298      	cmp	r0, r3
 8003aae:	bfb8      	it	lt
 8003ab0:	4618      	movlt	r0, r3
 8003ab2:	e7a6      	b.n	8003a02 <_printf_i+0x162>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	4632      	mov	r2, r6
 8003ab8:	4649      	mov	r1, r9
 8003aba:	4640      	mov	r0, r8
 8003abc:	47d0      	blx	sl
 8003abe:	3001      	adds	r0, #1
 8003ac0:	d09d      	beq.n	80039fe <_printf_i+0x15e>
 8003ac2:	3501      	adds	r5, #1
 8003ac4:	68e3      	ldr	r3, [r4, #12]
 8003ac6:	9903      	ldr	r1, [sp, #12]
 8003ac8:	1a5b      	subs	r3, r3, r1
 8003aca:	42ab      	cmp	r3, r5
 8003acc:	dcf2      	bgt.n	8003ab4 <_printf_i+0x214>
 8003ace:	e7eb      	b.n	8003aa8 <_printf_i+0x208>
 8003ad0:	2500      	movs	r5, #0
 8003ad2:	f104 0619 	add.w	r6, r4, #25
 8003ad6:	e7f5      	b.n	8003ac4 <_printf_i+0x224>
 8003ad8:	08003e73 	.word	0x08003e73
 8003adc:	08003e84 	.word	0x08003e84

08003ae0 <__sflush_r>:
 8003ae0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae6:	0716      	lsls	r6, r2, #28
 8003ae8:	4605      	mov	r5, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	d454      	bmi.n	8003b98 <__sflush_r+0xb8>
 8003aee:	684b      	ldr	r3, [r1, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	dc02      	bgt.n	8003afa <__sflush_r+0x1a>
 8003af4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	dd48      	ble.n	8003b8c <__sflush_r+0xac>
 8003afa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003afc:	2e00      	cmp	r6, #0
 8003afe:	d045      	beq.n	8003b8c <__sflush_r+0xac>
 8003b00:	2300      	movs	r3, #0
 8003b02:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003b06:	682f      	ldr	r7, [r5, #0]
 8003b08:	6a21      	ldr	r1, [r4, #32]
 8003b0a:	602b      	str	r3, [r5, #0]
 8003b0c:	d030      	beq.n	8003b70 <__sflush_r+0x90>
 8003b0e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b10:	89a3      	ldrh	r3, [r4, #12]
 8003b12:	0759      	lsls	r1, r3, #29
 8003b14:	d505      	bpl.n	8003b22 <__sflush_r+0x42>
 8003b16:	6863      	ldr	r3, [r4, #4]
 8003b18:	1ad2      	subs	r2, r2, r3
 8003b1a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b1c:	b10b      	cbz	r3, 8003b22 <__sflush_r+0x42>
 8003b1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b20:	1ad2      	subs	r2, r2, r3
 8003b22:	2300      	movs	r3, #0
 8003b24:	4628      	mov	r0, r5
 8003b26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b28:	6a21      	ldr	r1, [r4, #32]
 8003b2a:	47b0      	blx	r6
 8003b2c:	1c43      	adds	r3, r0, #1
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	d106      	bne.n	8003b40 <__sflush_r+0x60>
 8003b32:	6829      	ldr	r1, [r5, #0]
 8003b34:	291d      	cmp	r1, #29
 8003b36:	d82b      	bhi.n	8003b90 <__sflush_r+0xb0>
 8003b38:	4a28      	ldr	r2, [pc, #160]	@ (8003bdc <__sflush_r+0xfc>)
 8003b3a:	410a      	asrs	r2, r1
 8003b3c:	07d6      	lsls	r6, r2, #31
 8003b3e:	d427      	bmi.n	8003b90 <__sflush_r+0xb0>
 8003b40:	2200      	movs	r2, #0
 8003b42:	6062      	str	r2, [r4, #4]
 8003b44:	6922      	ldr	r2, [r4, #16]
 8003b46:	04d9      	lsls	r1, r3, #19
 8003b48:	6022      	str	r2, [r4, #0]
 8003b4a:	d504      	bpl.n	8003b56 <__sflush_r+0x76>
 8003b4c:	1c42      	adds	r2, r0, #1
 8003b4e:	d101      	bne.n	8003b54 <__sflush_r+0x74>
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	b903      	cbnz	r3, 8003b56 <__sflush_r+0x76>
 8003b54:	6560      	str	r0, [r4, #84]	@ 0x54
 8003b56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b58:	602f      	str	r7, [r5, #0]
 8003b5a:	b1b9      	cbz	r1, 8003b8c <__sflush_r+0xac>
 8003b5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b60:	4299      	cmp	r1, r3
 8003b62:	d002      	beq.n	8003b6a <__sflush_r+0x8a>
 8003b64:	4628      	mov	r0, r5
 8003b66:	f7ff fbf3 	bl	8003350 <_free_r>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b6e:	e00d      	b.n	8003b8c <__sflush_r+0xac>
 8003b70:	2301      	movs	r3, #1
 8003b72:	4628      	mov	r0, r5
 8003b74:	47b0      	blx	r6
 8003b76:	4602      	mov	r2, r0
 8003b78:	1c50      	adds	r0, r2, #1
 8003b7a:	d1c9      	bne.n	8003b10 <__sflush_r+0x30>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0c6      	beq.n	8003b10 <__sflush_r+0x30>
 8003b82:	2b1d      	cmp	r3, #29
 8003b84:	d001      	beq.n	8003b8a <__sflush_r+0xaa>
 8003b86:	2b16      	cmp	r3, #22
 8003b88:	d11d      	bne.n	8003bc6 <__sflush_r+0xe6>
 8003b8a:	602f      	str	r7, [r5, #0]
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	e021      	b.n	8003bd4 <__sflush_r+0xf4>
 8003b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b94:	b21b      	sxth	r3, r3
 8003b96:	e01a      	b.n	8003bce <__sflush_r+0xee>
 8003b98:	690f      	ldr	r7, [r1, #16]
 8003b9a:	2f00      	cmp	r7, #0
 8003b9c:	d0f6      	beq.n	8003b8c <__sflush_r+0xac>
 8003b9e:	0793      	lsls	r3, r2, #30
 8003ba0:	bf18      	it	ne
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	680e      	ldr	r6, [r1, #0]
 8003ba6:	bf08      	it	eq
 8003ba8:	694b      	ldreq	r3, [r1, #20]
 8003baa:	1bf6      	subs	r6, r6, r7
 8003bac:	600f      	str	r7, [r1, #0]
 8003bae:	608b      	str	r3, [r1, #8]
 8003bb0:	2e00      	cmp	r6, #0
 8003bb2:	ddeb      	ble.n	8003b8c <__sflush_r+0xac>
 8003bb4:	4633      	mov	r3, r6
 8003bb6:	463a      	mov	r2, r7
 8003bb8:	4628      	mov	r0, r5
 8003bba:	6a21      	ldr	r1, [r4, #32]
 8003bbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003bc0:	47e0      	blx	ip
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	dc07      	bgt.n	8003bd6 <__sflush_r+0xf6>
 8003bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bce:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd2:	81a3      	strh	r3, [r4, #12]
 8003bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bd6:	4407      	add	r7, r0
 8003bd8:	1a36      	subs	r6, r6, r0
 8003bda:	e7e9      	b.n	8003bb0 <__sflush_r+0xd0>
 8003bdc:	dfbffffe 	.word	0xdfbffffe

08003be0 <_fflush_r>:
 8003be0:	b538      	push	{r3, r4, r5, lr}
 8003be2:	690b      	ldr	r3, [r1, #16]
 8003be4:	4605      	mov	r5, r0
 8003be6:	460c      	mov	r4, r1
 8003be8:	b913      	cbnz	r3, 8003bf0 <_fflush_r+0x10>
 8003bea:	2500      	movs	r5, #0
 8003bec:	4628      	mov	r0, r5
 8003bee:	bd38      	pop	{r3, r4, r5, pc}
 8003bf0:	b118      	cbz	r0, 8003bfa <_fflush_r+0x1a>
 8003bf2:	6a03      	ldr	r3, [r0, #32]
 8003bf4:	b90b      	cbnz	r3, 8003bfa <_fflush_r+0x1a>
 8003bf6:	f7ff f9a3 	bl	8002f40 <__sinit>
 8003bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f3      	beq.n	8003bea <_fflush_r+0xa>
 8003c02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c04:	07d0      	lsls	r0, r2, #31
 8003c06:	d404      	bmi.n	8003c12 <_fflush_r+0x32>
 8003c08:	0599      	lsls	r1, r3, #22
 8003c0a:	d402      	bmi.n	8003c12 <_fflush_r+0x32>
 8003c0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c0e:	f7ff fb8e 	bl	800332e <__retarget_lock_acquire_recursive>
 8003c12:	4628      	mov	r0, r5
 8003c14:	4621      	mov	r1, r4
 8003c16:	f7ff ff63 	bl	8003ae0 <__sflush_r>
 8003c1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c1c:	4605      	mov	r5, r0
 8003c1e:	07da      	lsls	r2, r3, #31
 8003c20:	d4e4      	bmi.n	8003bec <_fflush_r+0xc>
 8003c22:	89a3      	ldrh	r3, [r4, #12]
 8003c24:	059b      	lsls	r3, r3, #22
 8003c26:	d4e1      	bmi.n	8003bec <_fflush_r+0xc>
 8003c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c2a:	f7ff fb81 	bl	8003330 <__retarget_lock_release_recursive>
 8003c2e:	e7dd      	b.n	8003bec <_fflush_r+0xc>

08003c30 <__swhatbuf_r>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	460c      	mov	r4, r1
 8003c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c38:	4615      	mov	r5, r2
 8003c3a:	2900      	cmp	r1, #0
 8003c3c:	461e      	mov	r6, r3
 8003c3e:	b096      	sub	sp, #88	@ 0x58
 8003c40:	da0c      	bge.n	8003c5c <__swhatbuf_r+0x2c>
 8003c42:	89a3      	ldrh	r3, [r4, #12]
 8003c44:	2100      	movs	r1, #0
 8003c46:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003c4a:	bf14      	ite	ne
 8003c4c:	2340      	movne	r3, #64	@ 0x40
 8003c4e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003c52:	2000      	movs	r0, #0
 8003c54:	6031      	str	r1, [r6, #0]
 8003c56:	602b      	str	r3, [r5, #0]
 8003c58:	b016      	add	sp, #88	@ 0x58
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}
 8003c5c:	466a      	mov	r2, sp
 8003c5e:	f000 f849 	bl	8003cf4 <_fstat_r>
 8003c62:	2800      	cmp	r0, #0
 8003c64:	dbed      	blt.n	8003c42 <__swhatbuf_r+0x12>
 8003c66:	9901      	ldr	r1, [sp, #4]
 8003c68:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003c6c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003c70:	4259      	negs	r1, r3
 8003c72:	4159      	adcs	r1, r3
 8003c74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c78:	e7eb      	b.n	8003c52 <__swhatbuf_r+0x22>

08003c7a <__smakebuf_r>:
 8003c7a:	898b      	ldrh	r3, [r1, #12]
 8003c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c7e:	079d      	lsls	r5, r3, #30
 8003c80:	4606      	mov	r6, r0
 8003c82:	460c      	mov	r4, r1
 8003c84:	d507      	bpl.n	8003c96 <__smakebuf_r+0x1c>
 8003c86:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003c8a:	6023      	str	r3, [r4, #0]
 8003c8c:	6123      	str	r3, [r4, #16]
 8003c8e:	2301      	movs	r3, #1
 8003c90:	6163      	str	r3, [r4, #20]
 8003c92:	b003      	add	sp, #12
 8003c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c96:	466a      	mov	r2, sp
 8003c98:	ab01      	add	r3, sp, #4
 8003c9a:	f7ff ffc9 	bl	8003c30 <__swhatbuf_r>
 8003c9e:	9f00      	ldr	r7, [sp, #0]
 8003ca0:	4605      	mov	r5, r0
 8003ca2:	4639      	mov	r1, r7
 8003ca4:	4630      	mov	r0, r6
 8003ca6:	f7ff fbbd 	bl	8003424 <_malloc_r>
 8003caa:	b948      	cbnz	r0, 8003cc0 <__smakebuf_r+0x46>
 8003cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cb0:	059a      	lsls	r2, r3, #22
 8003cb2:	d4ee      	bmi.n	8003c92 <__smakebuf_r+0x18>
 8003cb4:	f023 0303 	bic.w	r3, r3, #3
 8003cb8:	f043 0302 	orr.w	r3, r3, #2
 8003cbc:	81a3      	strh	r3, [r4, #12]
 8003cbe:	e7e2      	b.n	8003c86 <__smakebuf_r+0xc>
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cca:	81a3      	strh	r3, [r4, #12]
 8003ccc:	9b01      	ldr	r3, [sp, #4]
 8003cce:	6020      	str	r0, [r4, #0]
 8003cd0:	b15b      	cbz	r3, 8003cea <__smakebuf_r+0x70>
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cd8:	f000 f81e 	bl	8003d18 <_isatty_r>
 8003cdc:	b128      	cbz	r0, 8003cea <__smakebuf_r+0x70>
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	f023 0303 	bic.w	r3, r3, #3
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	81a3      	strh	r3, [r4, #12]
 8003cea:	89a3      	ldrh	r3, [r4, #12]
 8003cec:	431d      	orrs	r5, r3
 8003cee:	81a5      	strh	r5, [r4, #12]
 8003cf0:	e7cf      	b.n	8003c92 <__smakebuf_r+0x18>
	...

08003cf4 <_fstat_r>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	4d06      	ldr	r5, [pc, #24]	@ (8003d14 <_fstat_r+0x20>)
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	4608      	mov	r0, r1
 8003cfe:	4611      	mov	r1, r2
 8003d00:	602b      	str	r3, [r5, #0]
 8003d02:	f7fc fe0b 	bl	800091c <_fstat>
 8003d06:	1c43      	adds	r3, r0, #1
 8003d08:	d102      	bne.n	8003d10 <_fstat_r+0x1c>
 8003d0a:	682b      	ldr	r3, [r5, #0]
 8003d0c:	b103      	cbz	r3, 8003d10 <_fstat_r+0x1c>
 8003d0e:	6023      	str	r3, [r4, #0]
 8003d10:	bd38      	pop	{r3, r4, r5, pc}
 8003d12:	bf00      	nop
 8003d14:	20000238 	.word	0x20000238

08003d18 <_isatty_r>:
 8003d18:	b538      	push	{r3, r4, r5, lr}
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	4d05      	ldr	r5, [pc, #20]	@ (8003d34 <_isatty_r+0x1c>)
 8003d1e:	4604      	mov	r4, r0
 8003d20:	4608      	mov	r0, r1
 8003d22:	602b      	str	r3, [r5, #0]
 8003d24:	f7fc fe09 	bl	800093a <_isatty>
 8003d28:	1c43      	adds	r3, r0, #1
 8003d2a:	d102      	bne.n	8003d32 <_isatty_r+0x1a>
 8003d2c:	682b      	ldr	r3, [r5, #0]
 8003d2e:	b103      	cbz	r3, 8003d32 <_isatty_r+0x1a>
 8003d30:	6023      	str	r3, [r4, #0]
 8003d32:	bd38      	pop	{r3, r4, r5, pc}
 8003d34:	20000238 	.word	0x20000238

08003d38 <_sbrk_r>:
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	4d05      	ldr	r5, [pc, #20]	@ (8003d54 <_sbrk_r+0x1c>)
 8003d3e:	4604      	mov	r4, r0
 8003d40:	4608      	mov	r0, r1
 8003d42:	602b      	str	r3, [r5, #0]
 8003d44:	f7fc fe10 	bl	8000968 <_sbrk>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d102      	bne.n	8003d52 <_sbrk_r+0x1a>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	b103      	cbz	r3, 8003d52 <_sbrk_r+0x1a>
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	bd38      	pop	{r3, r4, r5, pc}
 8003d54:	20000238 	.word	0x20000238

08003d58 <memchr>:
 8003d58:	4603      	mov	r3, r0
 8003d5a:	b510      	push	{r4, lr}
 8003d5c:	b2c9      	uxtb	r1, r1
 8003d5e:	4402      	add	r2, r0
 8003d60:	4293      	cmp	r3, r2
 8003d62:	4618      	mov	r0, r3
 8003d64:	d101      	bne.n	8003d6a <memchr+0x12>
 8003d66:	2000      	movs	r0, #0
 8003d68:	e003      	b.n	8003d72 <memchr+0x1a>
 8003d6a:	7804      	ldrb	r4, [r0, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	428c      	cmp	r4, r1
 8003d70:	d1f6      	bne.n	8003d60 <memchr+0x8>
 8003d72:	bd10      	pop	{r4, pc}

08003d74 <_init>:
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	bf00      	nop
 8003d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7a:	bc08      	pop	{r3}
 8003d7c:	469e      	mov	lr, r3
 8003d7e:	4770      	bx	lr

08003d80 <_fini>:
 8003d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d82:	bf00      	nop
 8003d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d86:	bc08      	pop	{r3}
 8003d88:	469e      	mov	lr, r3
 8003d8a:	4770      	bx	lr
