
stm-pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003900  08003900  00004900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003974  08003974  00005064  2**0
                  CONTENTS
  4 .ARM          00000008  08003974  08003974  00004974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800397c  0800397c  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800397c  0800397c  0000497c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003980  08003980  00004980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08003984  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000064  080039e8  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  080039e8  0000528c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092af  00000000  00000000  0000508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2c  00000000  00000000  0000e33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0000fd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000643  00000000  00000000  000105a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016882  00000000  00000000  00010be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b27  00000000  00000000  00027465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082f9d  00000000  00000000  00030f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3f29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f8  00000000  00000000  000b3f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000b6564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080038e8 	.word	0x080038e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080038e8 	.word	0x080038e8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08a      	sub	sp, #40	@ 0x28
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fba7 	bl	80008b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f82b 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8e3 	bl	8000334 <MX_GPIO_Init>
  MX_CAN_Init();
 800016e:	f000 f867 	bl	8000240 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8b5 	bl	80002e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000176:	480e      	ldr	r0, [pc, #56]	@ (80001b0 <main+0x54>)
 8000178:	f000 fdc2 	bl	8000d00 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800017c:	2110      	movs	r1, #16
 800017e:	480c      	ldr	r0, [pc, #48]	@ (80001b0 <main+0x54>)
 8000180:	f000 ff23 	bl	8000fca <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 8000184:	2201      	movs	r2, #1
 8000186:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800018a:	480a      	ldr	r0, [pc, #40]	@ (80001b4 <main+0x58>)
 800018c:	f001 fcaa 	bl	8001ae4 <HAL_GPIO_WritePin>
  while (1)
  {

	  int oscillated_value = oscillate_value();
 8000190:	f000 f944 	bl	800041c <oscillate_value>
 8000194:	6278      	str	r0, [r7, #36]	@ 0x24

	  char command[32];
	  snprintf(command, sizeof(command), "rpmbar.val=%d", gSteering);
 8000196:	4b08      	ldr	r3, [pc, #32]	@ (80001b8 <main+0x5c>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	1d38      	adds	r0, r7, #4
 800019c:	4a07      	ldr	r2, [pc, #28]	@ (80001bc <main+0x60>)
 800019e:	2120      	movs	r1, #32
 80001a0:	f002 fede 	bl	8002f60 <sniprintf>

	  // Send the command to the Nextion display
	  send_to_nextion(command);
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 f910 	bl	80003cc <send_to_nextion>
  {
 80001ac:	bf00      	nop
 80001ae:	e7ef      	b.n	8000190 <main+0x34>
 80001b0:	20000080 	.word	0x20000080
 80001b4:	40011000 	.word	0x40011000
 80001b8:	20000114 	.word	0x20000114
 80001bc:	08003900 	.word	0x08003900

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b090      	sub	sp, #64	@ 0x40
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	2228      	movs	r2, #40	@ 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f002 fefa 	bl	8002fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e2:	2302      	movs	r3, #2
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e6:	2301      	movs	r3, #1
 80001e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ea:	2310      	movs	r3, #16
 80001ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ee:	2302      	movs	r3, #2
 80001f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001f2:	2300      	movs	r3, #0
 80001f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fc:	f107 0318 	add.w	r3, r7, #24
 8000200:	4618      	mov	r0, r3
 8000202:	f001 fc87 	bl	8001b14 <HAL_RCC_OscConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800020c:	f000 f99a 	bl	8000544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000210:	230f      	movs	r3, #15
 8000212:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000214:	2302      	movs	r3, #2
 8000216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2101      	movs	r1, #1
 8000228:	4618      	mov	r0, r3
 800022a:	f001 fef5 	bl	8002018 <HAL_RCC_ClockConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000234:	f000 f986 	bl	8000544 <Error_Handler>
  }
}
 8000238:	bf00      	nop
 800023a:	3740      	adds	r7, #64	@ 0x40
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b08a      	sub	sp, #40	@ 0x28
 8000244:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000246:	4b24      	ldr	r3, [pc, #144]	@ (80002d8 <MX_CAN_Init+0x98>)
 8000248:	4a24      	ldr	r2, [pc, #144]	@ (80002dc <MX_CAN_Init+0x9c>)
 800024a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 800024c:	4b22      	ldr	r3, [pc, #136]	@ (80002d8 <MX_CAN_Init+0x98>)
 800024e:	2203      	movs	r2, #3
 8000250:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000252:	4b21      	ldr	r3, [pc, #132]	@ (80002d8 <MX_CAN_Init+0x98>)
 8000254:	2200      	movs	r2, #0
 8000256:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000258:	4b1f      	ldr	r3, [pc, #124]	@ (80002d8 <MX_CAN_Init+0x98>)
 800025a:	2200      	movs	r2, #0
 800025c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 800025e:	4b1e      	ldr	r3, [pc, #120]	@ (80002d8 <MX_CAN_Init+0x98>)
 8000260:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000264:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000266:	4b1c      	ldr	r3, [pc, #112]	@ (80002d8 <MX_CAN_Init+0x98>)
 8000268:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800026c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800026e:	4b1a      	ldr	r3, [pc, #104]	@ (80002d8 <MX_CAN_Init+0x98>)
 8000270:	2200      	movs	r2, #0
 8000272:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000274:	4b18      	ldr	r3, [pc, #96]	@ (80002d8 <MX_CAN_Init+0x98>)
 8000276:	2200      	movs	r2, #0
 8000278:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800027a:	4b17      	ldr	r3, [pc, #92]	@ (80002d8 <MX_CAN_Init+0x98>)
 800027c:	2200      	movs	r2, #0
 800027e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000280:	4b15      	ldr	r3, [pc, #84]	@ (80002d8 <MX_CAN_Init+0x98>)
 8000282:	2200      	movs	r2, #0
 8000284:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000286:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <MX_CAN_Init+0x98>)
 8000288:	2200      	movs	r2, #0
 800028a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800028c:	4b12      	ldr	r3, [pc, #72]	@ (80002d8 <MX_CAN_Init+0x98>)
 800028e:	2200      	movs	r2, #0
 8000290:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000292:	4811      	ldr	r0, [pc, #68]	@ (80002d8 <MX_CAN_Init+0x98>)
 8000294:	f000 fb70 	bl	8000978 <HAL_CAN_Init>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800029e:	f000 f951 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80002aa:	2301      	movs	r3, #1
 80002ac:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x0000;       // Accept all IDs
 80002ae:	2300      	movs	r3, #0
 80002b0:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0x0000;
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0x0000;   // Accept all IDs
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0x0000;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;  // Assign to FIFO 1
 80002be:	2301      	movs	r3, #1
 80002c0:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 80002c2:	2301      	movs	r3, #1
 80002c4:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 80002c6:	463b      	mov	r3, r7
 80002c8:	4619      	mov	r1, r3
 80002ca:	4803      	ldr	r0, [pc, #12]	@ (80002d8 <MX_CAN_Init+0x98>)
 80002cc:	f000 fc4f 	bl	8000b6e <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 80002d0:	bf00      	nop
 80002d2:	3728      	adds	r7, #40	@ 0x28
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000080 	.word	0x20000080
 80002dc:	40006400 	.word	0x40006400

080002e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e4:	4b11      	ldr	r3, [pc, #68]	@ (800032c <MX_USART1_UART_Init+0x4c>)
 80002e6:	4a12      	ldr	r2, [pc, #72]	@ (8000330 <MX_USART1_UART_Init+0x50>)
 80002e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002ea:	4b10      	ldr	r3, [pc, #64]	@ (800032c <MX_USART1_UART_Init+0x4c>)
 80002ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80002f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	@ (800032c <MX_USART1_UART_Init+0x4c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <MX_USART1_UART_Init+0x4c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002fe:	4b0b      	ldr	r3, [pc, #44]	@ (800032c <MX_USART1_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000304:	4b09      	ldr	r3, [pc, #36]	@ (800032c <MX_USART1_UART_Init+0x4c>)
 8000306:	220c      	movs	r2, #12
 8000308:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030a:	4b08      	ldr	r3, [pc, #32]	@ (800032c <MX_USART1_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000310:	4b06      	ldr	r3, [pc, #24]	@ (800032c <MX_USART1_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000316:	4805      	ldr	r0, [pc, #20]	@ (800032c <MX_USART1_UART_Init+0x4c>)
 8000318:	f002 f80c 	bl	8002334 <HAL_UART_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000322:	f000 f90f 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	200000a8 	.word	0x200000a8
 8000330:	40013800 	.word	0x40013800

08000334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b088      	sub	sp, #32
 8000338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000348:	4b1e      	ldr	r3, [pc, #120]	@ (80003c4 <MX_GPIO_Init+0x90>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a1d      	ldr	r2, [pc, #116]	@ (80003c4 <MX_GPIO_Init+0x90>)
 800034e:	f043 0310 	orr.w	r3, r3, #16
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b1b      	ldr	r3, [pc, #108]	@ (80003c4 <MX_GPIO_Init+0x90>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0310 	and.w	r3, r3, #16
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000360:	4b18      	ldr	r3, [pc, #96]	@ (80003c4 <MX_GPIO_Init+0x90>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a17      	ldr	r2, [pc, #92]	@ (80003c4 <MX_GPIO_Init+0x90>)
 8000366:	f043 0320 	orr.w	r3, r3, #32
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b15      	ldr	r3, [pc, #84]	@ (80003c4 <MX_GPIO_Init+0x90>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0320 	and.w	r3, r3, #32
 8000374:	60bb      	str	r3, [r7, #8]
 8000376:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000378:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <MX_GPIO_Init+0x90>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a11      	ldr	r2, [pc, #68]	@ (80003c4 <MX_GPIO_Init+0x90>)
 800037e:	f043 0304 	orr.w	r3, r3, #4
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <MX_GPIO_Init+0x90>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0304 	and.w	r3, r3, #4
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000396:	480c      	ldr	r0, [pc, #48]	@ (80003c8 <MX_GPIO_Init+0x94>)
 8000398:	f001 fba4 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800039c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a2:	2301      	movs	r3, #1
 80003a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003aa:	2302      	movs	r3, #2
 80003ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	4619      	mov	r1, r3
 80003b4:	4804      	ldr	r0, [pc, #16]	@ (80003c8 <MX_GPIO_Init+0x94>)
 80003b6:	f001 fa11 	bl	80017dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ba:	bf00      	nop
 80003bc:	3720      	adds	r7, #32
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40011000 	.word	0x40011000

080003cc <send_to_nextion>:
}

/*
 * NEXTION UART FUNCTIONS
 */
void send_to_nextion(const char *command) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	// Send the command string
	HAL_UART_Transmit(&huart1, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f7ff feb9 	bl	800014c <strlen>
 80003da:	4603      	mov	r3, r0
 80003dc:	b29a      	uxth	r2, r3
 80003de:	f04f 33ff 	mov.w	r3, #4294967295
 80003e2:	6879      	ldr	r1, [r7, #4]
 80003e4:	480b      	ldr	r0, [pc, #44]	@ (8000414 <send_to_nextion+0x48>)
 80003e6:	f001 fff5 	bl	80023d4 <HAL_UART_Transmit>

	// Send the termination bytes (0xFF 0xFF 0xFF)
	uint8_t termination_bytes[3] = {0xFF, 0xFF, 0xFF};
 80003ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000418 <send_to_nextion+0x4c>)
 80003ec:	f107 030c 	add.w	r3, r7, #12
 80003f0:	6812      	ldr	r2, [r2, #0]
 80003f2:	4611      	mov	r1, r2
 80003f4:	8019      	strh	r1, [r3, #0]
 80003f6:	3302      	adds	r3, #2
 80003f8:	0c12      	lsrs	r2, r2, #16
 80003fa:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, termination_bytes, sizeof(termination_bytes), HAL_MAX_DELAY);
 80003fc:	f107 010c 	add.w	r1, r7, #12
 8000400:	f04f 33ff 	mov.w	r3, #4294967295
 8000404:	2203      	movs	r2, #3
 8000406:	4803      	ldr	r0, [pc, #12]	@ (8000414 <send_to_nextion+0x48>)
 8000408:	f001 ffe4 	bl	80023d4 <HAL_UART_Transmit>
}
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200000a8 	.word	0x200000a8
 8000418:	08003910 	.word	0x08003910

0800041c <oscillate_value>:

int oscillate_value() {
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
    // Update value based on direction
    value += direction * step;
 8000420:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <oscillate_value+0x40>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a0e      	ldr	r2, [pc, #56]	@ (8000460 <oscillate_value+0x44>)
 8000426:	6812      	ldr	r2, [r2, #0]
 8000428:	fb03 f202 	mul.w	r2, r3, r2
 800042c:	4b0d      	ldr	r3, [pc, #52]	@ (8000464 <oscillate_value+0x48>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4413      	add	r3, r2
 8000432:	4a0c      	ldr	r2, [pc, #48]	@ (8000464 <oscillate_value+0x48>)
 8000434:	6013      	str	r3, [r2, #0]

    // Reverse direction at boundaries
    if (value >= 100 || value <= 0) {
 8000436:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <oscillate_value+0x48>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2b63      	cmp	r3, #99	@ 0x63
 800043c:	dc03      	bgt.n	8000446 <oscillate_value+0x2a>
 800043e:	4b09      	ldr	r3, [pc, #36]	@ (8000464 <oscillate_value+0x48>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	dc04      	bgt.n	8000450 <oscillate_value+0x34>
        direction *= -1;
 8000446:	4b05      	ldr	r3, [pc, #20]	@ (800045c <oscillate_value+0x40>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	425b      	negs	r3, r3
 800044c:	4a03      	ldr	r2, [pc, #12]	@ (800045c <oscillate_value+0x40>)
 800044e:	6013      	str	r3, [r2, #0]
    }

    return value;
 8000450:	4b04      	ldr	r3, [pc, #16]	@ (8000464 <oscillate_value+0x48>)
 8000452:	681b      	ldr	r3, [r3, #0]
}
 8000454:	4618      	mov	r0, r3
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	20000000 	.word	0x20000000
 8000460:	20000004 	.word	0x20000004
 8000464:	20000110 	.word	0x20000110

08000468 <HAL_CAN_RxFifo1MsgPendingCallback>:
        // Transmission error
    }
}

// CAN receive interrupt callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000468:	b5b0      	push	{r4, r5, r7, lr}
 800046a:	b08c      	sub	sp, #48	@ 0x30
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000476:	4827      	ldr	r0, [pc, #156]	@ (8000514 <HAL_CAN_RxFifo1MsgPendingCallback+0xac>)
 8000478:	f001 fb34 	bl	8001ae4 <HAL_GPIO_WritePin>
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8]; // Max CAN frame size is 8 bytes

    // Receive the message
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rxHeader, rxData) == HAL_OK) {
 800047c:	f107 0308 	add.w	r3, r7, #8
 8000480:	f107 0210 	add.w	r2, r7, #16
 8000484:	2101      	movs	r1, #1
 8000486:	6878      	ldr	r0, [r7, #4]
 8000488:	f000 fc7e 	bl	8000d88 <HAL_CAN_GetRxMessage>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d135      	bne.n	80004fe <HAL_CAN_RxFifo1MsgPendingCallback+0x96>
    	 // Check if the message ID matches 0x100
		if (rxHeader.StdId == 0x100) {
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000498:	d131      	bne.n	80004fe <HAL_CAN_RxFifo1MsgPendingCallback+0x96>
			static uint8_t buffer[sizeof(telemetry_packet)];
			static uint8_t offset = 0;

			// Copy received data into buffer
			uint8_t bytesToCopy = (rxHeader.DLC < sizeof(telemetry_packet) - offset) ? rxHeader.DLC : sizeof(telemetry_packet) - offset;
 800049a:	4b1f      	ldr	r3, [pc, #124]	@ (8000518 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	f1c3 0220 	rsb	r2, r3, #32
 80004a2:	6a3b      	ldr	r3, [r7, #32]
 80004a4:	4293      	cmp	r3, r2
 80004a6:	bf28      	it	cs
 80004a8:	4613      	movcs	r3, r2
 80004aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			memcpy(&buffer[offset], rxData, bytesToCopy);
 80004ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000518 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	461a      	mov	r2, r3
 80004b4:	4b19      	ldr	r3, [pc, #100]	@ (800051c <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>)
 80004b6:	4413      	add	r3, r2
 80004b8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80004bc:	f107 0108 	add.w	r1, r7, #8
 80004c0:	4618      	mov	r0, r3
 80004c2:	f002 fdb5 	bl	8003030 <memcpy>
			offset += bytesToCopy;
 80004c6:	4b14      	ldr	r3, [pc, #80]	@ (8000518 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>)
 80004c8:	781a      	ldrb	r2, [r3, #0]
 80004ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80004ce:	4413      	add	r3, r2
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4b11      	ldr	r3, [pc, #68]	@ (8000518 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>)
 80004d4:	701a      	strb	r2, [r3, #0]

			// Check if the entire packet has been received
			if (offset >= sizeof(telemetry_packet)) {
 80004d6:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b1f      	cmp	r3, #31
 80004dc:	d90f      	bls.n	80004fe <HAL_CAN_RxFifo1MsgPendingCallback+0x96>
				// Copy buffer into the telemetry_packet struct
				memcpy(&gReceivedTelemetry, buffer, sizeof(telemetry_packet));
 80004de:	4a10      	ldr	r2, [pc, #64]	@ (8000520 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>)
 80004e0:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>)
 80004e2:	4614      	mov	r4, r2
 80004e4:	461d      	mov	r5, r3
 80004e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80004ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				offset = 0; // Reset offset for the next packet
 80004f2:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <HAL_CAN_RxFifo1MsgPendingCallback+0xb0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]

				// Process the received telemetry data
				ProcessTelemetryData(&gReceivedTelemetry);
 80004f8:	4809      	ldr	r0, [pc, #36]	@ (8000520 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>)
 80004fa:	f000 f813 	bl	8000524 <ProcessTelemetryData>
			}
		}
    }

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000504:	4803      	ldr	r0, [pc, #12]	@ (8000514 <HAL_CAN_RxFifo1MsgPendingCallback+0xac>)
 8000506:	f001 faed 	bl	8001ae4 <HAL_GPIO_WritePin>
}
 800050a:	bf00      	nop
 800050c:	3730      	adds	r7, #48	@ 0x30
 800050e:	46bd      	mov	sp, r7
 8000510:	bdb0      	pop	{r4, r5, r7, pc}
 8000512:	bf00      	nop
 8000514:	40011000 	.word	0x40011000
 8000518:	20000118 	.word	0x20000118
 800051c:	2000011c 	.word	0x2000011c
 8000520:	200000f0 	.word	0x200000f0

08000524 <ProcessTelemetryData>:

void ProcessTelemetryData(const telemetry_packet *data) {
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
    // Example: Log or handle telemetry values
    gSteering = data->tSpeedKmh;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	4a03      	ldr	r2, [pc, #12]	@ (8000540 <ProcessTelemetryData+0x1c>)
 8000532:	6013      	str	r3, [r2, #0]


    // Handle the telemetry data as needed
    // For example, update a display, store in memory, or take action
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000114 	.word	0x20000114

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <Error_Handler+0x8>

08000550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000556:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <HAL_MspInit+0x5c>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	4a14      	ldr	r2, [pc, #80]	@ (80005ac <HAL_MspInit+0x5c>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6193      	str	r3, [r2, #24]
 8000562:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <HAL_MspInit+0x5c>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <HAL_MspInit+0x5c>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	4a0e      	ldr	r2, [pc, #56]	@ (80005ac <HAL_MspInit+0x5c>)
 8000574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <HAL_MspInit+0x5c>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <HAL_MspInit+0x60>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	4a04      	ldr	r2, [pc, #16]	@ (80005b0 <HAL_MspInit+0x60>)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010000 	.word	0x40010000

080005b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000680 <HAL_CAN_MspInit+0xcc>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d151      	bne.n	8000678 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000684 <HAL_CAN_MspInit+0xd0>)
 80005d6:	69db      	ldr	r3, [r3, #28]
 80005d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000684 <HAL_CAN_MspInit+0xd0>)
 80005da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005de:	61d3      	str	r3, [r2, #28]
 80005e0:	4b28      	ldr	r3, [pc, #160]	@ (8000684 <HAL_CAN_MspInit+0xd0>)
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ec:	4b25      	ldr	r3, [pc, #148]	@ (8000684 <HAL_CAN_MspInit+0xd0>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a24      	ldr	r2, [pc, #144]	@ (8000684 <HAL_CAN_MspInit+0xd0>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <HAL_CAN_MspInit+0xd0>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000604:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000608:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060e:	2301      	movs	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	4619      	mov	r1, r3
 8000618:	481b      	ldr	r0, [pc, #108]	@ (8000688 <HAL_CAN_MspInit+0xd4>)
 800061a:	f001 f8df 	bl	80017dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800061e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	4815      	ldr	r0, [pc, #84]	@ (8000688 <HAL_CAN_MspInit+0xd4>)
 8000634:	f001 f8d2 	bl	80017dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	2013      	movs	r0, #19
 800063e:	f000 ffe4 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000642:	2013      	movs	r0, #19
 8000644:	f000 fffd 	bl	8001642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2100      	movs	r1, #0
 800064c:	2014      	movs	r0, #20
 800064e:	f000 ffdc 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000652:	2014      	movs	r0, #20
 8000654:	f000 fff5 	bl	8001642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	2015      	movs	r0, #21
 800065e:	f000 ffd4 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000662:	2015      	movs	r0, #21
 8000664:	f000 ffed 	bl	8001642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	2016      	movs	r0, #22
 800066e:	f000 ffcc 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000672:	2016      	movs	r0, #22
 8000674:	f000 ffe5 	bl	8001642 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40006400 	.word	0x40006400
 8000684:	40021000 	.word	0x40021000
 8000688:	40010800 	.word	0x40010800

0800068c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a20      	ldr	r2, [pc, #128]	@ (8000728 <HAL_UART_MspInit+0x9c>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d139      	bne.n	8000720 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <HAL_UART_MspInit+0xa0>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a1e      	ldr	r2, [pc, #120]	@ (800072c <HAL_UART_MspInit+0xa0>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <HAL_UART_MspInit+0xa0>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	4b19      	ldr	r3, [pc, #100]	@ (800072c <HAL_UART_MspInit+0xa0>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a18      	ldr	r2, [pc, #96]	@ (800072c <HAL_UART_MspInit+0xa0>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b16      	ldr	r3, [pc, #88]	@ (800072c <HAL_UART_MspInit+0xa0>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	4619      	mov	r1, r3
 80006f0:	480f      	ldr	r0, [pc, #60]	@ (8000730 <HAL_UART_MspInit+0xa4>)
 80006f2:	f001 f873 	bl	80017dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	4809      	ldr	r0, [pc, #36]	@ (8000730 <HAL_UART_MspInit+0xa4>)
 800070c:	f001 f866 	bl	80017dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2025      	movs	r0, #37	@ 0x25
 8000716:	f000 ff78 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800071a:	2025      	movs	r0, #37	@ 0x25
 800071c:	f000 ff91 	bl	8001642 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40013800 	.word	0x40013800
 800072c:	40021000 	.word	0x40021000
 8000730:	40010800 	.word	0x40010800

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <NMI_Handler+0x4>

0800073c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <HardFault_Handler+0x4>

08000744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <MemManage_Handler+0x4>

0800074c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <UsageFault_Handler+0x4>

0800075c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000784:	f000 f8dc 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000790:	4802      	ldr	r0, [pc, #8]	@ (800079c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000792:	f000 fc3f 	bl	8001014 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000080 	.word	0x20000080

080007a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007a4:	4802      	ldr	r0, [pc, #8]	@ (80007b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007a6:	f000 fc35 	bl	8001014 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000080 	.word	0x20000080

080007b4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007b8:	4802      	ldr	r0, [pc, #8]	@ (80007c4 <CAN1_RX1_IRQHandler+0x10>)
 80007ba:	f000 fc2b 	bl	8001014 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000080 	.word	0x20000080

080007c8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007cc:	4802      	ldr	r0, [pc, #8]	@ (80007d8 <CAN1_SCE_IRQHandler+0x10>)
 80007ce:	f000 fc21 	bl	8001014 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000080 	.word	0x20000080

080007dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007e0:	4802      	ldr	r0, [pc, #8]	@ (80007ec <USART1_IRQHandler+0x10>)
 80007e2:	f001 fe83 	bl	80024ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000a8 	.word	0x200000a8

080007f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f8:	4a14      	ldr	r2, [pc, #80]	@ (800084c <_sbrk+0x5c>)
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <_sbrk+0x60>)
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000804:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <_sbrk+0x64>)
 800080e:	4a12      	ldr	r2, [pc, #72]	@ (8000858 <_sbrk+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	429a      	cmp	r2, r3
 800081e:	d207      	bcs.n	8000830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000820:	f002 fbda 	bl	8002fd8 <__errno>
 8000824:	4603      	mov	r3, r0
 8000826:	220c      	movs	r2, #12
 8000828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	e009      	b.n	8000844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <_sbrk+0x64>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000836:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	4a05      	ldr	r2, [pc, #20]	@ (8000854 <_sbrk+0x64>)
 8000840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20005000 	.word	0x20005000
 8000850:	00000400 	.word	0x00000400
 8000854:	2000013c 	.word	0x2000013c
 8000858:	20000290 	.word	0x20000290

0800085c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000868:	f7ff fff8 	bl	800085c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800086c:	480b      	ldr	r0, [pc, #44]	@ (800089c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800086e:	490c      	ldr	r1, [pc, #48]	@ (80008a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000870:	4a0c      	ldr	r2, [pc, #48]	@ (80008a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a09      	ldr	r2, [pc, #36]	@ (80008a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000884:	4c09      	ldr	r4, [pc, #36]	@ (80008ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000892:	f002 fba7 	bl	8002fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000896:	f7ff fc61 	bl	800015c <main>
  bx lr
 800089a:	4770      	bx	lr
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80008a4:	08003984 	.word	0x08003984
  ldr r2, =_sbss
 80008a8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80008ac:	2000028c 	.word	0x2000028c

080008b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC1_2_IRQHandler>
	...

080008b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <HAL_Init+0x28>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <HAL_Init+0x28>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 fe95 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	200f      	movs	r0, #15
 80008cc:	f000 f808 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff fe3e 	bl	8000550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40022000 	.word	0x40022000

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <HAL_InitTick+0x54>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_InitTick+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 fead 	bl	800165e <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f000 fe75 	bl	800160a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	@ (800093c <HAL_InitTick+0x5c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000008 	.word	0x20000008
 8000938:	20000010 	.word	0x20000010
 800093c:	2000000c 	.word	0x2000000c

08000940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b05      	ldr	r3, [pc, #20]	@ (800095c <HAL_IncTick+0x1c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_IncTick+0x20>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a03      	ldr	r2, [pc, #12]	@ (8000960 <HAL_IncTick+0x20>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	20000010 	.word	0x20000010
 8000960:	20000140 	.word	0x20000140

08000964 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b02      	ldr	r3, [pc, #8]	@ (8000974 <HAL_GetTick+0x10>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000140 	.word	0x20000140

08000978 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d101      	bne.n	800098a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e0ed      	b.n	8000b66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d102      	bne.n	800099c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fe0c 	bl	80005b4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f042 0201 	orr.w	r2, r2, #1
 80009aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009ac:	f7ff ffda 	bl	8000964 <HAL_GetTick>
 80009b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009b2:	e012      	b.n	80009da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009b4:	f7ff ffd6 	bl	8000964 <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	2b0a      	cmp	r3, #10
 80009c0:	d90b      	bls.n	80009da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2205      	movs	r2, #5
 80009d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e0c5      	b.n	8000b66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d0e5      	beq.n	80009b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f022 0202 	bic.w	r2, r2, #2
 80009f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009f8:	f7ff ffb4 	bl	8000964 <HAL_GetTick>
 80009fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009fe:	e012      	b.n	8000a26 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a00:	f7ff ffb0 	bl	8000964 <HAL_GetTick>
 8000a04:	4602      	mov	r2, r0
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	2b0a      	cmp	r3, #10
 8000a0c:	d90b      	bls.n	8000a26 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a12:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2205      	movs	r2, #5
 8000a1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e09f      	b.n	8000b66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1e5      	bne.n	8000a00 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7e1b      	ldrb	r3, [r3, #24]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d108      	bne.n	8000a4e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	e007      	b.n	8000a5e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000a5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	7e5b      	ldrb	r3, [r3, #25]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d108      	bne.n	8000a78 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	e007      	b.n	8000a88 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a86:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7e9b      	ldrb	r3, [r3, #26]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d108      	bne.n	8000aa2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0220 	orr.w	r2, r2, #32
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	e007      	b.n	8000ab2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f022 0220 	bic.w	r2, r2, #32
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7edb      	ldrb	r3, [r3, #27]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d108      	bne.n	8000acc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f022 0210 	bic.w	r2, r2, #16
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	e007      	b.n	8000adc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f042 0210 	orr.w	r2, r2, #16
 8000ada:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7f1b      	ldrb	r3, [r3, #28]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d108      	bne.n	8000af6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f042 0208 	orr.w	r2, r2, #8
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	e007      	b.n	8000b06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 0208 	bic.w	r2, r2, #8
 8000b04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7f5b      	ldrb	r3, [r3, #29]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d108      	bne.n	8000b20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f042 0204 	orr.w	r2, r2, #4
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	e007      	b.n	8000b30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f022 0204 	bic.w	r2, r2, #4
 8000b2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689a      	ldr	r2, [r3, #8]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	691b      	ldr	r3, [r3, #16]
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	ea42 0103 	orr.w	r1, r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	430a      	orrs	r2, r1
 8000b54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b087      	sub	sp, #28
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b84:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b86:	7cfb      	ldrb	r3, [r7, #19]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d003      	beq.n	8000b94 <HAL_CAN_ConfigFilter+0x26>
 8000b8c:	7cfb      	ldrb	r3, [r7, #19]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	f040 80aa 	bne.w	8000ce8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b9a:	f043 0201 	orr.w	r2, r3, #1
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	f003 031f 	and.w	r3, r3, #31
 8000bac:	2201      	movs	r2, #1
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d123      	bne.n	8000c16 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	401a      	ands	r2, r3
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bf0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3248      	adds	r2, #72	@ 0x48
 8000bf6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c0c:	6979      	ldr	r1, [r7, #20]
 8000c0e:	3348      	adds	r3, #72	@ 0x48
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	440b      	add	r3, r1
 8000c14:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d122      	bne.n	8000c64 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	431a      	orrs	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c3e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	3248      	adds	r2, #72	@ 0x48
 8000c44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c58:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c5a:	6979      	ldr	r1, [r7, #20]
 8000c5c:	3348      	adds	r3, #72	@ 0x48
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	440b      	add	r3, r1
 8000c62:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d109      	bne.n	8000c80 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000c7e:	e007      	b.n	8000c90 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d109      	bne.n	8000cac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000caa:	e007      	b.n	8000cbc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	6a1b      	ldr	r3, [r3, #32]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d107      	bne.n	8000cd4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000cda:	f023 0201 	bic.w	r2, r3, #1
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e006      	b.n	8000cf6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
  }
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	371c      	adds	r7, #28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d12e      	bne.n	8000d72 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2202      	movs	r2, #2
 8000d18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f022 0201 	bic.w	r2, r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d2c:	f7ff fe1a 	bl	8000964 <HAL_GetTick>
 8000d30:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d32:	e012      	b.n	8000d5a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d34:	f7ff fe16 	bl	8000964 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b0a      	cmp	r3, #10
 8000d40:	d90b      	bls.n	8000d5a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2205      	movs	r2, #5
 8000d52:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e012      	b.n	8000d80 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1e5      	bne.n	8000d34 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e006      	b.n	8000d80 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d76:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
  }
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d9c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d9e:	7dfb      	ldrb	r3, [r7, #23]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d003      	beq.n	8000dac <HAL_CAN_GetRxMessage+0x24>
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	f040 8103 	bne.w	8000fb2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10e      	bne.n	8000dd0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d116      	bne.n	8000dee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e0f7      	b.n	8000fc0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d107      	bne.n	8000dee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e0e8      	b.n	8000fc0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	331b      	adds	r3, #27
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	4413      	add	r3, r2
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0204 	and.w	r2, r3, #4
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d10c      	bne.n	8000e26 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	331b      	adds	r3, #27
 8000e14:	011b      	lsls	r3, r3, #4
 8000e16:	4413      	add	r3, r2
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	0d5b      	lsrs	r3, r3, #21
 8000e1c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	e00b      	b.n	8000e3e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	331b      	adds	r3, #27
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	4413      	add	r3, r2
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	08db      	lsrs	r3, r3, #3
 8000e36:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	331b      	adds	r3, #27
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	4413      	add	r3, r2
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0202 	and.w	r2, r3, #2
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	331b      	adds	r3, #27
 8000e5c:	011b      	lsls	r3, r3, #4
 8000e5e:	4413      	add	r3, r2
 8000e60:	3304      	adds	r3, #4
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0308 	and.w	r3, r3, #8
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2208      	movs	r2, #8
 8000e70:	611a      	str	r2, [r3, #16]
 8000e72:	e00b      	b.n	8000e8c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	331b      	adds	r3, #27
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	4413      	add	r3, r2
 8000e80:	3304      	adds	r3, #4
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 020f 	and.w	r2, r3, #15
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	331b      	adds	r3, #27
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	4413      	add	r3, r2
 8000e98:	3304      	adds	r3, #4
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	331b      	adds	r3, #27
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	4413      	add	r3, r2
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	0c1b      	lsrs	r3, r3, #16
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	4413      	add	r3, r2
 8000ec6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	4413      	add	r3, r2
 8000edc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	0a1a      	lsrs	r2, r3, #8
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	011b      	lsls	r3, r3, #4
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	0c1a      	lsrs	r2, r3, #16
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	3302      	adds	r3, #2
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	4413      	add	r3, r2
 8000f10:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	0e1a      	lsrs	r2, r3, #24
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	3303      	adds	r3, #3
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	4413      	add	r3, r2
 8000f2a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	3304      	adds	r3, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	4413      	add	r3, r2
 8000f42:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	0a1a      	lsrs	r2, r3, #8
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	3305      	adds	r3, #5
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	0c1a      	lsrs	r2, r3, #16
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3306      	adds	r3, #6
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	4413      	add	r3, r2
 8000f76:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	0e1a      	lsrs	r2, r3, #24
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	3307      	adds	r3, #7
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d108      	bne.n	8000f9e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0220 	orr.w	r2, r2, #32
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	e007      	b.n	8000fae <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	691a      	ldr	r2, [r3, #16]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f042 0220 	orr.w	r2, r2, #32
 8000fac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e006      	b.n	8000fc0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
  }
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b085      	sub	sp, #20
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fda:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d002      	beq.n	8000fe8 <HAL_CAN_ActivateNotification+0x1e>
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d109      	bne.n	8000ffc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6959      	ldr	r1, [r3, #20]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e006      	b.n	800100a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001000:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
  }
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001050:	6a3b      	ldr	r3, [r7, #32]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d07c      	beq.n	8001154 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d023      	beq.n	80010ac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2201      	movs	r2, #1
 800106a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f983 	bl	8001382 <HAL_CAN_TxMailbox0CompleteCallback>
 800107c:	e016      	b.n	80010ac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001090:	e00c      	b.n	80010ac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80010a4:	e002      	b.n	80010ac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 f986 	bl	80013b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d024      	beq.n	8001100 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f962 	bl	8001394 <HAL_CAN_TxMailbox1CompleteCallback>
 80010d0:	e016      	b.n	8001100 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d004      	beq.n	80010e6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80010e4:	e00c      	b.n	8001100 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d004      	beq.n	80010fa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80010f8:	e002      	b.n	8001100 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 f965 	bl	80013ca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d024      	beq.n	8001154 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001112:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f941 	bl	80013a6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001124:	e016      	b.n	8001154 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d004      	beq.n	800113a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
 8001138:	e00c      	b.n	8001154 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
 800114c:	e002      	b.n	8001154 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 f944 	bl	80013dc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00c      	beq.n	8001178 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	2b00      	cmp	r3, #0
 8001166:	d007      	beq.n	8001178 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2210      	movs	r2, #16
 8001176:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2208      	movs	r2, #8
 8001192:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 f933 	bl	8001400 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d009      	beq.n	80011b8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f91b 	bl	80013ee <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00c      	beq.n	80011dc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d007      	beq.n	80011dc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2210      	movs	r2, #16
 80011da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	f003 0320 	and.w	r3, r3, #32
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2208      	movs	r2, #8
 80011f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f90a 	bl	8001412 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	f003 0310 	and.w	r3, r3, #16
 8001204:	2b00      	cmp	r3, #0
 8001206:	d009      	beq.n	800121c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff f926 	bl	8000468 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00b      	beq.n	800123e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2210      	movs	r2, #16
 8001236:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f8f3 	bl	8001424 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2208      	movs	r2, #8
 8001258:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f8eb 	bl	8001436 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001260:	6a3b      	ldr	r3, [r7, #32]
 8001262:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d07b      	beq.n	8001362 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d072      	beq.n	800135a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800127a:	2b00      	cmp	r3, #0
 800127c:	d008      	beq.n	8001290 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001296:	2b00      	cmp	r3, #0
 8001298:	d008      	beq.n	80012ac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d008      	beq.n	80012c8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80012c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d043      	beq.n	800135a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d03e      	beq.n	800135a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80012e2:	2b60      	cmp	r3, #96	@ 0x60
 80012e4:	d02b      	beq.n	800133e <HAL_CAN_IRQHandler+0x32a>
 80012e6:	2b60      	cmp	r3, #96	@ 0x60
 80012e8:	d82e      	bhi.n	8001348 <HAL_CAN_IRQHandler+0x334>
 80012ea:	2b50      	cmp	r3, #80	@ 0x50
 80012ec:	d022      	beq.n	8001334 <HAL_CAN_IRQHandler+0x320>
 80012ee:	2b50      	cmp	r3, #80	@ 0x50
 80012f0:	d82a      	bhi.n	8001348 <HAL_CAN_IRQHandler+0x334>
 80012f2:	2b40      	cmp	r3, #64	@ 0x40
 80012f4:	d019      	beq.n	800132a <HAL_CAN_IRQHandler+0x316>
 80012f6:	2b40      	cmp	r3, #64	@ 0x40
 80012f8:	d826      	bhi.n	8001348 <HAL_CAN_IRQHandler+0x334>
 80012fa:	2b30      	cmp	r3, #48	@ 0x30
 80012fc:	d010      	beq.n	8001320 <HAL_CAN_IRQHandler+0x30c>
 80012fe:	2b30      	cmp	r3, #48	@ 0x30
 8001300:	d822      	bhi.n	8001348 <HAL_CAN_IRQHandler+0x334>
 8001302:	2b10      	cmp	r3, #16
 8001304:	d002      	beq.n	800130c <HAL_CAN_IRQHandler+0x2f8>
 8001306:	2b20      	cmp	r3, #32
 8001308:	d005      	beq.n	8001316 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800130a:	e01d      	b.n	8001348 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	f043 0308 	orr.w	r3, r3, #8
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001314:	e019      	b.n	800134a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800131e:	e014      	b.n	800134a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001322:	f043 0320 	orr.w	r3, r3, #32
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001328:	e00f      	b.n	800134a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001332:	e00a      	b.n	800134a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800133c:	e005      	b.n	800134a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001346:	e000      	b.n	800134a <HAL_CAN_IRQHandler+0x336>
            break;
 8001348:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001358:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2204      	movs	r2, #4
 8001360:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	2b00      	cmp	r3, #0
 8001366:	d008      	beq.n	800137a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f867 	bl	8001448 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	@ 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
	...

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	@ (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4906      	ldr	r1, [pc, #24]	@ (80014f4 <__NVIC_EnableIRQ+0x34>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100

080014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	490c      	ldr	r1, [pc, #48]	@ (8001544 <__NVIC_SetPriority+0x4c>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	@ (8001548 <__NVIC_SetPriority+0x50>)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	3b04      	subs	r3, #4
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	@ 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b03      	subs	r3, #3
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43d9      	mvns	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	4313      	orrs	r3, r2
         );
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	@ 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015c0:	d301      	bcc.n	80015c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00f      	b.n	80015e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c6:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <SysTick_Config+0x40>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ce:	210f      	movs	r1, #15
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f7ff ff90 	bl	80014f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d8:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <SysTick_Config+0x40>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <SysTick_Config+0x40>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	e000e010 	.word	0xe000e010

080015f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff2d 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800161c:	f7ff ff42 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 8001620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff ff90 	bl	800154c <NVIC_EncodePriority>
 800162c:	4602      	mov	r2, r0
 800162e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff5f 	bl	80014f8 <__NVIC_SetPriority>
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff35 	bl	80014c0 <__NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffa2 	bl	80015b0 <SysTick_Config>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001676:	b480      	push	{r7}
 8001678:	b085      	sub	sp, #20
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d008      	beq.n	80016a0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2204      	movs	r2, #4
 8001692:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e020      	b.n	80016e2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 020e 	bic.w	r2, r2, #14
 80016ae:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c8:	2101      	movs	r1, #1
 80016ca:	fa01 f202 	lsl.w	r2, r1, r2
 80016ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d005      	beq.n	8001710 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2204      	movs	r2, #4
 8001708:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
 800170e:	e051      	b.n	80017b4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 020e 	bic.w	r2, r2, #14
 800171e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a22      	ldr	r2, [pc, #136]	@ (80017c0 <HAL_DMA_Abort_IT+0xd4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d029      	beq.n	800178e <HAL_DMA_Abort_IT+0xa2>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a21      	ldr	r2, [pc, #132]	@ (80017c4 <HAL_DMA_Abort_IT+0xd8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d022      	beq.n	800178a <HAL_DMA_Abort_IT+0x9e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1f      	ldr	r2, [pc, #124]	@ (80017c8 <HAL_DMA_Abort_IT+0xdc>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d01a      	beq.n	8001784 <HAL_DMA_Abort_IT+0x98>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1e      	ldr	r2, [pc, #120]	@ (80017cc <HAL_DMA_Abort_IT+0xe0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d012      	beq.n	800177e <HAL_DMA_Abort_IT+0x92>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a1c      	ldr	r2, [pc, #112]	@ (80017d0 <HAL_DMA_Abort_IT+0xe4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00a      	beq.n	8001778 <HAL_DMA_Abort_IT+0x8c>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1b      	ldr	r2, [pc, #108]	@ (80017d4 <HAL_DMA_Abort_IT+0xe8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d102      	bne.n	8001772 <HAL_DMA_Abort_IT+0x86>
 800176c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001770:	e00e      	b.n	8001790 <HAL_DMA_Abort_IT+0xa4>
 8001772:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001776:	e00b      	b.n	8001790 <HAL_DMA_Abort_IT+0xa4>
 8001778:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800177c:	e008      	b.n	8001790 <HAL_DMA_Abort_IT+0xa4>
 800177e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001782:	e005      	b.n	8001790 <HAL_DMA_Abort_IT+0xa4>
 8001784:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001788:	e002      	b.n	8001790 <HAL_DMA_Abort_IT+0xa4>
 800178a:	2310      	movs	r3, #16
 800178c:	e000      	b.n	8001790 <HAL_DMA_Abort_IT+0xa4>
 800178e:	2301      	movs	r3, #1
 8001790:	4a11      	ldr	r2, [pc, #68]	@ (80017d8 <HAL_DMA_Abort_IT+0xec>)
 8001792:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
    } 
  }
  return status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40020008 	.word	0x40020008
 80017c4:	4002001c 	.word	0x4002001c
 80017c8:	40020030 	.word	0x40020030
 80017cc:	40020044 	.word	0x40020044
 80017d0:	40020058 	.word	0x40020058
 80017d4:	4002006c 	.word	0x4002006c
 80017d8:	40020000 	.word	0x40020000

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b08b      	sub	sp, #44	@ 0x2c
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ee:	e169      	b.n	8001ac4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f0:	2201      	movs	r2, #1
 80017f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8158 	bne.w	8001abe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4a9a      	ldr	r2, [pc, #616]	@ (8001a7c <HAL_GPIO_Init+0x2a0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d05e      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 8001818:	4a98      	ldr	r2, [pc, #608]	@ (8001a7c <HAL_GPIO_Init+0x2a0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d875      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 800181e:	4a98      	ldr	r2, [pc, #608]	@ (8001a80 <HAL_GPIO_Init+0x2a4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d058      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 8001824:	4a96      	ldr	r2, [pc, #600]	@ (8001a80 <HAL_GPIO_Init+0x2a4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d86f      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 800182a:	4a96      	ldr	r2, [pc, #600]	@ (8001a84 <HAL_GPIO_Init+0x2a8>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d052      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 8001830:	4a94      	ldr	r2, [pc, #592]	@ (8001a84 <HAL_GPIO_Init+0x2a8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d869      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 8001836:	4a94      	ldr	r2, [pc, #592]	@ (8001a88 <HAL_GPIO_Init+0x2ac>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04c      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 800183c:	4a92      	ldr	r2, [pc, #584]	@ (8001a88 <HAL_GPIO_Init+0x2ac>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d863      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 8001842:	4a92      	ldr	r2, [pc, #584]	@ (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d046      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 8001848:	4a90      	ldr	r2, [pc, #576]	@ (8001a8c <HAL_GPIO_Init+0x2b0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d85d      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 800184e:	2b12      	cmp	r3, #18
 8001850:	d82a      	bhi.n	80018a8 <HAL_GPIO_Init+0xcc>
 8001852:	2b12      	cmp	r3, #18
 8001854:	d859      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 8001856:	a201      	add	r2, pc, #4	@ (adr r2, 800185c <HAL_GPIO_Init+0x80>)
 8001858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185c:	080018d7 	.word	0x080018d7
 8001860:	080018b1 	.word	0x080018b1
 8001864:	080018c3 	.word	0x080018c3
 8001868:	08001905 	.word	0x08001905
 800186c:	0800190b 	.word	0x0800190b
 8001870:	0800190b 	.word	0x0800190b
 8001874:	0800190b 	.word	0x0800190b
 8001878:	0800190b 	.word	0x0800190b
 800187c:	0800190b 	.word	0x0800190b
 8001880:	0800190b 	.word	0x0800190b
 8001884:	0800190b 	.word	0x0800190b
 8001888:	0800190b 	.word	0x0800190b
 800188c:	0800190b 	.word	0x0800190b
 8001890:	0800190b 	.word	0x0800190b
 8001894:	0800190b 	.word	0x0800190b
 8001898:	0800190b 	.word	0x0800190b
 800189c:	0800190b 	.word	0x0800190b
 80018a0:	080018b9 	.word	0x080018b9
 80018a4:	080018cd 	.word	0x080018cd
 80018a8:	4a79      	ldr	r2, [pc, #484]	@ (8001a90 <HAL_GPIO_Init+0x2b4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ae:	e02c      	b.n	800190a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	623b      	str	r3, [r7, #32]
          break;
 80018b6:	e029      	b.n	800190c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	3304      	adds	r3, #4
 80018be:	623b      	str	r3, [r7, #32]
          break;
 80018c0:	e024      	b.n	800190c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	3308      	adds	r3, #8
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e01f      	b.n	800190c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	330c      	adds	r3, #12
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e01a      	b.n	800190c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018de:	2304      	movs	r3, #4
 80018e0:	623b      	str	r3, [r7, #32]
          break;
 80018e2:	e013      	b.n	800190c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d105      	bne.n	80018f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ec:	2308      	movs	r3, #8
 80018ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	611a      	str	r2, [r3, #16]
          break;
 80018f6:	e009      	b.n	800190c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f8:	2308      	movs	r3, #8
 80018fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	615a      	str	r2, [r3, #20]
          break;
 8001902:	e003      	b.n	800190c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
          break;
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x130>
          break;
 800190a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2bff      	cmp	r3, #255	@ 0xff
 8001910:	d801      	bhi.n	8001916 <HAL_GPIO_Init+0x13a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	e001      	b.n	800191a <HAL_GPIO_Init+0x13e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3304      	adds	r3, #4
 800191a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2bff      	cmp	r3, #255	@ 0xff
 8001920:	d802      	bhi.n	8001928 <HAL_GPIO_Init+0x14c>
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	e002      	b.n	800192e <HAL_GPIO_Init+0x152>
 8001928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192a:	3b08      	subs	r3, #8
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	210f      	movs	r1, #15
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	401a      	ands	r2, r3
 8001940:	6a39      	ldr	r1, [r7, #32]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	431a      	orrs	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80b1 	beq.w	8001abe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800195c:	4b4d      	ldr	r3, [pc, #308]	@ (8001a94 <HAL_GPIO_Init+0x2b8>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a4c      	ldr	r2, [pc, #304]	@ (8001a94 <HAL_GPIO_Init+0x2b8>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b4a      	ldr	r3, [pc, #296]	@ (8001a94 <HAL_GPIO_Init+0x2b8>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001974:	4a48      	ldr	r2, [pc, #288]	@ (8001a98 <HAL_GPIO_Init+0x2bc>)
 8001976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001980:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4013      	ands	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a40      	ldr	r2, [pc, #256]	@ (8001a9c <HAL_GPIO_Init+0x2c0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d013      	beq.n	80019c8 <HAL_GPIO_Init+0x1ec>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a3f      	ldr	r2, [pc, #252]	@ (8001aa0 <HAL_GPIO_Init+0x2c4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00d      	beq.n	80019c4 <HAL_GPIO_Init+0x1e8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a3e      	ldr	r2, [pc, #248]	@ (8001aa4 <HAL_GPIO_Init+0x2c8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d007      	beq.n	80019c0 <HAL_GPIO_Init+0x1e4>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a3d      	ldr	r2, [pc, #244]	@ (8001aa8 <HAL_GPIO_Init+0x2cc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_GPIO_Init+0x1e0>
 80019b8:	2303      	movs	r3, #3
 80019ba:	e006      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019bc:	2304      	movs	r3, #4
 80019be:	e004      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e002      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_GPIO_Init+0x1ee>
 80019c8:	2300      	movs	r3, #0
 80019ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019cc:	f002 0203 	and.w	r2, r2, #3
 80019d0:	0092      	lsls	r2, r2, #2
 80019d2:	4093      	lsls	r3, r2
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019da:	492f      	ldr	r1, [pc, #188]	@ (8001a98 <HAL_GPIO_Init+0x2bc>)
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019f4:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	492c      	ldr	r1, [pc, #176]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a02:	4b2a      	ldr	r3, [pc, #168]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	4928      	ldr	r1, [pc, #160]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a1c:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	4922      	ldr	r1, [pc, #136]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60cb      	str	r3, [r1, #12]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a2a:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	491e      	ldr	r1, [pc, #120]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	4918      	ldr	r1, [pc, #96]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a52:	4b16      	ldr	r3, [pc, #88]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	4914      	ldr	r1, [pc, #80]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d021      	beq.n	8001ab0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	490e      	ldr	r1, [pc, #56]	@ (8001aac <HAL_GPIO_Init+0x2d0>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]
 8001a78:	e021      	b.n	8001abe <HAL_GPIO_Init+0x2e2>
 8001a7a:	bf00      	nop
 8001a7c:	10320000 	.word	0x10320000
 8001a80:	10310000 	.word	0x10310000
 8001a84:	10220000 	.word	0x10220000
 8001a88:	10210000 	.word	0x10210000
 8001a8c:	10120000 	.word	0x10120000
 8001a90:	10110000 	.word	0x10110000
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010000 	.word	0x40010000
 8001a9c:	40010800 	.word	0x40010800
 8001aa0:	40010c00 	.word	0x40010c00
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	40011400 	.word	0x40011400
 8001aac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <HAL_GPIO_Init+0x304>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	4909      	ldr	r1, [pc, #36]	@ (8001ae0 <HAL_GPIO_Init+0x304>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f47f ae8e 	bne.w	80017f0 <HAL_GPIO_Init+0x14>
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	372c      	adds	r7, #44	@ 0x2c
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
 8001af0:	4613      	mov	r3, r2
 8001af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001af4:	787b      	ldrb	r3, [r7, #1]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b00:	e003      	b.n	8001b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	041a      	lsls	r2, r3, #16
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	611a      	str	r2, [r3, #16]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e272      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8087 	beq.w	8001c42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b34:	4b92      	ldr	r3, [pc, #584]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d00c      	beq.n	8001b5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b40:	4b8f      	ldr	r3, [pc, #572]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d112      	bne.n	8001b72 <HAL_RCC_OscConfig+0x5e>
 8001b4c:	4b8c      	ldr	r3, [pc, #560]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b58:	d10b      	bne.n	8001b72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5a:	4b89      	ldr	r3, [pc, #548]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d06c      	beq.n	8001c40 <HAL_RCC_OscConfig+0x12c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d168      	bne.n	8001c40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e24c      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x76>
 8001b7c:	4b80      	ldr	r3, [pc, #512]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a7f      	ldr	r2, [pc, #508]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	e02e      	b.n	8001be8 <HAL_RCC_OscConfig+0xd4>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x98>
 8001b92:	4b7b      	ldr	r3, [pc, #492]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a7a      	ldr	r2, [pc, #488]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b78      	ldr	r3, [pc, #480]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a77      	ldr	r2, [pc, #476]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e01d      	b.n	8001be8 <HAL_RCC_OscConfig+0xd4>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0xbc>
 8001bb6:	4b72      	ldr	r3, [pc, #456]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a71      	ldr	r2, [pc, #452]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b6f      	ldr	r3, [pc, #444]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6e      	ldr	r2, [pc, #440]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e00b      	b.n	8001be8 <HAL_RCC_OscConfig+0xd4>
 8001bd0:	4b6b      	ldr	r3, [pc, #428]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a6a      	ldr	r2, [pc, #424]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b68      	ldr	r3, [pc, #416]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a67      	ldr	r2, [pc, #412]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001be6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d013      	beq.n	8001c18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7fe feb8 	bl	8000964 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7fe feb4 	bl	8000964 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	@ 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e200      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0xe4>
 8001c16:	e014      	b.n	8001c42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7fe fea4 	bl	8000964 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7fe fea0 	bl	8000964 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	@ 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e1ec      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c32:	4b53      	ldr	r3, [pc, #332]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x10c>
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d063      	beq.n	8001d16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00b      	beq.n	8001c72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c5a:	4b49      	ldr	r3, [pc, #292]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d11c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x18c>
 8001c66:	4b46      	ldr	r3, [pc, #280]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d116      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c72:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <HAL_RCC_OscConfig+0x176>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e1c0      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4939      	ldr	r1, [pc, #228]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9e:	e03a      	b.n	8001d16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d020      	beq.n	8001cea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca8:	4b36      	ldr	r3, [pc, #216]	@ (8001d84 <HAL_RCC_OscConfig+0x270>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7fe fe59 	bl	8000964 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb6:	f7fe fe55 	bl	8000964 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e1a1      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4927      	ldr	r1, [pc, #156]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	600b      	str	r3, [r1, #0]
 8001ce8:	e015      	b.n	8001d16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cea:	4b26      	ldr	r3, [pc, #152]	@ (8001d84 <HAL_RCC_OscConfig+0x270>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7fe fe38 	bl	8000964 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7fe fe34 	bl	8000964 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e180      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d03a      	beq.n	8001d98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d019      	beq.n	8001d5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_RCC_OscConfig+0x274>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d30:	f7fe fe18 	bl	8000964 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d38:	f7fe fe14 	bl	8000964 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e160      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d56:	2001      	movs	r0, #1
 8001d58:	f000 face 	bl	80022f8 <RCC_Delay>
 8001d5c:	e01c      	b.n	8001d98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <HAL_RCC_OscConfig+0x274>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d64:	f7fe fdfe 	bl	8000964 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6a:	e00f      	b.n	8001d8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7fe fdfa 	bl	8000964 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d908      	bls.n	8001d8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e146      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	42420000 	.word	0x42420000
 8001d88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8c:	4b92      	ldr	r3, [pc, #584]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1e9      	bne.n	8001d6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80a6 	beq.w	8001ef2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001daa:	4b8b      	ldr	r3, [pc, #556]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10d      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4b88      	ldr	r3, [pc, #544]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	4a87      	ldr	r2, [pc, #540]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	61d3      	str	r3, [r2, #28]
 8001dc2:	4b85      	ldr	r3, [pc, #532]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd2:	4b82      	ldr	r3, [pc, #520]	@ (8001fdc <HAL_RCC_OscConfig+0x4c8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d118      	bne.n	8001e10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dde:	4b7f      	ldr	r3, [pc, #508]	@ (8001fdc <HAL_RCC_OscConfig+0x4c8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a7e      	ldr	r2, [pc, #504]	@ (8001fdc <HAL_RCC_OscConfig+0x4c8>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dea:	f7fe fdbb 	bl	8000964 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df2:	f7fe fdb7 	bl	8000964 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b64      	cmp	r3, #100	@ 0x64
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e103      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	4b75      	ldr	r3, [pc, #468]	@ (8001fdc <HAL_RCC_OscConfig+0x4c8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x312>
 8001e18:	4b6f      	ldr	r3, [pc, #444]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4a6e      	ldr	r2, [pc, #440]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6213      	str	r3, [r2, #32]
 8001e24:	e02d      	b.n	8001e82 <HAL_RCC_OscConfig+0x36e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x334>
 8001e2e:	4b6a      	ldr	r3, [pc, #424]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4a69      	ldr	r2, [pc, #420]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	6213      	str	r3, [r2, #32]
 8001e3a:	4b67      	ldr	r3, [pc, #412]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4a66      	ldr	r2, [pc, #408]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	f023 0304 	bic.w	r3, r3, #4
 8001e44:	6213      	str	r3, [r2, #32]
 8001e46:	e01c      	b.n	8001e82 <HAL_RCC_OscConfig+0x36e>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d10c      	bne.n	8001e6a <HAL_RCC_OscConfig+0x356>
 8001e50:	4b61      	ldr	r3, [pc, #388]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4a60      	ldr	r2, [pc, #384]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	f043 0304 	orr.w	r3, r3, #4
 8001e5a:	6213      	str	r3, [r2, #32]
 8001e5c:	4b5e      	ldr	r3, [pc, #376]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4a5d      	ldr	r2, [pc, #372]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6213      	str	r3, [r2, #32]
 8001e68:	e00b      	b.n	8001e82 <HAL_RCC_OscConfig+0x36e>
 8001e6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4a5a      	ldr	r2, [pc, #360]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	6213      	str	r3, [r2, #32]
 8001e76:	4b58      	ldr	r3, [pc, #352]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a57      	ldr	r2, [pc, #348]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d015      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8a:	f7fe fd6b 	bl	8000964 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7fe fd67 	bl	8000964 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e0b1      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0ee      	beq.n	8001e92 <HAL_RCC_OscConfig+0x37e>
 8001eb4:	e014      	b.n	8001ee0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe fd55 	bl	8000964 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7fe fd51 	bl	8000964 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e09b      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed4:	4b40      	ldr	r3, [pc, #256]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1ee      	bne.n	8001ebe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d105      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4a3b      	ldr	r2, [pc, #236]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ef0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8087 	beq.w	800200a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001efc:	4b36      	ldr	r3, [pc, #216]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d061      	beq.n	8001fcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d146      	bne.n	8001f9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f10:	4b33      	ldr	r3, [pc, #204]	@ (8001fe0 <HAL_RCC_OscConfig+0x4cc>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7fe fd25 	bl	8000964 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1e:	f7fe fd21 	bl	8000964 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e06d      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f30:	4b29      	ldr	r3, [pc, #164]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f0      	bne.n	8001f1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f44:	d108      	bne.n	8001f58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f46:	4b24      	ldr	r3, [pc, #144]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	4921      	ldr	r1, [pc, #132]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f58:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a19      	ldr	r1, [r3, #32]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	491b      	ldr	r1, [pc, #108]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <HAL_RCC_OscConfig+0x4cc>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7fe fcf5 	bl	8000964 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7fe fcf1 	bl	8000964 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e03d      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x46a>
 8001f9c:	e035      	b.n	800200a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <HAL_RCC_OscConfig+0x4cc>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fcde 	bl	8000964 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7fe fcda 	bl	8000964 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e026      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x498>
 8001fca:	e01e      	b.n	800200a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e019      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <HAL_RCC_OscConfig+0x500>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002002:	429a      	cmp	r2, r3
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000

08002018 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0d0      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800202c:	4b6a      	ldr	r3, [pc, #424]	@ (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d910      	bls.n	800205c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b67      	ldr	r3, [pc, #412]	@ (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0207 	bic.w	r2, r3, #7
 8002042:	4965      	ldr	r1, [pc, #404]	@ (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b63      	ldr	r3, [pc, #396]	@ (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0b8      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002074:	4b59      	ldr	r3, [pc, #356]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a58      	ldr	r2, [pc, #352]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800207e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800208c:	4b53      	ldr	r3, [pc, #332]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4a52      	ldr	r2, [pc, #328]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002096:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4b50      	ldr	r3, [pc, #320]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	494d      	ldr	r1, [pc, #308]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d040      	beq.n	8002138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b47      	ldr	r3, [pc, #284]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d115      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e07f      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d6:	4b41      	ldr	r3, [pc, #260]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e073      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	4b3d      	ldr	r3, [pc, #244]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06b      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f6:	4b39      	ldr	r3, [pc, #228]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f023 0203 	bic.w	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4936      	ldr	r1, [pc, #216]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002108:	f7fe fc2c 	bl	8000964 <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	e00a      	b.n	8002126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002110:	f7fe fc28 	bl	8000964 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e053      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	4b2d      	ldr	r3, [pc, #180]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 020c 	and.w	r2, r3, #12
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	429a      	cmp	r2, r3
 8002136:	d1eb      	bne.n	8002110 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002138:	4b27      	ldr	r3, [pc, #156]	@ (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d210      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b24      	ldr	r3, [pc, #144]	@ (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 0207 	bic.w	r2, r3, #7
 800214e:	4922      	ldr	r1, [pc, #136]	@ (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b20      	ldr	r3, [pc, #128]	@ (80021d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e032      	b.n	80021ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4916      	ldr	r1, [pc, #88]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002192:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490e      	ldr	r1, [pc, #56]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a6:	f000 f821 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490a      	ldr	r1, [pc, #40]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c8>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	4a09      	ldr	r2, [pc, #36]	@ (80021e4 <HAL_RCC_ClockConfig+0x1cc>)
 80021c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021c2:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <HAL_RCC_ClockConfig+0x1d0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fb8a 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08003914 	.word	0x08003914
 80021e4:	20000008 	.word	0x20000008
 80021e8:	2000000c 	.word	0x2000000c

080021ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002206:	4b1e      	ldr	r3, [pc, #120]	@ (8002280 <HAL_RCC_GetSysClockFreq+0x94>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b04      	cmp	r3, #4
 8002214:	d002      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x30>
 8002216:	2b08      	cmp	r3, #8
 8002218:	d003      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x36>
 800221a:	e027      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800221c:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <HAL_RCC_GetSysClockFreq+0x98>)
 800221e:	613b      	str	r3, [r7, #16]
      break;
 8002220:	e027      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	0c9b      	lsrs	r3, r3, #18
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	4a17      	ldr	r2, [pc, #92]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x9c>)
 800222c:	5cd3      	ldrb	r3, [r2, r3]
 800222e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d010      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800223a:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <HAL_RCC_GetSysClockFreq+0x94>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	0c5b      	lsrs	r3, r3, #17
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	4a11      	ldr	r2, [pc, #68]	@ (800228c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a0d      	ldr	r2, [pc, #52]	@ (8002284 <HAL_RCC_GetSysClockFreq+0x98>)
 800224e:	fb03 f202 	mul.w	r2, r3, r2
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	e004      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a0c      	ldr	r2, [pc, #48]	@ (8002290 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002260:	fb02 f303 	mul.w	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	613b      	str	r3, [r7, #16]
      break;
 800226a:	e002      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800226c:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_RCC_GetSysClockFreq+0x98>)
 800226e:	613b      	str	r3, [r7, #16]
      break;
 8002270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002272:	693b      	ldr	r3, [r7, #16]
}
 8002274:	4618      	mov	r0, r3
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	007a1200 	.word	0x007a1200
 8002288:	0800392c 	.word	0x0800392c
 800228c:	0800393c 	.word	0x0800393c
 8002290:	003d0900 	.word	0x003d0900

08002294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002298:	4b02      	ldr	r3, [pc, #8]	@ (80022a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	20000008 	.word	0x20000008

080022a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022ac:	f7ff fff2 	bl	8002294 <HAL_RCC_GetHCLKFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	4903      	ldr	r1, [pc, #12]	@ (80022cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022be:	5ccb      	ldrb	r3, [r1, r3]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08003924 	.word	0x08003924

080022d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022d4:	f7ff ffde 	bl	8002294 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b05      	ldr	r3, [pc, #20]	@ (80022f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	0adb      	lsrs	r3, r3, #11
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4903      	ldr	r1, [pc, #12]	@ (80022f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08003924 	.word	0x08003924

080022f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002300:	4b0a      	ldr	r3, [pc, #40]	@ (800232c <RCC_Delay+0x34>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <RCC_Delay+0x38>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	0a5b      	lsrs	r3, r3, #9
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002314:	bf00      	nop
  }
  while (Delay --);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1e5a      	subs	r2, r3, #1
 800231a:	60fa      	str	r2, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f9      	bne.n	8002314 <RCC_Delay+0x1c>
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	20000008 	.word	0x20000008
 8002330:	10624dd3 	.word	0x10624dd3

08002334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e042      	b.n	80023cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe f996 	bl	800068c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2224      	movs	r2, #36	@ 0x24
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fd63 	bl	8002e44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800238c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800239c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	@ 0x28
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	4613      	mov	r3, r2
 80023e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d175      	bne.n	80024e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_UART_Transmit+0x2c>
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e06e      	b.n	80024e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2221      	movs	r2, #33	@ 0x21
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002412:	f7fe faa7 	bl	8000964 <HAL_GetTick>
 8002416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	88fa      	ldrh	r2, [r7, #6]
 800241c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800242c:	d108      	bne.n	8002440 <HAL_UART_Transmit+0x6c>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d104      	bne.n	8002440 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	e003      	b.n	8002448 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002448:	e02e      	b.n	80024a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2200      	movs	r2, #0
 8002452:	2180      	movs	r1, #128	@ 0x80
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 fb01 	bl	8002a5c <UART_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e03a      	b.n	80024e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10b      	bne.n	800248a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002480:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	3302      	adds	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	e007      	b.n	800249a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	3301      	adds	r3, #1
 8002498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1cb      	bne.n	800244a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2200      	movs	r2, #0
 80024ba:	2140      	movs	r1, #64	@ 0x40
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 facd 	bl	8002a5c <UART_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e006      	b.n	80024e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	e000      	b.n	80024e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80024e0:	2302      	movs	r3, #2
  }
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3720      	adds	r7, #32
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b0ba      	sub	sp, #232	@ 0xe8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002518:	2300      	movs	r3, #0
 800251a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800251e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800252a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <HAL_UART_IRQHandler+0x66>
 800253e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fbbc 	bl	8002cc8 <UART_Receive_IT>
      return;
 8002550:	e25b      	b.n	8002a0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80de 	beq.w	8002718 <HAL_UART_IRQHandler+0x22c>
 800255c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d106      	bne.n	8002576 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800256c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80d1 	beq.w	8002718 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_UART_IRQHandler+0xae>
 8002582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800259a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_UART_IRQHandler+0xd2>
 80025a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f043 0202 	orr.w	r2, r3, #2
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_UART_IRQHandler+0xf6>
 80025ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	f043 0204 	orr.w	r2, r3, #4
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d011      	beq.n	8002612 <HAL_UART_IRQHandler+0x126>
 80025ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	f043 0208 	orr.w	r2, r3, #8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 81f2 	beq.w	8002a00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800261c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_UART_IRQHandler+0x14e>
 8002628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fb47 	bl	8002cc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf14      	ite	ne
 8002648:	2301      	movne	r3, #1
 800264a:	2300      	moveq	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <HAL_UART_IRQHandler+0x17a>
 800265e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d04f      	beq.n	8002706 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa51 	bl	8002b0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d041      	beq.n	80026fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3314      	adds	r3, #20
 8002680:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002684:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002688:	e853 3f00 	ldrex	r3, [r3]
 800268c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002690:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002698:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3314      	adds	r3, #20
 80026a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80026a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80026aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80026b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80026b6:	e841 2300 	strex	r3, r2, [r1]
 80026ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80026be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1d9      	bne.n	800267a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d013      	beq.n	80026f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d2:	4a7e      	ldr	r2, [pc, #504]	@ (80028cc <HAL_UART_IRQHandler+0x3e0>)
 80026d4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff f806 	bl	80016ec <HAL_DMA_Abort_IT>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d016      	beq.n	8002714 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026f0:	4610      	mov	r0, r2
 80026f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f4:	e00e      	b.n	8002714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f99c 	bl	8002a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026fc:	e00a      	b.n	8002714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f998 	bl	8002a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002704:	e006      	b.n	8002714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f994 	bl	8002a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002712:	e175      	b.n	8002a00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002714:	bf00      	nop
    return;
 8002716:	e173      	b.n	8002a00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	2b01      	cmp	r3, #1
 800271e:	f040 814f 	bne.w	80029c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8148 	beq.w	80029c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8141 	beq.w	80029c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80b6 	beq.w	80028d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002770:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 8145 	beq.w	8002a04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800277e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002782:	429a      	cmp	r2, r3
 8002784:	f080 813e 	bcs.w	8002a04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800278e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b20      	cmp	r3, #32
 8002798:	f000 8088 	beq.w	80028ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	330c      	adds	r3, #12
 80027a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027aa:	e853 3f00 	ldrex	r3, [r3]
 80027ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80027b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	330c      	adds	r3, #12
 80027c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80027c8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80027d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027d8:	e841 2300 	strex	r3, r2, [r1]
 80027dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80027e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1d9      	bne.n	800279c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3314      	adds	r3, #20
 80027ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027f2:	e853 3f00 	ldrex	r3, [r3]
 80027f6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80027f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	3314      	adds	r3, #20
 8002808:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800280c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002810:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002812:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002814:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002818:	e841 2300 	strex	r3, r2, [r1]
 800281c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800281e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e1      	bne.n	80027e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3314      	adds	r3, #20
 800282a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800282e:	e853 3f00 	ldrex	r3, [r3]
 8002832:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002834:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800283a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3314      	adds	r3, #20
 8002844:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002848:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800284a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800284e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002850:	e841 2300 	strex	r3, r2, [r1]
 8002854:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e3      	bne.n	8002824 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	330c      	adds	r3, #12
 8002870:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002874:	e853 3f00 	ldrex	r3, [r3]
 8002878:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800287a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800287c:	f023 0310 	bic.w	r3, r3, #16
 8002880:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	330c      	adds	r3, #12
 800288a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800288e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002890:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002894:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002896:	e841 2300 	strex	r3, r2, [r1]
 800289a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800289c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e3      	bne.n	800286a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fee5 	bl	8001676 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4619      	mov	r1, r3
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f8bf 	bl	8002a46 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028c8:	e09c      	b.n	8002a04 <HAL_UART_IRQHandler+0x518>
 80028ca:	bf00      	nop
 80028cc:	08002bd3 	.word	0x08002bd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028d8:	b29b      	uxth	r3, r3
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 808e 	beq.w	8002a08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 8089 	beq.w	8002a08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	330c      	adds	r3, #12
 80028fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002900:	e853 3f00 	ldrex	r3, [r3]
 8002904:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800290c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	330c      	adds	r3, #12
 8002916:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800291a:	647a      	str	r2, [r7, #68]	@ 0x44
 800291c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002922:	e841 2300 	strex	r3, r2, [r1]
 8002926:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1e3      	bne.n	80028f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3314      	adds	r3, #20
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	e853 3f00 	ldrex	r3, [r3]
 800293c:	623b      	str	r3, [r7, #32]
   return(result);
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3314      	adds	r3, #20
 800294e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002952:	633a      	str	r2, [r7, #48]	@ 0x30
 8002954:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800295a:	e841 2300 	strex	r3, r2, [r1]
 800295e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1e3      	bne.n	800292e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	330c      	adds	r3, #12
 800297a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	e853 3f00 	ldrex	r3, [r3]
 8002982:	60fb      	str	r3, [r7, #12]
   return(result);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0310 	bic.w	r3, r3, #16
 800298a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	330c      	adds	r3, #12
 8002994:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002998:	61fa      	str	r2, [r7, #28]
 800299a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299c:	69b9      	ldr	r1, [r7, #24]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	e841 2300 	strex	r3, r2, [r1]
 80029a4:	617b      	str	r3, [r7, #20]
   return(result);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e3      	bne.n	8002974 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80029b6:	4619      	mov	r1, r3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f844 	bl	8002a46 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029be:	e023      	b.n	8002a08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d009      	beq.n	80029e0 <HAL_UART_IRQHandler+0x4f4>
 80029cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f90e 	bl	8002bfa <UART_Transmit_IT>
    return;
 80029de:	e014      	b.n	8002a0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00e      	beq.n	8002a0a <HAL_UART_IRQHandler+0x51e>
 80029ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f94d 	bl	8002c98 <UART_EndTransmit_IT>
    return;
 80029fe:	e004      	b.n	8002a0a <HAL_UART_IRQHandler+0x51e>
    return;
 8002a00:	bf00      	nop
 8002a02:	e002      	b.n	8002a0a <HAL_UART_IRQHandler+0x51e>
      return;
 8002a04:	bf00      	nop
 8002a06:	e000      	b.n	8002a0a <HAL_UART_IRQHandler+0x51e>
      return;
 8002a08:	bf00      	nop
  }
}
 8002a0a:	37e8      	adds	r7, #232	@ 0xe8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a6c:	e03b      	b.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d037      	beq.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a76:	f7fd ff75 	bl	8000964 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d302      	bcc.n	8002a8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e03a      	b.n	8002b06 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d023      	beq.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b80      	cmp	r3, #128	@ 0x80
 8002aa2:	d020      	beq.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b40      	cmp	r3, #64	@ 0x40
 8002aa8:	d01d      	beq.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d116      	bne.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f81d 	bl	8002b0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2208      	movs	r2, #8
 8002ad8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e00f      	b.n	8002b06 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4013      	ands	r3, r2
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	bf0c      	ite	eq
 8002af6:	2301      	moveq	r3, #1
 8002af8:	2300      	movne	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d0b4      	beq.n	8002a6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b095      	sub	sp, #84	@ 0x54
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	330c      	adds	r3, #12
 8002b1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b20:	e853 3f00 	ldrex	r3, [r3]
 8002b24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	330c      	adds	r3, #12
 8002b34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b36:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b3e:	e841 2300 	strex	r3, r2, [r1]
 8002b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1e5      	bne.n	8002b16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3314      	adds	r3, #20
 8002b50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	e853 3f00 	ldrex	r3, [r3]
 8002b58:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3314      	adds	r3, #20
 8002b68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e5      	bne.n	8002b4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d119      	bne.n	8002bba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f023 0310 	bic.w	r3, r3, #16
 8002b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	330c      	adds	r3, #12
 8002ba4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ba6:	61ba      	str	r2, [r7, #24]
 8002ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002baa:	6979      	ldr	r1, [r7, #20]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	e841 2300 	strex	r3, r2, [r1]
 8002bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e5      	bne.n	8002b86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002bc8:	bf00      	nop
 8002bca:	3754      	adds	r7, #84	@ 0x54
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff ff21 	bl	8002a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b21      	cmp	r3, #33	@ 0x21
 8002c0c:	d13e      	bne.n	8002c8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c16:	d114      	bne.n	8002c42 <UART_Transmit_IT+0x48>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d110      	bne.n	8002c42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	1c9a      	adds	r2, r3, #2
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	621a      	str	r2, [r3, #32]
 8002c40:	e008      	b.n	8002c54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	1c59      	adds	r1, r3, #1
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6211      	str	r1, [r2, #32]
 8002c4c:	781a      	ldrb	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4619      	mov	r1, r3
 8002c62:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10f      	bne.n	8002c88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e000      	b.n	8002c8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
  }
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff fea9 	bl	8002a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08c      	sub	sp, #48	@ 0x30
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b22      	cmp	r3, #34	@ 0x22
 8002cda:	f040 80ae 	bne.w	8002e3a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ce6:	d117      	bne.n	8002d18 <UART_Receive_IT+0x50>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d113      	bne.n	8002d18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	1c9a      	adds	r2, r3, #2
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d16:	e026      	b.n	8002d66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d2a:	d007      	beq.n	8002d3c <UART_Receive_IT+0x74>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <UART_Receive_IT+0x82>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d46:	701a      	strb	r2, [r3, #0]
 8002d48:	e008      	b.n	8002d5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4619      	mov	r1, r3
 8002d74:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d15d      	bne.n	8002e36 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0220 	bic.w	r2, r2, #32
 8002d88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d135      	bne.n	8002e2c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	330c      	adds	r3, #12
 8002dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	e853 3f00 	ldrex	r3, [r3]
 8002dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f023 0310 	bic.w	r3, r3, #16
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	330c      	adds	r3, #12
 8002de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de6:	623a      	str	r2, [r7, #32]
 8002de8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dea:	69f9      	ldr	r1, [r7, #28]
 8002dec:	6a3a      	ldr	r2, [r7, #32]
 8002dee:	e841 2300 	strex	r3, r2, [r1]
 8002df2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1e5      	bne.n	8002dc6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d10a      	bne.n	8002e1e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e22:	4619      	mov	r1, r3
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff fe0e 	bl	8002a46 <HAL_UARTEx_RxEventCallback>
 8002e2a:	e002      	b.n	8002e32 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff fdf8 	bl	8002a22 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e002      	b.n	8002e3c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e000      	b.n	8002e3c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3730      	adds	r7, #48	@ 0x30
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002e7e:	f023 030c 	bic.w	r3, r3, #12
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8002f58 <UART_SetConfig+0x114>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d103      	bne.n	8002eb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002eac:	f7ff fa10 	bl	80022d0 <HAL_RCC_GetPCLK2Freq>
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	e002      	b.n	8002eba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002eb4:	f7ff f9f8 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 8002eb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009a      	lsls	r2, r3, #2
 8002ec4:	441a      	add	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	4a22      	ldr	r2, [pc, #136]	@ (8002f5c <UART_SetConfig+0x118>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	0119      	lsls	r1, r3, #4
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009a      	lsls	r2, r3, #2
 8002ee4:	441a      	add	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f5c <UART_SetConfig+0x118>)
 8002ef2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	2064      	movs	r0, #100	@ 0x64
 8002efa:	fb00 f303 	mul.w	r3, r0, r3
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	3332      	adds	r3, #50	@ 0x32
 8002f04:	4a15      	ldr	r2, [pc, #84]	@ (8002f5c <UART_SetConfig+0x118>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f10:	4419      	add	r1, r3
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009a      	lsls	r2, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f28:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <UART_SetConfig+0x118>)
 8002f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2064      	movs	r0, #100	@ 0x64
 8002f32:	fb00 f303 	mul.w	r3, r0, r3
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	3332      	adds	r3, #50	@ 0x32
 8002f3c:	4a07      	ldr	r2, [pc, #28]	@ (8002f5c <UART_SetConfig+0x118>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	f003 020f 	and.w	r2, r3, #15
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	440a      	add	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40013800 	.word	0x40013800
 8002f5c:	51eb851f 	.word	0x51eb851f

08002f60 <sniprintf>:
 8002f60:	b40c      	push	{r2, r3}
 8002f62:	b530      	push	{r4, r5, lr}
 8002f64:	4b17      	ldr	r3, [pc, #92]	@ (8002fc4 <sniprintf+0x64>)
 8002f66:	1e0c      	subs	r4, r1, #0
 8002f68:	681d      	ldr	r5, [r3, #0]
 8002f6a:	b09d      	sub	sp, #116	@ 0x74
 8002f6c:	da08      	bge.n	8002f80 <sniprintf+0x20>
 8002f6e:	238b      	movs	r3, #139	@ 0x8b
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	602b      	str	r3, [r5, #0]
 8002f76:	b01d      	add	sp, #116	@ 0x74
 8002f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f7c:	b002      	add	sp, #8
 8002f7e:	4770      	bx	lr
 8002f80:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002f84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002f88:	bf0c      	ite	eq
 8002f8a:	4623      	moveq	r3, r4
 8002f8c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002f90:	9304      	str	r3, [sp, #16]
 8002f92:	9307      	str	r3, [sp, #28]
 8002f94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f98:	9002      	str	r0, [sp, #8]
 8002f9a:	9006      	str	r0, [sp, #24]
 8002f9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	ab21      	add	r3, sp, #132	@ 0x84
 8002fa4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002fa6:	a902      	add	r1, sp, #8
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	f000 f9a1 	bl	80032f0 <_svfiprintf_r>
 8002fae:	1c43      	adds	r3, r0, #1
 8002fb0:	bfbc      	itt	lt
 8002fb2:	238b      	movlt	r3, #139	@ 0x8b
 8002fb4:	602b      	strlt	r3, [r5, #0]
 8002fb6:	2c00      	cmp	r4, #0
 8002fb8:	d0dd      	beq.n	8002f76 <sniprintf+0x16>
 8002fba:	2200      	movs	r2, #0
 8002fbc:	9b02      	ldr	r3, [sp, #8]
 8002fbe:	701a      	strb	r2, [r3, #0]
 8002fc0:	e7d9      	b.n	8002f76 <sniprintf+0x16>
 8002fc2:	bf00      	nop
 8002fc4:	20000014 	.word	0x20000014

08002fc8 <memset>:
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4402      	add	r2, r0
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d100      	bne.n	8002fd2 <memset+0xa>
 8002fd0:	4770      	bx	lr
 8002fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fd6:	e7f9      	b.n	8002fcc <memset+0x4>

08002fd8 <__errno>:
 8002fd8:	4b01      	ldr	r3, [pc, #4]	@ (8002fe0 <__errno+0x8>)
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000014 	.word	0x20000014

08002fe4 <__libc_init_array>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	2600      	movs	r6, #0
 8002fe8:	4d0c      	ldr	r5, [pc, #48]	@ (800301c <__libc_init_array+0x38>)
 8002fea:	4c0d      	ldr	r4, [pc, #52]	@ (8003020 <__libc_init_array+0x3c>)
 8002fec:	1b64      	subs	r4, r4, r5
 8002fee:	10a4      	asrs	r4, r4, #2
 8002ff0:	42a6      	cmp	r6, r4
 8002ff2:	d109      	bne.n	8003008 <__libc_init_array+0x24>
 8002ff4:	f000 fc78 	bl	80038e8 <_init>
 8002ff8:	2600      	movs	r6, #0
 8002ffa:	4d0a      	ldr	r5, [pc, #40]	@ (8003024 <__libc_init_array+0x40>)
 8002ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8003028 <__libc_init_array+0x44>)
 8002ffe:	1b64      	subs	r4, r4, r5
 8003000:	10a4      	asrs	r4, r4, #2
 8003002:	42a6      	cmp	r6, r4
 8003004:	d105      	bne.n	8003012 <__libc_init_array+0x2e>
 8003006:	bd70      	pop	{r4, r5, r6, pc}
 8003008:	f855 3b04 	ldr.w	r3, [r5], #4
 800300c:	4798      	blx	r3
 800300e:	3601      	adds	r6, #1
 8003010:	e7ee      	b.n	8002ff0 <__libc_init_array+0xc>
 8003012:	f855 3b04 	ldr.w	r3, [r5], #4
 8003016:	4798      	blx	r3
 8003018:	3601      	adds	r6, #1
 800301a:	e7f2      	b.n	8003002 <__libc_init_array+0x1e>
 800301c:	0800397c 	.word	0x0800397c
 8003020:	0800397c 	.word	0x0800397c
 8003024:	0800397c 	.word	0x0800397c
 8003028:	08003980 	.word	0x08003980

0800302c <__retarget_lock_acquire_recursive>:
 800302c:	4770      	bx	lr

0800302e <__retarget_lock_release_recursive>:
 800302e:	4770      	bx	lr

08003030 <memcpy>:
 8003030:	440a      	add	r2, r1
 8003032:	4291      	cmp	r1, r2
 8003034:	f100 33ff 	add.w	r3, r0, #4294967295
 8003038:	d100      	bne.n	800303c <memcpy+0xc>
 800303a:	4770      	bx	lr
 800303c:	b510      	push	{r4, lr}
 800303e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003042:	4291      	cmp	r1, r2
 8003044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003048:	d1f9      	bne.n	800303e <memcpy+0xe>
 800304a:	bd10      	pop	{r4, pc}

0800304c <_free_r>:
 800304c:	b538      	push	{r3, r4, r5, lr}
 800304e:	4605      	mov	r5, r0
 8003050:	2900      	cmp	r1, #0
 8003052:	d040      	beq.n	80030d6 <_free_r+0x8a>
 8003054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003058:	1f0c      	subs	r4, r1, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	bfb8      	it	lt
 800305e:	18e4      	addlt	r4, r4, r3
 8003060:	f000 f8de 	bl	8003220 <__malloc_lock>
 8003064:	4a1c      	ldr	r2, [pc, #112]	@ (80030d8 <_free_r+0x8c>)
 8003066:	6813      	ldr	r3, [r2, #0]
 8003068:	b933      	cbnz	r3, 8003078 <_free_r+0x2c>
 800306a:	6063      	str	r3, [r4, #4]
 800306c:	6014      	str	r4, [r2, #0]
 800306e:	4628      	mov	r0, r5
 8003070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003074:	f000 b8da 	b.w	800322c <__malloc_unlock>
 8003078:	42a3      	cmp	r3, r4
 800307a:	d908      	bls.n	800308e <_free_r+0x42>
 800307c:	6820      	ldr	r0, [r4, #0]
 800307e:	1821      	adds	r1, r4, r0
 8003080:	428b      	cmp	r3, r1
 8003082:	bf01      	itttt	eq
 8003084:	6819      	ldreq	r1, [r3, #0]
 8003086:	685b      	ldreq	r3, [r3, #4]
 8003088:	1809      	addeq	r1, r1, r0
 800308a:	6021      	streq	r1, [r4, #0]
 800308c:	e7ed      	b.n	800306a <_free_r+0x1e>
 800308e:	461a      	mov	r2, r3
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	b10b      	cbz	r3, 8003098 <_free_r+0x4c>
 8003094:	42a3      	cmp	r3, r4
 8003096:	d9fa      	bls.n	800308e <_free_r+0x42>
 8003098:	6811      	ldr	r1, [r2, #0]
 800309a:	1850      	adds	r0, r2, r1
 800309c:	42a0      	cmp	r0, r4
 800309e:	d10b      	bne.n	80030b8 <_free_r+0x6c>
 80030a0:	6820      	ldr	r0, [r4, #0]
 80030a2:	4401      	add	r1, r0
 80030a4:	1850      	adds	r0, r2, r1
 80030a6:	4283      	cmp	r3, r0
 80030a8:	6011      	str	r1, [r2, #0]
 80030aa:	d1e0      	bne.n	800306e <_free_r+0x22>
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4408      	add	r0, r1
 80030b2:	6010      	str	r0, [r2, #0]
 80030b4:	6053      	str	r3, [r2, #4]
 80030b6:	e7da      	b.n	800306e <_free_r+0x22>
 80030b8:	d902      	bls.n	80030c0 <_free_r+0x74>
 80030ba:	230c      	movs	r3, #12
 80030bc:	602b      	str	r3, [r5, #0]
 80030be:	e7d6      	b.n	800306e <_free_r+0x22>
 80030c0:	6820      	ldr	r0, [r4, #0]
 80030c2:	1821      	adds	r1, r4, r0
 80030c4:	428b      	cmp	r3, r1
 80030c6:	bf01      	itttt	eq
 80030c8:	6819      	ldreq	r1, [r3, #0]
 80030ca:	685b      	ldreq	r3, [r3, #4]
 80030cc:	1809      	addeq	r1, r1, r0
 80030ce:	6021      	streq	r1, [r4, #0]
 80030d0:	6063      	str	r3, [r4, #4]
 80030d2:	6054      	str	r4, [r2, #4]
 80030d4:	e7cb      	b.n	800306e <_free_r+0x22>
 80030d6:	bd38      	pop	{r3, r4, r5, pc}
 80030d8:	20000288 	.word	0x20000288

080030dc <sbrk_aligned>:
 80030dc:	b570      	push	{r4, r5, r6, lr}
 80030de:	4e0f      	ldr	r6, [pc, #60]	@ (800311c <sbrk_aligned+0x40>)
 80030e0:	460c      	mov	r4, r1
 80030e2:	6831      	ldr	r1, [r6, #0]
 80030e4:	4605      	mov	r5, r0
 80030e6:	b911      	cbnz	r1, 80030ee <sbrk_aligned+0x12>
 80030e8:	f000 fbaa 	bl	8003840 <_sbrk_r>
 80030ec:	6030      	str	r0, [r6, #0]
 80030ee:	4621      	mov	r1, r4
 80030f0:	4628      	mov	r0, r5
 80030f2:	f000 fba5 	bl	8003840 <_sbrk_r>
 80030f6:	1c43      	adds	r3, r0, #1
 80030f8:	d103      	bne.n	8003102 <sbrk_aligned+0x26>
 80030fa:	f04f 34ff 	mov.w	r4, #4294967295
 80030fe:	4620      	mov	r0, r4
 8003100:	bd70      	pop	{r4, r5, r6, pc}
 8003102:	1cc4      	adds	r4, r0, #3
 8003104:	f024 0403 	bic.w	r4, r4, #3
 8003108:	42a0      	cmp	r0, r4
 800310a:	d0f8      	beq.n	80030fe <sbrk_aligned+0x22>
 800310c:	1a21      	subs	r1, r4, r0
 800310e:	4628      	mov	r0, r5
 8003110:	f000 fb96 	bl	8003840 <_sbrk_r>
 8003114:	3001      	adds	r0, #1
 8003116:	d1f2      	bne.n	80030fe <sbrk_aligned+0x22>
 8003118:	e7ef      	b.n	80030fa <sbrk_aligned+0x1e>
 800311a:	bf00      	nop
 800311c:	20000284 	.word	0x20000284

08003120 <_malloc_r>:
 8003120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003124:	1ccd      	adds	r5, r1, #3
 8003126:	f025 0503 	bic.w	r5, r5, #3
 800312a:	3508      	adds	r5, #8
 800312c:	2d0c      	cmp	r5, #12
 800312e:	bf38      	it	cc
 8003130:	250c      	movcc	r5, #12
 8003132:	2d00      	cmp	r5, #0
 8003134:	4606      	mov	r6, r0
 8003136:	db01      	blt.n	800313c <_malloc_r+0x1c>
 8003138:	42a9      	cmp	r1, r5
 800313a:	d904      	bls.n	8003146 <_malloc_r+0x26>
 800313c:	230c      	movs	r3, #12
 800313e:	6033      	str	r3, [r6, #0]
 8003140:	2000      	movs	r0, #0
 8003142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800321c <_malloc_r+0xfc>
 800314a:	f000 f869 	bl	8003220 <__malloc_lock>
 800314e:	f8d8 3000 	ldr.w	r3, [r8]
 8003152:	461c      	mov	r4, r3
 8003154:	bb44      	cbnz	r4, 80031a8 <_malloc_r+0x88>
 8003156:	4629      	mov	r1, r5
 8003158:	4630      	mov	r0, r6
 800315a:	f7ff ffbf 	bl	80030dc <sbrk_aligned>
 800315e:	1c43      	adds	r3, r0, #1
 8003160:	4604      	mov	r4, r0
 8003162:	d158      	bne.n	8003216 <_malloc_r+0xf6>
 8003164:	f8d8 4000 	ldr.w	r4, [r8]
 8003168:	4627      	mov	r7, r4
 800316a:	2f00      	cmp	r7, #0
 800316c:	d143      	bne.n	80031f6 <_malloc_r+0xd6>
 800316e:	2c00      	cmp	r4, #0
 8003170:	d04b      	beq.n	800320a <_malloc_r+0xea>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	4639      	mov	r1, r7
 8003176:	4630      	mov	r0, r6
 8003178:	eb04 0903 	add.w	r9, r4, r3
 800317c:	f000 fb60 	bl	8003840 <_sbrk_r>
 8003180:	4581      	cmp	r9, r0
 8003182:	d142      	bne.n	800320a <_malloc_r+0xea>
 8003184:	6821      	ldr	r1, [r4, #0]
 8003186:	4630      	mov	r0, r6
 8003188:	1a6d      	subs	r5, r5, r1
 800318a:	4629      	mov	r1, r5
 800318c:	f7ff ffa6 	bl	80030dc <sbrk_aligned>
 8003190:	3001      	adds	r0, #1
 8003192:	d03a      	beq.n	800320a <_malloc_r+0xea>
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	442b      	add	r3, r5
 8003198:	6023      	str	r3, [r4, #0]
 800319a:	f8d8 3000 	ldr.w	r3, [r8]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	bb62      	cbnz	r2, 80031fc <_malloc_r+0xdc>
 80031a2:	f8c8 7000 	str.w	r7, [r8]
 80031a6:	e00f      	b.n	80031c8 <_malloc_r+0xa8>
 80031a8:	6822      	ldr	r2, [r4, #0]
 80031aa:	1b52      	subs	r2, r2, r5
 80031ac:	d420      	bmi.n	80031f0 <_malloc_r+0xd0>
 80031ae:	2a0b      	cmp	r2, #11
 80031b0:	d917      	bls.n	80031e2 <_malloc_r+0xc2>
 80031b2:	1961      	adds	r1, r4, r5
 80031b4:	42a3      	cmp	r3, r4
 80031b6:	6025      	str	r5, [r4, #0]
 80031b8:	bf18      	it	ne
 80031ba:	6059      	strne	r1, [r3, #4]
 80031bc:	6863      	ldr	r3, [r4, #4]
 80031be:	bf08      	it	eq
 80031c0:	f8c8 1000 	streq.w	r1, [r8]
 80031c4:	5162      	str	r2, [r4, r5]
 80031c6:	604b      	str	r3, [r1, #4]
 80031c8:	4630      	mov	r0, r6
 80031ca:	f000 f82f 	bl	800322c <__malloc_unlock>
 80031ce:	f104 000b 	add.w	r0, r4, #11
 80031d2:	1d23      	adds	r3, r4, #4
 80031d4:	f020 0007 	bic.w	r0, r0, #7
 80031d8:	1ac2      	subs	r2, r0, r3
 80031da:	bf1c      	itt	ne
 80031dc:	1a1b      	subne	r3, r3, r0
 80031de:	50a3      	strne	r3, [r4, r2]
 80031e0:	e7af      	b.n	8003142 <_malloc_r+0x22>
 80031e2:	6862      	ldr	r2, [r4, #4]
 80031e4:	42a3      	cmp	r3, r4
 80031e6:	bf0c      	ite	eq
 80031e8:	f8c8 2000 	streq.w	r2, [r8]
 80031ec:	605a      	strne	r2, [r3, #4]
 80031ee:	e7eb      	b.n	80031c8 <_malloc_r+0xa8>
 80031f0:	4623      	mov	r3, r4
 80031f2:	6864      	ldr	r4, [r4, #4]
 80031f4:	e7ae      	b.n	8003154 <_malloc_r+0x34>
 80031f6:	463c      	mov	r4, r7
 80031f8:	687f      	ldr	r7, [r7, #4]
 80031fa:	e7b6      	b.n	800316a <_malloc_r+0x4a>
 80031fc:	461a      	mov	r2, r3
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	42a3      	cmp	r3, r4
 8003202:	d1fb      	bne.n	80031fc <_malloc_r+0xdc>
 8003204:	2300      	movs	r3, #0
 8003206:	6053      	str	r3, [r2, #4]
 8003208:	e7de      	b.n	80031c8 <_malloc_r+0xa8>
 800320a:	230c      	movs	r3, #12
 800320c:	4630      	mov	r0, r6
 800320e:	6033      	str	r3, [r6, #0]
 8003210:	f000 f80c 	bl	800322c <__malloc_unlock>
 8003214:	e794      	b.n	8003140 <_malloc_r+0x20>
 8003216:	6005      	str	r5, [r0, #0]
 8003218:	e7d6      	b.n	80031c8 <_malloc_r+0xa8>
 800321a:	bf00      	nop
 800321c:	20000288 	.word	0x20000288

08003220 <__malloc_lock>:
 8003220:	4801      	ldr	r0, [pc, #4]	@ (8003228 <__malloc_lock+0x8>)
 8003222:	f7ff bf03 	b.w	800302c <__retarget_lock_acquire_recursive>
 8003226:	bf00      	nop
 8003228:	20000280 	.word	0x20000280

0800322c <__malloc_unlock>:
 800322c:	4801      	ldr	r0, [pc, #4]	@ (8003234 <__malloc_unlock+0x8>)
 800322e:	f7ff befe 	b.w	800302e <__retarget_lock_release_recursive>
 8003232:	bf00      	nop
 8003234:	20000280 	.word	0x20000280

08003238 <__ssputs_r>:
 8003238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800323c:	461f      	mov	r7, r3
 800323e:	688e      	ldr	r6, [r1, #8]
 8003240:	4682      	mov	sl, r0
 8003242:	42be      	cmp	r6, r7
 8003244:	460c      	mov	r4, r1
 8003246:	4690      	mov	r8, r2
 8003248:	680b      	ldr	r3, [r1, #0]
 800324a:	d82d      	bhi.n	80032a8 <__ssputs_r+0x70>
 800324c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003250:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003254:	d026      	beq.n	80032a4 <__ssputs_r+0x6c>
 8003256:	6965      	ldr	r5, [r4, #20]
 8003258:	6909      	ldr	r1, [r1, #16]
 800325a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800325e:	eba3 0901 	sub.w	r9, r3, r1
 8003262:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003266:	1c7b      	adds	r3, r7, #1
 8003268:	444b      	add	r3, r9
 800326a:	106d      	asrs	r5, r5, #1
 800326c:	429d      	cmp	r5, r3
 800326e:	bf38      	it	cc
 8003270:	461d      	movcc	r5, r3
 8003272:	0553      	lsls	r3, r2, #21
 8003274:	d527      	bpl.n	80032c6 <__ssputs_r+0x8e>
 8003276:	4629      	mov	r1, r5
 8003278:	f7ff ff52 	bl	8003120 <_malloc_r>
 800327c:	4606      	mov	r6, r0
 800327e:	b360      	cbz	r0, 80032da <__ssputs_r+0xa2>
 8003280:	464a      	mov	r2, r9
 8003282:	6921      	ldr	r1, [r4, #16]
 8003284:	f7ff fed4 	bl	8003030 <memcpy>
 8003288:	89a3      	ldrh	r3, [r4, #12]
 800328a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800328e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003292:	81a3      	strh	r3, [r4, #12]
 8003294:	6126      	str	r6, [r4, #16]
 8003296:	444e      	add	r6, r9
 8003298:	6026      	str	r6, [r4, #0]
 800329a:	463e      	mov	r6, r7
 800329c:	6165      	str	r5, [r4, #20]
 800329e:	eba5 0509 	sub.w	r5, r5, r9
 80032a2:	60a5      	str	r5, [r4, #8]
 80032a4:	42be      	cmp	r6, r7
 80032a6:	d900      	bls.n	80032aa <__ssputs_r+0x72>
 80032a8:	463e      	mov	r6, r7
 80032aa:	4632      	mov	r2, r6
 80032ac:	4641      	mov	r1, r8
 80032ae:	6820      	ldr	r0, [r4, #0]
 80032b0:	f000 faac 	bl	800380c <memmove>
 80032b4:	2000      	movs	r0, #0
 80032b6:	68a3      	ldr	r3, [r4, #8]
 80032b8:	1b9b      	subs	r3, r3, r6
 80032ba:	60a3      	str	r3, [r4, #8]
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	4433      	add	r3, r6
 80032c0:	6023      	str	r3, [r4, #0]
 80032c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c6:	462a      	mov	r2, r5
 80032c8:	f000 fad8 	bl	800387c <_realloc_r>
 80032cc:	4606      	mov	r6, r0
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d1e0      	bne.n	8003294 <__ssputs_r+0x5c>
 80032d2:	4650      	mov	r0, sl
 80032d4:	6921      	ldr	r1, [r4, #16]
 80032d6:	f7ff feb9 	bl	800304c <_free_r>
 80032da:	230c      	movs	r3, #12
 80032dc:	f8ca 3000 	str.w	r3, [sl]
 80032e0:	89a3      	ldrh	r3, [r4, #12]
 80032e2:	f04f 30ff 	mov.w	r0, #4294967295
 80032e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032ea:	81a3      	strh	r3, [r4, #12]
 80032ec:	e7e9      	b.n	80032c2 <__ssputs_r+0x8a>
	...

080032f0 <_svfiprintf_r>:
 80032f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f4:	4698      	mov	r8, r3
 80032f6:	898b      	ldrh	r3, [r1, #12]
 80032f8:	4607      	mov	r7, r0
 80032fa:	061b      	lsls	r3, r3, #24
 80032fc:	460d      	mov	r5, r1
 80032fe:	4614      	mov	r4, r2
 8003300:	b09d      	sub	sp, #116	@ 0x74
 8003302:	d510      	bpl.n	8003326 <_svfiprintf_r+0x36>
 8003304:	690b      	ldr	r3, [r1, #16]
 8003306:	b973      	cbnz	r3, 8003326 <_svfiprintf_r+0x36>
 8003308:	2140      	movs	r1, #64	@ 0x40
 800330a:	f7ff ff09 	bl	8003120 <_malloc_r>
 800330e:	6028      	str	r0, [r5, #0]
 8003310:	6128      	str	r0, [r5, #16]
 8003312:	b930      	cbnz	r0, 8003322 <_svfiprintf_r+0x32>
 8003314:	230c      	movs	r3, #12
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	b01d      	add	sp, #116	@ 0x74
 800331e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003322:	2340      	movs	r3, #64	@ 0x40
 8003324:	616b      	str	r3, [r5, #20]
 8003326:	2300      	movs	r3, #0
 8003328:	9309      	str	r3, [sp, #36]	@ 0x24
 800332a:	2320      	movs	r3, #32
 800332c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003330:	2330      	movs	r3, #48	@ 0x30
 8003332:	f04f 0901 	mov.w	r9, #1
 8003336:	f8cd 800c 	str.w	r8, [sp, #12]
 800333a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80034d4 <_svfiprintf_r+0x1e4>
 800333e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003342:	4623      	mov	r3, r4
 8003344:	469a      	mov	sl, r3
 8003346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800334a:	b10a      	cbz	r2, 8003350 <_svfiprintf_r+0x60>
 800334c:	2a25      	cmp	r2, #37	@ 0x25
 800334e:	d1f9      	bne.n	8003344 <_svfiprintf_r+0x54>
 8003350:	ebba 0b04 	subs.w	fp, sl, r4
 8003354:	d00b      	beq.n	800336e <_svfiprintf_r+0x7e>
 8003356:	465b      	mov	r3, fp
 8003358:	4622      	mov	r2, r4
 800335a:	4629      	mov	r1, r5
 800335c:	4638      	mov	r0, r7
 800335e:	f7ff ff6b 	bl	8003238 <__ssputs_r>
 8003362:	3001      	adds	r0, #1
 8003364:	f000 80a7 	beq.w	80034b6 <_svfiprintf_r+0x1c6>
 8003368:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800336a:	445a      	add	r2, fp
 800336c:	9209      	str	r2, [sp, #36]	@ 0x24
 800336e:	f89a 3000 	ldrb.w	r3, [sl]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 809f 	beq.w	80034b6 <_svfiprintf_r+0x1c6>
 8003378:	2300      	movs	r3, #0
 800337a:	f04f 32ff 	mov.w	r2, #4294967295
 800337e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003382:	f10a 0a01 	add.w	sl, sl, #1
 8003386:	9304      	str	r3, [sp, #16]
 8003388:	9307      	str	r3, [sp, #28]
 800338a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800338e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003390:	4654      	mov	r4, sl
 8003392:	2205      	movs	r2, #5
 8003394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003398:	484e      	ldr	r0, [pc, #312]	@ (80034d4 <_svfiprintf_r+0x1e4>)
 800339a:	f000 fa61 	bl	8003860 <memchr>
 800339e:	9a04      	ldr	r2, [sp, #16]
 80033a0:	b9d8      	cbnz	r0, 80033da <_svfiprintf_r+0xea>
 80033a2:	06d0      	lsls	r0, r2, #27
 80033a4:	bf44      	itt	mi
 80033a6:	2320      	movmi	r3, #32
 80033a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033ac:	0711      	lsls	r1, r2, #28
 80033ae:	bf44      	itt	mi
 80033b0:	232b      	movmi	r3, #43	@ 0x2b
 80033b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033b6:	f89a 3000 	ldrb.w	r3, [sl]
 80033ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80033bc:	d015      	beq.n	80033ea <_svfiprintf_r+0xfa>
 80033be:	4654      	mov	r4, sl
 80033c0:	2000      	movs	r0, #0
 80033c2:	f04f 0c0a 	mov.w	ip, #10
 80033c6:	9a07      	ldr	r2, [sp, #28]
 80033c8:	4621      	mov	r1, r4
 80033ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033ce:	3b30      	subs	r3, #48	@ 0x30
 80033d0:	2b09      	cmp	r3, #9
 80033d2:	d94b      	bls.n	800346c <_svfiprintf_r+0x17c>
 80033d4:	b1b0      	cbz	r0, 8003404 <_svfiprintf_r+0x114>
 80033d6:	9207      	str	r2, [sp, #28]
 80033d8:	e014      	b.n	8003404 <_svfiprintf_r+0x114>
 80033da:	eba0 0308 	sub.w	r3, r0, r8
 80033de:	fa09 f303 	lsl.w	r3, r9, r3
 80033e2:	4313      	orrs	r3, r2
 80033e4:	46a2      	mov	sl, r4
 80033e6:	9304      	str	r3, [sp, #16]
 80033e8:	e7d2      	b.n	8003390 <_svfiprintf_r+0xa0>
 80033ea:	9b03      	ldr	r3, [sp, #12]
 80033ec:	1d19      	adds	r1, r3, #4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	9103      	str	r1, [sp, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bfbb      	ittet	lt
 80033f6:	425b      	neglt	r3, r3
 80033f8:	f042 0202 	orrlt.w	r2, r2, #2
 80033fc:	9307      	strge	r3, [sp, #28]
 80033fe:	9307      	strlt	r3, [sp, #28]
 8003400:	bfb8      	it	lt
 8003402:	9204      	strlt	r2, [sp, #16]
 8003404:	7823      	ldrb	r3, [r4, #0]
 8003406:	2b2e      	cmp	r3, #46	@ 0x2e
 8003408:	d10a      	bne.n	8003420 <_svfiprintf_r+0x130>
 800340a:	7863      	ldrb	r3, [r4, #1]
 800340c:	2b2a      	cmp	r3, #42	@ 0x2a
 800340e:	d132      	bne.n	8003476 <_svfiprintf_r+0x186>
 8003410:	9b03      	ldr	r3, [sp, #12]
 8003412:	3402      	adds	r4, #2
 8003414:	1d1a      	adds	r2, r3, #4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	9203      	str	r2, [sp, #12]
 800341a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800341e:	9305      	str	r3, [sp, #20]
 8003420:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80034d8 <_svfiprintf_r+0x1e8>
 8003424:	2203      	movs	r2, #3
 8003426:	4650      	mov	r0, sl
 8003428:	7821      	ldrb	r1, [r4, #0]
 800342a:	f000 fa19 	bl	8003860 <memchr>
 800342e:	b138      	cbz	r0, 8003440 <_svfiprintf_r+0x150>
 8003430:	2240      	movs	r2, #64	@ 0x40
 8003432:	9b04      	ldr	r3, [sp, #16]
 8003434:	eba0 000a 	sub.w	r0, r0, sl
 8003438:	4082      	lsls	r2, r0
 800343a:	4313      	orrs	r3, r2
 800343c:	3401      	adds	r4, #1
 800343e:	9304      	str	r3, [sp, #16]
 8003440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003444:	2206      	movs	r2, #6
 8003446:	4825      	ldr	r0, [pc, #148]	@ (80034dc <_svfiprintf_r+0x1ec>)
 8003448:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800344c:	f000 fa08 	bl	8003860 <memchr>
 8003450:	2800      	cmp	r0, #0
 8003452:	d036      	beq.n	80034c2 <_svfiprintf_r+0x1d2>
 8003454:	4b22      	ldr	r3, [pc, #136]	@ (80034e0 <_svfiprintf_r+0x1f0>)
 8003456:	bb1b      	cbnz	r3, 80034a0 <_svfiprintf_r+0x1b0>
 8003458:	9b03      	ldr	r3, [sp, #12]
 800345a:	3307      	adds	r3, #7
 800345c:	f023 0307 	bic.w	r3, r3, #7
 8003460:	3308      	adds	r3, #8
 8003462:	9303      	str	r3, [sp, #12]
 8003464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003466:	4433      	add	r3, r6
 8003468:	9309      	str	r3, [sp, #36]	@ 0x24
 800346a:	e76a      	b.n	8003342 <_svfiprintf_r+0x52>
 800346c:	460c      	mov	r4, r1
 800346e:	2001      	movs	r0, #1
 8003470:	fb0c 3202 	mla	r2, ip, r2, r3
 8003474:	e7a8      	b.n	80033c8 <_svfiprintf_r+0xd8>
 8003476:	2300      	movs	r3, #0
 8003478:	f04f 0c0a 	mov.w	ip, #10
 800347c:	4619      	mov	r1, r3
 800347e:	3401      	adds	r4, #1
 8003480:	9305      	str	r3, [sp, #20]
 8003482:	4620      	mov	r0, r4
 8003484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003488:	3a30      	subs	r2, #48	@ 0x30
 800348a:	2a09      	cmp	r2, #9
 800348c:	d903      	bls.n	8003496 <_svfiprintf_r+0x1a6>
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0c6      	beq.n	8003420 <_svfiprintf_r+0x130>
 8003492:	9105      	str	r1, [sp, #20]
 8003494:	e7c4      	b.n	8003420 <_svfiprintf_r+0x130>
 8003496:	4604      	mov	r4, r0
 8003498:	2301      	movs	r3, #1
 800349a:	fb0c 2101 	mla	r1, ip, r1, r2
 800349e:	e7f0      	b.n	8003482 <_svfiprintf_r+0x192>
 80034a0:	ab03      	add	r3, sp, #12
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	462a      	mov	r2, r5
 80034a6:	4638      	mov	r0, r7
 80034a8:	4b0e      	ldr	r3, [pc, #56]	@ (80034e4 <_svfiprintf_r+0x1f4>)
 80034aa:	a904      	add	r1, sp, #16
 80034ac:	f3af 8000 	nop.w
 80034b0:	1c42      	adds	r2, r0, #1
 80034b2:	4606      	mov	r6, r0
 80034b4:	d1d6      	bne.n	8003464 <_svfiprintf_r+0x174>
 80034b6:	89ab      	ldrh	r3, [r5, #12]
 80034b8:	065b      	lsls	r3, r3, #25
 80034ba:	f53f af2d 	bmi.w	8003318 <_svfiprintf_r+0x28>
 80034be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034c0:	e72c      	b.n	800331c <_svfiprintf_r+0x2c>
 80034c2:	ab03      	add	r3, sp, #12
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	462a      	mov	r2, r5
 80034c8:	4638      	mov	r0, r7
 80034ca:	4b06      	ldr	r3, [pc, #24]	@ (80034e4 <_svfiprintf_r+0x1f4>)
 80034cc:	a904      	add	r1, sp, #16
 80034ce:	f000 f87d 	bl	80035cc <_printf_i>
 80034d2:	e7ed      	b.n	80034b0 <_svfiprintf_r+0x1c0>
 80034d4:	0800393e 	.word	0x0800393e
 80034d8:	08003944 	.word	0x08003944
 80034dc:	08003948 	.word	0x08003948
 80034e0:	00000000 	.word	0x00000000
 80034e4:	08003239 	.word	0x08003239

080034e8 <_printf_common>:
 80034e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ec:	4616      	mov	r6, r2
 80034ee:	4698      	mov	r8, r3
 80034f0:	688a      	ldr	r2, [r1, #8]
 80034f2:	690b      	ldr	r3, [r1, #16]
 80034f4:	4607      	mov	r7, r0
 80034f6:	4293      	cmp	r3, r2
 80034f8:	bfb8      	it	lt
 80034fa:	4613      	movlt	r3, r2
 80034fc:	6033      	str	r3, [r6, #0]
 80034fe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003502:	460c      	mov	r4, r1
 8003504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003508:	b10a      	cbz	r2, 800350e <_printf_common+0x26>
 800350a:	3301      	adds	r3, #1
 800350c:	6033      	str	r3, [r6, #0]
 800350e:	6823      	ldr	r3, [r4, #0]
 8003510:	0699      	lsls	r1, r3, #26
 8003512:	bf42      	ittt	mi
 8003514:	6833      	ldrmi	r3, [r6, #0]
 8003516:	3302      	addmi	r3, #2
 8003518:	6033      	strmi	r3, [r6, #0]
 800351a:	6825      	ldr	r5, [r4, #0]
 800351c:	f015 0506 	ands.w	r5, r5, #6
 8003520:	d106      	bne.n	8003530 <_printf_common+0x48>
 8003522:	f104 0a19 	add.w	sl, r4, #25
 8003526:	68e3      	ldr	r3, [r4, #12]
 8003528:	6832      	ldr	r2, [r6, #0]
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	42ab      	cmp	r3, r5
 800352e:	dc2b      	bgt.n	8003588 <_printf_common+0xa0>
 8003530:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003534:	6822      	ldr	r2, [r4, #0]
 8003536:	3b00      	subs	r3, #0
 8003538:	bf18      	it	ne
 800353a:	2301      	movne	r3, #1
 800353c:	0692      	lsls	r2, r2, #26
 800353e:	d430      	bmi.n	80035a2 <_printf_common+0xba>
 8003540:	4641      	mov	r1, r8
 8003542:	4638      	mov	r0, r7
 8003544:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003548:	47c8      	blx	r9
 800354a:	3001      	adds	r0, #1
 800354c:	d023      	beq.n	8003596 <_printf_common+0xae>
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	6922      	ldr	r2, [r4, #16]
 8003552:	f003 0306 	and.w	r3, r3, #6
 8003556:	2b04      	cmp	r3, #4
 8003558:	bf14      	ite	ne
 800355a:	2500      	movne	r5, #0
 800355c:	6833      	ldreq	r3, [r6, #0]
 800355e:	f04f 0600 	mov.w	r6, #0
 8003562:	bf08      	it	eq
 8003564:	68e5      	ldreq	r5, [r4, #12]
 8003566:	f104 041a 	add.w	r4, r4, #26
 800356a:	bf08      	it	eq
 800356c:	1aed      	subeq	r5, r5, r3
 800356e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003572:	bf08      	it	eq
 8003574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003578:	4293      	cmp	r3, r2
 800357a:	bfc4      	itt	gt
 800357c:	1a9b      	subgt	r3, r3, r2
 800357e:	18ed      	addgt	r5, r5, r3
 8003580:	42b5      	cmp	r5, r6
 8003582:	d11a      	bne.n	80035ba <_printf_common+0xd2>
 8003584:	2000      	movs	r0, #0
 8003586:	e008      	b.n	800359a <_printf_common+0xb2>
 8003588:	2301      	movs	r3, #1
 800358a:	4652      	mov	r2, sl
 800358c:	4641      	mov	r1, r8
 800358e:	4638      	mov	r0, r7
 8003590:	47c8      	blx	r9
 8003592:	3001      	adds	r0, #1
 8003594:	d103      	bne.n	800359e <_printf_common+0xb6>
 8003596:	f04f 30ff 	mov.w	r0, #4294967295
 800359a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800359e:	3501      	adds	r5, #1
 80035a0:	e7c1      	b.n	8003526 <_printf_common+0x3e>
 80035a2:	2030      	movs	r0, #48	@ 0x30
 80035a4:	18e1      	adds	r1, r4, r3
 80035a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035b0:	4422      	add	r2, r4
 80035b2:	3302      	adds	r3, #2
 80035b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035b8:	e7c2      	b.n	8003540 <_printf_common+0x58>
 80035ba:	2301      	movs	r3, #1
 80035bc:	4622      	mov	r2, r4
 80035be:	4641      	mov	r1, r8
 80035c0:	4638      	mov	r0, r7
 80035c2:	47c8      	blx	r9
 80035c4:	3001      	adds	r0, #1
 80035c6:	d0e6      	beq.n	8003596 <_printf_common+0xae>
 80035c8:	3601      	adds	r6, #1
 80035ca:	e7d9      	b.n	8003580 <_printf_common+0x98>

080035cc <_printf_i>:
 80035cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035d0:	7e0f      	ldrb	r7, [r1, #24]
 80035d2:	4691      	mov	r9, r2
 80035d4:	2f78      	cmp	r7, #120	@ 0x78
 80035d6:	4680      	mov	r8, r0
 80035d8:	460c      	mov	r4, r1
 80035da:	469a      	mov	sl, r3
 80035dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035e2:	d807      	bhi.n	80035f4 <_printf_i+0x28>
 80035e4:	2f62      	cmp	r7, #98	@ 0x62
 80035e6:	d80a      	bhi.n	80035fe <_printf_i+0x32>
 80035e8:	2f00      	cmp	r7, #0
 80035ea:	f000 80d3 	beq.w	8003794 <_printf_i+0x1c8>
 80035ee:	2f58      	cmp	r7, #88	@ 0x58
 80035f0:	f000 80ba 	beq.w	8003768 <_printf_i+0x19c>
 80035f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035fc:	e03a      	b.n	8003674 <_printf_i+0xa8>
 80035fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003602:	2b15      	cmp	r3, #21
 8003604:	d8f6      	bhi.n	80035f4 <_printf_i+0x28>
 8003606:	a101      	add	r1, pc, #4	@ (adr r1, 800360c <_printf_i+0x40>)
 8003608:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800360c:	08003665 	.word	0x08003665
 8003610:	08003679 	.word	0x08003679
 8003614:	080035f5 	.word	0x080035f5
 8003618:	080035f5 	.word	0x080035f5
 800361c:	080035f5 	.word	0x080035f5
 8003620:	080035f5 	.word	0x080035f5
 8003624:	08003679 	.word	0x08003679
 8003628:	080035f5 	.word	0x080035f5
 800362c:	080035f5 	.word	0x080035f5
 8003630:	080035f5 	.word	0x080035f5
 8003634:	080035f5 	.word	0x080035f5
 8003638:	0800377b 	.word	0x0800377b
 800363c:	080036a3 	.word	0x080036a3
 8003640:	08003735 	.word	0x08003735
 8003644:	080035f5 	.word	0x080035f5
 8003648:	080035f5 	.word	0x080035f5
 800364c:	0800379d 	.word	0x0800379d
 8003650:	080035f5 	.word	0x080035f5
 8003654:	080036a3 	.word	0x080036a3
 8003658:	080035f5 	.word	0x080035f5
 800365c:	080035f5 	.word	0x080035f5
 8003660:	0800373d 	.word	0x0800373d
 8003664:	6833      	ldr	r3, [r6, #0]
 8003666:	1d1a      	adds	r2, r3, #4
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6032      	str	r2, [r6, #0]
 800366c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003670:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003674:	2301      	movs	r3, #1
 8003676:	e09e      	b.n	80037b6 <_printf_i+0x1ea>
 8003678:	6833      	ldr	r3, [r6, #0]
 800367a:	6820      	ldr	r0, [r4, #0]
 800367c:	1d19      	adds	r1, r3, #4
 800367e:	6031      	str	r1, [r6, #0]
 8003680:	0606      	lsls	r6, r0, #24
 8003682:	d501      	bpl.n	8003688 <_printf_i+0xbc>
 8003684:	681d      	ldr	r5, [r3, #0]
 8003686:	e003      	b.n	8003690 <_printf_i+0xc4>
 8003688:	0645      	lsls	r5, r0, #25
 800368a:	d5fb      	bpl.n	8003684 <_printf_i+0xb8>
 800368c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003690:	2d00      	cmp	r5, #0
 8003692:	da03      	bge.n	800369c <_printf_i+0xd0>
 8003694:	232d      	movs	r3, #45	@ 0x2d
 8003696:	426d      	negs	r5, r5
 8003698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800369c:	230a      	movs	r3, #10
 800369e:	4859      	ldr	r0, [pc, #356]	@ (8003804 <_printf_i+0x238>)
 80036a0:	e011      	b.n	80036c6 <_printf_i+0xfa>
 80036a2:	6821      	ldr	r1, [r4, #0]
 80036a4:	6833      	ldr	r3, [r6, #0]
 80036a6:	0608      	lsls	r0, r1, #24
 80036a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80036ac:	d402      	bmi.n	80036b4 <_printf_i+0xe8>
 80036ae:	0649      	lsls	r1, r1, #25
 80036b0:	bf48      	it	mi
 80036b2:	b2ad      	uxthmi	r5, r5
 80036b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80036b6:	6033      	str	r3, [r6, #0]
 80036b8:	bf14      	ite	ne
 80036ba:	230a      	movne	r3, #10
 80036bc:	2308      	moveq	r3, #8
 80036be:	4851      	ldr	r0, [pc, #324]	@ (8003804 <_printf_i+0x238>)
 80036c0:	2100      	movs	r1, #0
 80036c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036c6:	6866      	ldr	r6, [r4, #4]
 80036c8:	2e00      	cmp	r6, #0
 80036ca:	bfa8      	it	ge
 80036cc:	6821      	ldrge	r1, [r4, #0]
 80036ce:	60a6      	str	r6, [r4, #8]
 80036d0:	bfa4      	itt	ge
 80036d2:	f021 0104 	bicge.w	r1, r1, #4
 80036d6:	6021      	strge	r1, [r4, #0]
 80036d8:	b90d      	cbnz	r5, 80036de <_printf_i+0x112>
 80036da:	2e00      	cmp	r6, #0
 80036dc:	d04b      	beq.n	8003776 <_printf_i+0x1aa>
 80036de:	4616      	mov	r6, r2
 80036e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80036e4:	fb03 5711 	mls	r7, r3, r1, r5
 80036e8:	5dc7      	ldrb	r7, [r0, r7]
 80036ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036ee:	462f      	mov	r7, r5
 80036f0:	42bb      	cmp	r3, r7
 80036f2:	460d      	mov	r5, r1
 80036f4:	d9f4      	bls.n	80036e0 <_printf_i+0x114>
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d10b      	bne.n	8003712 <_printf_i+0x146>
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	07df      	lsls	r7, r3, #31
 80036fe:	d508      	bpl.n	8003712 <_printf_i+0x146>
 8003700:	6923      	ldr	r3, [r4, #16]
 8003702:	6861      	ldr	r1, [r4, #4]
 8003704:	4299      	cmp	r1, r3
 8003706:	bfde      	ittt	le
 8003708:	2330      	movle	r3, #48	@ 0x30
 800370a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800370e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003712:	1b92      	subs	r2, r2, r6
 8003714:	6122      	str	r2, [r4, #16]
 8003716:	464b      	mov	r3, r9
 8003718:	4621      	mov	r1, r4
 800371a:	4640      	mov	r0, r8
 800371c:	f8cd a000 	str.w	sl, [sp]
 8003720:	aa03      	add	r2, sp, #12
 8003722:	f7ff fee1 	bl	80034e8 <_printf_common>
 8003726:	3001      	adds	r0, #1
 8003728:	d14a      	bne.n	80037c0 <_printf_i+0x1f4>
 800372a:	f04f 30ff 	mov.w	r0, #4294967295
 800372e:	b004      	add	sp, #16
 8003730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	f043 0320 	orr.w	r3, r3, #32
 800373a:	6023      	str	r3, [r4, #0]
 800373c:	2778      	movs	r7, #120	@ 0x78
 800373e:	4832      	ldr	r0, [pc, #200]	@ (8003808 <_printf_i+0x23c>)
 8003740:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	6831      	ldr	r1, [r6, #0]
 8003748:	061f      	lsls	r7, r3, #24
 800374a:	f851 5b04 	ldr.w	r5, [r1], #4
 800374e:	d402      	bmi.n	8003756 <_printf_i+0x18a>
 8003750:	065f      	lsls	r7, r3, #25
 8003752:	bf48      	it	mi
 8003754:	b2ad      	uxthmi	r5, r5
 8003756:	6031      	str	r1, [r6, #0]
 8003758:	07d9      	lsls	r1, r3, #31
 800375a:	bf44      	itt	mi
 800375c:	f043 0320 	orrmi.w	r3, r3, #32
 8003760:	6023      	strmi	r3, [r4, #0]
 8003762:	b11d      	cbz	r5, 800376c <_printf_i+0x1a0>
 8003764:	2310      	movs	r3, #16
 8003766:	e7ab      	b.n	80036c0 <_printf_i+0xf4>
 8003768:	4826      	ldr	r0, [pc, #152]	@ (8003804 <_printf_i+0x238>)
 800376a:	e7e9      	b.n	8003740 <_printf_i+0x174>
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	f023 0320 	bic.w	r3, r3, #32
 8003772:	6023      	str	r3, [r4, #0]
 8003774:	e7f6      	b.n	8003764 <_printf_i+0x198>
 8003776:	4616      	mov	r6, r2
 8003778:	e7bd      	b.n	80036f6 <_printf_i+0x12a>
 800377a:	6833      	ldr	r3, [r6, #0]
 800377c:	6825      	ldr	r5, [r4, #0]
 800377e:	1d18      	adds	r0, r3, #4
 8003780:	6961      	ldr	r1, [r4, #20]
 8003782:	6030      	str	r0, [r6, #0]
 8003784:	062e      	lsls	r6, r5, #24
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	d501      	bpl.n	800378e <_printf_i+0x1c2>
 800378a:	6019      	str	r1, [r3, #0]
 800378c:	e002      	b.n	8003794 <_printf_i+0x1c8>
 800378e:	0668      	lsls	r0, r5, #25
 8003790:	d5fb      	bpl.n	800378a <_printf_i+0x1be>
 8003792:	8019      	strh	r1, [r3, #0]
 8003794:	2300      	movs	r3, #0
 8003796:	4616      	mov	r6, r2
 8003798:	6123      	str	r3, [r4, #16]
 800379a:	e7bc      	b.n	8003716 <_printf_i+0x14a>
 800379c:	6833      	ldr	r3, [r6, #0]
 800379e:	2100      	movs	r1, #0
 80037a0:	1d1a      	adds	r2, r3, #4
 80037a2:	6032      	str	r2, [r6, #0]
 80037a4:	681e      	ldr	r6, [r3, #0]
 80037a6:	6862      	ldr	r2, [r4, #4]
 80037a8:	4630      	mov	r0, r6
 80037aa:	f000 f859 	bl	8003860 <memchr>
 80037ae:	b108      	cbz	r0, 80037b4 <_printf_i+0x1e8>
 80037b0:	1b80      	subs	r0, r0, r6
 80037b2:	6060      	str	r0, [r4, #4]
 80037b4:	6863      	ldr	r3, [r4, #4]
 80037b6:	6123      	str	r3, [r4, #16]
 80037b8:	2300      	movs	r3, #0
 80037ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037be:	e7aa      	b.n	8003716 <_printf_i+0x14a>
 80037c0:	4632      	mov	r2, r6
 80037c2:	4649      	mov	r1, r9
 80037c4:	4640      	mov	r0, r8
 80037c6:	6923      	ldr	r3, [r4, #16]
 80037c8:	47d0      	blx	sl
 80037ca:	3001      	adds	r0, #1
 80037cc:	d0ad      	beq.n	800372a <_printf_i+0x15e>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	079b      	lsls	r3, r3, #30
 80037d2:	d413      	bmi.n	80037fc <_printf_i+0x230>
 80037d4:	68e0      	ldr	r0, [r4, #12]
 80037d6:	9b03      	ldr	r3, [sp, #12]
 80037d8:	4298      	cmp	r0, r3
 80037da:	bfb8      	it	lt
 80037dc:	4618      	movlt	r0, r3
 80037de:	e7a6      	b.n	800372e <_printf_i+0x162>
 80037e0:	2301      	movs	r3, #1
 80037e2:	4632      	mov	r2, r6
 80037e4:	4649      	mov	r1, r9
 80037e6:	4640      	mov	r0, r8
 80037e8:	47d0      	blx	sl
 80037ea:	3001      	adds	r0, #1
 80037ec:	d09d      	beq.n	800372a <_printf_i+0x15e>
 80037ee:	3501      	adds	r5, #1
 80037f0:	68e3      	ldr	r3, [r4, #12]
 80037f2:	9903      	ldr	r1, [sp, #12]
 80037f4:	1a5b      	subs	r3, r3, r1
 80037f6:	42ab      	cmp	r3, r5
 80037f8:	dcf2      	bgt.n	80037e0 <_printf_i+0x214>
 80037fa:	e7eb      	b.n	80037d4 <_printf_i+0x208>
 80037fc:	2500      	movs	r5, #0
 80037fe:	f104 0619 	add.w	r6, r4, #25
 8003802:	e7f5      	b.n	80037f0 <_printf_i+0x224>
 8003804:	0800394f 	.word	0x0800394f
 8003808:	08003960 	.word	0x08003960

0800380c <memmove>:
 800380c:	4288      	cmp	r0, r1
 800380e:	b510      	push	{r4, lr}
 8003810:	eb01 0402 	add.w	r4, r1, r2
 8003814:	d902      	bls.n	800381c <memmove+0x10>
 8003816:	4284      	cmp	r4, r0
 8003818:	4623      	mov	r3, r4
 800381a:	d807      	bhi.n	800382c <memmove+0x20>
 800381c:	1e43      	subs	r3, r0, #1
 800381e:	42a1      	cmp	r1, r4
 8003820:	d008      	beq.n	8003834 <memmove+0x28>
 8003822:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800382a:	e7f8      	b.n	800381e <memmove+0x12>
 800382c:	4601      	mov	r1, r0
 800382e:	4402      	add	r2, r0
 8003830:	428a      	cmp	r2, r1
 8003832:	d100      	bne.n	8003836 <memmove+0x2a>
 8003834:	bd10      	pop	{r4, pc}
 8003836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800383a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800383e:	e7f7      	b.n	8003830 <memmove+0x24>

08003840 <_sbrk_r>:
 8003840:	b538      	push	{r3, r4, r5, lr}
 8003842:	2300      	movs	r3, #0
 8003844:	4d05      	ldr	r5, [pc, #20]	@ (800385c <_sbrk_r+0x1c>)
 8003846:	4604      	mov	r4, r0
 8003848:	4608      	mov	r0, r1
 800384a:	602b      	str	r3, [r5, #0]
 800384c:	f7fc ffd0 	bl	80007f0 <_sbrk>
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	d102      	bne.n	800385a <_sbrk_r+0x1a>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	b103      	cbz	r3, 800385a <_sbrk_r+0x1a>
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	bd38      	pop	{r3, r4, r5, pc}
 800385c:	2000027c 	.word	0x2000027c

08003860 <memchr>:
 8003860:	4603      	mov	r3, r0
 8003862:	b510      	push	{r4, lr}
 8003864:	b2c9      	uxtb	r1, r1
 8003866:	4402      	add	r2, r0
 8003868:	4293      	cmp	r3, r2
 800386a:	4618      	mov	r0, r3
 800386c:	d101      	bne.n	8003872 <memchr+0x12>
 800386e:	2000      	movs	r0, #0
 8003870:	e003      	b.n	800387a <memchr+0x1a>
 8003872:	7804      	ldrb	r4, [r0, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	428c      	cmp	r4, r1
 8003878:	d1f6      	bne.n	8003868 <memchr+0x8>
 800387a:	bd10      	pop	{r4, pc}

0800387c <_realloc_r>:
 800387c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003880:	4680      	mov	r8, r0
 8003882:	4615      	mov	r5, r2
 8003884:	460c      	mov	r4, r1
 8003886:	b921      	cbnz	r1, 8003892 <_realloc_r+0x16>
 8003888:	4611      	mov	r1, r2
 800388a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800388e:	f7ff bc47 	b.w	8003120 <_malloc_r>
 8003892:	b92a      	cbnz	r2, 80038a0 <_realloc_r+0x24>
 8003894:	f7ff fbda 	bl	800304c <_free_r>
 8003898:	2400      	movs	r4, #0
 800389a:	4620      	mov	r0, r4
 800389c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038a0:	f000 f81a 	bl	80038d8 <_malloc_usable_size_r>
 80038a4:	4285      	cmp	r5, r0
 80038a6:	4606      	mov	r6, r0
 80038a8:	d802      	bhi.n	80038b0 <_realloc_r+0x34>
 80038aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80038ae:	d8f4      	bhi.n	800389a <_realloc_r+0x1e>
 80038b0:	4629      	mov	r1, r5
 80038b2:	4640      	mov	r0, r8
 80038b4:	f7ff fc34 	bl	8003120 <_malloc_r>
 80038b8:	4607      	mov	r7, r0
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d0ec      	beq.n	8003898 <_realloc_r+0x1c>
 80038be:	42b5      	cmp	r5, r6
 80038c0:	462a      	mov	r2, r5
 80038c2:	4621      	mov	r1, r4
 80038c4:	bf28      	it	cs
 80038c6:	4632      	movcs	r2, r6
 80038c8:	f7ff fbb2 	bl	8003030 <memcpy>
 80038cc:	4621      	mov	r1, r4
 80038ce:	4640      	mov	r0, r8
 80038d0:	f7ff fbbc 	bl	800304c <_free_r>
 80038d4:	463c      	mov	r4, r7
 80038d6:	e7e0      	b.n	800389a <_realloc_r+0x1e>

080038d8 <_malloc_usable_size_r>:
 80038d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038dc:	1f18      	subs	r0, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bfbc      	itt	lt
 80038e2:	580b      	ldrlt	r3, [r1, r0]
 80038e4:	18c0      	addlt	r0, r0, r3
 80038e6:	4770      	bx	lr

080038e8 <_init>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	bf00      	nop
 80038ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ee:	bc08      	pop	{r3}
 80038f0:	469e      	mov	lr, r3
 80038f2:	4770      	bx	lr

080038f4 <_fini>:
 80038f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f6:	bf00      	nop
 80038f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fa:	bc08      	pop	{r3}
 80038fc:	469e      	mov	lr, r3
 80038fe:	4770      	bx	lr
