
stm-pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eb4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08002fc0  08002fc0  00003fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b8  080030b8  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  080030b8  080030b8  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b8  080030b8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b8  080030b8  000040b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030bc  080030bc  000040bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080030c0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000068  08003128  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08003128  00005200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000052f7  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015bc  00000000  00000000  0000a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  0000b948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000465  00000000  00000000  0000bf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017933  00000000  00000000  0000c3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006cc2  00000000  00000000  00023cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ec6  00000000  00000000  0002a9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae878  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec0  00000000  00000000  000ae8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000b077c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fa8 	.word	0x08002fa8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002fa8 	.word	0x08002fa8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb42 	bl	80007d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f818 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8a8 	bl	80002ac <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f854 	bl	8000208 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000160:	4807      	ldr	r0, [pc, #28]	@ (8000180 <main+0x34>)
 8000162:	f000 fd83 	bl	8000c6c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000166:	2110      	movs	r1, #16
 8000168:	4805      	ldr	r0, [pc, #20]	@ (8000180 <main+0x34>)
 800016a:	f000 fe92 	bl	8000e92 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 800016e:	2201      	movs	r2, #1
 8000170:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000174:	4803      	ldr	r0, [pc, #12]	@ (8000184 <main+0x38>)
 8000176:	f001 fb7b 	bl	8001870 <HAL_GPIO_WritePin>
  while (1)
  {
	 CAN_Transmit();
 800017a:	f000 f8e3 	bl	8000344 <CAN_Transmit>
 800017e:	e7fc      	b.n	800017a <main+0x2e>
 8000180:	20000084 	.word	0x20000084
 8000184:	40011000 	.word	0x40011000

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b090      	sub	sp, #64	@ 0x40
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0318 	add.w	r3, r7, #24
 8000192:	2228      	movs	r2, #40	@ 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f002 f96a 	bl	8002470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001aa:	2302      	movs	r3, #2
 80001ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ae:	2301      	movs	r3, #1
 80001b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b2:	2310      	movs	r3, #16
 80001b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b6:	2302      	movs	r3, #2
 80001b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ba:	2300      	movs	r3, #0
 80001bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001be:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f107 0318 	add.w	r3, r7, #24
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 fb69 	bl	80018a0 <HAL_RCC_OscConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001d4:	f000 f93c 	bl	8000450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001dc:	2302      	movs	r3, #2
 80001de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2101      	movs	r1, #1
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 fdd7 	bl	8001da4 <HAL_RCC_ClockConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80001fc:	f000 f928 	bl	8000450 <Error_Handler>
  }
}
 8000200:	bf00      	nop
 8000202:	3740      	adds	r7, #64	@ 0x40
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b08a      	sub	sp, #40	@ 0x28
 800020c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800020e:	4b25      	ldr	r3, [pc, #148]	@ (80002a4 <MX_CAN_Init+0x9c>)
 8000210:	4a25      	ldr	r2, [pc, #148]	@ (80002a8 <MX_CAN_Init+0xa0>)
 8000212:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000214:	4b23      	ldr	r3, [pc, #140]	@ (80002a4 <MX_CAN_Init+0x9c>)
 8000216:	2203      	movs	r2, #3
 8000218:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800021a:	4b22      	ldr	r3, [pc, #136]	@ (80002a4 <MX_CAN_Init+0x9c>)
 800021c:	2200      	movs	r2, #0
 800021e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000220:	4b20      	ldr	r3, [pc, #128]	@ (80002a4 <MX_CAN_Init+0x9c>)
 8000222:	2200      	movs	r2, #0
 8000224:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000226:	4b1f      	ldr	r3, [pc, #124]	@ (80002a4 <MX_CAN_Init+0x9c>)
 8000228:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800022c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800022e:	4b1d      	ldr	r3, [pc, #116]	@ (80002a4 <MX_CAN_Init+0x9c>)
 8000230:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000234:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000236:	4b1b      	ldr	r3, [pc, #108]	@ (80002a4 <MX_CAN_Init+0x9c>)
 8000238:	2200      	movs	r2, #0
 800023a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800023c:	4b19      	ldr	r3, [pc, #100]	@ (80002a4 <MX_CAN_Init+0x9c>)
 800023e:	2200      	movs	r2, #0
 8000240:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000242:	4b18      	ldr	r3, [pc, #96]	@ (80002a4 <MX_CAN_Init+0x9c>)
 8000244:	2200      	movs	r2, #0
 8000246:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000248:	4b16      	ldr	r3, [pc, #88]	@ (80002a4 <MX_CAN_Init+0x9c>)
 800024a:	2200      	movs	r2, #0
 800024c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800024e:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <MX_CAN_Init+0x9c>)
 8000250:	2200      	movs	r2, #0
 8000252:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000254:	4b13      	ldr	r3, [pc, #76]	@ (80002a4 <MX_CAN_Init+0x9c>)
 8000256:	2200      	movs	r2, #0
 8000258:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800025a:	4812      	ldr	r0, [pc, #72]	@ (80002a4 <MX_CAN_Init+0x9c>)
 800025c:	f000 fb42 	bl	80008e4 <HAL_CAN_Init>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000266:	f000 f8f3 	bl	8000450 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800026e:	2300      	movs	r3, #0
 8000270:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000272:	2301      	movs	r3, #1
 8000274:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0x002 << 5;
 8000276:	2340      	movs	r3, #64	@ 0x40
 8000278:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0x0000;
 800027a:	2300      	movs	r3, #0
 800027c:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0x7FF << 5;
 800027e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000282:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0x0000;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000288:	2301      	movs	r3, #1
 800028a:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 800028c:	2301      	movs	r3, #1
 800028e:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 8000290:	463b      	mov	r3, r7
 8000292:	4619      	mov	r1, r3
 8000294:	4803      	ldr	r0, [pc, #12]	@ (80002a4 <MX_CAN_Init+0x9c>)
 8000296:	f000 fc20 	bl	8000ada <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 800029a:	bf00      	nop
 800029c:	3728      	adds	r7, #40	@ 0x28
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000084 	.word	0x20000084
 80002a8:	40006400 	.word	0x40006400

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c0:	4b1e      	ldr	r3, [pc, #120]	@ (800033c <MX_GPIO_Init+0x90>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a1d      	ldr	r2, [pc, #116]	@ (800033c <MX_GPIO_Init+0x90>)
 80002c6:	f043 0310 	orr.w	r3, r3, #16
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b1b      	ldr	r3, [pc, #108]	@ (800033c <MX_GPIO_Init+0x90>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0310 	and.w	r3, r3, #16
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d8:	4b18      	ldr	r3, [pc, #96]	@ (800033c <MX_GPIO_Init+0x90>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a17      	ldr	r2, [pc, #92]	@ (800033c <MX_GPIO_Init+0x90>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b15      	ldr	r3, [pc, #84]	@ (800033c <MX_GPIO_Init+0x90>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0320 	and.w	r3, r3, #32
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	4b12      	ldr	r3, [pc, #72]	@ (800033c <MX_GPIO_Init+0x90>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a11      	ldr	r2, [pc, #68]	@ (800033c <MX_GPIO_Init+0x90>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <MX_GPIO_Init+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0304 	and.w	r3, r3, #4
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800030e:	480c      	ldr	r0, [pc, #48]	@ (8000340 <MX_GPIO_Init+0x94>)
 8000310:	f001 faae 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000314:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031e:	2300      	movs	r3, #0
 8000320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000322:	2302      	movs	r3, #2
 8000324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	4619      	mov	r1, r3
 800032c:	4804      	ldr	r0, [pc, #16]	@ (8000340 <MX_GPIO_Init+0x94>)
 800032e:	f001 f91b 	bl	8001568 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000332:	bf00      	nop
 8000334:	3720      	adds	r7, #32
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000
 8000340:	40011000 	.word	0x40011000

08000344 <CAN_Transmit>:
//	}
//
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
//}

void CAN_Transmit() {
 8000344:	b580      	push	{r7, lr}
 8000346:	b092      	sub	sp, #72	@ 0x48
 8000348:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000350:	4838      	ldr	r0, [pc, #224]	@ (8000434 <CAN_Transmit+0xf0>)
 8000352:	f001 fa8d 	bl	8001870 <HAL_GPIO_WritePin>
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;

	// Create a telemetry_packet instance and initialize its fields
//	telemetry_packet dataToSend = {3600, 1, 120, 0, 0, 0, 45, 0}; DEBUG CODE
	pedal_data_t dataToSend = {10, 20, 30};
 8000356:	4a38      	ldr	r2, [pc, #224]	@ (8000438 <CAN_Transmit+0xf4>)
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000360:	6018      	str	r0, [r3, #0]
 8000362:	3304      	adds	r3, #4
 8000364:	8019      	strh	r1, [r3, #0]
	uint8_t* rawData = (uint8_t*)&dataToSend;
 8000366:	f107 030c 	add.w	r3, r7, #12
 800036a:	643b      	str	r3, [r7, #64]	@ 0x40

	// Initialize CAN Header
	TxHeader.StdId = 0x100;           // CAN ID for the message
 800036c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000370:	61bb      	str	r3, [r7, #24]
	TxHeader.ExtId = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = CAN_ID_STD;        // Use Standard ID
 8000376:	2300      	movs	r3, #0
 8000378:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;      // Data frame
 800037a:	2300      	movs	r3, #0
 800037c:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.DLC = 8;                 // Maximum data length for each CAN frame
 800037e:	2308      	movs	r3, #8
 8000380:	62bb      	str	r3, [r7, #40]	@ 0x28

	uint8_t frameData[8];             // Temporary buffer for each CAN frame

	// Calculate the size of the telemetry_packet struct
	int totalSize = sizeof(pedal_data_t);
 8000382:	2306      	movs	r3, #6
 8000384:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// Split the telemetry_packet into CAN frames
	for (int i = 0; i < totalSize; i += 8) {
 8000386:	2300      	movs	r3, #0
 8000388:	647b      	str	r3, [r7, #68]	@ 0x44
 800038a:	e044      	b.n	8000416 <CAN_Transmit+0xd2>
	    // Calculate the size of the current chunk (for the last frame)
	    int chunkSize = (totalSize - i >= 8) ? 8 : (totalSize - i);
 800038c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800038e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	2b08      	cmp	r3, #8
 8000394:	bfa8      	it	ge
 8000396:	2308      	movge	r3, #8
 8000398:	63bb      	str	r3, [r7, #56]	@ 0x38

	    // Copy the next chunk of data into the frame buffer
	    memcpy(frameData, &rawData[i], chunkSize);
 800039a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800039c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800039e:	18d1      	adds	r1, r2, r3
 80003a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4618      	mov	r0, r3
 80003a6:	f002 f8de 	bl	8002566 <memcpy>

	    // Adjust DLC for the last frame
	    TxHeader.DLC = chunkSize;
 80003aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80003ac:	62bb      	str	r3, [r7, #40]	@ 0x28

	    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, frameData, &TxMailbox);
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	1d3a      	adds	r2, r7, #4
 80003b4:	f107 0118 	add.w	r1, r7, #24
 80003b8:	4820      	ldr	r0, [pc, #128]	@ (800043c <CAN_Transmit+0xf8>)
 80003ba:	f000 fc9b 	bl	8000cf4 <HAL_CAN_AddTxMessage>
 80003be:	4603      	mov	r3, r0
 80003c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    if (status != HAL_OK) {
 80003c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d01e      	beq.n	800040a <CAN_Transmit+0xc6>
	        // Inspect the error
	        if (status == HAL_ERROR) {
 80003cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d103      	bne.n	80003dc <CAN_Transmit+0x98>
	            printf("HAL_CAN_AddTxMessage failed: HAL_ERROR\n");
 80003d4:	481a      	ldr	r0, [pc, #104]	@ (8000440 <CAN_Transmit+0xfc>)
 80003d6:	f001 ff6b 	bl	80022b0 <puts>
 80003da:	e00e      	b.n	80003fa <CAN_Transmit+0xb6>
	        } else if (status == HAL_BUSY) {
 80003dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	d103      	bne.n	80003ec <CAN_Transmit+0xa8>
	            printf("HAL_CAN_AddTxMessage failed: HAL_BUSY\n");
 80003e4:	4817      	ldr	r0, [pc, #92]	@ (8000444 <CAN_Transmit+0x100>)
 80003e6:	f001 ff63 	bl	80022b0 <puts>
 80003ea:	e006      	b.n	80003fa <CAN_Transmit+0xb6>
	        } else if (status == HAL_TIMEOUT) {
 80003ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80003f0:	2b03      	cmp	r3, #3
 80003f2:	d102      	bne.n	80003fa <CAN_Transmit+0xb6>
	            printf("HAL_CAN_AddTxMessage failed: HAL_TIMEOUT\n");
 80003f4:	4814      	ldr	r0, [pc, #80]	@ (8000448 <CAN_Transmit+0x104>)
 80003f6:	f001 ff5b 	bl	80022b0 <puts>
	        }

	        // Optionally log the state of CAN error counters
	        uint32_t error = HAL_CAN_GetError(&hcan);
 80003fa:	4810      	ldr	r0, [pc, #64]	@ (800043c <CAN_Transmit+0xf8>)
 80003fc:	f000 ff9a 	bl	8001334 <HAL_CAN_GetError>
 8000400:	6338      	str	r0, [r7, #48]	@ 0x30
	        printf("CAN Error Code: 0x%08lx\n", error); // Only if you decide to stop execution
 8000402:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000404:	4811      	ldr	r0, [pc, #68]	@ (800044c <CAN_Transmit+0x108>)
 8000406:	f001 feeb 	bl	80021e0 <iprintf>
	    }
	    // Add a small delay if necessary (optional, for bus stability)
	    HAL_Delay(1);
 800040a:	2001      	movs	r0, #1
 800040c:	f000 fa46 	bl	800089c <HAL_Delay>
	for (int i = 0; i < totalSize; i += 8) {
 8000410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000412:	3308      	adds	r3, #8
 8000414:	647b      	str	r3, [r7, #68]	@ 0x44
 8000416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800041a:	429a      	cmp	r2, r3
 800041c:	dbb6      	blt.n	800038c <CAN_Transmit+0x48>

	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <CAN_Transmit+0xf0>)
 8000426:	f001 fa23 	bl	8001870 <HAL_GPIO_WritePin>
}
 800042a:	bf00      	nop
 800042c:	3748      	adds	r7, #72	@ 0x48
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40011000 	.word	0x40011000
 8000438:	08003058 	.word	0x08003058
 800043c:	20000084 	.word	0x20000084
 8000440:	08002fc0 	.word	0x08002fc0
 8000444:	08002fe8 	.word	0x08002fe8
 8000448:	08003010 	.word	0x08003010
 800044c:	0800303c 	.word	0x0800303c

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000454:	b672      	cpsid	i
}
 8000456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000458:	bf00      	nop
 800045a:	e7fd      	b.n	8000458 <Error_Handler+0x8>

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000462:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <HAL_MspInit+0x5c>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a14      	ldr	r2, [pc, #80]	@ (80004b8 <HAL_MspInit+0x5c>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <HAL_MspInit+0x5c>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <HAL_MspInit+0x5c>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a0e      	ldr	r2, [pc, #56]	@ (80004b8 <HAL_MspInit+0x5c>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b0c      	ldr	r3, [pc, #48]	@ (80004b8 <HAL_MspInit+0x5c>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000492:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <HAL_MspInit+0x60>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	4a04      	ldr	r2, [pc, #16]	@ (80004bc <HAL_MspInit+0x60>)
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000

080004c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a2c      	ldr	r2, [pc, #176]	@ (800058c <HAL_CAN_MspInit+0xcc>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d151      	bne.n	8000584 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000590 <HAL_CAN_MspInit+0xd0>)
 80004e2:	69db      	ldr	r3, [r3, #28]
 80004e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000590 <HAL_CAN_MspInit+0xd0>)
 80004e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ea:	61d3      	str	r3, [r2, #28]
 80004ec:	4b28      	ldr	r3, [pc, #160]	@ (8000590 <HAL_CAN_MspInit+0xd0>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f8:	4b25      	ldr	r3, [pc, #148]	@ (8000590 <HAL_CAN_MspInit+0xd0>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a24      	ldr	r2, [pc, #144]	@ (8000590 <HAL_CAN_MspInit+0xd0>)
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b22      	ldr	r3, [pc, #136]	@ (8000590 <HAL_CAN_MspInit+0xd0>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0304 	and.w	r3, r3, #4
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000510:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051a:	2301      	movs	r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	481b      	ldr	r0, [pc, #108]	@ (8000594 <HAL_CAN_MspInit+0xd4>)
 8000526:	f001 f81f 	bl	8001568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800052a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800052e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000530:	2302      	movs	r3, #2
 8000532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000534:	2303      	movs	r3, #3
 8000536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	4815      	ldr	r0, [pc, #84]	@ (8000594 <HAL_CAN_MspInit+0xd4>)
 8000540:	f001 f812 	bl	8001568 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2100      	movs	r1, #0
 8000548:	2013      	movs	r0, #19
 800054a:	f000 ffd6 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800054e:	2013      	movs	r0, #19
 8000550:	f000 ffef 	bl	8001532 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2100      	movs	r1, #0
 8000558:	2014      	movs	r0, #20
 800055a:	f000 ffce 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800055e:	2014      	movs	r0, #20
 8000560:	f000 ffe7 	bl	8001532 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	2100      	movs	r1, #0
 8000568:	2015      	movs	r0, #21
 800056a:	f000 ffc6 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800056e:	2015      	movs	r0, #21
 8000570:	f000 ffdf 	bl	8001532 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2100      	movs	r1, #0
 8000578:	2016      	movs	r0, #22
 800057a:	f000 ffbe 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800057e:	2016      	movs	r0, #22
 8000580:	f000 ffd7 	bl	8001532 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40006400 	.word	0x40006400
 8000590:	40021000 	.word	0x40021000
 8000594:	40010800 	.word	0x40010800

08000598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <NMI_Handler+0x4>

080005a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <HardFault_Handler+0x4>

080005a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <MemManage_Handler+0x4>

080005b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <BusFault_Handler+0x4>

080005b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <UsageFault_Handler+0x4>

080005c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e8:	f000 f93c 	bl	8000864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80005f6:	f000 fc71 	bl	8000edc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000084 	.word	0x20000084

08000604 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000608:	4802      	ldr	r0, [pc, #8]	@ (8000614 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800060a:	f000 fc67 	bl	8000edc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000084 	.word	0x20000084

08000618 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800061c:	4802      	ldr	r0, [pc, #8]	@ (8000628 <CAN1_RX1_IRQHandler+0x10>)
 800061e:	f000 fc5d 	bl	8000edc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000084 	.word	0x20000084

0800062c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000630:	4802      	ldr	r0, [pc, #8]	@ (800063c <CAN1_SCE_IRQHandler+0x10>)
 8000632:	f000 fc53 	bl	8000edc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000084 	.word	0x20000084

08000640 <_read>:
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	e00a      	b.n	8000668 <_read+0x28>
 8000652:	f3af 8000 	nop.w
 8000656:	4601      	mov	r1, r0
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	1c5a      	adds	r2, r3, #1
 800065c:	60ba      	str	r2, [r7, #8]
 800065e:	b2ca      	uxtb	r2, r1
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3301      	adds	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	dbf0      	blt.n	8000652 <_read+0x12>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4618      	mov	r0, r3
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <_write>:
 800067a:	b580      	push	{r7, lr}
 800067c:	b086      	sub	sp, #24
 800067e:	af00      	add	r7, sp, #0
 8000680:	60f8      	str	r0, [r7, #12]
 8000682:	60b9      	str	r1, [r7, #8]
 8000684:	607a      	str	r2, [r7, #4]
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
 800068a:	e009      	b.n	80006a0 <_write+0x26>
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	60ba      	str	r2, [r7, #8]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f3af 8000 	nop.w
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	3301      	adds	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697a      	ldr	r2, [r7, #20]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	dbf1      	blt.n	800068c <_write+0x12>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4618      	mov	r0, r3
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <_close>:
 80006b2:	b480      	push	{r7}
 80006b4:	b083      	sub	sp, #12
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <_fstat>:
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	2300      	movs	r3, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <_isatty>:
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	2301      	movs	r3, #1
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <_lseek>:
 80006fa:	b480      	push	{r7}
 80006fc:	b085      	sub	sp, #20
 80006fe:	af00      	add	r7, sp, #0
 8000700:	60f8      	str	r0, [r7, #12]
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	2300      	movs	r3, #0
 8000708:	4618      	mov	r0, r3
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
	...

08000714 <_sbrk>:
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	4a14      	ldr	r2, [pc, #80]	@ (8000770 <_sbrk+0x5c>)
 800071e:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <_sbrk+0x60>)
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <_sbrk+0x64>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d102      	bne.n	8000736 <_sbrk+0x22>
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <_sbrk+0x64>)
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <_sbrk+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <_sbrk+0x64>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	693a      	ldr	r2, [r7, #16]
 8000740:	429a      	cmp	r2, r3
 8000742:	d207      	bcs.n	8000754 <_sbrk+0x40>
 8000744:	f001 fee2 	bl	800250c <__errno>
 8000748:	4603      	mov	r3, r0
 800074a:	220c      	movs	r2, #12
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	e009      	b.n	8000768 <_sbrk+0x54>
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <_sbrk+0x64>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <_sbrk+0x64>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	4a05      	ldr	r2, [pc, #20]	@ (8000778 <_sbrk+0x64>)
 8000764:	6013      	str	r3, [r2, #0]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4618      	mov	r0, r3
 800076a:	3718      	adds	r7, #24
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20005000 	.word	0x20005000
 8000774:	00000400 	.word	0x00000400
 8000778:	200000ac 	.word	0x200000ac
 800077c:	20000200 	.word	0x20000200

08000780 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <Reset_Handler>:
 800078c:	f7ff fff8 	bl	8000780 <SystemInit>
 8000790:	480b      	ldr	r0, [pc, #44]	@ (80007c0 <LoopFillZerobss+0xe>)
 8000792:	490c      	ldr	r1, [pc, #48]	@ (80007c4 <LoopFillZerobss+0x12>)
 8000794:	4a0c      	ldr	r2, [pc, #48]	@ (80007c8 <LoopFillZerobss+0x16>)
 8000796:	2300      	movs	r3, #0
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:
 800079a:	58d4      	ldr	r4, [r2, r3]
 800079c:	50c4      	str	r4, [r0, r3]
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:
 80007a0:	18c4      	adds	r4, r0, r3
 80007a2:	428c      	cmp	r4, r1
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
 80007a6:	4a09      	ldr	r2, [pc, #36]	@ (80007cc <LoopFillZerobss+0x1a>)
 80007a8:	4c09      	ldr	r4, [pc, #36]	@ (80007d0 <LoopFillZerobss+0x1e>)
 80007aa:	2300      	movs	r3, #0
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:
 80007b2:	42a2      	cmp	r2, r4
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>
 80007b6:	f001 feaf 	bl	8002518 <__libc_init_array>
 80007ba:	f7ff fcc7 	bl	800014c <main>
 80007be:	4770      	bx	lr
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000068 	.word	0x20000068
 80007c8:	080030c0 	.word	0x080030c0
 80007cc:	20000068 	.word	0x20000068
 80007d0:	20000200 	.word	0x20000200

080007d4 <ADC1_2_IRQHandler>:
 80007d4:	e7fe      	b.n	80007d4 <ADC1_2_IRQHandler>
	...

080007d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007dc:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <HAL_Init+0x28>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a07      	ldr	r2, [pc, #28]	@ (8000800 <HAL_Init+0x28>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 fe7b 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ee:	200f      	movs	r0, #15
 80007f0:	f000 f808 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f7ff fe32 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40022000 	.word	0x40022000

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <HAL_InitTick+0x54>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <HAL_InitTick+0x58>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081a:	fbb3 f3f1 	udiv	r3, r3, r1
 800081e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fe93 	bl	800154e <HAL_SYSTICK_Config>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e00e      	b.n	8000850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d80a      	bhi.n	800084e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f000 fe5b 	bl	80014fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000844:	4a06      	ldr	r2, [pc, #24]	@ (8000860 <HAL_InitTick+0x5c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000000 	.word	0x20000000
 800085c:	20000008 	.word	0x20000008
 8000860:	20000004 	.word	0x20000004

08000864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <HAL_IncTick+0x1c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <HAL_IncTick+0x20>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a03      	ldr	r2, [pc, #12]	@ (8000884 <HAL_IncTick+0x20>)
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	20000008 	.word	0x20000008
 8000884:	200000b0 	.word	0x200000b0

08000888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return uwTick;
 800088c:	4b02      	ldr	r3, [pc, #8]	@ (8000898 <HAL_GetTick+0x10>)
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	200000b0 	.word	0x200000b0

0800089c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a4:	f7ff fff0 	bl	8000888 <HAL_GetTick>
 80008a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b4:	d005      	beq.n	80008c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b6:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <HAL_Delay+0x44>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4413      	add	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008c2:	bf00      	nop
 80008c4:	f7ff ffe0 	bl	8000888 <HAL_GetTick>
 80008c8:	4602      	mov	r2, r0
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d8f7      	bhi.n	80008c4 <HAL_Delay+0x28>
  {
  }
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000008 	.word	0x20000008

080008e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d101      	bne.n	80008f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e0ed      	b.n	8000ad2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d102      	bne.n	8000908 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fddc 	bl	80004c0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f042 0201 	orr.w	r2, r2, #1
 8000916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000918:	f7ff ffb6 	bl	8000888 <HAL_GetTick>
 800091c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800091e:	e012      	b.n	8000946 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000920:	f7ff ffb2 	bl	8000888 <HAL_GetTick>
 8000924:	4602      	mov	r2, r0
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	2b0a      	cmp	r3, #10
 800092c:	d90b      	bls.n	8000946 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000932:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2205      	movs	r2, #5
 800093e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e0c5      	b.n	8000ad2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0e5      	beq.n	8000920 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f022 0202 	bic.w	r2, r2, #2
 8000962:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000964:	f7ff ff90 	bl	8000888 <HAL_GetTick>
 8000968:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800096a:	e012      	b.n	8000992 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800096c:	f7ff ff8c 	bl	8000888 <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	2b0a      	cmp	r3, #10
 8000978:	d90b      	bls.n	8000992 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800097e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2205      	movs	r2, #5
 800098a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e09f      	b.n	8000ad2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 0302 	and.w	r3, r3, #2
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1e5      	bne.n	800096c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7e1b      	ldrb	r3, [r3, #24]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d108      	bne.n	80009ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	e007      	b.n	80009ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80009c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7e5b      	ldrb	r3, [r3, #25]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d108      	bne.n	80009e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e007      	b.n	80009f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80009f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7e9b      	ldrb	r3, [r3, #26]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d108      	bne.n	8000a0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f042 0220 	orr.w	r2, r2, #32
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	e007      	b.n	8000a1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f022 0220 	bic.w	r2, r2, #32
 8000a1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7edb      	ldrb	r3, [r3, #27]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d108      	bne.n	8000a38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f022 0210 	bic.w	r2, r2, #16
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	e007      	b.n	8000a48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f042 0210 	orr.w	r2, r2, #16
 8000a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7f1b      	ldrb	r3, [r3, #28]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d108      	bne.n	8000a62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f042 0208 	orr.w	r2, r2, #8
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	e007      	b.n	8000a72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f022 0208 	bic.w	r2, r2, #8
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	7f5b      	ldrb	r3, [r3, #29]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d108      	bne.n	8000a8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f042 0204 	orr.w	r2, r2, #4
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	e007      	b.n	8000a9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f022 0204 	bic.w	r2, r2, #4
 8000a9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	ea42 0103 	orr.w	r1, r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2201      	movs	r2, #1
 8000acc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b087      	sub	sp, #28
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000af0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000af2:	7cfb      	ldrb	r3, [r7, #19]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d003      	beq.n	8000b00 <HAL_CAN_ConfigFilter+0x26>
 8000af8:	7cfb      	ldrb	r3, [r7, #19]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	f040 80aa 	bne.w	8000c54 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b06:	f043 0201 	orr.w	r2, r3, #1
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	f003 031f 	and.w	r3, r3, #31
 8000b18:	2201      	movs	r2, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d123      	bne.n	8000b82 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	401a      	ands	r2, r3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b58:	683a      	ldr	r2, [r7, #0]
 8000b5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3248      	adds	r2, #72	@ 0x48
 8000b62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b78:	6979      	ldr	r1, [r7, #20]
 8000b7a:	3348      	adds	r3, #72	@ 0x48
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	440b      	add	r3, r1
 8000b80:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d122      	bne.n	8000bd0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	431a      	orrs	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ba6:	683a      	ldr	r2, [r7, #0]
 8000ba8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000baa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3248      	adds	r2, #72	@ 0x48
 8000bb0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bc4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bc6:	6979      	ldr	r1, [r7, #20]
 8000bc8:	3348      	adds	r3, #72	@ 0x48
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	440b      	add	r3, r1
 8000bce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d109      	bne.n	8000bec <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000bea:	e007      	b.n	8000bfc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d109      	bne.n	8000c18 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000c16:	e007      	b.n	8000c28 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	431a      	orrs	r2, r3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	6a1b      	ldr	r3, [r3, #32]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d107      	bne.n	8000c40 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c46:	f023 0201 	bic.w	r2, r3, #1
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	e006      	b.n	8000c62 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c58:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
  }
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	371c      	adds	r7, #28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d12e      	bne.n	8000cde <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2202      	movs	r2, #2
 8000c84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f022 0201 	bic.w	r2, r2, #1
 8000c96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c98:	f7ff fdf6 	bl	8000888 <HAL_GetTick>
 8000c9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c9e:	e012      	b.n	8000cc6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ca0:	f7ff fdf2 	bl	8000888 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b0a      	cmp	r3, #10
 8000cac:	d90b      	bls.n	8000cc6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2205      	movs	r2, #5
 8000cbe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e012      	b.n	8000cec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1e5      	bne.n	8000ca0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e006      	b.n	8000cec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
  }
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	@ 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d08:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d12:	7ffb      	ldrb	r3, [r7, #31]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d003      	beq.n	8000d20 <HAL_CAN_AddTxMessage+0x2c>
 8000d18:	7ffb      	ldrb	r3, [r7, #31]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	f040 80ad 	bne.w	8000e7a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10a      	bne.n	8000d40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d105      	bne.n	8000d40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8095 	beq.w	8000e6a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	0e1b      	lsrs	r3, r3, #24
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10d      	bne.n	8000d78 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d66:	68f9      	ldr	r1, [r7, #12]
 8000d68:	6809      	ldr	r1, [r1, #0]
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3318      	adds	r3, #24
 8000d70:	011b      	lsls	r3, r3, #4
 8000d72:	440b      	add	r3, r1
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e00f      	b.n	8000d98 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d82:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d88:	68f9      	ldr	r1, [r7, #12]
 8000d8a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d8c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3318      	adds	r3, #24
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	440b      	add	r3, r1
 8000d96:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6819      	ldr	r1, [r3, #0]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	691a      	ldr	r2, [r3, #16]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3318      	adds	r3, #24
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	440b      	add	r3, r1
 8000da8:	3304      	adds	r3, #4
 8000daa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	7d1b      	ldrb	r3, [r3, #20]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d111      	bne.n	8000dd8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3318      	adds	r3, #24
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	4413      	add	r3, r2
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	6811      	ldr	r1, [r2, #0]
 8000dc8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	3318      	adds	r3, #24
 8000dd0:	011b      	lsls	r3, r3, #4
 8000dd2:	440b      	add	r3, r1
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3307      	adds	r3, #7
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	061a      	lsls	r2, r3, #24
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3306      	adds	r3, #6
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	041b      	lsls	r3, r3, #16
 8000de8:	431a      	orrs	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3305      	adds	r3, #5
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	4313      	orrs	r3, r2
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	3204      	adds	r2, #4
 8000df8:	7812      	ldrb	r2, [r2, #0]
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	6811      	ldr	r1, [r2, #0]
 8000e00:	ea43 0200 	orr.w	r2, r3, r0
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	011b      	lsls	r3, r3, #4
 8000e08:	440b      	add	r3, r1
 8000e0a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000e0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3303      	adds	r3, #3
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	061a      	lsls	r2, r3, #24
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	041b      	lsls	r3, r3, #16
 8000e20:	431a      	orrs	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3301      	adds	r3, #1
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	7812      	ldrb	r2, [r2, #0]
 8000e30:	4610      	mov	r0, r2
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	6811      	ldr	r1, [r2, #0]
 8000e36:	ea43 0200 	orr.w	r2, r3, r0
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	440b      	add	r3, r1
 8000e40:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e44:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3318      	adds	r3, #24
 8000e4e:	011b      	lsls	r3, r3, #4
 8000e50:	4413      	add	r3, r2
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	6811      	ldr	r1, [r2, #0]
 8000e58:	f043 0201 	orr.w	r2, r3, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3318      	adds	r3, #24
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	440b      	add	r3, r1
 8000e64:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e00e      	b.n	8000e88 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e006      	b.n	8000e88 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e7e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
  }
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3724      	adds	r7, #36	@ 0x24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b085      	sub	sp, #20
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d002      	beq.n	8000eb0 <HAL_CAN_ActivateNotification+0x1e>
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d109      	bne.n	8000ec4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6959      	ldr	r1, [r3, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e006      	b.n	8000ed2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
  }
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d07c      	beq.n	800101c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d023      	beq.n	8000f74 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2201      	movs	r2, #1
 8000f32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f983 	bl	800124a <HAL_CAN_TxMailbox0CompleteCallback>
 8000f44:	e016      	b.n	8000f74 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d004      	beq.n	8000f5a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f52:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f58:	e00c      	b.n	8000f74 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f66:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f6c:	e002      	b.n	8000f74 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f986 	bl	8001280 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d024      	beq.n	8000fc8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f962 	bl	800125c <HAL_CAN_TxMailbox1CompleteCallback>
 8000f98:	e016      	b.n	8000fc8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fac:	e00c      	b.n	8000fc8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d004      	beq.n	8000fc2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fc0:	e002      	b.n	8000fc8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f965 	bl	8001292 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d024      	beq.n	800101c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f941 	bl	800126e <HAL_CAN_TxMailbox2CompleteCallback>
 8000fec:	e016      	b.n	800101c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001000:	e00c      	b.n	800101c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d004      	beq.n	8001016 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
 8001014:	e002      	b.n	800101c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f944 	bl	80012a4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00c      	beq.n	8001040 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f003 0310 	and.w	r3, r3, #16
 800102c:	2b00      	cmp	r3, #0
 800102e:	d007      	beq.n	8001040 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2210      	movs	r2, #16
 800103e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001040:	6a3b      	ldr	r3, [r7, #32]
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00b      	beq.n	8001062 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	2b00      	cmp	r3, #0
 8001052:	d006      	beq.n	8001062 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2208      	movs	r2, #8
 800105a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f933 	bl	80012c8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d009      	beq.n	8001080 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f91b 	bl	80012b6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00c      	beq.n	80010a4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	f003 0310 	and.w	r3, r3, #16
 8001090:	2b00      	cmp	r3, #0
 8001092:	d007      	beq.n	80010a4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2210      	movs	r2, #16
 80010a2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	f003 0320 	and.w	r3, r3, #32
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00b      	beq.n	80010c6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2208      	movs	r2, #8
 80010be:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f913 	bl	80012ec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d009      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f8fb 	bl	80012da <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00b      	beq.n	8001106 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2210      	movs	r2, #16
 80010fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 f8fc 	bl	80012fe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00b      	beq.n	8001128 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2208      	movs	r2, #8
 8001120:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f8f4 	bl	8001310 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d07b      	beq.n	800122a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d072      	beq.n	8001222 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001142:	2b00      	cmp	r3, #0
 8001144:	d008      	beq.n	8001158 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800116c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116e:	f043 0302 	orr.w	r3, r3, #2
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800117a:	2b00      	cmp	r3, #0
 800117c:	d008      	beq.n	8001190 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001196:	2b00      	cmp	r3, #0
 8001198:	d043      	beq.n	8001222 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d03e      	beq.n	8001222 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80011aa:	2b60      	cmp	r3, #96	@ 0x60
 80011ac:	d02b      	beq.n	8001206 <HAL_CAN_IRQHandler+0x32a>
 80011ae:	2b60      	cmp	r3, #96	@ 0x60
 80011b0:	d82e      	bhi.n	8001210 <HAL_CAN_IRQHandler+0x334>
 80011b2:	2b50      	cmp	r3, #80	@ 0x50
 80011b4:	d022      	beq.n	80011fc <HAL_CAN_IRQHandler+0x320>
 80011b6:	2b50      	cmp	r3, #80	@ 0x50
 80011b8:	d82a      	bhi.n	8001210 <HAL_CAN_IRQHandler+0x334>
 80011ba:	2b40      	cmp	r3, #64	@ 0x40
 80011bc:	d019      	beq.n	80011f2 <HAL_CAN_IRQHandler+0x316>
 80011be:	2b40      	cmp	r3, #64	@ 0x40
 80011c0:	d826      	bhi.n	8001210 <HAL_CAN_IRQHandler+0x334>
 80011c2:	2b30      	cmp	r3, #48	@ 0x30
 80011c4:	d010      	beq.n	80011e8 <HAL_CAN_IRQHandler+0x30c>
 80011c6:	2b30      	cmp	r3, #48	@ 0x30
 80011c8:	d822      	bhi.n	8001210 <HAL_CAN_IRQHandler+0x334>
 80011ca:	2b10      	cmp	r3, #16
 80011cc:	d002      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x2f8>
 80011ce:	2b20      	cmp	r3, #32
 80011d0:	d005      	beq.n	80011de <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80011d2:	e01d      	b.n	8001210 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80011d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011dc:	e019      	b.n	8001212 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80011de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011e6:	e014      	b.n	8001212 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80011e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ea:	f043 0320 	orr.w	r3, r3, #32
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011f0:	e00f      	b.n	8001212 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80011f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011fa:	e00a      	b.n	8001212 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80011fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001204:	e005      	b.n	8001212 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800120e:	e000      	b.n	8001212 <HAL_CAN_IRQHandler+0x336>
            break;
 8001210:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001220:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2204      	movs	r2, #4
 8001228:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122c:	2b00      	cmp	r3, #0
 800122e:	d008      	beq.n	8001242 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f870 	bl	8001322 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	@ 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
	...

0800134c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001374:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4906      	ldr	r1, [pc, #24]	@ (80013e4 <__NVIC_EnableIRQ+0x34>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	@ (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	@ (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	@ 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	@ 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f7ff ff90 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff2d 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff42 	bl	8001394 <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff90 	bl	800143c <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5f 	bl	80013e8 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff35 	bl	80013b0 <__NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffa2 	bl	80014a0 <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001568:	b480      	push	{r7}
 800156a:	b08b      	sub	sp, #44	@ 0x2c
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157a:	e169      	b.n	8001850 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800157c:	2201      	movs	r2, #1
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	429a      	cmp	r2, r3
 8001596:	f040 8158 	bne.w	800184a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	4a9a      	ldr	r2, [pc, #616]	@ (8001808 <HAL_GPIO_Init+0x2a0>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d05e      	beq.n	8001662 <HAL_GPIO_Init+0xfa>
 80015a4:	4a98      	ldr	r2, [pc, #608]	@ (8001808 <HAL_GPIO_Init+0x2a0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d875      	bhi.n	8001696 <HAL_GPIO_Init+0x12e>
 80015aa:	4a98      	ldr	r2, [pc, #608]	@ (800180c <HAL_GPIO_Init+0x2a4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d058      	beq.n	8001662 <HAL_GPIO_Init+0xfa>
 80015b0:	4a96      	ldr	r2, [pc, #600]	@ (800180c <HAL_GPIO_Init+0x2a4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d86f      	bhi.n	8001696 <HAL_GPIO_Init+0x12e>
 80015b6:	4a96      	ldr	r2, [pc, #600]	@ (8001810 <HAL_GPIO_Init+0x2a8>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d052      	beq.n	8001662 <HAL_GPIO_Init+0xfa>
 80015bc:	4a94      	ldr	r2, [pc, #592]	@ (8001810 <HAL_GPIO_Init+0x2a8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d869      	bhi.n	8001696 <HAL_GPIO_Init+0x12e>
 80015c2:	4a94      	ldr	r2, [pc, #592]	@ (8001814 <HAL_GPIO_Init+0x2ac>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d04c      	beq.n	8001662 <HAL_GPIO_Init+0xfa>
 80015c8:	4a92      	ldr	r2, [pc, #584]	@ (8001814 <HAL_GPIO_Init+0x2ac>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d863      	bhi.n	8001696 <HAL_GPIO_Init+0x12e>
 80015ce:	4a92      	ldr	r2, [pc, #584]	@ (8001818 <HAL_GPIO_Init+0x2b0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d046      	beq.n	8001662 <HAL_GPIO_Init+0xfa>
 80015d4:	4a90      	ldr	r2, [pc, #576]	@ (8001818 <HAL_GPIO_Init+0x2b0>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d85d      	bhi.n	8001696 <HAL_GPIO_Init+0x12e>
 80015da:	2b12      	cmp	r3, #18
 80015dc:	d82a      	bhi.n	8001634 <HAL_GPIO_Init+0xcc>
 80015de:	2b12      	cmp	r3, #18
 80015e0:	d859      	bhi.n	8001696 <HAL_GPIO_Init+0x12e>
 80015e2:	a201      	add	r2, pc, #4	@ (adr r2, 80015e8 <HAL_GPIO_Init+0x80>)
 80015e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e8:	08001663 	.word	0x08001663
 80015ec:	0800163d 	.word	0x0800163d
 80015f0:	0800164f 	.word	0x0800164f
 80015f4:	08001691 	.word	0x08001691
 80015f8:	08001697 	.word	0x08001697
 80015fc:	08001697 	.word	0x08001697
 8001600:	08001697 	.word	0x08001697
 8001604:	08001697 	.word	0x08001697
 8001608:	08001697 	.word	0x08001697
 800160c:	08001697 	.word	0x08001697
 8001610:	08001697 	.word	0x08001697
 8001614:	08001697 	.word	0x08001697
 8001618:	08001697 	.word	0x08001697
 800161c:	08001697 	.word	0x08001697
 8001620:	08001697 	.word	0x08001697
 8001624:	08001697 	.word	0x08001697
 8001628:	08001697 	.word	0x08001697
 800162c:	08001645 	.word	0x08001645
 8001630:	08001659 	.word	0x08001659
 8001634:	4a79      	ldr	r2, [pc, #484]	@ (800181c <HAL_GPIO_Init+0x2b4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800163a:	e02c      	b.n	8001696 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	623b      	str	r3, [r7, #32]
          break;
 8001642:	e029      	b.n	8001698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	3304      	adds	r3, #4
 800164a:	623b      	str	r3, [r7, #32]
          break;
 800164c:	e024      	b.n	8001698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	3308      	adds	r3, #8
 8001654:	623b      	str	r3, [r7, #32]
          break;
 8001656:	e01f      	b.n	8001698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	330c      	adds	r3, #12
 800165e:	623b      	str	r3, [r7, #32]
          break;
 8001660:	e01a      	b.n	8001698 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800166a:	2304      	movs	r3, #4
 800166c:	623b      	str	r3, [r7, #32]
          break;
 800166e:	e013      	b.n	8001698 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d105      	bne.n	8001684 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001678:	2308      	movs	r3, #8
 800167a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	611a      	str	r2, [r3, #16]
          break;
 8001682:	e009      	b.n	8001698 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001684:	2308      	movs	r3, #8
 8001686:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	615a      	str	r2, [r3, #20]
          break;
 800168e:	e003      	b.n	8001698 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
          break;
 8001694:	e000      	b.n	8001698 <HAL_GPIO_Init+0x130>
          break;
 8001696:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2bff      	cmp	r3, #255	@ 0xff
 800169c:	d801      	bhi.n	80016a2 <HAL_GPIO_Init+0x13a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	e001      	b.n	80016a6 <HAL_GPIO_Init+0x13e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3304      	adds	r3, #4
 80016a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2bff      	cmp	r3, #255	@ 0xff
 80016ac:	d802      	bhi.n	80016b4 <HAL_GPIO_Init+0x14c>
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	e002      	b.n	80016ba <HAL_GPIO_Init+0x152>
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	3b08      	subs	r3, #8
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	210f      	movs	r1, #15
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	401a      	ands	r2, r3
 80016cc:	6a39      	ldr	r1, [r7, #32]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	431a      	orrs	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 80b1 	beq.w	800184a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001820 <HAL_GPIO_Init+0x2b8>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001820 <HAL_GPIO_Init+0x2b8>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001820 <HAL_GPIO_Init+0x2b8>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001700:	4a48      	ldr	r2, [pc, #288]	@ (8001824 <HAL_GPIO_Init+0x2bc>)
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3302      	adds	r3, #2
 8001708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800170e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	220f      	movs	r2, #15
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a40      	ldr	r2, [pc, #256]	@ (8001828 <HAL_GPIO_Init+0x2c0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d013      	beq.n	8001754 <HAL_GPIO_Init+0x1ec>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a3f      	ldr	r2, [pc, #252]	@ (800182c <HAL_GPIO_Init+0x2c4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d00d      	beq.n	8001750 <HAL_GPIO_Init+0x1e8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a3e      	ldr	r2, [pc, #248]	@ (8001830 <HAL_GPIO_Init+0x2c8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d007      	beq.n	800174c <HAL_GPIO_Init+0x1e4>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a3d      	ldr	r2, [pc, #244]	@ (8001834 <HAL_GPIO_Init+0x2cc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d101      	bne.n	8001748 <HAL_GPIO_Init+0x1e0>
 8001744:	2303      	movs	r3, #3
 8001746:	e006      	b.n	8001756 <HAL_GPIO_Init+0x1ee>
 8001748:	2304      	movs	r3, #4
 800174a:	e004      	b.n	8001756 <HAL_GPIO_Init+0x1ee>
 800174c:	2302      	movs	r3, #2
 800174e:	e002      	b.n	8001756 <HAL_GPIO_Init+0x1ee>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <HAL_GPIO_Init+0x1ee>
 8001754:	2300      	movs	r3, #0
 8001756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001758:	f002 0203 	and.w	r2, r2, #3
 800175c:	0092      	lsls	r2, r2, #2
 800175e:	4093      	lsls	r3, r2
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001766:	492f      	ldr	r1, [pc, #188]	@ (8001824 <HAL_GPIO_Init+0x2bc>)
 8001768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001780:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <HAL_GPIO_Init+0x2d0>)
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	492c      	ldr	r1, [pc, #176]	@ (8001838 <HAL_GPIO_Init+0x2d0>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	608b      	str	r3, [r1, #8]
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800178e:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <HAL_GPIO_Init+0x2d0>)
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	43db      	mvns	r3, r3
 8001796:	4928      	ldr	r1, [pc, #160]	@ (8001838 <HAL_GPIO_Init+0x2d0>)
 8001798:	4013      	ands	r3, r2
 800179a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017a8:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <HAL_GPIO_Init+0x2d0>)
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	4922      	ldr	r1, [pc, #136]	@ (8001838 <HAL_GPIO_Init+0x2d0>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	60cb      	str	r3, [r1, #12]
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_GPIO_Init+0x2d0>)
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	43db      	mvns	r3, r3
 80017be:	491e      	ldr	r1, [pc, #120]	@ (8001838 <HAL_GPIO_Init+0x2d0>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_GPIO_Init+0x2d0>)
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4918      	ldr	r1, [pc, #96]	@ (8001838 <HAL_GPIO_Init+0x2d0>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
 80017dc:	e006      	b.n	80017ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <HAL_GPIO_Init+0x2d0>)
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	4914      	ldr	r1, [pc, #80]	@ (8001838 <HAL_GPIO_Init+0x2d0>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d021      	beq.n	800183c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <HAL_GPIO_Init+0x2d0>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	490e      	ldr	r1, [pc, #56]	@ (8001838 <HAL_GPIO_Init+0x2d0>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
 8001804:	e021      	b.n	800184a <HAL_GPIO_Init+0x2e2>
 8001806:	bf00      	nop
 8001808:	10320000 	.word	0x10320000
 800180c:	10310000 	.word	0x10310000
 8001810:	10220000 	.word	0x10220000
 8001814:	10210000 	.word	0x10210000
 8001818:	10120000 	.word	0x10120000
 800181c:	10110000 	.word	0x10110000
 8001820:	40021000 	.word	0x40021000
 8001824:	40010000 	.word	0x40010000
 8001828:	40010800 	.word	0x40010800
 800182c:	40010c00 	.word	0x40010c00
 8001830:	40011000 	.word	0x40011000
 8001834:	40011400 	.word	0x40011400
 8001838:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800183c:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <HAL_GPIO_Init+0x304>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	43db      	mvns	r3, r3
 8001844:	4909      	ldr	r1, [pc, #36]	@ (800186c <HAL_GPIO_Init+0x304>)
 8001846:	4013      	ands	r3, r2
 8001848:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	3301      	adds	r3, #1
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	fa22 f303 	lsr.w	r3, r2, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	f47f ae8e 	bne.w	800157c <HAL_GPIO_Init+0x14>
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	372c      	adds	r7, #44	@ 0x2c
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	40010400 	.word	0x40010400

08001870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800188c:	e003      	b.n	8001896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	041a      	lsls	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	611a      	str	r2, [r3, #16]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e272      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8087 	beq.w	80019ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018c0:	4b92      	ldr	r3, [pc, #584]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d00c      	beq.n	80018e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018cc:	4b8f      	ldr	r3, [pc, #572]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d112      	bne.n	80018fe <HAL_RCC_OscConfig+0x5e>
 80018d8:	4b8c      	ldr	r3, [pc, #560]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e4:	d10b      	bne.n	80018fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e6:	4b89      	ldr	r3, [pc, #548]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d06c      	beq.n	80019cc <HAL_RCC_OscConfig+0x12c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d168      	bne.n	80019cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e24c      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001906:	d106      	bne.n	8001916 <HAL_RCC_OscConfig+0x76>
 8001908:	4b80      	ldr	r3, [pc, #512]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a7f      	ldr	r2, [pc, #508]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800190e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	e02e      	b.n	8001974 <HAL_RCC_OscConfig+0xd4>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x98>
 800191e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a7a      	ldr	r2, [pc, #488]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001924:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b78      	ldr	r3, [pc, #480]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a77      	ldr	r2, [pc, #476]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001930:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e01d      	b.n	8001974 <HAL_RCC_OscConfig+0xd4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0xbc>
 8001942:	4b72      	ldr	r3, [pc, #456]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a71      	ldr	r2, [pc, #452]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a6e      	ldr	r2, [pc, #440]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e00b      	b.n	8001974 <HAL_RCC_OscConfig+0xd4>
 800195c:	4b6b      	ldr	r3, [pc, #428]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a6a      	ldr	r2, [pc, #424]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b68      	ldr	r3, [pc, #416]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a67      	ldr	r2, [pc, #412]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800196e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001972:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7fe ff84 	bl	8000888 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7fe ff80 	bl	8000888 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	@ 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e200      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	4b5d      	ldr	r3, [pc, #372]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0xe4>
 80019a2:	e014      	b.n	80019ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7fe ff70 	bl	8000888 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ac:	f7fe ff6c 	bl	8000888 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	@ 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e1ec      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	4b53      	ldr	r3, [pc, #332]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x10c>
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d063      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019da:	4b4c      	ldr	r3, [pc, #304]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019e6:	4b49      	ldr	r3, [pc, #292]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d11c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x18c>
 80019f2:	4b46      	ldr	r3, [pc, #280]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d116      	bne.n	8001a2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	4b43      	ldr	r3, [pc, #268]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <HAL_RCC_OscConfig+0x176>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e1c0      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a16:	4b3d      	ldr	r3, [pc, #244]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4939      	ldr	r1, [pc, #228]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2a:	e03a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d020      	beq.n	8001a76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a34:	4b36      	ldr	r3, [pc, #216]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7fe ff25 	bl	8000888 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a42:	f7fe ff21 	bl	8000888 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e1a1      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	4b2d      	ldr	r3, [pc, #180]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a60:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4927      	ldr	r1, [pc, #156]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
 8001a74:	e015      	b.n	8001aa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a76:	4b26      	ldr	r3, [pc, #152]	@ (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7fe ff04 	bl	8000888 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a84:	f7fe ff00 	bl	8000888 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e180      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	4b1d      	ldr	r3, [pc, #116]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d03a      	beq.n	8001b24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d019      	beq.n	8001aea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab6:	4b17      	ldr	r3, [pc, #92]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abc:	f7fe fee4 	bl	8000888 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7fe fee0 	bl	8000888 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e160      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f000 fa9c 	bl	8002020 <RCC_Delay>
 8001ae8:	e01c      	b.n	8001b24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af0:	f7fe feca 	bl	8000888 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af6:	e00f      	b.n	8001b18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af8:	f7fe fec6 	bl	8000888 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d908      	bls.n	8001b18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e146      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	42420000 	.word	0x42420000
 8001b14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	4b92      	ldr	r3, [pc, #584]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1e9      	bne.n	8001af8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80a6 	beq.w	8001c7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b36:	4b8b      	ldr	r3, [pc, #556]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10d      	bne.n	8001b5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	4b88      	ldr	r3, [pc, #544]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a87      	ldr	r2, [pc, #540]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	61d3      	str	r3, [r2, #28]
 8001b4e:	4b85      	ldr	r3, [pc, #532]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5e:	4b82      	ldr	r3, [pc, #520]	@ (8001d68 <HAL_RCC_OscConfig+0x4c8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d118      	bne.n	8001b9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d68 <HAL_RCC_OscConfig+0x4c8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d68 <HAL_RCC_OscConfig+0x4c8>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b76:	f7fe fe87 	bl	8000888 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7e:	f7fe fe83 	bl	8000888 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b64      	cmp	r3, #100	@ 0x64
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e103      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	4b75      	ldr	r3, [pc, #468]	@ (8001d68 <HAL_RCC_OscConfig+0x4c8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x312>
 8001ba4:	4b6f      	ldr	r3, [pc, #444]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4a6e      	ldr	r2, [pc, #440]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6213      	str	r3, [r2, #32]
 8001bb0:	e02d      	b.n	8001c0e <HAL_RCC_OscConfig+0x36e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x334>
 8001bba:	4b6a      	ldr	r3, [pc, #424]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a69      	ldr	r2, [pc, #420]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	6213      	str	r3, [r2, #32]
 8001bc6:	4b67      	ldr	r3, [pc, #412]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4a66      	ldr	r2, [pc, #408]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	6213      	str	r3, [r2, #32]
 8001bd2:	e01c      	b.n	8001c0e <HAL_RCC_OscConfig+0x36e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d10c      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x356>
 8001bdc:	4b61      	ldr	r3, [pc, #388]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a60      	ldr	r2, [pc, #384]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4a5d      	ldr	r2, [pc, #372]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6213      	str	r3, [r2, #32]
 8001bf4:	e00b      	b.n	8001c0e <HAL_RCC_OscConfig+0x36e>
 8001bf6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a5a      	ldr	r2, [pc, #360]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	4b58      	ldr	r3, [pc, #352]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	4a57      	ldr	r2, [pc, #348]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d015      	beq.n	8001c42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c16:	f7fe fe37 	bl	8000888 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1c:	e00a      	b.n	8001c34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f7fe fe33 	bl	8000888 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e0b1      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c34:	4b4b      	ldr	r3, [pc, #300]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0ee      	beq.n	8001c1e <HAL_RCC_OscConfig+0x37e>
 8001c40:	e014      	b.n	8001c6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c42:	f7fe fe21 	bl	8000888 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f7fe fe1d 	bl	8000888 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e09b      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c60:	4b40      	ldr	r3, [pc, #256]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1ee      	bne.n	8001c4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d105      	bne.n	8001c7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c72:	4b3c      	ldr	r3, [pc, #240]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a3b      	ldr	r2, [pc, #236]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8087 	beq.w	8001d96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c88:	4b36      	ldr	r3, [pc, #216]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d061      	beq.n	8001d58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d146      	bne.n	8001d2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9c:	4b33      	ldr	r3, [pc, #204]	@ (8001d6c <HAL_RCC_OscConfig+0x4cc>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7fe fdf1 	bl	8000888 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001caa:	f7fe fded 	bl	8000888 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e06d      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbc:	4b29      	ldr	r3, [pc, #164]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd0:	d108      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cd2:	4b24      	ldr	r3, [pc, #144]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	4921      	ldr	r1, [pc, #132]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a19      	ldr	r1, [r3, #32]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	491b      	ldr	r1, [pc, #108]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_RCC_OscConfig+0x4cc>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7fe fdc1 	bl	8000888 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7fe fdbd 	bl	8000888 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e03d      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1c:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x46a>
 8001d28:	e035      	b.n	8001d96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <HAL_RCC_OscConfig+0x4cc>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7fe fdaa 	bl	8000888 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7fe fda6 	bl	8000888 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e026      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x498>
 8001d56:	e01e      	b.n	8001d96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e019      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40007000 	.word	0x40007000
 8001d6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d70:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <HAL_RCC_OscConfig+0x500>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000

08001da4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0d0      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001db8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f64 <HAL_RCC_ClockConfig+0x1c0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d910      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	4b67      	ldr	r3, [pc, #412]	@ (8001f64 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 0207 	bic.w	r2, r3, #7
 8001dce:	4965      	ldr	r1, [pc, #404]	@ (8001f64 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	4b63      	ldr	r3, [pc, #396]	@ (8001f64 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0b8      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d020      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e00:	4b59      	ldr	r3, [pc, #356]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4a58      	ldr	r2, [pc, #352]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e18:	4b53      	ldr	r3, [pc, #332]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a52      	ldr	r2, [pc, #328]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e24:	4b50      	ldr	r3, [pc, #320]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	494d      	ldr	r1, [pc, #308]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d040      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	4b47      	ldr	r3, [pc, #284]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d115      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e07f      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d107      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e62:	4b41      	ldr	r3, [pc, #260]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e073      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e72:	4b3d      	ldr	r3, [pc, #244]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e06b      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e82:	4b39      	ldr	r3, [pc, #228]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f023 0203 	bic.w	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4936      	ldr	r1, [pc, #216]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e94:	f7fe fcf8 	bl	8000888 <HAL_GetTick>
 8001e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9c:	f7fe fcf4 	bl	8000888 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e053      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 020c 	and.w	r2, r3, #12
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d1eb      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b27      	ldr	r3, [pc, #156]	@ (8001f64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d210      	bcs.n	8001ef4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b24      	ldr	r3, [pc, #144]	@ (8001f64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 0207 	bic.w	r2, r3, #7
 8001eda:	4922      	ldr	r1, [pc, #136]	@ (8001f64 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b20      	ldr	r3, [pc, #128]	@ (8001f64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e032      	b.n	8001f5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f00:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4916      	ldr	r1, [pc, #88]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f1e:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	490e      	ldr	r1, [pc, #56]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f32:	f000 f821 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8001f36:	4602      	mov	r2, r0
 8001f38:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	490a      	ldr	r1, [pc, #40]	@ (8001f6c <HAL_RCC_ClockConfig+0x1c8>)
 8001f44:	5ccb      	ldrb	r3, [r1, r3]
 8001f46:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4a:	4a09      	ldr	r2, [pc, #36]	@ (8001f70 <HAL_RCC_ClockConfig+0x1cc>)
 8001f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f4e:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <HAL_RCC_ClockConfig+0x1d0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fc56 	bl	8000804 <HAL_InitTick>

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40022000 	.word	0x40022000
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	08003060 	.word	0x08003060
 8001f70:	20000000 	.word	0x20000000
 8001f74:	20000004 	.word	0x20000004

08001f78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f92:	4b1e      	ldr	r3, [pc, #120]	@ (800200c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d002      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x30>
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d003      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0x36>
 8001fa6:	e027      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa8:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x98>)
 8001faa:	613b      	str	r3, [r7, #16]
      break;
 8001fac:	e027      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	0c9b      	lsrs	r3, r3, #18
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	4a17      	ldr	r2, [pc, #92]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fb8:	5cd3      	ldrb	r3, [r2, r3]
 8001fba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d010      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <HAL_RCC_GetSysClockFreq+0x94>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	0c5b      	lsrs	r3, r3, #17
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	4a11      	ldr	r2, [pc, #68]	@ (8002018 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fda:	fb03 f202 	mul.w	r2, r3, r2
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e004      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a0c      	ldr	r2, [pc, #48]	@ (800201c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fec:	fb02 f303 	mul.w	r3, r2, r3
 8001ff0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	613b      	str	r3, [r7, #16]
      break;
 8001ff6:	e002      	b.n	8001ffe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ffa:	613b      	str	r3, [r7, #16]
      break;
 8001ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ffe:	693b      	ldr	r3, [r7, #16]
}
 8002000:	4618      	mov	r0, r3
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	007a1200 	.word	0x007a1200
 8002014:	08003070 	.word	0x08003070
 8002018:	08003080 	.word	0x08003080
 800201c:	003d0900 	.word	0x003d0900

08002020 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002028:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <RCC_Delay+0x34>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <RCC_Delay+0x38>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0a5b      	lsrs	r3, r3, #9
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800203c:	bf00      	nop
  }
  while (Delay --);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1e5a      	subs	r2, r3, #1
 8002042:	60fa      	str	r2, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f9      	bne.n	800203c <RCC_Delay+0x1c>
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	20000000 	.word	0x20000000
 8002058:	10624dd3 	.word	0x10624dd3

0800205c <std>:
 800205c:	2300      	movs	r3, #0
 800205e:	b510      	push	{r4, lr}
 8002060:	4604      	mov	r4, r0
 8002062:	e9c0 3300 	strd	r3, r3, [r0]
 8002066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800206a:	6083      	str	r3, [r0, #8]
 800206c:	8181      	strh	r1, [r0, #12]
 800206e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002070:	81c2      	strh	r2, [r0, #14]
 8002072:	6183      	str	r3, [r0, #24]
 8002074:	4619      	mov	r1, r3
 8002076:	2208      	movs	r2, #8
 8002078:	305c      	adds	r0, #92	@ 0x5c
 800207a:	f000 f9f9 	bl	8002470 <memset>
 800207e:	4b0d      	ldr	r3, [pc, #52]	@ (80020b4 <std+0x58>)
 8002080:	6224      	str	r4, [r4, #32]
 8002082:	6263      	str	r3, [r4, #36]	@ 0x24
 8002084:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <std+0x5c>)
 8002086:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002088:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <std+0x60>)
 800208a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800208c:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <std+0x64>)
 800208e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <std+0x68>)
 8002092:	429c      	cmp	r4, r3
 8002094:	d006      	beq.n	80020a4 <std+0x48>
 8002096:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800209a:	4294      	cmp	r4, r2
 800209c:	d002      	beq.n	80020a4 <std+0x48>
 800209e:	33d0      	adds	r3, #208	@ 0xd0
 80020a0:	429c      	cmp	r4, r3
 80020a2:	d105      	bne.n	80020b0 <std+0x54>
 80020a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80020a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020ac:	f000 ba58 	b.w	8002560 <__retarget_lock_init_recursive>
 80020b0:	bd10      	pop	{r4, pc}
 80020b2:	bf00      	nop
 80020b4:	080022c1 	.word	0x080022c1
 80020b8:	080022e3 	.word	0x080022e3
 80020bc:	0800231b 	.word	0x0800231b
 80020c0:	0800233f 	.word	0x0800233f
 80020c4:	200000b4 	.word	0x200000b4

080020c8 <stdio_exit_handler>:
 80020c8:	4a02      	ldr	r2, [pc, #8]	@ (80020d4 <stdio_exit_handler+0xc>)
 80020ca:	4903      	ldr	r1, [pc, #12]	@ (80020d8 <stdio_exit_handler+0x10>)
 80020cc:	4803      	ldr	r0, [pc, #12]	@ (80020dc <stdio_exit_handler+0x14>)
 80020ce:	f000 b869 	b.w	80021a4 <_fwalk_sglue>
 80020d2:	bf00      	nop
 80020d4:	2000000c 	.word	0x2000000c
 80020d8:	08002e15 	.word	0x08002e15
 80020dc:	2000001c 	.word	0x2000001c

080020e0 <cleanup_stdio>:
 80020e0:	6841      	ldr	r1, [r0, #4]
 80020e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <cleanup_stdio+0x34>)
 80020e4:	b510      	push	{r4, lr}
 80020e6:	4299      	cmp	r1, r3
 80020e8:	4604      	mov	r4, r0
 80020ea:	d001      	beq.n	80020f0 <cleanup_stdio+0x10>
 80020ec:	f000 fe92 	bl	8002e14 <_fflush_r>
 80020f0:	68a1      	ldr	r1, [r4, #8]
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <cleanup_stdio+0x38>)
 80020f4:	4299      	cmp	r1, r3
 80020f6:	d002      	beq.n	80020fe <cleanup_stdio+0x1e>
 80020f8:	4620      	mov	r0, r4
 80020fa:	f000 fe8b 	bl	8002e14 <_fflush_r>
 80020fe:	68e1      	ldr	r1, [r4, #12]
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <cleanup_stdio+0x3c>)
 8002102:	4299      	cmp	r1, r3
 8002104:	d004      	beq.n	8002110 <cleanup_stdio+0x30>
 8002106:	4620      	mov	r0, r4
 8002108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800210c:	f000 be82 	b.w	8002e14 <_fflush_r>
 8002110:	bd10      	pop	{r4, pc}
 8002112:	bf00      	nop
 8002114:	200000b4 	.word	0x200000b4
 8002118:	2000011c 	.word	0x2000011c
 800211c:	20000184 	.word	0x20000184

08002120 <global_stdio_init.part.0>:
 8002120:	b510      	push	{r4, lr}
 8002122:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <global_stdio_init.part.0+0x30>)
 8002124:	4c0b      	ldr	r4, [pc, #44]	@ (8002154 <global_stdio_init.part.0+0x34>)
 8002126:	4a0c      	ldr	r2, [pc, #48]	@ (8002158 <global_stdio_init.part.0+0x38>)
 8002128:	4620      	mov	r0, r4
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	2104      	movs	r1, #4
 800212e:	2200      	movs	r2, #0
 8002130:	f7ff ff94 	bl	800205c <std>
 8002134:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002138:	2201      	movs	r2, #1
 800213a:	2109      	movs	r1, #9
 800213c:	f7ff ff8e 	bl	800205c <std>
 8002140:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002144:	2202      	movs	r2, #2
 8002146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800214a:	2112      	movs	r1, #18
 800214c:	f7ff bf86 	b.w	800205c <std>
 8002150:	200001ec 	.word	0x200001ec
 8002154:	200000b4 	.word	0x200000b4
 8002158:	080020c9 	.word	0x080020c9

0800215c <__sfp_lock_acquire>:
 800215c:	4801      	ldr	r0, [pc, #4]	@ (8002164 <__sfp_lock_acquire+0x8>)
 800215e:	f000 ba00 	b.w	8002562 <__retarget_lock_acquire_recursive>
 8002162:	bf00      	nop
 8002164:	200001f5 	.word	0x200001f5

08002168 <__sfp_lock_release>:
 8002168:	4801      	ldr	r0, [pc, #4]	@ (8002170 <__sfp_lock_release+0x8>)
 800216a:	f000 b9fb 	b.w	8002564 <__retarget_lock_release_recursive>
 800216e:	bf00      	nop
 8002170:	200001f5 	.word	0x200001f5

08002174 <__sinit>:
 8002174:	b510      	push	{r4, lr}
 8002176:	4604      	mov	r4, r0
 8002178:	f7ff fff0 	bl	800215c <__sfp_lock_acquire>
 800217c:	6a23      	ldr	r3, [r4, #32]
 800217e:	b11b      	cbz	r3, 8002188 <__sinit+0x14>
 8002180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002184:	f7ff bff0 	b.w	8002168 <__sfp_lock_release>
 8002188:	4b04      	ldr	r3, [pc, #16]	@ (800219c <__sinit+0x28>)
 800218a:	6223      	str	r3, [r4, #32]
 800218c:	4b04      	ldr	r3, [pc, #16]	@ (80021a0 <__sinit+0x2c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f5      	bne.n	8002180 <__sinit+0xc>
 8002194:	f7ff ffc4 	bl	8002120 <global_stdio_init.part.0>
 8002198:	e7f2      	b.n	8002180 <__sinit+0xc>
 800219a:	bf00      	nop
 800219c:	080020e1 	.word	0x080020e1
 80021a0:	200001ec 	.word	0x200001ec

080021a4 <_fwalk_sglue>:
 80021a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021a8:	4607      	mov	r7, r0
 80021aa:	4688      	mov	r8, r1
 80021ac:	4614      	mov	r4, r2
 80021ae:	2600      	movs	r6, #0
 80021b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021b4:	f1b9 0901 	subs.w	r9, r9, #1
 80021b8:	d505      	bpl.n	80021c6 <_fwalk_sglue+0x22>
 80021ba:	6824      	ldr	r4, [r4, #0]
 80021bc:	2c00      	cmp	r4, #0
 80021be:	d1f7      	bne.n	80021b0 <_fwalk_sglue+0xc>
 80021c0:	4630      	mov	r0, r6
 80021c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021c6:	89ab      	ldrh	r3, [r5, #12]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d907      	bls.n	80021dc <_fwalk_sglue+0x38>
 80021cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80021d0:	3301      	adds	r3, #1
 80021d2:	d003      	beq.n	80021dc <_fwalk_sglue+0x38>
 80021d4:	4629      	mov	r1, r5
 80021d6:	4638      	mov	r0, r7
 80021d8:	47c0      	blx	r8
 80021da:	4306      	orrs	r6, r0
 80021dc:	3568      	adds	r5, #104	@ 0x68
 80021de:	e7e9      	b.n	80021b4 <_fwalk_sglue+0x10>

080021e0 <iprintf>:
 80021e0:	b40f      	push	{r0, r1, r2, r3}
 80021e2:	b507      	push	{r0, r1, r2, lr}
 80021e4:	4906      	ldr	r1, [pc, #24]	@ (8002200 <iprintf+0x20>)
 80021e6:	ab04      	add	r3, sp, #16
 80021e8:	6808      	ldr	r0, [r1, #0]
 80021ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80021ee:	6881      	ldr	r1, [r0, #8]
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	f000 fae5 	bl	80027c0 <_vfiprintf_r>
 80021f6:	b003      	add	sp, #12
 80021f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80021fc:	b004      	add	sp, #16
 80021fe:	4770      	bx	lr
 8002200:	20000018 	.word	0x20000018

08002204 <_puts_r>:
 8002204:	6a03      	ldr	r3, [r0, #32]
 8002206:	b570      	push	{r4, r5, r6, lr}
 8002208:	4605      	mov	r5, r0
 800220a:	460e      	mov	r6, r1
 800220c:	6884      	ldr	r4, [r0, #8]
 800220e:	b90b      	cbnz	r3, 8002214 <_puts_r+0x10>
 8002210:	f7ff ffb0 	bl	8002174 <__sinit>
 8002214:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002216:	07db      	lsls	r3, r3, #31
 8002218:	d405      	bmi.n	8002226 <_puts_r+0x22>
 800221a:	89a3      	ldrh	r3, [r4, #12]
 800221c:	0598      	lsls	r0, r3, #22
 800221e:	d402      	bmi.n	8002226 <_puts_r+0x22>
 8002220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002222:	f000 f99e 	bl	8002562 <__retarget_lock_acquire_recursive>
 8002226:	89a3      	ldrh	r3, [r4, #12]
 8002228:	0719      	lsls	r1, r3, #28
 800222a:	d502      	bpl.n	8002232 <_puts_r+0x2e>
 800222c:	6923      	ldr	r3, [r4, #16]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d135      	bne.n	800229e <_puts_r+0x9a>
 8002232:	4621      	mov	r1, r4
 8002234:	4628      	mov	r0, r5
 8002236:	f000 f8c5 	bl	80023c4 <__swsetup_r>
 800223a:	b380      	cbz	r0, 800229e <_puts_r+0x9a>
 800223c:	f04f 35ff 	mov.w	r5, #4294967295
 8002240:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002242:	07da      	lsls	r2, r3, #31
 8002244:	d405      	bmi.n	8002252 <_puts_r+0x4e>
 8002246:	89a3      	ldrh	r3, [r4, #12]
 8002248:	059b      	lsls	r3, r3, #22
 800224a:	d402      	bmi.n	8002252 <_puts_r+0x4e>
 800224c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800224e:	f000 f989 	bl	8002564 <__retarget_lock_release_recursive>
 8002252:	4628      	mov	r0, r5
 8002254:	bd70      	pop	{r4, r5, r6, pc}
 8002256:	2b00      	cmp	r3, #0
 8002258:	da04      	bge.n	8002264 <_puts_r+0x60>
 800225a:	69a2      	ldr	r2, [r4, #24]
 800225c:	429a      	cmp	r2, r3
 800225e:	dc17      	bgt.n	8002290 <_puts_r+0x8c>
 8002260:	290a      	cmp	r1, #10
 8002262:	d015      	beq.n	8002290 <_puts_r+0x8c>
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	6022      	str	r2, [r4, #0]
 800226a:	7019      	strb	r1, [r3, #0]
 800226c:	68a3      	ldr	r3, [r4, #8]
 800226e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002272:	3b01      	subs	r3, #1
 8002274:	60a3      	str	r3, [r4, #8]
 8002276:	2900      	cmp	r1, #0
 8002278:	d1ed      	bne.n	8002256 <_puts_r+0x52>
 800227a:	2b00      	cmp	r3, #0
 800227c:	da11      	bge.n	80022a2 <_puts_r+0x9e>
 800227e:	4622      	mov	r2, r4
 8002280:	210a      	movs	r1, #10
 8002282:	4628      	mov	r0, r5
 8002284:	f000 f85f 	bl	8002346 <__swbuf_r>
 8002288:	3001      	adds	r0, #1
 800228a:	d0d7      	beq.n	800223c <_puts_r+0x38>
 800228c:	250a      	movs	r5, #10
 800228e:	e7d7      	b.n	8002240 <_puts_r+0x3c>
 8002290:	4622      	mov	r2, r4
 8002292:	4628      	mov	r0, r5
 8002294:	f000 f857 	bl	8002346 <__swbuf_r>
 8002298:	3001      	adds	r0, #1
 800229a:	d1e7      	bne.n	800226c <_puts_r+0x68>
 800229c:	e7ce      	b.n	800223c <_puts_r+0x38>
 800229e:	3e01      	subs	r6, #1
 80022a0:	e7e4      	b.n	800226c <_puts_r+0x68>
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	6022      	str	r2, [r4, #0]
 80022a8:	220a      	movs	r2, #10
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e7ee      	b.n	800228c <_puts_r+0x88>
	...

080022b0 <puts>:
 80022b0:	4b02      	ldr	r3, [pc, #8]	@ (80022bc <puts+0xc>)
 80022b2:	4601      	mov	r1, r0
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	f7ff bfa5 	b.w	8002204 <_puts_r>
 80022ba:	bf00      	nop
 80022bc:	20000018 	.word	0x20000018

080022c0 <__sread>:
 80022c0:	b510      	push	{r4, lr}
 80022c2:	460c      	mov	r4, r1
 80022c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c8:	f000 f8fc 	bl	80024c4 <_read_r>
 80022cc:	2800      	cmp	r0, #0
 80022ce:	bfab      	itete	ge
 80022d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80022d2:	89a3      	ldrhlt	r3, [r4, #12]
 80022d4:	181b      	addge	r3, r3, r0
 80022d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80022da:	bfac      	ite	ge
 80022dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80022de:	81a3      	strhlt	r3, [r4, #12]
 80022e0:	bd10      	pop	{r4, pc}

080022e2 <__swrite>:
 80022e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e6:	461f      	mov	r7, r3
 80022e8:	898b      	ldrh	r3, [r1, #12]
 80022ea:	4605      	mov	r5, r0
 80022ec:	05db      	lsls	r3, r3, #23
 80022ee:	460c      	mov	r4, r1
 80022f0:	4616      	mov	r6, r2
 80022f2:	d505      	bpl.n	8002300 <__swrite+0x1e>
 80022f4:	2302      	movs	r3, #2
 80022f6:	2200      	movs	r2, #0
 80022f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022fc:	f000 f8d0 	bl	80024a0 <_lseek_r>
 8002300:	89a3      	ldrh	r3, [r4, #12]
 8002302:	4632      	mov	r2, r6
 8002304:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002308:	81a3      	strh	r3, [r4, #12]
 800230a:	4628      	mov	r0, r5
 800230c:	463b      	mov	r3, r7
 800230e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002316:	f000 b8e7 	b.w	80024e8 <_write_r>

0800231a <__sseek>:
 800231a:	b510      	push	{r4, lr}
 800231c:	460c      	mov	r4, r1
 800231e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002322:	f000 f8bd 	bl	80024a0 <_lseek_r>
 8002326:	1c43      	adds	r3, r0, #1
 8002328:	89a3      	ldrh	r3, [r4, #12]
 800232a:	bf15      	itete	ne
 800232c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800232e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002332:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002336:	81a3      	strheq	r3, [r4, #12]
 8002338:	bf18      	it	ne
 800233a:	81a3      	strhne	r3, [r4, #12]
 800233c:	bd10      	pop	{r4, pc}

0800233e <__sclose>:
 800233e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002342:	f000 b89d 	b.w	8002480 <_close_r>

08002346 <__swbuf_r>:
 8002346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002348:	460e      	mov	r6, r1
 800234a:	4614      	mov	r4, r2
 800234c:	4605      	mov	r5, r0
 800234e:	b118      	cbz	r0, 8002358 <__swbuf_r+0x12>
 8002350:	6a03      	ldr	r3, [r0, #32]
 8002352:	b90b      	cbnz	r3, 8002358 <__swbuf_r+0x12>
 8002354:	f7ff ff0e 	bl	8002174 <__sinit>
 8002358:	69a3      	ldr	r3, [r4, #24]
 800235a:	60a3      	str	r3, [r4, #8]
 800235c:	89a3      	ldrh	r3, [r4, #12]
 800235e:	071a      	lsls	r2, r3, #28
 8002360:	d501      	bpl.n	8002366 <__swbuf_r+0x20>
 8002362:	6923      	ldr	r3, [r4, #16]
 8002364:	b943      	cbnz	r3, 8002378 <__swbuf_r+0x32>
 8002366:	4621      	mov	r1, r4
 8002368:	4628      	mov	r0, r5
 800236a:	f000 f82b 	bl	80023c4 <__swsetup_r>
 800236e:	b118      	cbz	r0, 8002378 <__swbuf_r+0x32>
 8002370:	f04f 37ff 	mov.w	r7, #4294967295
 8002374:	4638      	mov	r0, r7
 8002376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	6922      	ldr	r2, [r4, #16]
 800237c:	b2f6      	uxtb	r6, r6
 800237e:	1a98      	subs	r0, r3, r2
 8002380:	6963      	ldr	r3, [r4, #20]
 8002382:	4637      	mov	r7, r6
 8002384:	4283      	cmp	r3, r0
 8002386:	dc05      	bgt.n	8002394 <__swbuf_r+0x4e>
 8002388:	4621      	mov	r1, r4
 800238a:	4628      	mov	r0, r5
 800238c:	f000 fd42 	bl	8002e14 <_fflush_r>
 8002390:	2800      	cmp	r0, #0
 8002392:	d1ed      	bne.n	8002370 <__swbuf_r+0x2a>
 8002394:	68a3      	ldr	r3, [r4, #8]
 8002396:	3b01      	subs	r3, #1
 8002398:	60a3      	str	r3, [r4, #8]
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	6022      	str	r2, [r4, #0]
 80023a0:	701e      	strb	r6, [r3, #0]
 80023a2:	6962      	ldr	r2, [r4, #20]
 80023a4:	1c43      	adds	r3, r0, #1
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d004      	beq.n	80023b4 <__swbuf_r+0x6e>
 80023aa:	89a3      	ldrh	r3, [r4, #12]
 80023ac:	07db      	lsls	r3, r3, #31
 80023ae:	d5e1      	bpl.n	8002374 <__swbuf_r+0x2e>
 80023b0:	2e0a      	cmp	r6, #10
 80023b2:	d1df      	bne.n	8002374 <__swbuf_r+0x2e>
 80023b4:	4621      	mov	r1, r4
 80023b6:	4628      	mov	r0, r5
 80023b8:	f000 fd2c 	bl	8002e14 <_fflush_r>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d0d9      	beq.n	8002374 <__swbuf_r+0x2e>
 80023c0:	e7d6      	b.n	8002370 <__swbuf_r+0x2a>
	...

080023c4 <__swsetup_r>:
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	4b29      	ldr	r3, [pc, #164]	@ (800246c <__swsetup_r+0xa8>)
 80023c8:	4605      	mov	r5, r0
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	460c      	mov	r4, r1
 80023ce:	b118      	cbz	r0, 80023d8 <__swsetup_r+0x14>
 80023d0:	6a03      	ldr	r3, [r0, #32]
 80023d2:	b90b      	cbnz	r3, 80023d8 <__swsetup_r+0x14>
 80023d4:	f7ff fece 	bl	8002174 <__sinit>
 80023d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023dc:	0719      	lsls	r1, r3, #28
 80023de:	d422      	bmi.n	8002426 <__swsetup_r+0x62>
 80023e0:	06da      	lsls	r2, r3, #27
 80023e2:	d407      	bmi.n	80023f4 <__swsetup_r+0x30>
 80023e4:	2209      	movs	r2, #9
 80023e6:	602a      	str	r2, [r5, #0]
 80023e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295
 80023f0:	81a3      	strh	r3, [r4, #12]
 80023f2:	e033      	b.n	800245c <__swsetup_r+0x98>
 80023f4:	0758      	lsls	r0, r3, #29
 80023f6:	d512      	bpl.n	800241e <__swsetup_r+0x5a>
 80023f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80023fa:	b141      	cbz	r1, 800240e <__swsetup_r+0x4a>
 80023fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002400:	4299      	cmp	r1, r3
 8002402:	d002      	beq.n	800240a <__swsetup_r+0x46>
 8002404:	4628      	mov	r0, r5
 8002406:	f000 f8bd 	bl	8002584 <_free_r>
 800240a:	2300      	movs	r3, #0
 800240c:	6363      	str	r3, [r4, #52]	@ 0x34
 800240e:	89a3      	ldrh	r3, [r4, #12]
 8002410:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002414:	81a3      	strh	r3, [r4, #12]
 8002416:	2300      	movs	r3, #0
 8002418:	6063      	str	r3, [r4, #4]
 800241a:	6923      	ldr	r3, [r4, #16]
 800241c:	6023      	str	r3, [r4, #0]
 800241e:	89a3      	ldrh	r3, [r4, #12]
 8002420:	f043 0308 	orr.w	r3, r3, #8
 8002424:	81a3      	strh	r3, [r4, #12]
 8002426:	6923      	ldr	r3, [r4, #16]
 8002428:	b94b      	cbnz	r3, 800243e <__swsetup_r+0x7a>
 800242a:	89a3      	ldrh	r3, [r4, #12]
 800242c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002434:	d003      	beq.n	800243e <__swsetup_r+0x7a>
 8002436:	4621      	mov	r1, r4
 8002438:	4628      	mov	r0, r5
 800243a:	f000 fd38 	bl	8002eae <__smakebuf_r>
 800243e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002442:	f013 0201 	ands.w	r2, r3, #1
 8002446:	d00a      	beq.n	800245e <__swsetup_r+0x9a>
 8002448:	2200      	movs	r2, #0
 800244a:	60a2      	str	r2, [r4, #8]
 800244c:	6962      	ldr	r2, [r4, #20]
 800244e:	4252      	negs	r2, r2
 8002450:	61a2      	str	r2, [r4, #24]
 8002452:	6922      	ldr	r2, [r4, #16]
 8002454:	b942      	cbnz	r2, 8002468 <__swsetup_r+0xa4>
 8002456:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800245a:	d1c5      	bne.n	80023e8 <__swsetup_r+0x24>
 800245c:	bd38      	pop	{r3, r4, r5, pc}
 800245e:	0799      	lsls	r1, r3, #30
 8002460:	bf58      	it	pl
 8002462:	6962      	ldrpl	r2, [r4, #20]
 8002464:	60a2      	str	r2, [r4, #8]
 8002466:	e7f4      	b.n	8002452 <__swsetup_r+0x8e>
 8002468:	2000      	movs	r0, #0
 800246a:	e7f7      	b.n	800245c <__swsetup_r+0x98>
 800246c:	20000018 	.word	0x20000018

08002470 <memset>:
 8002470:	4603      	mov	r3, r0
 8002472:	4402      	add	r2, r0
 8002474:	4293      	cmp	r3, r2
 8002476:	d100      	bne.n	800247a <memset+0xa>
 8002478:	4770      	bx	lr
 800247a:	f803 1b01 	strb.w	r1, [r3], #1
 800247e:	e7f9      	b.n	8002474 <memset+0x4>

08002480 <_close_r>:
 8002480:	b538      	push	{r3, r4, r5, lr}
 8002482:	2300      	movs	r3, #0
 8002484:	4d05      	ldr	r5, [pc, #20]	@ (800249c <_close_r+0x1c>)
 8002486:	4604      	mov	r4, r0
 8002488:	4608      	mov	r0, r1
 800248a:	602b      	str	r3, [r5, #0]
 800248c:	f7fe f911 	bl	80006b2 <_close>
 8002490:	1c43      	adds	r3, r0, #1
 8002492:	d102      	bne.n	800249a <_close_r+0x1a>
 8002494:	682b      	ldr	r3, [r5, #0]
 8002496:	b103      	cbz	r3, 800249a <_close_r+0x1a>
 8002498:	6023      	str	r3, [r4, #0]
 800249a:	bd38      	pop	{r3, r4, r5, pc}
 800249c:	200001f0 	.word	0x200001f0

080024a0 <_lseek_r>:
 80024a0:	b538      	push	{r3, r4, r5, lr}
 80024a2:	4604      	mov	r4, r0
 80024a4:	4608      	mov	r0, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	2200      	movs	r2, #0
 80024aa:	4d05      	ldr	r5, [pc, #20]	@ (80024c0 <_lseek_r+0x20>)
 80024ac:	602a      	str	r2, [r5, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	f7fe f923 	bl	80006fa <_lseek>
 80024b4:	1c43      	adds	r3, r0, #1
 80024b6:	d102      	bne.n	80024be <_lseek_r+0x1e>
 80024b8:	682b      	ldr	r3, [r5, #0]
 80024ba:	b103      	cbz	r3, 80024be <_lseek_r+0x1e>
 80024bc:	6023      	str	r3, [r4, #0]
 80024be:	bd38      	pop	{r3, r4, r5, pc}
 80024c0:	200001f0 	.word	0x200001f0

080024c4 <_read_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4604      	mov	r4, r0
 80024c8:	4608      	mov	r0, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	2200      	movs	r2, #0
 80024ce:	4d05      	ldr	r5, [pc, #20]	@ (80024e4 <_read_r+0x20>)
 80024d0:	602a      	str	r2, [r5, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f7fe f8b4 	bl	8000640 <_read>
 80024d8:	1c43      	adds	r3, r0, #1
 80024da:	d102      	bne.n	80024e2 <_read_r+0x1e>
 80024dc:	682b      	ldr	r3, [r5, #0]
 80024de:	b103      	cbz	r3, 80024e2 <_read_r+0x1e>
 80024e0:	6023      	str	r3, [r4, #0]
 80024e2:	bd38      	pop	{r3, r4, r5, pc}
 80024e4:	200001f0 	.word	0x200001f0

080024e8 <_write_r>:
 80024e8:	b538      	push	{r3, r4, r5, lr}
 80024ea:	4604      	mov	r4, r0
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	2200      	movs	r2, #0
 80024f2:	4d05      	ldr	r5, [pc, #20]	@ (8002508 <_write_r+0x20>)
 80024f4:	602a      	str	r2, [r5, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	f7fe f8bf 	bl	800067a <_write>
 80024fc:	1c43      	adds	r3, r0, #1
 80024fe:	d102      	bne.n	8002506 <_write_r+0x1e>
 8002500:	682b      	ldr	r3, [r5, #0]
 8002502:	b103      	cbz	r3, 8002506 <_write_r+0x1e>
 8002504:	6023      	str	r3, [r4, #0]
 8002506:	bd38      	pop	{r3, r4, r5, pc}
 8002508:	200001f0 	.word	0x200001f0

0800250c <__errno>:
 800250c:	4b01      	ldr	r3, [pc, #4]	@ (8002514 <__errno+0x8>)
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	20000018 	.word	0x20000018

08002518 <__libc_init_array>:
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	2600      	movs	r6, #0
 800251c:	4d0c      	ldr	r5, [pc, #48]	@ (8002550 <__libc_init_array+0x38>)
 800251e:	4c0d      	ldr	r4, [pc, #52]	@ (8002554 <__libc_init_array+0x3c>)
 8002520:	1b64      	subs	r4, r4, r5
 8002522:	10a4      	asrs	r4, r4, #2
 8002524:	42a6      	cmp	r6, r4
 8002526:	d109      	bne.n	800253c <__libc_init_array+0x24>
 8002528:	f000 fd3e 	bl	8002fa8 <_init>
 800252c:	2600      	movs	r6, #0
 800252e:	4d0a      	ldr	r5, [pc, #40]	@ (8002558 <__libc_init_array+0x40>)
 8002530:	4c0a      	ldr	r4, [pc, #40]	@ (800255c <__libc_init_array+0x44>)
 8002532:	1b64      	subs	r4, r4, r5
 8002534:	10a4      	asrs	r4, r4, #2
 8002536:	42a6      	cmp	r6, r4
 8002538:	d105      	bne.n	8002546 <__libc_init_array+0x2e>
 800253a:	bd70      	pop	{r4, r5, r6, pc}
 800253c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002540:	4798      	blx	r3
 8002542:	3601      	adds	r6, #1
 8002544:	e7ee      	b.n	8002524 <__libc_init_array+0xc>
 8002546:	f855 3b04 	ldr.w	r3, [r5], #4
 800254a:	4798      	blx	r3
 800254c:	3601      	adds	r6, #1
 800254e:	e7f2      	b.n	8002536 <__libc_init_array+0x1e>
 8002550:	080030b8 	.word	0x080030b8
 8002554:	080030b8 	.word	0x080030b8
 8002558:	080030b8 	.word	0x080030b8
 800255c:	080030bc 	.word	0x080030bc

08002560 <__retarget_lock_init_recursive>:
 8002560:	4770      	bx	lr

08002562 <__retarget_lock_acquire_recursive>:
 8002562:	4770      	bx	lr

08002564 <__retarget_lock_release_recursive>:
 8002564:	4770      	bx	lr

08002566 <memcpy>:
 8002566:	440a      	add	r2, r1
 8002568:	4291      	cmp	r1, r2
 800256a:	f100 33ff 	add.w	r3, r0, #4294967295
 800256e:	d100      	bne.n	8002572 <memcpy+0xc>
 8002570:	4770      	bx	lr
 8002572:	b510      	push	{r4, lr}
 8002574:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002578:	4291      	cmp	r1, r2
 800257a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800257e:	d1f9      	bne.n	8002574 <memcpy+0xe>
 8002580:	bd10      	pop	{r4, pc}
	...

08002584 <_free_r>:
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	4605      	mov	r5, r0
 8002588:	2900      	cmp	r1, #0
 800258a:	d040      	beq.n	800260e <_free_r+0x8a>
 800258c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002590:	1f0c      	subs	r4, r1, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	bfb8      	it	lt
 8002596:	18e4      	addlt	r4, r4, r3
 8002598:	f000 f8de 	bl	8002758 <__malloc_lock>
 800259c:	4a1c      	ldr	r2, [pc, #112]	@ (8002610 <_free_r+0x8c>)
 800259e:	6813      	ldr	r3, [r2, #0]
 80025a0:	b933      	cbnz	r3, 80025b0 <_free_r+0x2c>
 80025a2:	6063      	str	r3, [r4, #4]
 80025a4:	6014      	str	r4, [r2, #0]
 80025a6:	4628      	mov	r0, r5
 80025a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025ac:	f000 b8da 	b.w	8002764 <__malloc_unlock>
 80025b0:	42a3      	cmp	r3, r4
 80025b2:	d908      	bls.n	80025c6 <_free_r+0x42>
 80025b4:	6820      	ldr	r0, [r4, #0]
 80025b6:	1821      	adds	r1, r4, r0
 80025b8:	428b      	cmp	r3, r1
 80025ba:	bf01      	itttt	eq
 80025bc:	6819      	ldreq	r1, [r3, #0]
 80025be:	685b      	ldreq	r3, [r3, #4]
 80025c0:	1809      	addeq	r1, r1, r0
 80025c2:	6021      	streq	r1, [r4, #0]
 80025c4:	e7ed      	b.n	80025a2 <_free_r+0x1e>
 80025c6:	461a      	mov	r2, r3
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	b10b      	cbz	r3, 80025d0 <_free_r+0x4c>
 80025cc:	42a3      	cmp	r3, r4
 80025ce:	d9fa      	bls.n	80025c6 <_free_r+0x42>
 80025d0:	6811      	ldr	r1, [r2, #0]
 80025d2:	1850      	adds	r0, r2, r1
 80025d4:	42a0      	cmp	r0, r4
 80025d6:	d10b      	bne.n	80025f0 <_free_r+0x6c>
 80025d8:	6820      	ldr	r0, [r4, #0]
 80025da:	4401      	add	r1, r0
 80025dc:	1850      	adds	r0, r2, r1
 80025de:	4283      	cmp	r3, r0
 80025e0:	6011      	str	r1, [r2, #0]
 80025e2:	d1e0      	bne.n	80025a6 <_free_r+0x22>
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4408      	add	r0, r1
 80025ea:	6010      	str	r0, [r2, #0]
 80025ec:	6053      	str	r3, [r2, #4]
 80025ee:	e7da      	b.n	80025a6 <_free_r+0x22>
 80025f0:	d902      	bls.n	80025f8 <_free_r+0x74>
 80025f2:	230c      	movs	r3, #12
 80025f4:	602b      	str	r3, [r5, #0]
 80025f6:	e7d6      	b.n	80025a6 <_free_r+0x22>
 80025f8:	6820      	ldr	r0, [r4, #0]
 80025fa:	1821      	adds	r1, r4, r0
 80025fc:	428b      	cmp	r3, r1
 80025fe:	bf01      	itttt	eq
 8002600:	6819      	ldreq	r1, [r3, #0]
 8002602:	685b      	ldreq	r3, [r3, #4]
 8002604:	1809      	addeq	r1, r1, r0
 8002606:	6021      	streq	r1, [r4, #0]
 8002608:	6063      	str	r3, [r4, #4]
 800260a:	6054      	str	r4, [r2, #4]
 800260c:	e7cb      	b.n	80025a6 <_free_r+0x22>
 800260e:	bd38      	pop	{r3, r4, r5, pc}
 8002610:	200001fc 	.word	0x200001fc

08002614 <sbrk_aligned>:
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	4e0f      	ldr	r6, [pc, #60]	@ (8002654 <sbrk_aligned+0x40>)
 8002618:	460c      	mov	r4, r1
 800261a:	6831      	ldr	r1, [r6, #0]
 800261c:	4605      	mov	r5, r0
 800261e:	b911      	cbnz	r1, 8002626 <sbrk_aligned+0x12>
 8002620:	f000 fca4 	bl	8002f6c <_sbrk_r>
 8002624:	6030      	str	r0, [r6, #0]
 8002626:	4621      	mov	r1, r4
 8002628:	4628      	mov	r0, r5
 800262a:	f000 fc9f 	bl	8002f6c <_sbrk_r>
 800262e:	1c43      	adds	r3, r0, #1
 8002630:	d103      	bne.n	800263a <sbrk_aligned+0x26>
 8002632:	f04f 34ff 	mov.w	r4, #4294967295
 8002636:	4620      	mov	r0, r4
 8002638:	bd70      	pop	{r4, r5, r6, pc}
 800263a:	1cc4      	adds	r4, r0, #3
 800263c:	f024 0403 	bic.w	r4, r4, #3
 8002640:	42a0      	cmp	r0, r4
 8002642:	d0f8      	beq.n	8002636 <sbrk_aligned+0x22>
 8002644:	1a21      	subs	r1, r4, r0
 8002646:	4628      	mov	r0, r5
 8002648:	f000 fc90 	bl	8002f6c <_sbrk_r>
 800264c:	3001      	adds	r0, #1
 800264e:	d1f2      	bne.n	8002636 <sbrk_aligned+0x22>
 8002650:	e7ef      	b.n	8002632 <sbrk_aligned+0x1e>
 8002652:	bf00      	nop
 8002654:	200001f8 	.word	0x200001f8

08002658 <_malloc_r>:
 8002658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800265c:	1ccd      	adds	r5, r1, #3
 800265e:	f025 0503 	bic.w	r5, r5, #3
 8002662:	3508      	adds	r5, #8
 8002664:	2d0c      	cmp	r5, #12
 8002666:	bf38      	it	cc
 8002668:	250c      	movcc	r5, #12
 800266a:	2d00      	cmp	r5, #0
 800266c:	4606      	mov	r6, r0
 800266e:	db01      	blt.n	8002674 <_malloc_r+0x1c>
 8002670:	42a9      	cmp	r1, r5
 8002672:	d904      	bls.n	800267e <_malloc_r+0x26>
 8002674:	230c      	movs	r3, #12
 8002676:	6033      	str	r3, [r6, #0]
 8002678:	2000      	movs	r0, #0
 800267a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800267e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002754 <_malloc_r+0xfc>
 8002682:	f000 f869 	bl	8002758 <__malloc_lock>
 8002686:	f8d8 3000 	ldr.w	r3, [r8]
 800268a:	461c      	mov	r4, r3
 800268c:	bb44      	cbnz	r4, 80026e0 <_malloc_r+0x88>
 800268e:	4629      	mov	r1, r5
 8002690:	4630      	mov	r0, r6
 8002692:	f7ff ffbf 	bl	8002614 <sbrk_aligned>
 8002696:	1c43      	adds	r3, r0, #1
 8002698:	4604      	mov	r4, r0
 800269a:	d158      	bne.n	800274e <_malloc_r+0xf6>
 800269c:	f8d8 4000 	ldr.w	r4, [r8]
 80026a0:	4627      	mov	r7, r4
 80026a2:	2f00      	cmp	r7, #0
 80026a4:	d143      	bne.n	800272e <_malloc_r+0xd6>
 80026a6:	2c00      	cmp	r4, #0
 80026a8:	d04b      	beq.n	8002742 <_malloc_r+0xea>
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	4639      	mov	r1, r7
 80026ae:	4630      	mov	r0, r6
 80026b0:	eb04 0903 	add.w	r9, r4, r3
 80026b4:	f000 fc5a 	bl	8002f6c <_sbrk_r>
 80026b8:	4581      	cmp	r9, r0
 80026ba:	d142      	bne.n	8002742 <_malloc_r+0xea>
 80026bc:	6821      	ldr	r1, [r4, #0]
 80026be:	4630      	mov	r0, r6
 80026c0:	1a6d      	subs	r5, r5, r1
 80026c2:	4629      	mov	r1, r5
 80026c4:	f7ff ffa6 	bl	8002614 <sbrk_aligned>
 80026c8:	3001      	adds	r0, #1
 80026ca:	d03a      	beq.n	8002742 <_malloc_r+0xea>
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	442b      	add	r3, r5
 80026d0:	6023      	str	r3, [r4, #0]
 80026d2:	f8d8 3000 	ldr.w	r3, [r8]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	bb62      	cbnz	r2, 8002734 <_malloc_r+0xdc>
 80026da:	f8c8 7000 	str.w	r7, [r8]
 80026de:	e00f      	b.n	8002700 <_malloc_r+0xa8>
 80026e0:	6822      	ldr	r2, [r4, #0]
 80026e2:	1b52      	subs	r2, r2, r5
 80026e4:	d420      	bmi.n	8002728 <_malloc_r+0xd0>
 80026e6:	2a0b      	cmp	r2, #11
 80026e8:	d917      	bls.n	800271a <_malloc_r+0xc2>
 80026ea:	1961      	adds	r1, r4, r5
 80026ec:	42a3      	cmp	r3, r4
 80026ee:	6025      	str	r5, [r4, #0]
 80026f0:	bf18      	it	ne
 80026f2:	6059      	strne	r1, [r3, #4]
 80026f4:	6863      	ldr	r3, [r4, #4]
 80026f6:	bf08      	it	eq
 80026f8:	f8c8 1000 	streq.w	r1, [r8]
 80026fc:	5162      	str	r2, [r4, r5]
 80026fe:	604b      	str	r3, [r1, #4]
 8002700:	4630      	mov	r0, r6
 8002702:	f000 f82f 	bl	8002764 <__malloc_unlock>
 8002706:	f104 000b 	add.w	r0, r4, #11
 800270a:	1d23      	adds	r3, r4, #4
 800270c:	f020 0007 	bic.w	r0, r0, #7
 8002710:	1ac2      	subs	r2, r0, r3
 8002712:	bf1c      	itt	ne
 8002714:	1a1b      	subne	r3, r3, r0
 8002716:	50a3      	strne	r3, [r4, r2]
 8002718:	e7af      	b.n	800267a <_malloc_r+0x22>
 800271a:	6862      	ldr	r2, [r4, #4]
 800271c:	42a3      	cmp	r3, r4
 800271e:	bf0c      	ite	eq
 8002720:	f8c8 2000 	streq.w	r2, [r8]
 8002724:	605a      	strne	r2, [r3, #4]
 8002726:	e7eb      	b.n	8002700 <_malloc_r+0xa8>
 8002728:	4623      	mov	r3, r4
 800272a:	6864      	ldr	r4, [r4, #4]
 800272c:	e7ae      	b.n	800268c <_malloc_r+0x34>
 800272e:	463c      	mov	r4, r7
 8002730:	687f      	ldr	r7, [r7, #4]
 8002732:	e7b6      	b.n	80026a2 <_malloc_r+0x4a>
 8002734:	461a      	mov	r2, r3
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	42a3      	cmp	r3, r4
 800273a:	d1fb      	bne.n	8002734 <_malloc_r+0xdc>
 800273c:	2300      	movs	r3, #0
 800273e:	6053      	str	r3, [r2, #4]
 8002740:	e7de      	b.n	8002700 <_malloc_r+0xa8>
 8002742:	230c      	movs	r3, #12
 8002744:	4630      	mov	r0, r6
 8002746:	6033      	str	r3, [r6, #0]
 8002748:	f000 f80c 	bl	8002764 <__malloc_unlock>
 800274c:	e794      	b.n	8002678 <_malloc_r+0x20>
 800274e:	6005      	str	r5, [r0, #0]
 8002750:	e7d6      	b.n	8002700 <_malloc_r+0xa8>
 8002752:	bf00      	nop
 8002754:	200001fc 	.word	0x200001fc

08002758 <__malloc_lock>:
 8002758:	4801      	ldr	r0, [pc, #4]	@ (8002760 <__malloc_lock+0x8>)
 800275a:	f7ff bf02 	b.w	8002562 <__retarget_lock_acquire_recursive>
 800275e:	bf00      	nop
 8002760:	200001f4 	.word	0x200001f4

08002764 <__malloc_unlock>:
 8002764:	4801      	ldr	r0, [pc, #4]	@ (800276c <__malloc_unlock+0x8>)
 8002766:	f7ff befd 	b.w	8002564 <__retarget_lock_release_recursive>
 800276a:	bf00      	nop
 800276c:	200001f4 	.word	0x200001f4

08002770 <__sfputc_r>:
 8002770:	6893      	ldr	r3, [r2, #8]
 8002772:	b410      	push	{r4}
 8002774:	3b01      	subs	r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	6093      	str	r3, [r2, #8]
 800277a:	da07      	bge.n	800278c <__sfputc_r+0x1c>
 800277c:	6994      	ldr	r4, [r2, #24]
 800277e:	42a3      	cmp	r3, r4
 8002780:	db01      	blt.n	8002786 <__sfputc_r+0x16>
 8002782:	290a      	cmp	r1, #10
 8002784:	d102      	bne.n	800278c <__sfputc_r+0x1c>
 8002786:	bc10      	pop	{r4}
 8002788:	f7ff bddd 	b.w	8002346 <__swbuf_r>
 800278c:	6813      	ldr	r3, [r2, #0]
 800278e:	1c58      	adds	r0, r3, #1
 8002790:	6010      	str	r0, [r2, #0]
 8002792:	7019      	strb	r1, [r3, #0]
 8002794:	4608      	mov	r0, r1
 8002796:	bc10      	pop	{r4}
 8002798:	4770      	bx	lr

0800279a <__sfputs_r>:
 800279a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279c:	4606      	mov	r6, r0
 800279e:	460f      	mov	r7, r1
 80027a0:	4614      	mov	r4, r2
 80027a2:	18d5      	adds	r5, r2, r3
 80027a4:	42ac      	cmp	r4, r5
 80027a6:	d101      	bne.n	80027ac <__sfputs_r+0x12>
 80027a8:	2000      	movs	r0, #0
 80027aa:	e007      	b.n	80027bc <__sfputs_r+0x22>
 80027ac:	463a      	mov	r2, r7
 80027ae:	4630      	mov	r0, r6
 80027b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027b4:	f7ff ffdc 	bl	8002770 <__sfputc_r>
 80027b8:	1c43      	adds	r3, r0, #1
 80027ba:	d1f3      	bne.n	80027a4 <__sfputs_r+0xa>
 80027bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027c0 <_vfiprintf_r>:
 80027c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027c4:	460d      	mov	r5, r1
 80027c6:	4614      	mov	r4, r2
 80027c8:	4698      	mov	r8, r3
 80027ca:	4606      	mov	r6, r0
 80027cc:	b09d      	sub	sp, #116	@ 0x74
 80027ce:	b118      	cbz	r0, 80027d8 <_vfiprintf_r+0x18>
 80027d0:	6a03      	ldr	r3, [r0, #32]
 80027d2:	b90b      	cbnz	r3, 80027d8 <_vfiprintf_r+0x18>
 80027d4:	f7ff fcce 	bl	8002174 <__sinit>
 80027d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80027da:	07d9      	lsls	r1, r3, #31
 80027dc:	d405      	bmi.n	80027ea <_vfiprintf_r+0x2a>
 80027de:	89ab      	ldrh	r3, [r5, #12]
 80027e0:	059a      	lsls	r2, r3, #22
 80027e2:	d402      	bmi.n	80027ea <_vfiprintf_r+0x2a>
 80027e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80027e6:	f7ff febc 	bl	8002562 <__retarget_lock_acquire_recursive>
 80027ea:	89ab      	ldrh	r3, [r5, #12]
 80027ec:	071b      	lsls	r3, r3, #28
 80027ee:	d501      	bpl.n	80027f4 <_vfiprintf_r+0x34>
 80027f0:	692b      	ldr	r3, [r5, #16]
 80027f2:	b99b      	cbnz	r3, 800281c <_vfiprintf_r+0x5c>
 80027f4:	4629      	mov	r1, r5
 80027f6:	4630      	mov	r0, r6
 80027f8:	f7ff fde4 	bl	80023c4 <__swsetup_r>
 80027fc:	b170      	cbz	r0, 800281c <_vfiprintf_r+0x5c>
 80027fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002800:	07dc      	lsls	r4, r3, #31
 8002802:	d504      	bpl.n	800280e <_vfiprintf_r+0x4e>
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	b01d      	add	sp, #116	@ 0x74
 800280a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800280e:	89ab      	ldrh	r3, [r5, #12]
 8002810:	0598      	lsls	r0, r3, #22
 8002812:	d4f7      	bmi.n	8002804 <_vfiprintf_r+0x44>
 8002814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002816:	f7ff fea5 	bl	8002564 <__retarget_lock_release_recursive>
 800281a:	e7f3      	b.n	8002804 <_vfiprintf_r+0x44>
 800281c:	2300      	movs	r3, #0
 800281e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002820:	2320      	movs	r3, #32
 8002822:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002826:	2330      	movs	r3, #48	@ 0x30
 8002828:	f04f 0901 	mov.w	r9, #1
 800282c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002830:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80029dc <_vfiprintf_r+0x21c>
 8002834:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002838:	4623      	mov	r3, r4
 800283a:	469a      	mov	sl, r3
 800283c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002840:	b10a      	cbz	r2, 8002846 <_vfiprintf_r+0x86>
 8002842:	2a25      	cmp	r2, #37	@ 0x25
 8002844:	d1f9      	bne.n	800283a <_vfiprintf_r+0x7a>
 8002846:	ebba 0b04 	subs.w	fp, sl, r4
 800284a:	d00b      	beq.n	8002864 <_vfiprintf_r+0xa4>
 800284c:	465b      	mov	r3, fp
 800284e:	4622      	mov	r2, r4
 8002850:	4629      	mov	r1, r5
 8002852:	4630      	mov	r0, r6
 8002854:	f7ff ffa1 	bl	800279a <__sfputs_r>
 8002858:	3001      	adds	r0, #1
 800285a:	f000 80a7 	beq.w	80029ac <_vfiprintf_r+0x1ec>
 800285e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002860:	445a      	add	r2, fp
 8002862:	9209      	str	r2, [sp, #36]	@ 0x24
 8002864:	f89a 3000 	ldrb.w	r3, [sl]
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 809f 	beq.w	80029ac <_vfiprintf_r+0x1ec>
 800286e:	2300      	movs	r3, #0
 8002870:	f04f 32ff 	mov.w	r2, #4294967295
 8002874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002878:	f10a 0a01 	add.w	sl, sl, #1
 800287c:	9304      	str	r3, [sp, #16]
 800287e:	9307      	str	r3, [sp, #28]
 8002880:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002884:	931a      	str	r3, [sp, #104]	@ 0x68
 8002886:	4654      	mov	r4, sl
 8002888:	2205      	movs	r2, #5
 800288a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800288e:	4853      	ldr	r0, [pc, #332]	@ (80029dc <_vfiprintf_r+0x21c>)
 8002890:	f000 fb7c 	bl	8002f8c <memchr>
 8002894:	9a04      	ldr	r2, [sp, #16]
 8002896:	b9d8      	cbnz	r0, 80028d0 <_vfiprintf_r+0x110>
 8002898:	06d1      	lsls	r1, r2, #27
 800289a:	bf44      	itt	mi
 800289c:	2320      	movmi	r3, #32
 800289e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028a2:	0713      	lsls	r3, r2, #28
 80028a4:	bf44      	itt	mi
 80028a6:	232b      	movmi	r3, #43	@ 0x2b
 80028a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028ac:	f89a 3000 	ldrb.w	r3, [sl]
 80028b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80028b2:	d015      	beq.n	80028e0 <_vfiprintf_r+0x120>
 80028b4:	4654      	mov	r4, sl
 80028b6:	2000      	movs	r0, #0
 80028b8:	f04f 0c0a 	mov.w	ip, #10
 80028bc:	9a07      	ldr	r2, [sp, #28]
 80028be:	4621      	mov	r1, r4
 80028c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028c4:	3b30      	subs	r3, #48	@ 0x30
 80028c6:	2b09      	cmp	r3, #9
 80028c8:	d94b      	bls.n	8002962 <_vfiprintf_r+0x1a2>
 80028ca:	b1b0      	cbz	r0, 80028fa <_vfiprintf_r+0x13a>
 80028cc:	9207      	str	r2, [sp, #28]
 80028ce:	e014      	b.n	80028fa <_vfiprintf_r+0x13a>
 80028d0:	eba0 0308 	sub.w	r3, r0, r8
 80028d4:	fa09 f303 	lsl.w	r3, r9, r3
 80028d8:	4313      	orrs	r3, r2
 80028da:	46a2      	mov	sl, r4
 80028dc:	9304      	str	r3, [sp, #16]
 80028de:	e7d2      	b.n	8002886 <_vfiprintf_r+0xc6>
 80028e0:	9b03      	ldr	r3, [sp, #12]
 80028e2:	1d19      	adds	r1, r3, #4
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	9103      	str	r1, [sp, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bfbb      	ittet	lt
 80028ec:	425b      	neglt	r3, r3
 80028ee:	f042 0202 	orrlt.w	r2, r2, #2
 80028f2:	9307      	strge	r3, [sp, #28]
 80028f4:	9307      	strlt	r3, [sp, #28]
 80028f6:	bfb8      	it	lt
 80028f8:	9204      	strlt	r2, [sp, #16]
 80028fa:	7823      	ldrb	r3, [r4, #0]
 80028fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80028fe:	d10a      	bne.n	8002916 <_vfiprintf_r+0x156>
 8002900:	7863      	ldrb	r3, [r4, #1]
 8002902:	2b2a      	cmp	r3, #42	@ 0x2a
 8002904:	d132      	bne.n	800296c <_vfiprintf_r+0x1ac>
 8002906:	9b03      	ldr	r3, [sp, #12]
 8002908:	3402      	adds	r4, #2
 800290a:	1d1a      	adds	r2, r3, #4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	9203      	str	r2, [sp, #12]
 8002910:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002914:	9305      	str	r3, [sp, #20]
 8002916:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80029e0 <_vfiprintf_r+0x220>
 800291a:	2203      	movs	r2, #3
 800291c:	4650      	mov	r0, sl
 800291e:	7821      	ldrb	r1, [r4, #0]
 8002920:	f000 fb34 	bl	8002f8c <memchr>
 8002924:	b138      	cbz	r0, 8002936 <_vfiprintf_r+0x176>
 8002926:	2240      	movs	r2, #64	@ 0x40
 8002928:	9b04      	ldr	r3, [sp, #16]
 800292a:	eba0 000a 	sub.w	r0, r0, sl
 800292e:	4082      	lsls	r2, r0
 8002930:	4313      	orrs	r3, r2
 8002932:	3401      	adds	r4, #1
 8002934:	9304      	str	r3, [sp, #16]
 8002936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800293a:	2206      	movs	r2, #6
 800293c:	4829      	ldr	r0, [pc, #164]	@ (80029e4 <_vfiprintf_r+0x224>)
 800293e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002942:	f000 fb23 	bl	8002f8c <memchr>
 8002946:	2800      	cmp	r0, #0
 8002948:	d03f      	beq.n	80029ca <_vfiprintf_r+0x20a>
 800294a:	4b27      	ldr	r3, [pc, #156]	@ (80029e8 <_vfiprintf_r+0x228>)
 800294c:	bb1b      	cbnz	r3, 8002996 <_vfiprintf_r+0x1d6>
 800294e:	9b03      	ldr	r3, [sp, #12]
 8002950:	3307      	adds	r3, #7
 8002952:	f023 0307 	bic.w	r3, r3, #7
 8002956:	3308      	adds	r3, #8
 8002958:	9303      	str	r3, [sp, #12]
 800295a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800295c:	443b      	add	r3, r7
 800295e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002960:	e76a      	b.n	8002838 <_vfiprintf_r+0x78>
 8002962:	460c      	mov	r4, r1
 8002964:	2001      	movs	r0, #1
 8002966:	fb0c 3202 	mla	r2, ip, r2, r3
 800296a:	e7a8      	b.n	80028be <_vfiprintf_r+0xfe>
 800296c:	2300      	movs	r3, #0
 800296e:	f04f 0c0a 	mov.w	ip, #10
 8002972:	4619      	mov	r1, r3
 8002974:	3401      	adds	r4, #1
 8002976:	9305      	str	r3, [sp, #20]
 8002978:	4620      	mov	r0, r4
 800297a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800297e:	3a30      	subs	r2, #48	@ 0x30
 8002980:	2a09      	cmp	r2, #9
 8002982:	d903      	bls.n	800298c <_vfiprintf_r+0x1cc>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0c6      	beq.n	8002916 <_vfiprintf_r+0x156>
 8002988:	9105      	str	r1, [sp, #20]
 800298a:	e7c4      	b.n	8002916 <_vfiprintf_r+0x156>
 800298c:	4604      	mov	r4, r0
 800298e:	2301      	movs	r3, #1
 8002990:	fb0c 2101 	mla	r1, ip, r1, r2
 8002994:	e7f0      	b.n	8002978 <_vfiprintf_r+0x1b8>
 8002996:	ab03      	add	r3, sp, #12
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	462a      	mov	r2, r5
 800299c:	4630      	mov	r0, r6
 800299e:	4b13      	ldr	r3, [pc, #76]	@ (80029ec <_vfiprintf_r+0x22c>)
 80029a0:	a904      	add	r1, sp, #16
 80029a2:	f3af 8000 	nop.w
 80029a6:	4607      	mov	r7, r0
 80029a8:	1c78      	adds	r0, r7, #1
 80029aa:	d1d6      	bne.n	800295a <_vfiprintf_r+0x19a>
 80029ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80029ae:	07d9      	lsls	r1, r3, #31
 80029b0:	d405      	bmi.n	80029be <_vfiprintf_r+0x1fe>
 80029b2:	89ab      	ldrh	r3, [r5, #12]
 80029b4:	059a      	lsls	r2, r3, #22
 80029b6:	d402      	bmi.n	80029be <_vfiprintf_r+0x1fe>
 80029b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80029ba:	f7ff fdd3 	bl	8002564 <__retarget_lock_release_recursive>
 80029be:	89ab      	ldrh	r3, [r5, #12]
 80029c0:	065b      	lsls	r3, r3, #25
 80029c2:	f53f af1f 	bmi.w	8002804 <_vfiprintf_r+0x44>
 80029c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80029c8:	e71e      	b.n	8002808 <_vfiprintf_r+0x48>
 80029ca:	ab03      	add	r3, sp, #12
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	462a      	mov	r2, r5
 80029d0:	4630      	mov	r0, r6
 80029d2:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <_vfiprintf_r+0x22c>)
 80029d4:	a904      	add	r1, sp, #16
 80029d6:	f000 f87d 	bl	8002ad4 <_printf_i>
 80029da:	e7e4      	b.n	80029a6 <_vfiprintf_r+0x1e6>
 80029dc:	08003082 	.word	0x08003082
 80029e0:	08003088 	.word	0x08003088
 80029e4:	0800308c 	.word	0x0800308c
 80029e8:	00000000 	.word	0x00000000
 80029ec:	0800279b 	.word	0x0800279b

080029f0 <_printf_common>:
 80029f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029f4:	4616      	mov	r6, r2
 80029f6:	4698      	mov	r8, r3
 80029f8:	688a      	ldr	r2, [r1, #8]
 80029fa:	690b      	ldr	r3, [r1, #16]
 80029fc:	4607      	mov	r7, r0
 80029fe:	4293      	cmp	r3, r2
 8002a00:	bfb8      	it	lt
 8002a02:	4613      	movlt	r3, r2
 8002a04:	6033      	str	r3, [r6, #0]
 8002a06:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a0a:	460c      	mov	r4, r1
 8002a0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a10:	b10a      	cbz	r2, 8002a16 <_printf_common+0x26>
 8002a12:	3301      	adds	r3, #1
 8002a14:	6033      	str	r3, [r6, #0]
 8002a16:	6823      	ldr	r3, [r4, #0]
 8002a18:	0699      	lsls	r1, r3, #26
 8002a1a:	bf42      	ittt	mi
 8002a1c:	6833      	ldrmi	r3, [r6, #0]
 8002a1e:	3302      	addmi	r3, #2
 8002a20:	6033      	strmi	r3, [r6, #0]
 8002a22:	6825      	ldr	r5, [r4, #0]
 8002a24:	f015 0506 	ands.w	r5, r5, #6
 8002a28:	d106      	bne.n	8002a38 <_printf_common+0x48>
 8002a2a:	f104 0a19 	add.w	sl, r4, #25
 8002a2e:	68e3      	ldr	r3, [r4, #12]
 8002a30:	6832      	ldr	r2, [r6, #0]
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	42ab      	cmp	r3, r5
 8002a36:	dc2b      	bgt.n	8002a90 <_printf_common+0xa0>
 8002a38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a3c:	6822      	ldr	r2, [r4, #0]
 8002a3e:	3b00      	subs	r3, #0
 8002a40:	bf18      	it	ne
 8002a42:	2301      	movne	r3, #1
 8002a44:	0692      	lsls	r2, r2, #26
 8002a46:	d430      	bmi.n	8002aaa <_printf_common+0xba>
 8002a48:	4641      	mov	r1, r8
 8002a4a:	4638      	mov	r0, r7
 8002a4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a50:	47c8      	blx	r9
 8002a52:	3001      	adds	r0, #1
 8002a54:	d023      	beq.n	8002a9e <_printf_common+0xae>
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	6922      	ldr	r2, [r4, #16]
 8002a5a:	f003 0306 	and.w	r3, r3, #6
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf14      	ite	ne
 8002a62:	2500      	movne	r5, #0
 8002a64:	6833      	ldreq	r3, [r6, #0]
 8002a66:	f04f 0600 	mov.w	r6, #0
 8002a6a:	bf08      	it	eq
 8002a6c:	68e5      	ldreq	r5, [r4, #12]
 8002a6e:	f104 041a 	add.w	r4, r4, #26
 8002a72:	bf08      	it	eq
 8002a74:	1aed      	subeq	r5, r5, r3
 8002a76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002a7a:	bf08      	it	eq
 8002a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a80:	4293      	cmp	r3, r2
 8002a82:	bfc4      	itt	gt
 8002a84:	1a9b      	subgt	r3, r3, r2
 8002a86:	18ed      	addgt	r5, r5, r3
 8002a88:	42b5      	cmp	r5, r6
 8002a8a:	d11a      	bne.n	8002ac2 <_printf_common+0xd2>
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	e008      	b.n	8002aa2 <_printf_common+0xb2>
 8002a90:	2301      	movs	r3, #1
 8002a92:	4652      	mov	r2, sl
 8002a94:	4641      	mov	r1, r8
 8002a96:	4638      	mov	r0, r7
 8002a98:	47c8      	blx	r9
 8002a9a:	3001      	adds	r0, #1
 8002a9c:	d103      	bne.n	8002aa6 <_printf_common+0xb6>
 8002a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aa6:	3501      	adds	r5, #1
 8002aa8:	e7c1      	b.n	8002a2e <_printf_common+0x3e>
 8002aaa:	2030      	movs	r0, #48	@ 0x30
 8002aac:	18e1      	adds	r1, r4, r3
 8002aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ab8:	4422      	add	r2, r4
 8002aba:	3302      	adds	r3, #2
 8002abc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002ac0:	e7c2      	b.n	8002a48 <_printf_common+0x58>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	4622      	mov	r2, r4
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	4638      	mov	r0, r7
 8002aca:	47c8      	blx	r9
 8002acc:	3001      	adds	r0, #1
 8002ace:	d0e6      	beq.n	8002a9e <_printf_common+0xae>
 8002ad0:	3601      	adds	r6, #1
 8002ad2:	e7d9      	b.n	8002a88 <_printf_common+0x98>

08002ad4 <_printf_i>:
 8002ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ad8:	7e0f      	ldrb	r7, [r1, #24]
 8002ada:	4691      	mov	r9, r2
 8002adc:	2f78      	cmp	r7, #120	@ 0x78
 8002ade:	4680      	mov	r8, r0
 8002ae0:	460c      	mov	r4, r1
 8002ae2:	469a      	mov	sl, r3
 8002ae4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002aea:	d807      	bhi.n	8002afc <_printf_i+0x28>
 8002aec:	2f62      	cmp	r7, #98	@ 0x62
 8002aee:	d80a      	bhi.n	8002b06 <_printf_i+0x32>
 8002af0:	2f00      	cmp	r7, #0
 8002af2:	f000 80d3 	beq.w	8002c9c <_printf_i+0x1c8>
 8002af6:	2f58      	cmp	r7, #88	@ 0x58
 8002af8:	f000 80ba 	beq.w	8002c70 <_printf_i+0x19c>
 8002afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b04:	e03a      	b.n	8002b7c <_printf_i+0xa8>
 8002b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b0a:	2b15      	cmp	r3, #21
 8002b0c:	d8f6      	bhi.n	8002afc <_printf_i+0x28>
 8002b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8002b14 <_printf_i+0x40>)
 8002b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b14:	08002b6d 	.word	0x08002b6d
 8002b18:	08002b81 	.word	0x08002b81
 8002b1c:	08002afd 	.word	0x08002afd
 8002b20:	08002afd 	.word	0x08002afd
 8002b24:	08002afd 	.word	0x08002afd
 8002b28:	08002afd 	.word	0x08002afd
 8002b2c:	08002b81 	.word	0x08002b81
 8002b30:	08002afd 	.word	0x08002afd
 8002b34:	08002afd 	.word	0x08002afd
 8002b38:	08002afd 	.word	0x08002afd
 8002b3c:	08002afd 	.word	0x08002afd
 8002b40:	08002c83 	.word	0x08002c83
 8002b44:	08002bab 	.word	0x08002bab
 8002b48:	08002c3d 	.word	0x08002c3d
 8002b4c:	08002afd 	.word	0x08002afd
 8002b50:	08002afd 	.word	0x08002afd
 8002b54:	08002ca5 	.word	0x08002ca5
 8002b58:	08002afd 	.word	0x08002afd
 8002b5c:	08002bab 	.word	0x08002bab
 8002b60:	08002afd 	.word	0x08002afd
 8002b64:	08002afd 	.word	0x08002afd
 8002b68:	08002c45 	.word	0x08002c45
 8002b6c:	6833      	ldr	r3, [r6, #0]
 8002b6e:	1d1a      	adds	r2, r3, #4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6032      	str	r2, [r6, #0]
 8002b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e09e      	b.n	8002cbe <_printf_i+0x1ea>
 8002b80:	6833      	ldr	r3, [r6, #0]
 8002b82:	6820      	ldr	r0, [r4, #0]
 8002b84:	1d19      	adds	r1, r3, #4
 8002b86:	6031      	str	r1, [r6, #0]
 8002b88:	0606      	lsls	r6, r0, #24
 8002b8a:	d501      	bpl.n	8002b90 <_printf_i+0xbc>
 8002b8c:	681d      	ldr	r5, [r3, #0]
 8002b8e:	e003      	b.n	8002b98 <_printf_i+0xc4>
 8002b90:	0645      	lsls	r5, r0, #25
 8002b92:	d5fb      	bpl.n	8002b8c <_printf_i+0xb8>
 8002b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b98:	2d00      	cmp	r5, #0
 8002b9a:	da03      	bge.n	8002ba4 <_printf_i+0xd0>
 8002b9c:	232d      	movs	r3, #45	@ 0x2d
 8002b9e:	426d      	negs	r5, r5
 8002ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ba4:	230a      	movs	r3, #10
 8002ba6:	4859      	ldr	r0, [pc, #356]	@ (8002d0c <_printf_i+0x238>)
 8002ba8:	e011      	b.n	8002bce <_printf_i+0xfa>
 8002baa:	6821      	ldr	r1, [r4, #0]
 8002bac:	6833      	ldr	r3, [r6, #0]
 8002bae:	0608      	lsls	r0, r1, #24
 8002bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8002bb4:	d402      	bmi.n	8002bbc <_printf_i+0xe8>
 8002bb6:	0649      	lsls	r1, r1, #25
 8002bb8:	bf48      	it	mi
 8002bba:	b2ad      	uxthmi	r5, r5
 8002bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8002bbe:	6033      	str	r3, [r6, #0]
 8002bc0:	bf14      	ite	ne
 8002bc2:	230a      	movne	r3, #10
 8002bc4:	2308      	moveq	r3, #8
 8002bc6:	4851      	ldr	r0, [pc, #324]	@ (8002d0c <_printf_i+0x238>)
 8002bc8:	2100      	movs	r1, #0
 8002bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002bce:	6866      	ldr	r6, [r4, #4]
 8002bd0:	2e00      	cmp	r6, #0
 8002bd2:	bfa8      	it	ge
 8002bd4:	6821      	ldrge	r1, [r4, #0]
 8002bd6:	60a6      	str	r6, [r4, #8]
 8002bd8:	bfa4      	itt	ge
 8002bda:	f021 0104 	bicge.w	r1, r1, #4
 8002bde:	6021      	strge	r1, [r4, #0]
 8002be0:	b90d      	cbnz	r5, 8002be6 <_printf_i+0x112>
 8002be2:	2e00      	cmp	r6, #0
 8002be4:	d04b      	beq.n	8002c7e <_printf_i+0x1aa>
 8002be6:	4616      	mov	r6, r2
 8002be8:	fbb5 f1f3 	udiv	r1, r5, r3
 8002bec:	fb03 5711 	mls	r7, r3, r1, r5
 8002bf0:	5dc7      	ldrb	r7, [r0, r7]
 8002bf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002bf6:	462f      	mov	r7, r5
 8002bf8:	42bb      	cmp	r3, r7
 8002bfa:	460d      	mov	r5, r1
 8002bfc:	d9f4      	bls.n	8002be8 <_printf_i+0x114>
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d10b      	bne.n	8002c1a <_printf_i+0x146>
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	07df      	lsls	r7, r3, #31
 8002c06:	d508      	bpl.n	8002c1a <_printf_i+0x146>
 8002c08:	6923      	ldr	r3, [r4, #16]
 8002c0a:	6861      	ldr	r1, [r4, #4]
 8002c0c:	4299      	cmp	r1, r3
 8002c0e:	bfde      	ittt	le
 8002c10:	2330      	movle	r3, #48	@ 0x30
 8002c12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c1a:	1b92      	subs	r2, r2, r6
 8002c1c:	6122      	str	r2, [r4, #16]
 8002c1e:	464b      	mov	r3, r9
 8002c20:	4621      	mov	r1, r4
 8002c22:	4640      	mov	r0, r8
 8002c24:	f8cd a000 	str.w	sl, [sp]
 8002c28:	aa03      	add	r2, sp, #12
 8002c2a:	f7ff fee1 	bl	80029f0 <_printf_common>
 8002c2e:	3001      	adds	r0, #1
 8002c30:	d14a      	bne.n	8002cc8 <_printf_i+0x1f4>
 8002c32:	f04f 30ff 	mov.w	r0, #4294967295
 8002c36:	b004      	add	sp, #16
 8002c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	f043 0320 	orr.w	r3, r3, #32
 8002c42:	6023      	str	r3, [r4, #0]
 8002c44:	2778      	movs	r7, #120	@ 0x78
 8002c46:	4832      	ldr	r0, [pc, #200]	@ (8002d10 <_printf_i+0x23c>)
 8002c48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	6831      	ldr	r1, [r6, #0]
 8002c50:	061f      	lsls	r7, r3, #24
 8002c52:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c56:	d402      	bmi.n	8002c5e <_printf_i+0x18a>
 8002c58:	065f      	lsls	r7, r3, #25
 8002c5a:	bf48      	it	mi
 8002c5c:	b2ad      	uxthmi	r5, r5
 8002c5e:	6031      	str	r1, [r6, #0]
 8002c60:	07d9      	lsls	r1, r3, #31
 8002c62:	bf44      	itt	mi
 8002c64:	f043 0320 	orrmi.w	r3, r3, #32
 8002c68:	6023      	strmi	r3, [r4, #0]
 8002c6a:	b11d      	cbz	r5, 8002c74 <_printf_i+0x1a0>
 8002c6c:	2310      	movs	r3, #16
 8002c6e:	e7ab      	b.n	8002bc8 <_printf_i+0xf4>
 8002c70:	4826      	ldr	r0, [pc, #152]	@ (8002d0c <_printf_i+0x238>)
 8002c72:	e7e9      	b.n	8002c48 <_printf_i+0x174>
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	f023 0320 	bic.w	r3, r3, #32
 8002c7a:	6023      	str	r3, [r4, #0]
 8002c7c:	e7f6      	b.n	8002c6c <_printf_i+0x198>
 8002c7e:	4616      	mov	r6, r2
 8002c80:	e7bd      	b.n	8002bfe <_printf_i+0x12a>
 8002c82:	6833      	ldr	r3, [r6, #0]
 8002c84:	6825      	ldr	r5, [r4, #0]
 8002c86:	1d18      	adds	r0, r3, #4
 8002c88:	6961      	ldr	r1, [r4, #20]
 8002c8a:	6030      	str	r0, [r6, #0]
 8002c8c:	062e      	lsls	r6, r5, #24
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	d501      	bpl.n	8002c96 <_printf_i+0x1c2>
 8002c92:	6019      	str	r1, [r3, #0]
 8002c94:	e002      	b.n	8002c9c <_printf_i+0x1c8>
 8002c96:	0668      	lsls	r0, r5, #25
 8002c98:	d5fb      	bpl.n	8002c92 <_printf_i+0x1be>
 8002c9a:	8019      	strh	r1, [r3, #0]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	4616      	mov	r6, r2
 8002ca0:	6123      	str	r3, [r4, #16]
 8002ca2:	e7bc      	b.n	8002c1e <_printf_i+0x14a>
 8002ca4:	6833      	ldr	r3, [r6, #0]
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	1d1a      	adds	r2, r3, #4
 8002caa:	6032      	str	r2, [r6, #0]
 8002cac:	681e      	ldr	r6, [r3, #0]
 8002cae:	6862      	ldr	r2, [r4, #4]
 8002cb0:	4630      	mov	r0, r6
 8002cb2:	f000 f96b 	bl	8002f8c <memchr>
 8002cb6:	b108      	cbz	r0, 8002cbc <_printf_i+0x1e8>
 8002cb8:	1b80      	subs	r0, r0, r6
 8002cba:	6060      	str	r0, [r4, #4]
 8002cbc:	6863      	ldr	r3, [r4, #4]
 8002cbe:	6123      	str	r3, [r4, #16]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cc6:	e7aa      	b.n	8002c1e <_printf_i+0x14a>
 8002cc8:	4632      	mov	r2, r6
 8002cca:	4649      	mov	r1, r9
 8002ccc:	4640      	mov	r0, r8
 8002cce:	6923      	ldr	r3, [r4, #16]
 8002cd0:	47d0      	blx	sl
 8002cd2:	3001      	adds	r0, #1
 8002cd4:	d0ad      	beq.n	8002c32 <_printf_i+0x15e>
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	079b      	lsls	r3, r3, #30
 8002cda:	d413      	bmi.n	8002d04 <_printf_i+0x230>
 8002cdc:	68e0      	ldr	r0, [r4, #12]
 8002cde:	9b03      	ldr	r3, [sp, #12]
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	bfb8      	it	lt
 8002ce4:	4618      	movlt	r0, r3
 8002ce6:	e7a6      	b.n	8002c36 <_printf_i+0x162>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	4632      	mov	r2, r6
 8002cec:	4649      	mov	r1, r9
 8002cee:	4640      	mov	r0, r8
 8002cf0:	47d0      	blx	sl
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	d09d      	beq.n	8002c32 <_printf_i+0x15e>
 8002cf6:	3501      	adds	r5, #1
 8002cf8:	68e3      	ldr	r3, [r4, #12]
 8002cfa:	9903      	ldr	r1, [sp, #12]
 8002cfc:	1a5b      	subs	r3, r3, r1
 8002cfe:	42ab      	cmp	r3, r5
 8002d00:	dcf2      	bgt.n	8002ce8 <_printf_i+0x214>
 8002d02:	e7eb      	b.n	8002cdc <_printf_i+0x208>
 8002d04:	2500      	movs	r5, #0
 8002d06:	f104 0619 	add.w	r6, r4, #25
 8002d0a:	e7f5      	b.n	8002cf8 <_printf_i+0x224>
 8002d0c:	08003093 	.word	0x08003093
 8002d10:	080030a4 	.word	0x080030a4

08002d14 <__sflush_r>:
 8002d14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	0716      	lsls	r6, r2, #28
 8002d1c:	4605      	mov	r5, r0
 8002d1e:	460c      	mov	r4, r1
 8002d20:	d454      	bmi.n	8002dcc <__sflush_r+0xb8>
 8002d22:	684b      	ldr	r3, [r1, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	dc02      	bgt.n	8002d2e <__sflush_r+0x1a>
 8002d28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	dd48      	ble.n	8002dc0 <__sflush_r+0xac>
 8002d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d30:	2e00      	cmp	r6, #0
 8002d32:	d045      	beq.n	8002dc0 <__sflush_r+0xac>
 8002d34:	2300      	movs	r3, #0
 8002d36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002d3a:	682f      	ldr	r7, [r5, #0]
 8002d3c:	6a21      	ldr	r1, [r4, #32]
 8002d3e:	602b      	str	r3, [r5, #0]
 8002d40:	d030      	beq.n	8002da4 <__sflush_r+0x90>
 8002d42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d44:	89a3      	ldrh	r3, [r4, #12]
 8002d46:	0759      	lsls	r1, r3, #29
 8002d48:	d505      	bpl.n	8002d56 <__sflush_r+0x42>
 8002d4a:	6863      	ldr	r3, [r4, #4]
 8002d4c:	1ad2      	subs	r2, r2, r3
 8002d4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d50:	b10b      	cbz	r3, 8002d56 <__sflush_r+0x42>
 8002d52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d54:	1ad2      	subs	r2, r2, r3
 8002d56:	2300      	movs	r3, #0
 8002d58:	4628      	mov	r0, r5
 8002d5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d5c:	6a21      	ldr	r1, [r4, #32]
 8002d5e:	47b0      	blx	r6
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	89a3      	ldrh	r3, [r4, #12]
 8002d64:	d106      	bne.n	8002d74 <__sflush_r+0x60>
 8002d66:	6829      	ldr	r1, [r5, #0]
 8002d68:	291d      	cmp	r1, #29
 8002d6a:	d82b      	bhi.n	8002dc4 <__sflush_r+0xb0>
 8002d6c:	4a28      	ldr	r2, [pc, #160]	@ (8002e10 <__sflush_r+0xfc>)
 8002d6e:	410a      	asrs	r2, r1
 8002d70:	07d6      	lsls	r6, r2, #31
 8002d72:	d427      	bmi.n	8002dc4 <__sflush_r+0xb0>
 8002d74:	2200      	movs	r2, #0
 8002d76:	6062      	str	r2, [r4, #4]
 8002d78:	6922      	ldr	r2, [r4, #16]
 8002d7a:	04d9      	lsls	r1, r3, #19
 8002d7c:	6022      	str	r2, [r4, #0]
 8002d7e:	d504      	bpl.n	8002d8a <__sflush_r+0x76>
 8002d80:	1c42      	adds	r2, r0, #1
 8002d82:	d101      	bne.n	8002d88 <__sflush_r+0x74>
 8002d84:	682b      	ldr	r3, [r5, #0]
 8002d86:	b903      	cbnz	r3, 8002d8a <__sflush_r+0x76>
 8002d88:	6560      	str	r0, [r4, #84]	@ 0x54
 8002d8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d8c:	602f      	str	r7, [r5, #0]
 8002d8e:	b1b9      	cbz	r1, 8002dc0 <__sflush_r+0xac>
 8002d90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d94:	4299      	cmp	r1, r3
 8002d96:	d002      	beq.n	8002d9e <__sflush_r+0x8a>
 8002d98:	4628      	mov	r0, r5
 8002d9a:	f7ff fbf3 	bl	8002584 <_free_r>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002da2:	e00d      	b.n	8002dc0 <__sflush_r+0xac>
 8002da4:	2301      	movs	r3, #1
 8002da6:	4628      	mov	r0, r5
 8002da8:	47b0      	blx	r6
 8002daa:	4602      	mov	r2, r0
 8002dac:	1c50      	adds	r0, r2, #1
 8002dae:	d1c9      	bne.n	8002d44 <__sflush_r+0x30>
 8002db0:	682b      	ldr	r3, [r5, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0c6      	beq.n	8002d44 <__sflush_r+0x30>
 8002db6:	2b1d      	cmp	r3, #29
 8002db8:	d001      	beq.n	8002dbe <__sflush_r+0xaa>
 8002dba:	2b16      	cmp	r3, #22
 8002dbc:	d11d      	bne.n	8002dfa <__sflush_r+0xe6>
 8002dbe:	602f      	str	r7, [r5, #0]
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	e021      	b.n	8002e08 <__sflush_r+0xf4>
 8002dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dc8:	b21b      	sxth	r3, r3
 8002dca:	e01a      	b.n	8002e02 <__sflush_r+0xee>
 8002dcc:	690f      	ldr	r7, [r1, #16]
 8002dce:	2f00      	cmp	r7, #0
 8002dd0:	d0f6      	beq.n	8002dc0 <__sflush_r+0xac>
 8002dd2:	0793      	lsls	r3, r2, #30
 8002dd4:	bf18      	it	ne
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	680e      	ldr	r6, [r1, #0]
 8002dda:	bf08      	it	eq
 8002ddc:	694b      	ldreq	r3, [r1, #20]
 8002dde:	1bf6      	subs	r6, r6, r7
 8002de0:	600f      	str	r7, [r1, #0]
 8002de2:	608b      	str	r3, [r1, #8]
 8002de4:	2e00      	cmp	r6, #0
 8002de6:	ddeb      	ble.n	8002dc0 <__sflush_r+0xac>
 8002de8:	4633      	mov	r3, r6
 8002dea:	463a      	mov	r2, r7
 8002dec:	4628      	mov	r0, r5
 8002dee:	6a21      	ldr	r1, [r4, #32]
 8002df0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002df4:	47e0      	blx	ip
 8002df6:	2800      	cmp	r0, #0
 8002df8:	dc07      	bgt.n	8002e0a <__sflush_r+0xf6>
 8002dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e02:	f04f 30ff 	mov.w	r0, #4294967295
 8002e06:	81a3      	strh	r3, [r4, #12]
 8002e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e0a:	4407      	add	r7, r0
 8002e0c:	1a36      	subs	r6, r6, r0
 8002e0e:	e7e9      	b.n	8002de4 <__sflush_r+0xd0>
 8002e10:	dfbffffe 	.word	0xdfbffffe

08002e14 <_fflush_r>:
 8002e14:	b538      	push	{r3, r4, r5, lr}
 8002e16:	690b      	ldr	r3, [r1, #16]
 8002e18:	4605      	mov	r5, r0
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	b913      	cbnz	r3, 8002e24 <_fflush_r+0x10>
 8002e1e:	2500      	movs	r5, #0
 8002e20:	4628      	mov	r0, r5
 8002e22:	bd38      	pop	{r3, r4, r5, pc}
 8002e24:	b118      	cbz	r0, 8002e2e <_fflush_r+0x1a>
 8002e26:	6a03      	ldr	r3, [r0, #32]
 8002e28:	b90b      	cbnz	r3, 8002e2e <_fflush_r+0x1a>
 8002e2a:	f7ff f9a3 	bl	8002174 <__sinit>
 8002e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f3      	beq.n	8002e1e <_fflush_r+0xa>
 8002e36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002e38:	07d0      	lsls	r0, r2, #31
 8002e3a:	d404      	bmi.n	8002e46 <_fflush_r+0x32>
 8002e3c:	0599      	lsls	r1, r3, #22
 8002e3e:	d402      	bmi.n	8002e46 <_fflush_r+0x32>
 8002e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e42:	f7ff fb8e 	bl	8002562 <__retarget_lock_acquire_recursive>
 8002e46:	4628      	mov	r0, r5
 8002e48:	4621      	mov	r1, r4
 8002e4a:	f7ff ff63 	bl	8002d14 <__sflush_r>
 8002e4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e50:	4605      	mov	r5, r0
 8002e52:	07da      	lsls	r2, r3, #31
 8002e54:	d4e4      	bmi.n	8002e20 <_fflush_r+0xc>
 8002e56:	89a3      	ldrh	r3, [r4, #12]
 8002e58:	059b      	lsls	r3, r3, #22
 8002e5a:	d4e1      	bmi.n	8002e20 <_fflush_r+0xc>
 8002e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e5e:	f7ff fb81 	bl	8002564 <__retarget_lock_release_recursive>
 8002e62:	e7dd      	b.n	8002e20 <_fflush_r+0xc>

08002e64 <__swhatbuf_r>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	460c      	mov	r4, r1
 8002e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e6c:	4615      	mov	r5, r2
 8002e6e:	2900      	cmp	r1, #0
 8002e70:	461e      	mov	r6, r3
 8002e72:	b096      	sub	sp, #88	@ 0x58
 8002e74:	da0c      	bge.n	8002e90 <__swhatbuf_r+0x2c>
 8002e76:	89a3      	ldrh	r3, [r4, #12]
 8002e78:	2100      	movs	r1, #0
 8002e7a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002e7e:	bf14      	ite	ne
 8002e80:	2340      	movne	r3, #64	@ 0x40
 8002e82:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002e86:	2000      	movs	r0, #0
 8002e88:	6031      	str	r1, [r6, #0]
 8002e8a:	602b      	str	r3, [r5, #0]
 8002e8c:	b016      	add	sp, #88	@ 0x58
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	466a      	mov	r2, sp
 8002e92:	f000 f849 	bl	8002f28 <_fstat_r>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	dbed      	blt.n	8002e76 <__swhatbuf_r+0x12>
 8002e9a:	9901      	ldr	r1, [sp, #4]
 8002e9c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002ea0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002ea4:	4259      	negs	r1, r3
 8002ea6:	4159      	adcs	r1, r3
 8002ea8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002eac:	e7eb      	b.n	8002e86 <__swhatbuf_r+0x22>

08002eae <__smakebuf_r>:
 8002eae:	898b      	ldrh	r3, [r1, #12]
 8002eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eb2:	079d      	lsls	r5, r3, #30
 8002eb4:	4606      	mov	r6, r0
 8002eb6:	460c      	mov	r4, r1
 8002eb8:	d507      	bpl.n	8002eca <__smakebuf_r+0x1c>
 8002eba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002ebe:	6023      	str	r3, [r4, #0]
 8002ec0:	6123      	str	r3, [r4, #16]
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	6163      	str	r3, [r4, #20]
 8002ec6:	b003      	add	sp, #12
 8002ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eca:	466a      	mov	r2, sp
 8002ecc:	ab01      	add	r3, sp, #4
 8002ece:	f7ff ffc9 	bl	8002e64 <__swhatbuf_r>
 8002ed2:	9f00      	ldr	r7, [sp, #0]
 8002ed4:	4605      	mov	r5, r0
 8002ed6:	4639      	mov	r1, r7
 8002ed8:	4630      	mov	r0, r6
 8002eda:	f7ff fbbd 	bl	8002658 <_malloc_r>
 8002ede:	b948      	cbnz	r0, 8002ef4 <__smakebuf_r+0x46>
 8002ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ee4:	059a      	lsls	r2, r3, #22
 8002ee6:	d4ee      	bmi.n	8002ec6 <__smakebuf_r+0x18>
 8002ee8:	f023 0303 	bic.w	r3, r3, #3
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	81a3      	strh	r3, [r4, #12]
 8002ef2:	e7e2      	b.n	8002eba <__smakebuf_r+0xc>
 8002ef4:	89a3      	ldrh	r3, [r4, #12]
 8002ef6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002efe:	81a3      	strh	r3, [r4, #12]
 8002f00:	9b01      	ldr	r3, [sp, #4]
 8002f02:	6020      	str	r0, [r4, #0]
 8002f04:	b15b      	cbz	r3, 8002f1e <__smakebuf_r+0x70>
 8002f06:	4630      	mov	r0, r6
 8002f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f0c:	f000 f81e 	bl	8002f4c <_isatty_r>
 8002f10:	b128      	cbz	r0, 8002f1e <__smakebuf_r+0x70>
 8002f12:	89a3      	ldrh	r3, [r4, #12]
 8002f14:	f023 0303 	bic.w	r3, r3, #3
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	81a3      	strh	r3, [r4, #12]
 8002f1e:	89a3      	ldrh	r3, [r4, #12]
 8002f20:	431d      	orrs	r5, r3
 8002f22:	81a5      	strh	r5, [r4, #12]
 8002f24:	e7cf      	b.n	8002ec6 <__smakebuf_r+0x18>
	...

08002f28 <_fstat_r>:
 8002f28:	b538      	push	{r3, r4, r5, lr}
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	4d06      	ldr	r5, [pc, #24]	@ (8002f48 <_fstat_r+0x20>)
 8002f2e:	4604      	mov	r4, r0
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	602b      	str	r3, [r5, #0]
 8002f36:	f7fd fbc7 	bl	80006c8 <_fstat>
 8002f3a:	1c43      	adds	r3, r0, #1
 8002f3c:	d102      	bne.n	8002f44 <_fstat_r+0x1c>
 8002f3e:	682b      	ldr	r3, [r5, #0]
 8002f40:	b103      	cbz	r3, 8002f44 <_fstat_r+0x1c>
 8002f42:	6023      	str	r3, [r4, #0]
 8002f44:	bd38      	pop	{r3, r4, r5, pc}
 8002f46:	bf00      	nop
 8002f48:	200001f0 	.word	0x200001f0

08002f4c <_isatty_r>:
 8002f4c:	b538      	push	{r3, r4, r5, lr}
 8002f4e:	2300      	movs	r3, #0
 8002f50:	4d05      	ldr	r5, [pc, #20]	@ (8002f68 <_isatty_r+0x1c>)
 8002f52:	4604      	mov	r4, r0
 8002f54:	4608      	mov	r0, r1
 8002f56:	602b      	str	r3, [r5, #0]
 8002f58:	f7fd fbc5 	bl	80006e6 <_isatty>
 8002f5c:	1c43      	adds	r3, r0, #1
 8002f5e:	d102      	bne.n	8002f66 <_isatty_r+0x1a>
 8002f60:	682b      	ldr	r3, [r5, #0]
 8002f62:	b103      	cbz	r3, 8002f66 <_isatty_r+0x1a>
 8002f64:	6023      	str	r3, [r4, #0]
 8002f66:	bd38      	pop	{r3, r4, r5, pc}
 8002f68:	200001f0 	.word	0x200001f0

08002f6c <_sbrk_r>:
 8002f6c:	b538      	push	{r3, r4, r5, lr}
 8002f6e:	2300      	movs	r3, #0
 8002f70:	4d05      	ldr	r5, [pc, #20]	@ (8002f88 <_sbrk_r+0x1c>)
 8002f72:	4604      	mov	r4, r0
 8002f74:	4608      	mov	r0, r1
 8002f76:	602b      	str	r3, [r5, #0]
 8002f78:	f7fd fbcc 	bl	8000714 <_sbrk>
 8002f7c:	1c43      	adds	r3, r0, #1
 8002f7e:	d102      	bne.n	8002f86 <_sbrk_r+0x1a>
 8002f80:	682b      	ldr	r3, [r5, #0]
 8002f82:	b103      	cbz	r3, 8002f86 <_sbrk_r+0x1a>
 8002f84:	6023      	str	r3, [r4, #0]
 8002f86:	bd38      	pop	{r3, r4, r5, pc}
 8002f88:	200001f0 	.word	0x200001f0

08002f8c <memchr>:
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	b510      	push	{r4, lr}
 8002f90:	b2c9      	uxtb	r1, r1
 8002f92:	4402      	add	r2, r0
 8002f94:	4293      	cmp	r3, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	d101      	bne.n	8002f9e <memchr+0x12>
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	e003      	b.n	8002fa6 <memchr+0x1a>
 8002f9e:	7804      	ldrb	r4, [r0, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	428c      	cmp	r4, r1
 8002fa4:	d1f6      	bne.n	8002f94 <memchr+0x8>
 8002fa6:	bd10      	pop	{r4, pc}

08002fa8 <_init>:
 8002fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002faa:	bf00      	nop
 8002fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fae:	bc08      	pop	{r3}
 8002fb0:	469e      	mov	lr, r3
 8002fb2:	4770      	bx	lr

08002fb4 <_fini>:
 8002fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb6:	bf00      	nop
 8002fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fba:	bc08      	pop	{r3}
 8002fbc:	469e      	mov	lr, r3
 8002fbe:	4770      	bx	lr
