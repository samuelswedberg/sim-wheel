
stm-pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d64  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e70  08002e70  00003e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb0  08002eb0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb0  08002eb0  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb0  08002eb0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb0  08002eb0  00003eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002eb4  08002eb4  00003eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002eb8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002ec4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002ec4  000040b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000669a  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000178b  00000000  00000000  0000a6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0000be60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004e8  00000000  00000000  0000c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017222  00000000  00000000  0000c9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b22  00000000  00000000  00023c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086a4d  00000000  00000000  0002b734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2181  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000197c  00000000  00000000  000b21c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000b3b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e58 	.word	0x08002e58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002e58 	.word	0x08002e58

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc10 	bl	8000974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f826 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f928 	bl	80003ac <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f8d2 	bl	8000304 <MX_CAN_Init>
  MX_ADC1_Init();
 8000160:	f000 f874 	bl	800024c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000164:	480d      	ldr	r0, [pc, #52]	@ (800019c <main+0x50>)
 8000166:	f001 faa6 	bl	80016b6 <HAL_CAN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 800016a:	2201      	movs	r2, #1
 800016c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000170:	480b      	ldr	r0, [pc, #44]	@ (80001a0 <main+0x54>)
 8000172:	f002 f8c5 	bl	8002300 <HAL_GPIO_WritePin>
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 8000176:	2200      	movs	r2, #0
 8000178:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800017c:	4808      	ldr	r0, [pc, #32]	@ (80001a0 <main+0x54>)
 800017e:	f002 f8bf 	bl	8002300 <HAL_GPIO_WritePin>
	  Read_Potentiometers();
 8000182:	f000 f9cd 	bl	8000520 <Read_Potentiometers>
	 CAN_Transmit();
 8000186:	f000 f95d 	bl	8000444 <CAN_Transmit>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // Turn LED off
 800018a:	2201      	movs	r2, #1
 800018c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000190:	4803      	ldr	r0, [pc, #12]	@ (80001a0 <main+0x54>)
 8000192:	f002 f8b5 	bl	8002300 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);   // Turn LED off
 8000196:	bf00      	nop
 8000198:	e7ed      	b.n	8000176 <main+0x2a>
 800019a:	bf00      	nop
 800019c:	20000060 	.word	0x20000060
 80001a0:	40011000 	.word	0x40011000

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b094      	sub	sp, #80	@ 0x50
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ae:	2228      	movs	r2, #40	@ 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f002 fe24 	bl	8002e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	f107 0314 	add.w	r3, r7, #20
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
 80001c0:	605a      	str	r2, [r3, #4]
 80001c2:	609a      	str	r2, [r3, #8]
 80001c4:	60da      	str	r2, [r3, #12]
 80001c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d4:	2302      	movs	r3, #2
 80001d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d8:	2301      	movs	r3, #1
 80001da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001dc:	2310      	movs	r3, #16
 80001de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e0:	2302      	movs	r3, #2
 80001e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001e4:	2300      	movs	r3, #0
 80001e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80001e8:	2300      	movs	r3, #0
 80001ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001f0:	4618      	mov	r0, r3
 80001f2:	f002 f89d 	bl	8002330 <HAL_RCC_OscConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80001fc:	f000 fa59 	bl	80006b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000200:	230f      	movs	r3, #15
 8000202:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000204:	2302      	movs	r3, #2
 8000206:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000214:	f107 0314 	add.w	r3, r7, #20
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 fb0a 	bl	8002834 <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000226:	f000 fa44 	bl	80006b2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800022a:	2302      	movs	r3, #2
 800022c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800022e:	2300      	movs	r3, #0
 8000230:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f002 fc77 	bl	8002b28 <HAL_RCCEx_PeriphCLKConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000240:	f000 fa37 	bl	80006b2 <Error_Handler>
  }
}
 8000244:	bf00      	nop
 8000246:	3750      	adds	r7, #80	@ 0x50
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800025c:	4b27      	ldr	r3, [pc, #156]	@ (80002fc <MX_ADC1_Init+0xb0>)
 800025e:	4a28      	ldr	r2, [pc, #160]	@ (8000300 <MX_ADC1_Init+0xb4>)
 8000260:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000262:	4b26      	ldr	r3, [pc, #152]	@ (80002fc <MX_ADC1_Init+0xb0>)
 8000264:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000268:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800026a:	4b24      	ldr	r3, [pc, #144]	@ (80002fc <MX_ADC1_Init+0xb0>)
 800026c:	2201      	movs	r2, #1
 800026e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000270:	4b22      	ldr	r3, [pc, #136]	@ (80002fc <MX_ADC1_Init+0xb0>)
 8000272:	2200      	movs	r2, #0
 8000274:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000276:	4b21      	ldr	r3, [pc, #132]	@ (80002fc <MX_ADC1_Init+0xb0>)
 8000278:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800027c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800027e:	4b1f      	ldr	r3, [pc, #124]	@ (80002fc <MX_ADC1_Init+0xb0>)
 8000280:	2200      	movs	r2, #0
 8000282:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000284:	4b1d      	ldr	r3, [pc, #116]	@ (80002fc <MX_ADC1_Init+0xb0>)
 8000286:	2203      	movs	r2, #3
 8000288:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800028a:	481c      	ldr	r0, [pc, #112]	@ (80002fc <MX_ADC1_Init+0xb0>)
 800028c:	f000 fbf8 	bl	8000a80 <HAL_ADC_Init>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000296:	f000 fa0c 	bl	80006b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800029a:	2300      	movs	r3, #0
 800029c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800029e:	2301      	movs	r3, #1
 80002a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002a2:	2307      	movs	r3, #7
 80002a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4619      	mov	r1, r3
 80002aa:	4814      	ldr	r0, [pc, #80]	@ (80002fc <MX_ADC1_Init+0xb0>)
 80002ac:	f000 feac 	bl	8001008 <HAL_ADC_ConfigChannel>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002b6:	f000 f9fc 	bl	80006b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002be:	2302      	movs	r3, #2
 80002c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4619      	mov	r1, r3
 80002c6:	480d      	ldr	r0, [pc, #52]	@ (80002fc <MX_ADC1_Init+0xb0>)
 80002c8:	f000 fe9e 	bl	8001008 <HAL_ADC_ConfigChannel>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002d2:	f000 f9ee 	bl	80006b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002d6:	2302      	movs	r3, #2
 80002d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002da:	2303      	movs	r3, #3
 80002dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4619      	mov	r1, r3
 80002e2:	4806      	ldr	r0, [pc, #24]	@ (80002fc <MX_ADC1_Init+0xb0>)
 80002e4:	f000 fe90 	bl	8001008 <HAL_ADC_ConfigChannel>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002ee:	f000 f9e0 	bl	80006b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000030 	.word	0x20000030
 8000300:	40012400 	.word	0x40012400

08000304 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b08a      	sub	sp, #40	@ 0x28
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800030a:	4b26      	ldr	r3, [pc, #152]	@ (80003a4 <MX_CAN_Init+0xa0>)
 800030c:	4a26      	ldr	r2, [pc, #152]	@ (80003a8 <MX_CAN_Init+0xa4>)
 800030e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8000310:	4b24      	ldr	r3, [pc, #144]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000312:	2201      	movs	r2, #1
 8000314:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000316:	4b23      	ldr	r3, [pc, #140]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800031c:	4b21      	ldr	r3, [pc, #132]	@ (80003a4 <MX_CAN_Init+0xa0>)
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000322:	4b20      	ldr	r3, [pc, #128]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000324:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000328:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800032a:	4b1e      	ldr	r3, [pc, #120]	@ (80003a4 <MX_CAN_Init+0xa0>)
 800032c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000330:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000332:	4b1c      	ldr	r3, [pc, #112]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000334:	2200      	movs	r2, #0
 8000336:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000338:	4b1a      	ldr	r3, [pc, #104]	@ (80003a4 <MX_CAN_Init+0xa0>)
 800033a:	2200      	movs	r2, #0
 800033c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800033e:	4b19      	ldr	r3, [pc, #100]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000340:	2200      	movs	r2, #0
 8000342:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000344:	4b17      	ldr	r3, [pc, #92]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000346:	2200      	movs	r2, #0
 8000348:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800034a:	4b16      	ldr	r3, [pc, #88]	@ (80003a4 <MX_CAN_Init+0xa0>)
 800034c:	2200      	movs	r2, #0
 800034e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000350:	4b14      	ldr	r3, [pc, #80]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000352:	2200      	movs	r2, #0
 8000354:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000356:	4813      	ldr	r0, [pc, #76]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000358:	f000 ffe9 	bl	800132e <HAL_CAN_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000362:	f000 f9a6 	bl	80006b2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filterConfig;

  filterConfig.FilterBank = 0;                  // Use filter bank 0 (adjust if needed)
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Mask mode
 800036a:	2300      	movs	r3, #0
 800036c:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // 32-bit scale
 800036e:	2301      	movs	r3, #1
 8000370:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = 0xFFFF;           // Invalid ID
 8000372:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000376:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = 0xFFFF;            // Invalid ID
 8000378:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800037c:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = 0xFFFF;       // Mask blocks all
 800037e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000382:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = 0xFFFF;        // Mask blocks all
 8000384:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000388:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO1; // Assign to FIFO0 (or FIFO1 if used)
 800038a:	2301      	movs	r3, #1
 800038c:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;       // Activate the filter
 800038e:	2301      	movs	r3, #1
 8000390:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 8000392:	463b      	mov	r3, r7
 8000394:	4619      	mov	r1, r3
 8000396:	4803      	ldr	r0, [pc, #12]	@ (80003a4 <MX_CAN_Init+0xa0>)
 8000398:	f001 f8c4 	bl	8001524 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	3728      	adds	r7, #40	@ 0x28
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000060 	.word	0x20000060
 80003a8:	40006400 	.word	0x40006400

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c0:	4b1e      	ldr	r3, [pc, #120]	@ (800043c <MX_GPIO_Init+0x90>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a1d      	ldr	r2, [pc, #116]	@ (800043c <MX_GPIO_Init+0x90>)
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <MX_GPIO_Init+0x90>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0310 	and.w	r3, r3, #16
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d8:	4b18      	ldr	r3, [pc, #96]	@ (800043c <MX_GPIO_Init+0x90>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a17      	ldr	r2, [pc, #92]	@ (800043c <MX_GPIO_Init+0x90>)
 80003de:	f043 0320 	orr.w	r3, r3, #32
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b15      	ldr	r3, [pc, #84]	@ (800043c <MX_GPIO_Init+0x90>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0320 	and.w	r3, r3, #32
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b12      	ldr	r3, [pc, #72]	@ (800043c <MX_GPIO_Init+0x90>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a11      	ldr	r2, [pc, #68]	@ (800043c <MX_GPIO_Init+0x90>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <MX_GPIO_Init+0x90>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800040e:	480c      	ldr	r0, [pc, #48]	@ (8000440 <MX_GPIO_Init+0x94>)
 8000410:	f001 ff76 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000414:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	2301      	movs	r3, #1
 800041c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000422:	2302      	movs	r3, #2
 8000424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4619      	mov	r1, r3
 800042c:	4804      	ldr	r0, [pc, #16]	@ (8000440 <MX_GPIO_Init+0x94>)
 800042e:	f001 fde3 	bl	8001ff8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000432:	bf00      	nop
 8000434:	3720      	adds	r7, #32
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000
 8000440:	40011000 	.word	0x40011000

08000444 <CAN_Transmit>:

/* USER CODE BEGIN 4 */
/*
 * CAN BUS FUNCTIONS
 */
void CAN_Transmit() {
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
	uint32_t currentTime = HAL_GetTick();
 800044a:	f000 faeb 	bl	8000a24 <HAL_GetTick>
 800044e:	6078      	str	r0, [r7, #4]

	if(currentTime - lastSendTime >= 2) {
 8000450:	4b13      	ldr	r3, [pc, #76]	@ (80004a0 <CAN_Transmit+0x5c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	1ad3      	subs	r3, r2, r3
 8000458:	2b01      	cmp	r3, #1
 800045a:	d91d      	bls.n	8000498 <CAN_Transmit+0x54>
		sendCANMessage(0x300, pedal_data.encoder_1);
 800045c:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <CAN_Transmit+0x60>)
 800045e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000462:	4619      	mov	r1, r3
 8000464:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8000468:	f000 f81e 	bl	80004a8 <sendCANMessage>
		sendCANMessage(0x301, pedal_data.encoder_2);
 800046c:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <CAN_Transmit+0x60>)
 800046e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000472:	4619      	mov	r1, r3
 8000474:	f240 3001 	movw	r0, #769	@ 0x301
 8000478:	f000 f816 	bl	80004a8 <sendCANMessage>
		sendCANMessage(0x302, pedal_data.encoder_3);
 800047c:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <CAN_Transmit+0x60>)
 800047e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000482:	4619      	mov	r1, r3
 8000484:	f240 3002 	movw	r0, #770	@ 0x302
 8000488:	f000 f80e 	bl	80004a8 <sendCANMessage>

		lastSendTime = currentTime;  // Update last transmission time
 800048c:	4a04      	ldr	r2, [pc, #16]	@ (80004a0 <CAN_Transmit+0x5c>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6013      	str	r3, [r2, #0]
		HAL_Delay(1);
 8000492:	2001      	movs	r0, #1
 8000494:	f000 fad0 	bl	8000a38 <HAL_Delay>
	}
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000088 	.word	0x20000088
 80004a4:	20000028 	.word	0x20000028

080004a8 <sendCANMessage>:

void sendCANMessage(uint16_t canID, int16_t value) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08c      	sub	sp, #48	@ 0x30
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	460a      	mov	r2, r1
 80004b2:	80fb      	strh	r3, [r7, #6]
 80004b4:	4613      	mov	r3, r2
 80004b6:	80bb      	strh	r3, [r7, #4]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[2];  // 2-byte buffer for int16_t
    uint32_t TxMailbox;

    // Pack int16_t correctly (Little Endian)
    TxData[0] = (uint8_t)(value & 0xFF);
 80004b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	743b      	strb	r3, [r7, #16]
    TxData[1] = (uint8_t)((value >> 8) & 0xFF);
 80004c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004c4:	121b      	asrs	r3, r3, #8
 80004c6:	b21b      	sxth	r3, r3
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	747b      	strb	r3, [r7, #17]

    // Configure the CAN header
    TxHeader.StdId = canID;  // Set the ID
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	617b      	str	r3, [r7, #20]
    TxHeader.IDE = CAN_ID_STD;  // Standard 11-bit ID
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
    TxHeader.RTR = CAN_RTR_DATA;  // Data frame, not remote request
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
    TxHeader.DLC = sizeof(value);  // Data Length = 4 bytes
 80004d8:	2302      	movs	r3, #2
 80004da:	627b      	str	r3, [r7, #36]	@ 0x24

    // Copy integer value into TxData buffer (ensure correct byte order)
    memcpy(TxData, &value, sizeof(value));
 80004dc:	88bb      	ldrh	r3, [r7, #4]
 80004de:	823b      	strh	r3, [r7, #16]

    // Send the CAN message
    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	f107 0210 	add.w	r2, r7, #16
 80004e8:	f107 0114 	add.w	r1, r7, #20
 80004ec:	480b      	ldr	r0, [pc, #44]	@ (800051c <sendCANMessage+0x74>)
 80004ee:	f001 f96f 	bl	80017d0 <HAL_CAN_AddTxMessage>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d00d      	beq.n	8000514 <sendCANMessage+0x6c>
    	 // Optionally log the state of CAN error counters
		uint32_t error = HAL_CAN_GetError(&hcan);
 80004f8:	4808      	ldr	r0, [pc, #32]	@ (800051c <sendCANMessage+0x74>)
 80004fa:	f001 fc64 	bl	8001dc6 <HAL_CAN_GetError>
 80004fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
		HAL_CAN_Stop(&hcan);  // Stop CAN
 8000500:	4806      	ldr	r0, [pc, #24]	@ (800051c <sendCANMessage+0x74>)
 8000502:	f001 f91c 	bl	800173e <HAL_CAN_Stop>
		HAL_CAN_Start(&hcan); // Restart CAN
 8000506:	4805      	ldr	r0, [pc, #20]	@ (800051c <sendCANMessage+0x74>)
 8000508:	f001 f8d5 	bl	80016b6 <HAL_CAN_Start>

		// Optional: Clear error flags
		__HAL_CAN_CLEAR_FLAG(&hcan, CAN_FLAG_ERRI);
 800050c:	4b03      	ldr	r3, [pc, #12]	@ (800051c <sendCANMessage+0x74>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2204      	movs	r2, #4
 8000512:	605a      	str	r2, [r3, #4]
    }
}
 8000514:	bf00      	nop
 8000516:	3730      	adds	r7, #48	@ 0x30
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000060 	.word	0x20000060

08000520 <Read_Potentiometers>:
void Read_ADC_Value() {


}

void Read_Potentiometers() {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
	static uint32_t last_read_time = 0;
    uint32_t now = HAL_GetTick();
 8000526:	f000 fa7d 	bl	8000a24 <HAL_GetTick>
 800052a:	6038      	str	r0, [r7, #0]

    if ((now - last_read_time) >= 50) {
 800052c:	4b24      	ldr	r3, [pc, #144]	@ (80005c0 <Read_Potentiometers+0xa0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	683a      	ldr	r2, [r7, #0]
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	2b31      	cmp	r3, #49	@ 0x31
 8000536:	d93e      	bls.n	80005b6 <Read_Potentiometers+0x96>
        last_read_time = now;
 8000538:	4a21      	ldr	r2, [pc, #132]	@ (80005c0 <Read_Potentiometers+0xa0>)
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	6013      	str	r3, [r2, #0]
        HAL_ADC_Start(&hadc1);  // Start conversion for all channels
 800053e:	4821      	ldr	r0, [pc, #132]	@ (80005c4 <Read_Potentiometers+0xa4>)
 8000540:	f000 fb76 	bl	8000c30 <HAL_ADC_Start>

        for (int i = 0; i < NUM_PEDALS; i++) {
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	e00f      	b.n	800056a <Read_Potentiometers+0x4a>
            HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800054a:	f04f 31ff 	mov.w	r1, #4294967295
 800054e:	481d      	ldr	r0, [pc, #116]	@ (80005c4 <Read_Potentiometers+0xa4>)
 8000550:	f000 fc48 	bl	8000de4 <HAL_ADC_PollForConversion>
            adc_values[i] = HAL_ADC_GetValue(&hadc1);  // Read each channel in order
 8000554:	481b      	ldr	r0, [pc, #108]	@ (80005c4 <Read_Potentiometers+0xa4>)
 8000556:	f000 fd4b 	bl	8000ff0 <HAL_ADC_GetValue>
 800055a:	4602      	mov	r2, r0
 800055c:	491a      	ldr	r1, [pc, #104]	@ (80005c8 <Read_Potentiometers+0xa8>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < NUM_PEDALS; i++) {
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3301      	adds	r3, #1
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b01      	cmp	r3, #1
 800056e:	ddec      	ble.n	800054a <Read_Potentiometers+0x2a>
        }

        HAL_ADC_Stop(&hadc1);
 8000570:	4814      	ldr	r0, [pc, #80]	@ (80005c4 <Read_Potentiometers+0xa4>)
 8000572:	f000 fc0b 	bl	8000d8c <HAL_ADC_Stop>
//
//		for (int i = 0; i < NUM_PEDALS; i++) {
//			update_pedal_max(i);
//		}

		pedal_data.encoder_1 = moving_average(encoder1_buffer, map_hall_sensor(adc_values[0]));
 8000576:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <Read_Potentiometers+0xa8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	b29b      	uxth	r3, r3
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f86f 	bl	8000660 <map_hall_sensor>
 8000582:	4603      	mov	r3, r0
 8000584:	b21b      	sxth	r3, r3
 8000586:	4619      	mov	r1, r3
 8000588:	4810      	ldr	r0, [pc, #64]	@ (80005cc <Read_Potentiometers+0xac>)
 800058a:	f000 f825 	bl	80005d8 <moving_average>
 800058e:	4603      	mov	r3, r0
 8000590:	461a      	mov	r2, r3
 8000592:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <Read_Potentiometers+0xb0>)
 8000594:	801a      	strh	r2, [r3, #0]
		pedal_data.encoder_2 = moving_average(encoder2_buffer, map_hall_sensor(adc_values[1]));
 8000596:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <Read_Potentiometers+0xa8>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	b29b      	uxth	r3, r3
 800059c:	4618      	mov	r0, r3
 800059e:	f000 f85f 	bl	8000660 <map_hall_sensor>
 80005a2:	4603      	mov	r3, r0
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	4619      	mov	r1, r3
 80005a8:	480a      	ldr	r0, [pc, #40]	@ (80005d4 <Read_Potentiometers+0xb4>)
 80005aa:	f000 f815 	bl	80005d8 <moving_average>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <Read_Potentiometers+0xb0>)
 80005b4:	805a      	strh	r2, [r3, #2]
//		pedal_data.encoder_3 = moving_average(encoder3_buffer, map_hall_sensor(2));


    }
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200000b0 	.word	0x200000b0
 80005c4:	20000030 	.word	0x20000030
 80005c8:	2000008c 	.word	0x2000008c
 80005cc:	20000094 	.word	0x20000094
 80005d0:	20000028 	.word	0x20000028
 80005d4:	200000a0 	.word	0x200000a0

080005d8 <moving_average>:

int16_t moving_average(int16_t buffer[], int16_t new_value) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	807b      	strh	r3, [r7, #2]
    buffer[filter_index % FILTER_SIZE] = new_value;  // Store new reading in buffer
 80005e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000658 <moving_average+0x80>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b1c      	ldr	r3, [pc, #112]	@ (800065c <moving_average+0x84>)
 80005ea:	fb83 1302 	smull	r1, r3, r3, r2
 80005ee:	1059      	asrs	r1, r3, #1
 80005f0:	17d3      	asrs	r3, r2, #31
 80005f2:	1ac9      	subs	r1, r1, r3
 80005f4:	460b      	mov	r3, r1
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	440b      	add	r3, r1
 80005fa:	1ad1      	subs	r1, r2, r3
 80005fc:	460b      	mov	r3, r1
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	887a      	ldrh	r2, [r7, #2]
 8000606:	801a      	strh	r2, [r3, #0]
    filter_index++;
 8000608:	4b13      	ldr	r3, [pc, #76]	@ (8000658 <moving_average+0x80>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <moving_average+0x80>)
 8000610:	6013      	str	r3, [r2, #0]

    int32_t sum = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < FILTER_SIZE; i++) {
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	e00c      	b.n	8000636 <moving_average+0x5e>
        sum += buffer[i];  // Sum up last FILTER_SIZE values
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4413      	add	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < FILTER_SIZE; i++) {
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	3301      	adds	r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	2b04      	cmp	r3, #4
 800063a:	ddef      	ble.n	800061c <moving_average+0x44>
    }
    return (int16_t)(sum / FILTER_SIZE);  // Return average
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	4a07      	ldr	r2, [pc, #28]	@ (800065c <moving_average+0x84>)
 8000640:	fb82 1203 	smull	r1, r2, r2, r3
 8000644:	1052      	asrs	r2, r2, #1
 8000646:	17db      	asrs	r3, r3, #31
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b21b      	sxth	r3, r3
}
 800064c:	4618      	mov	r0, r3
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	200000ac 	.word	0x200000ac
 800065c:	66666667 	.word	0x66666667

08000660 <map_hall_sensor>:

uint8_t map_hall_sensor(uint16_t adc_value) {
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
    const uint16_t adc_high = 3800;
 800066a:	f640 63d8 	movw	r3, #3800	@ 0xed8
 800066e:	81fb      	strh	r3, [r7, #14]
    const uint16_t adc_low  = 3200;
 8000670:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8000674:	81bb      	strh	r3, [r7, #12]

    if (adc_value >= adc_high) return 0;
 8000676:	88fa      	ldrh	r2, [r7, #6]
 8000678:	89fb      	ldrh	r3, [r7, #14]
 800067a:	429a      	cmp	r2, r3
 800067c:	d301      	bcc.n	8000682 <map_hall_sensor+0x22>
 800067e:	2300      	movs	r3, #0
 8000680:	e012      	b.n	80006a8 <map_hall_sensor+0x48>
    if (adc_value <= adc_low) return 255;
 8000682:	88fa      	ldrh	r2, [r7, #6]
 8000684:	89bb      	ldrh	r3, [r7, #12]
 8000686:	429a      	cmp	r2, r3
 8000688:	d801      	bhi.n	800068e <map_hall_sensor+0x2e>
 800068a:	23ff      	movs	r3, #255	@ 0xff
 800068c:	e00c      	b.n	80006a8 <map_hall_sensor+0x48>

    return (uint8_t)(((adc_high - adc_value) * 255UL) / (adc_high - adc_low));
 800068e:	89fa      	ldrh	r2, [r7, #14]
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	461a      	mov	r2, r3
 8000696:	4613      	mov	r3, r2
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	89f9      	ldrh	r1, [r7, #14]
 800069e:	89ba      	ldrh	r2, [r7, #12]
 80006a0:	1a8a      	subs	r2, r1, r2
 80006a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b6:	b672      	cpsid	i
}
 80006b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ba:	bf00      	nop
 80006bc:	e7fd      	b.n	80006ba <Error_Handler+0x8>
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c6:	4b15      	ldr	r3, [pc, #84]	@ (800071c <HAL_MspInit+0x5c>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	4a14      	ldr	r2, [pc, #80]	@ (800071c <HAL_MspInit+0x5c>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6193      	str	r3, [r2, #24]
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <HAL_MspInit+0x5c>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <HAL_MspInit+0x5c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <HAL_MspInit+0x5c>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <HAL_MspInit+0x5c>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <HAL_MspInit+0x60>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <HAL_MspInit+0x60>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	40021000 	.word	0x40021000
 8000720:	40010000 	.word	0x40010000

08000724 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a14      	ldr	r2, [pc, #80]	@ (8000790 <HAL_ADC_MspInit+0x6c>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d121      	bne.n	8000788 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <HAL_ADC_MspInit+0x70>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <HAL_ADC_MspInit+0x70>)
 800074a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <HAL_ADC_MspInit+0x70>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075c:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <HAL_ADC_MspInit+0x70>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a0c      	ldr	r2, [pc, #48]	@ (8000794 <HAL_ADC_MspInit+0x70>)
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <HAL_ADC_MspInit+0x70>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0304 	and.w	r3, r3, #4
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000774:	2307      	movs	r3, #7
 8000776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000778:	2303      	movs	r3, #3
 800077a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <HAL_ADC_MspInit+0x74>)
 8000784:	f001 fc38 	bl	8001ff8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40012400 	.word	0x40012400
 8000794:	40021000 	.word	0x40021000
 8000798:	40010800 	.word	0x40010800

0800079c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a2c      	ldr	r2, [pc, #176]	@ (8000868 <HAL_CAN_MspInit+0xcc>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d151      	bne.n	8000860 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007bc:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <HAL_CAN_MspInit+0xd0>)
 80007be:	69db      	ldr	r3, [r3, #28]
 80007c0:	4a2a      	ldr	r2, [pc, #168]	@ (800086c <HAL_CAN_MspInit+0xd0>)
 80007c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007c6:	61d3      	str	r3, [r2, #28]
 80007c8:	4b28      	ldr	r3, [pc, #160]	@ (800086c <HAL_CAN_MspInit+0xd0>)
 80007ca:	69db      	ldr	r3, [r3, #28]
 80007cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	4b25      	ldr	r3, [pc, #148]	@ (800086c <HAL_CAN_MspInit+0xd0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a24      	ldr	r2, [pc, #144]	@ (800086c <HAL_CAN_MspInit+0xd0>)
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b22      	ldr	r3, [pc, #136]	@ (800086c <HAL_CAN_MspInit+0xd0>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0304 	and.w	r3, r3, #4
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	4619      	mov	r1, r3
 8000800:	481b      	ldr	r0, [pc, #108]	@ (8000870 <HAL_CAN_MspInit+0xd4>)
 8000802:	f001 fbf9 	bl	8001ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4619      	mov	r1, r3
 800081a:	4815      	ldr	r0, [pc, #84]	@ (8000870 <HAL_CAN_MspInit+0xd4>)
 800081c:	f001 fbec 	bl	8001ff8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	2013      	movs	r0, #19
 8000826:	f001 fbb0 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800082a:	2013      	movs	r0, #19
 800082c:	f001 fbc9 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	2014      	movs	r0, #20
 8000836:	f001 fba8 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800083a:	2014      	movs	r0, #20
 800083c:	f001 fbc1 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	2015      	movs	r0, #21
 8000846:	f001 fba0 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800084a:	2015      	movs	r0, #21
 800084c:	f001 fbb9 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	2016      	movs	r0, #22
 8000856:	f001 fb98 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800085a:	2016      	movs	r0, #22
 800085c:	f001 fbb1 	bl	8001fc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40006400 	.word	0x40006400
 800086c:	40021000 	.word	0x40021000
 8000870:	40010800 	.word	0x40010800

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <NMI_Handler+0x4>

0800087c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <MemManage_Handler+0x4>

0800088c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <UsageFault_Handler+0x4>

0800089c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c4:	f000 f89c 	bl	8000a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008d0:	4802      	ldr	r0, [pc, #8]	@ (80008dc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80008d2:	f001 f84c 	bl	800196e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000060 	.word	0x20000060

080008e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008e6:	f001 f842 	bl	800196e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000060 	.word	0x20000060

080008f4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008f8:	4802      	ldr	r0, [pc, #8]	@ (8000904 <CAN1_RX1_IRQHandler+0x10>)
 80008fa:	f001 f838 	bl	800196e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000060 	.word	0x20000060

08000908 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800090c:	4802      	ldr	r0, [pc, #8]	@ (8000918 <CAN1_SCE_IRQHandler+0x10>)
 800090e:	f001 f82e 	bl	800196e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000060 	.word	0x20000060

0800091c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000928:	f7ff fff8 	bl	800091c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480b      	ldr	r0, [pc, #44]	@ (800095c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800092e:	490c      	ldr	r1, [pc, #48]	@ (8000960 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000930:	4a0c      	ldr	r2, [pc, #48]	@ (8000964 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a09      	ldr	r2, [pc, #36]	@ (8000968 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000944:	4c09      	ldr	r4, [pc, #36]	@ (800096c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000952:	f002 fa5d 	bl	8002e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000956:	f7ff fbf9 	bl	800014c <main>
  bx lr
 800095a:	4770      	bx	lr
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000964:	08002eb8 	.word	0x08002eb8
  ldr r2, =_sbss
 8000968:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800096c:	200000b8 	.word	0x200000b8

08000970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC1_2_IRQHandler>
	...

08000974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_Init+0x28>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a07      	ldr	r2, [pc, #28]	@ (800099c <HAL_Init+0x28>)
 800097e:	f043 0310 	orr.w	r3, r3, #16
 8000982:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f001 faf5 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098a:	200f      	movs	r0, #15
 800098c:	f000 f808 	bl	80009a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000990:	f7ff fe96 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40022000 	.word	0x40022000

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <HAL_InitTick+0x54>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_InitTick+0x58>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 fb0d 	bl	8001fde <HAL_SYSTICK_Config>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00e      	b.n	80009ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d80a      	bhi.n	80009ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f001 fad5 	bl	8001f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e0:	4a06      	ldr	r2, [pc, #24]	@ (80009fc <HAL_InitTick+0x5c>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e000      	b.n	80009ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a04:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <HAL_IncTick+0x1c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <HAL_IncTick+0x20>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a03      	ldr	r2, [pc, #12]	@ (8000a20 <HAL_IncTick+0x20>)
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	200000b4 	.word	0x200000b4

08000a24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b02      	ldr	r3, [pc, #8]	@ (8000a34 <HAL_GetTick+0x10>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	200000b4 	.word	0x200000b4

08000a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a40:	f7ff fff0 	bl	8000a24 <HAL_GetTick>
 8000a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a50:	d005      	beq.n	8000a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <HAL_Delay+0x44>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a5e:	bf00      	nop
 8000a60:	f7ff ffe0 	bl	8000a24 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8f7      	bhi.n	8000a60 <HAL_Delay+0x28>
  {
  }
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008

08000a80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e0be      	b.n	8000c20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d109      	bne.n	8000ac4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff fe30 	bl	8000724 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 fbf1 	bl	80012ac <ADC_ConversionStop_Disable>
 8000aca:	4603      	mov	r3, r0
 8000acc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8099 	bne.w	8000c0e <HAL_ADC_Init+0x18e>
 8000adc:	7dfb      	ldrb	r3, [r7, #23]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 8095 	bne.w	8000c0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000aec:	f023 0302 	bic.w	r3, r3, #2
 8000af0:	f043 0202 	orr.w	r2, r3, #2
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	7b1b      	ldrb	r3, [r3, #12]
 8000b06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b18:	d003      	beq.n	8000b22 <HAL_ADC_Init+0xa2>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d102      	bne.n	8000b28 <HAL_ADC_Init+0xa8>
 8000b22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b26:	e000      	b.n	8000b2a <HAL_ADC_Init+0xaa>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7d1b      	ldrb	r3, [r3, #20]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d119      	bne.n	8000b6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7b1b      	ldrb	r3, [r3, #12]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	035a      	lsls	r2, r3, #13
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	e00b      	b.n	8000b6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b58:	f043 0220 	orr.w	r2, r3, #32
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b64:	f043 0201 	orr.w	r2, r3, #1
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	4b28      	ldr	r3, [pc, #160]	@ (8000c28 <HAL_ADC_Init+0x1a8>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	6812      	ldr	r2, [r2, #0]
 8000b8e:	68b9      	ldr	r1, [r7, #8]
 8000b90:	430b      	orrs	r3, r1
 8000b92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b9c:	d003      	beq.n	8000ba6 <HAL_ADC_Init+0x126>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d104      	bne.n	8000bb0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	051b      	lsls	r3, r3, #20
 8000bae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <HAL_ADC_Init+0x1ac>)
 8000bcc:	4013      	ands	r3, r2
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d10b      	bne.n	8000bec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bde:	f023 0303 	bic.w	r3, r3, #3
 8000be2:	f043 0201 	orr.w	r2, r3, #1
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bea:	e018      	b.n	8000c1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bf0:	f023 0312 	bic.w	r3, r3, #18
 8000bf4:	f043 0210 	orr.w	r2, r3, #16
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c00:	f043 0201 	orr.w	r2, r3, #1
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c0c:	e007      	b.n	8000c1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c12:	f043 0210 	orr.w	r2, r3, #16
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	ffe1f7fd 	.word	0xffe1f7fd
 8000c2c:	ff1f0efe 	.word	0xff1f0efe

08000c30 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d101      	bne.n	8000c4a <HAL_ADC_Start+0x1a>
 8000c46:	2302      	movs	r3, #2
 8000c48:	e098      	b.n	8000d7c <HAL_ADC_Start+0x14c>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 fad0 	bl	80011f8 <ADC_Enable>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 8087 	bne.w	8000d72 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c6c:	f023 0301 	bic.w	r3, r3, #1
 8000c70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a41      	ldr	r2, [pc, #260]	@ (8000d84 <HAL_ADC_Start+0x154>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d105      	bne.n	8000c8e <HAL_ADC_Start+0x5e>
 8000c82:	4b41      	ldr	r3, [pc, #260]	@ (8000d88 <HAL_ADC_Start+0x158>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d115      	bne.n	8000cba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c92:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d026      	beq.n	8000cf6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000cb0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cb8:	e01d      	b.n	8000cf6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cbe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a2f      	ldr	r2, [pc, #188]	@ (8000d88 <HAL_ADC_Start+0x158>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d004      	beq.n	8000cda <HAL_ADC_Start+0xaa>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a2b      	ldr	r2, [pc, #172]	@ (8000d84 <HAL_ADC_Start+0x154>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d10d      	bne.n	8000cf6 <HAL_ADC_Start+0xc6>
 8000cda:	4b2b      	ldr	r3, [pc, #172]	@ (8000d88 <HAL_ADC_Start+0x158>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d007      	beq.n	8000cf6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000cee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d006      	beq.n	8000d10 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d06:	f023 0206 	bic.w	r2, r3, #6
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d0e:	e002      	b.n	8000d16 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f06f 0202 	mvn.w	r2, #2
 8000d26:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000d32:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000d36:	d113      	bne.n	8000d60 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d3c:	4a11      	ldr	r2, [pc, #68]	@ (8000d84 <HAL_ADC_Start+0x154>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d105      	bne.n	8000d4e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <HAL_ADC_Start+0x158>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d108      	bne.n	8000d60 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	e00c      	b.n	8000d7a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	e003      	b.n	8000d7a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40012800 	.word	0x40012800
 8000d88:	40012400 	.word	0x40012400

08000d8c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d101      	bne.n	8000da6 <HAL_ADC_Stop+0x1a>
 8000da2:	2302      	movs	r3, #2
 8000da4:	e01a      	b.n	8000ddc <HAL_ADC_Stop+0x50>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 fa7c 	bl	80012ac <ADC_ConversionStop_Disable>
 8000db4:	4603      	mov	r3, r0
 8000db6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d109      	bne.n	8000dd2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000dc6:	f023 0301 	bic.w	r3, r3, #1
 8000dca:	f043 0201 	orr.w	r2, r3, #1
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000dfa:	f7ff fe13 	bl	8000a24 <HAL_GetTick>
 8000dfe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00b      	beq.n	8000e26 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e12:	f043 0220 	orr.w	r2, r3, #32
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e0d3      	b.n	8000fce <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d131      	bne.n	8000e98 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d12a      	bne.n	8000e98 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e42:	e021      	b.n	8000e88 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4a:	d01d      	beq.n	8000e88 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d007      	beq.n	8000e62 <HAL_ADC_PollForConversion+0x7e>
 8000e52:	f7ff fde7 	bl	8000a24 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d212      	bcs.n	8000e88 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10b      	bne.n	8000e88 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e74:	f043 0204 	orr.w	r2, r3, #4
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e0a2      	b.n	8000fce <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0d6      	beq.n	8000e44 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e96:	e070      	b.n	8000f7a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e98:	4b4f      	ldr	r3, [pc, #316]	@ (8000fd8 <HAL_ADC_PollForConversion+0x1f4>)
 8000e9a:	681c      	ldr	r4, [r3, #0]
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f001 fef9 	bl	8002c94 <HAL_RCCEx_GetPeriphCLKFreq>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6919      	ldr	r1, [r3, #16]
 8000eae:	4b4b      	ldr	r3, [pc, #300]	@ (8000fdc <HAL_ADC_PollForConversion+0x1f8>)
 8000eb0:	400b      	ands	r3, r1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d118      	bne.n	8000ee8 <HAL_ADC_PollForConversion+0x104>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68d9      	ldr	r1, [r3, #12]
 8000ebc:	4b48      	ldr	r3, [pc, #288]	@ (8000fe0 <HAL_ADC_PollForConversion+0x1fc>)
 8000ebe:	400b      	ands	r3, r1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d111      	bne.n	8000ee8 <HAL_ADC_PollForConversion+0x104>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6919      	ldr	r1, [r3, #16]
 8000eca:	4b46      	ldr	r3, [pc, #280]	@ (8000fe4 <HAL_ADC_PollForConversion+0x200>)
 8000ecc:	400b      	ands	r3, r1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d108      	bne.n	8000ee4 <HAL_ADC_PollForConversion+0x100>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68d9      	ldr	r1, [r3, #12]
 8000ed8:	4b43      	ldr	r3, [pc, #268]	@ (8000fe8 <HAL_ADC_PollForConversion+0x204>)
 8000eda:	400b      	ands	r3, r1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <HAL_ADC_PollForConversion+0x100>
 8000ee0:	2314      	movs	r3, #20
 8000ee2:	e020      	b.n	8000f26 <HAL_ADC_PollForConversion+0x142>
 8000ee4:	2329      	movs	r3, #41	@ 0x29
 8000ee6:	e01e      	b.n	8000f26 <HAL_ADC_PollForConversion+0x142>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6919      	ldr	r1, [r3, #16]
 8000eee:	4b3d      	ldr	r3, [pc, #244]	@ (8000fe4 <HAL_ADC_PollForConversion+0x200>)
 8000ef0:	400b      	ands	r3, r1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d106      	bne.n	8000f04 <HAL_ADC_PollForConversion+0x120>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68d9      	ldr	r1, [r3, #12]
 8000efc:	4b3a      	ldr	r3, [pc, #232]	@ (8000fe8 <HAL_ADC_PollForConversion+0x204>)
 8000efe:	400b      	ands	r3, r1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d00d      	beq.n	8000f20 <HAL_ADC_PollForConversion+0x13c>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6919      	ldr	r1, [r3, #16]
 8000f0a:	4b38      	ldr	r3, [pc, #224]	@ (8000fec <HAL_ADC_PollForConversion+0x208>)
 8000f0c:	400b      	ands	r3, r1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d108      	bne.n	8000f24 <HAL_ADC_PollForConversion+0x140>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68d9      	ldr	r1, [r3, #12]
 8000f18:	4b34      	ldr	r3, [pc, #208]	@ (8000fec <HAL_ADC_PollForConversion+0x208>)
 8000f1a:	400b      	ands	r3, r1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <HAL_ADC_PollForConversion+0x140>
 8000f20:	2354      	movs	r3, #84	@ 0x54
 8000f22:	e000      	b.n	8000f26 <HAL_ADC_PollForConversion+0x142>
 8000f24:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f2c:	e021      	b.n	8000f72 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d01a      	beq.n	8000f6c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d007      	beq.n	8000f4c <HAL_ADC_PollForConversion+0x168>
 8000f3c:	f7ff fd72 	bl	8000a24 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d20f      	bcs.n	8000f6c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d90b      	bls.n	8000f6c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f58:	f043 0204 	orr.w	r2, r3, #4
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e030      	b.n	8000fce <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d8d9      	bhi.n	8000f2e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f06f 0212 	mvn.w	r2, #18
 8000f82:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f88:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000f9a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000f9e:	d115      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d111      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d105      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc4:	f043 0201 	orr.w	r2, r3, #1
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	371c      	adds	r7, #28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd90      	pop	{r4, r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	24924924 	.word	0x24924924
 8000fe0:	00924924 	.word	0x00924924
 8000fe4:	12492492 	.word	0x12492492
 8000fe8:	00492492 	.word	0x00492492
 8000fec:	00249249 	.word	0x00249249

08000ff0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001020:	2b01      	cmp	r3, #1
 8001022:	d101      	bne.n	8001028 <HAL_ADC_ConfigChannel+0x20>
 8001024:	2302      	movs	r3, #2
 8001026:	e0dc      	b.n	80011e2 <HAL_ADC_ConfigChannel+0x1da>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b06      	cmp	r3, #6
 8001036:	d81c      	bhi.n	8001072 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	3b05      	subs	r3, #5
 800104a:	221f      	movs	r2, #31
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	4019      	ands	r1, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	3b05      	subs	r3, #5
 8001064:	fa00 f203 	lsl.w	r2, r0, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	430a      	orrs	r2, r1
 800106e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001070:	e03c      	b.n	80010ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b0c      	cmp	r3, #12
 8001078:	d81c      	bhi.n	80010b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	3b23      	subs	r3, #35	@ 0x23
 800108c:	221f      	movs	r2, #31
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	4019      	ands	r1, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	3b23      	subs	r3, #35	@ 0x23
 80010a6:	fa00 f203 	lsl.w	r2, r0, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80010b2:	e01b      	b.n	80010ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	3b41      	subs	r3, #65	@ 0x41
 80010c6:	221f      	movs	r2, #31
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4019      	ands	r1, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	3b41      	subs	r3, #65	@ 0x41
 80010e0:	fa00 f203 	lsl.w	r2, r0, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b09      	cmp	r3, #9
 80010f2:	d91c      	bls.n	800112e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d9      	ldr	r1, [r3, #12]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	3b1e      	subs	r3, #30
 8001106:	2207      	movs	r2, #7
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	4019      	ands	r1, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6898      	ldr	r0, [r3, #8]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	3b1e      	subs	r3, #30
 8001120:	fa00 f203 	lsl.w	r2, r0, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	430a      	orrs	r2, r1
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	e019      	b.n	8001162 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6919      	ldr	r1, [r3, #16]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	2207      	movs	r2, #7
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	4019      	ands	r1, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	6898      	ldr	r0, [r3, #8]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	fa00 f203 	lsl.w	r2, r0, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b10      	cmp	r3, #16
 8001168:	d003      	beq.n	8001172 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800116e:	2b11      	cmp	r3, #17
 8001170:	d132      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1d      	ldr	r2, [pc, #116]	@ (80011ec <HAL_ADC_ConfigChannel+0x1e4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d125      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d126      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001198:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b10      	cmp	r3, #16
 80011a0:	d11a      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011a2:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a13      	ldr	r2, [pc, #76]	@ (80011f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80011a8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ac:	0c9a      	lsrs	r2, r3, #18
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011b8:	e002      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	3b01      	subs	r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f9      	bne.n	80011ba <HAL_ADC_ConfigChannel+0x1b2>
 80011c6:	e007      	b.n	80011d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011cc:	f043 0220 	orr.w	r2, r3, #32
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	40012400 	.word	0x40012400
 80011f0:	20000000 	.word	0x20000000
 80011f4:	431bde83 	.word	0x431bde83

080011f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b01      	cmp	r3, #1
 8001214:	d040      	beq.n	8001298 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001226:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <ADC_Enable+0xac>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1f      	ldr	r2, [pc, #124]	@ (80012a8 <ADC_Enable+0xb0>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	0c9b      	lsrs	r3, r3, #18
 8001232:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001234:	e002      	b.n	800123c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3b01      	subs	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f9      	bne.n	8001236 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001242:	f7ff fbef 	bl	8000a24 <HAL_GetTick>
 8001246:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001248:	e01f      	b.n	800128a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800124a:	f7ff fbeb 	bl	8000a24 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d918      	bls.n	800128a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b01      	cmp	r3, #1
 8001264:	d011      	beq.n	800128a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126a:	f043 0210 	orr.w	r2, r3, #16
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001276:	f043 0201 	orr.w	r2, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e007      	b.n	800129a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b01      	cmp	r3, #1
 8001296:	d1d8      	bne.n	800124a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000000 	.word	0x20000000
 80012a8:	431bde83 	.word	0x431bde83

080012ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d12e      	bne.n	8001324 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0201 	bic.w	r2, r2, #1
 80012d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012d6:	f7ff fba5 	bl	8000a24 <HAL_GetTick>
 80012da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012dc:	e01b      	b.n	8001316 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012de:	f7ff fba1 	bl	8000a24 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d914      	bls.n	8001316 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d10d      	bne.n	8001316 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fe:	f043 0210 	orr.w	r2, r3, #16
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130a:	f043 0201 	orr.w	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e007      	b.n	8001326 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	d0dc      	beq.n	80012de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0ed      	b.n	800151c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fa25 	bl	800079c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f042 0201 	orr.w	r2, r2, #1
 8001360:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001362:	f7ff fb5f 	bl	8000a24 <HAL_GetTick>
 8001366:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001368:	e012      	b.n	8001390 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800136a:	f7ff fb5b 	bl	8000a24 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b0a      	cmp	r3, #10
 8001376:	d90b      	bls.n	8001390 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2205      	movs	r2, #5
 8001388:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e0c5      	b.n	800151c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0e5      	beq.n	800136a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0202 	bic.w	r2, r2, #2
 80013ac:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013ae:	f7ff fb39 	bl	8000a24 <HAL_GetTick>
 80013b2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013b4:	e012      	b.n	80013dc <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013b6:	f7ff fb35 	bl	8000a24 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b0a      	cmp	r3, #10
 80013c2:	d90b      	bls.n	80013dc <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2205      	movs	r2, #5
 80013d4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e09f      	b.n	800151c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1e5      	bne.n	80013b6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7e1b      	ldrb	r3, [r3, #24]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d108      	bne.n	8001404 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e007      	b.n	8001414 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001412:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7e5b      	ldrb	r3, [r3, #25]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d108      	bne.n	800142e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	e007      	b.n	800143e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7e9b      	ldrb	r3, [r3, #26]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d108      	bne.n	8001458 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f042 0220 	orr.w	r2, r2, #32
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e007      	b.n	8001468 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0220 	bic.w	r2, r2, #32
 8001466:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7edb      	ldrb	r3, [r3, #27]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d108      	bne.n	8001482 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0210 	bic.w	r2, r2, #16
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e007      	b.n	8001492 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0210 	orr.w	r2, r2, #16
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7f1b      	ldrb	r3, [r3, #28]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d108      	bne.n	80014ac <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f042 0208 	orr.w	r2, r2, #8
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	e007      	b.n	80014bc <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0208 	bic.w	r2, r2, #8
 80014ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7f5b      	ldrb	r3, [r3, #29]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d108      	bne.n	80014d6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0204 	orr.w	r2, r2, #4
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	e007      	b.n	80014e6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0204 	bic.w	r2, r2, #4
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	ea42 0103 	orr.w	r1, r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	1e5a      	subs	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001524:	b480      	push	{r7}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800153c:	7cfb      	ldrb	r3, [r7, #19]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d003      	beq.n	800154a <HAL_CAN_ConfigFilter+0x26>
 8001542:	7cfb      	ldrb	r3, [r7, #19]
 8001544:	2b02      	cmp	r3, #2
 8001546:	f040 80aa 	bne.w	800169e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001550:	f043 0201 	orr.w	r2, r3, #1
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	2201      	movs	r2, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	43db      	mvns	r3, r3
 8001574:	401a      	ands	r2, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d123      	bne.n	80015cc <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43db      	mvns	r3, r3
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	3248      	adds	r2, #72	@ 0x48
 80015ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015c2:	6979      	ldr	r1, [r7, #20]
 80015c4:	3348      	adds	r3, #72	@ 0x48
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	440b      	add	r3, r1
 80015ca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d122      	bne.n	800161a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	431a      	orrs	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3248      	adds	r2, #72	@ 0x48
 80015fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800160e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001610:	6979      	ldr	r1, [r7, #20]
 8001612:	3348      	adds	r3, #72	@ 0x48
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	440b      	add	r3, r1
 8001618:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43db      	mvns	r3, r3
 800162c:	401a      	ands	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001634:	e007      	b.n	8001646 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	431a      	orrs	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43db      	mvns	r3, r3
 8001658:	401a      	ands	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001660:	e007      	b.n	8001672 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	431a      	orrs	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d107      	bne.n	800168a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	431a      	orrs	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001690:	f023 0201 	bic.w	r2, r3, #1
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e006      	b.n	80016ac <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
  }
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d12e      	bne.n	8001728 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2202      	movs	r2, #2
 80016ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016e2:	f7ff f99f 	bl	8000a24 <HAL_GetTick>
 80016e6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016e8:	e012      	b.n	8001710 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016ea:	f7ff f99b 	bl	8000a24 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b0a      	cmp	r3, #10
 80016f6:	d90b      	bls.n	8001710 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2205      	movs	r2, #5
 8001708:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e012      	b.n	8001736 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1e5      	bne.n	80016ea <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	e006      	b.n	8001736 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
  }
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d133      	bne.n	80017ba <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0201 	orr.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001762:	f7ff f95f 	bl	8000a24 <HAL_GetTick>
 8001766:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001768:	e012      	b.n	8001790 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800176a:	f7ff f95b 	bl	8000a24 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b0a      	cmp	r3, #10
 8001776:	d90b      	bls.n	8001790 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2205      	movs	r2, #5
 8001788:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e01b      	b.n	80017c8 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0e5      	beq.n	800176a <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0202 	bic.w	r2, r2, #2
 80017ac:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e006      	b.n	80017c8 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
  }
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	@ 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80017ee:	7ffb      	ldrb	r3, [r7, #31]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d003      	beq.n	80017fc <HAL_CAN_AddTxMessage+0x2c>
 80017f4:	7ffb      	ldrb	r3, [r7, #31]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	f040 80ad 	bne.w	8001956 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10a      	bne.n	800181c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8095 	beq.w	8001946 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	0e1b      	lsrs	r3, r3, #24
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001826:	2201      	movs	r2, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10d      	bne.n	8001854 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001842:	68f9      	ldr	r1, [r7, #12]
 8001844:	6809      	ldr	r1, [r1, #0]
 8001846:	431a      	orrs	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3318      	adds	r3, #24
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	440b      	add	r3, r1
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e00f      	b.n	8001874 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800185e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001868:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3318      	adds	r3, #24
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	440b      	add	r3, r1
 8001872:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6819      	ldr	r1, [r3, #0]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3318      	adds	r3, #24
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	440b      	add	r3, r1
 8001884:	3304      	adds	r3, #4
 8001886:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	7d1b      	ldrb	r3, [r3, #20]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d111      	bne.n	80018b4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3318      	adds	r3, #24
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	4413      	add	r3, r2
 800189c:	3304      	adds	r3, #4
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	6811      	ldr	r1, [r2, #0]
 80018a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3318      	adds	r3, #24
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	440b      	add	r3, r1
 80018b0:	3304      	adds	r3, #4
 80018b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3307      	adds	r3, #7
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	061a      	lsls	r2, r3, #24
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3306      	adds	r3, #6
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	041b      	lsls	r3, r3, #16
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3305      	adds	r3, #5
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	4313      	orrs	r3, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	3204      	adds	r2, #4
 80018d4:	7812      	ldrb	r2, [r2, #0]
 80018d6:	4610      	mov	r0, r2
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	6811      	ldr	r1, [r2, #0]
 80018dc:	ea43 0200 	orr.w	r2, r3, r0
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	440b      	add	r3, r1
 80018e6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80018ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3303      	adds	r3, #3
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	061a      	lsls	r2, r3, #24
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3302      	adds	r3, #2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	041b      	lsls	r3, r3, #16
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3301      	adds	r3, #1
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	4313      	orrs	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	7812      	ldrb	r2, [r2, #0]
 800190c:	4610      	mov	r0, r2
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	6811      	ldr	r1, [r2, #0]
 8001912:	ea43 0200 	orr.w	r2, r3, r0
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	440b      	add	r3, r1
 800191c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001920:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3318      	adds	r3, #24
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	4413      	add	r3, r2
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	6811      	ldr	r1, [r2, #0]
 8001934:	f043 0201 	orr.w	r2, r3, #1
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3318      	adds	r3, #24
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	440b      	add	r3, r1
 8001940:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e00e      	b.n	8001964 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e006      	b.n	8001964 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
  }
}
 8001964:	4618      	mov	r0, r3
 8001966:	3724      	adds	r7, #36	@ 0x24
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b08a      	sub	sp, #40	@ 0x28
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d07c      	beq.n	8001aae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d023      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2201      	movs	r2, #1
 80019c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f983 	bl	8001cdc <HAL_CAN_TxMailbox0CompleteCallback>
 80019d6:	e016      	b.n	8001a06 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ea:	e00c      	b.n	8001a06 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019fe:	e002      	b.n	8001a06 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f986 	bl	8001d12 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d024      	beq.n	8001a5a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f962 	bl	8001cee <HAL_CAN_TxMailbox1CompleteCallback>
 8001a2a:	e016      	b.n	8001a5a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a3e:	e00c      	b.n	8001a5a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a52:	e002      	b.n	8001a5a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f965 	bl	8001d24 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d024      	beq.n	8001aae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f941 	bl	8001d00 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a7e:	e016      	b.n	8001aae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d004      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a92:	e00c      	b.n	8001aae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d004      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa6:	e002      	b.n	8001aae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f944 	bl	8001d36 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00c      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2210      	movs	r2, #16
 8001ad0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00b      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2208      	movs	r2, #8
 8001aec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f933 	bl	8001d5a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f91b 	bl	8001d48 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00c      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2210      	movs	r2, #16
 8001b34:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00b      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2208      	movs	r2, #8
 8001b50:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f913 	bl	8001d7e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f8fb 	bl	8001d6c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00b      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2210      	movs	r2, #16
 8001b90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f8fc 	bl	8001d90 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f8f4 	bl	8001da2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d07b      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d072      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d043      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d03e      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c3c:	2b60      	cmp	r3, #96	@ 0x60
 8001c3e:	d02b      	beq.n	8001c98 <HAL_CAN_IRQHandler+0x32a>
 8001c40:	2b60      	cmp	r3, #96	@ 0x60
 8001c42:	d82e      	bhi.n	8001ca2 <HAL_CAN_IRQHandler+0x334>
 8001c44:	2b50      	cmp	r3, #80	@ 0x50
 8001c46:	d022      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x320>
 8001c48:	2b50      	cmp	r3, #80	@ 0x50
 8001c4a:	d82a      	bhi.n	8001ca2 <HAL_CAN_IRQHandler+0x334>
 8001c4c:	2b40      	cmp	r3, #64	@ 0x40
 8001c4e:	d019      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x316>
 8001c50:	2b40      	cmp	r3, #64	@ 0x40
 8001c52:	d826      	bhi.n	8001ca2 <HAL_CAN_IRQHandler+0x334>
 8001c54:	2b30      	cmp	r3, #48	@ 0x30
 8001c56:	d010      	beq.n	8001c7a <HAL_CAN_IRQHandler+0x30c>
 8001c58:	2b30      	cmp	r3, #48	@ 0x30
 8001c5a:	d822      	bhi.n	8001ca2 <HAL_CAN_IRQHandler+0x334>
 8001c5c:	2b10      	cmp	r3, #16
 8001c5e:	d002      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x2f8>
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	d005      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c64:	e01d      	b.n	8001ca2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c6e:	e019      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	f043 0310 	orr.w	r3, r3, #16
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c78:	e014      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	f043 0320 	orr.w	r3, r3, #32
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c82:	e00f      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c8c:	e00a      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c96:	e005      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ca0:	e000      	b.n	8001ca4 <HAL_CAN_IRQHandler+0x336>
            break;
 8001ca2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001cb2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2204      	movs	r2, #4
 8001cba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d008      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f870 	bl	8001db4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3728      	adds	r7, #40	@ 0x28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0e:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	60d3      	str	r3, [r2, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e28:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <__NVIC_GetPriorityGrouping+0x18>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 0307 	and.w	r3, r3, #7
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	db0b      	blt.n	8001e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	4906      	ldr	r1, [pc, #24]	@ (8001e74 <__NVIC_EnableIRQ+0x34>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	2001      	movs	r0, #1
 8001e62:	fa00 f202 	lsl.w	r2, r0, r2
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	db0a      	blt.n	8001ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	490c      	ldr	r1, [pc, #48]	@ (8001ec4 <__NVIC_SetPriority+0x4c>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea0:	e00a      	b.n	8001eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4908      	ldr	r1, [pc, #32]	@ (8001ec8 <__NVIC_SetPriority+0x50>)
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	3b04      	subs	r3, #4
 8001eb0:	0112      	lsls	r2, r2, #4
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	761a      	strb	r2, [r3, #24]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e100 	.word	0xe000e100
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	@ 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f1c3 0307 	rsb	r3, r3, #7
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	bf28      	it	cs
 8001eea:	2304      	movcs	r3, #4
 8001eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d902      	bls.n	8001efc <NVIC_EncodePriority+0x30>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3b03      	subs	r3, #3
 8001efa:	e000      	b.n	8001efe <NVIC_EncodePriority+0x32>
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	f04f 32ff 	mov.w	r2, #4294967295
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	401a      	ands	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43d9      	mvns	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	4313      	orrs	r3, r2
         );
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3724      	adds	r7, #36	@ 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f40:	d301      	bcc.n	8001f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00f      	b.n	8001f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f46:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <SysTick_Config+0x40>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4e:	210f      	movs	r1, #15
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	f7ff ff90 	bl	8001e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <SysTick_Config+0x40>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5e:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <SysTick_Config+0x40>)
 8001f60:	2207      	movs	r2, #7
 8001f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	e000e010 	.word	0xe000e010

08001f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff2d 	bl	8001ddc <__NVIC_SetPriorityGrouping>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9c:	f7ff ff42 	bl	8001e24 <__NVIC_GetPriorityGrouping>
 8001fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7ff ff90 	bl	8001ecc <NVIC_EncodePriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff5f 	bl	8001e78 <__NVIC_SetPriority>
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff35 	bl	8001e40 <__NVIC_EnableIRQ>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffa2 	bl	8001f30 <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b08b      	sub	sp, #44	@ 0x2c
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200a:	e169      	b.n	80022e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800200c:	2201      	movs	r2, #1
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	429a      	cmp	r2, r3
 8002026:	f040 8158 	bne.w	80022da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a9a      	ldr	r2, [pc, #616]	@ (8002298 <HAL_GPIO_Init+0x2a0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d05e      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002034:	4a98      	ldr	r2, [pc, #608]	@ (8002298 <HAL_GPIO_Init+0x2a0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d875      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 800203a:	4a98      	ldr	r2, [pc, #608]	@ (800229c <HAL_GPIO_Init+0x2a4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d058      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002040:	4a96      	ldr	r2, [pc, #600]	@ (800229c <HAL_GPIO_Init+0x2a4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d86f      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 8002046:	4a96      	ldr	r2, [pc, #600]	@ (80022a0 <HAL_GPIO_Init+0x2a8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d052      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 800204c:	4a94      	ldr	r2, [pc, #592]	@ (80022a0 <HAL_GPIO_Init+0x2a8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d869      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 8002052:	4a94      	ldr	r2, [pc, #592]	@ (80022a4 <HAL_GPIO_Init+0x2ac>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d04c      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002058:	4a92      	ldr	r2, [pc, #584]	@ (80022a4 <HAL_GPIO_Init+0x2ac>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d863      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 800205e:	4a92      	ldr	r2, [pc, #584]	@ (80022a8 <HAL_GPIO_Init+0x2b0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d046      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002064:	4a90      	ldr	r2, [pc, #576]	@ (80022a8 <HAL_GPIO_Init+0x2b0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d85d      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 800206a:	2b12      	cmp	r3, #18
 800206c:	d82a      	bhi.n	80020c4 <HAL_GPIO_Init+0xcc>
 800206e:	2b12      	cmp	r3, #18
 8002070:	d859      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 8002072:	a201      	add	r2, pc, #4	@ (adr r2, 8002078 <HAL_GPIO_Init+0x80>)
 8002074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002078:	080020f3 	.word	0x080020f3
 800207c:	080020cd 	.word	0x080020cd
 8002080:	080020df 	.word	0x080020df
 8002084:	08002121 	.word	0x08002121
 8002088:	08002127 	.word	0x08002127
 800208c:	08002127 	.word	0x08002127
 8002090:	08002127 	.word	0x08002127
 8002094:	08002127 	.word	0x08002127
 8002098:	08002127 	.word	0x08002127
 800209c:	08002127 	.word	0x08002127
 80020a0:	08002127 	.word	0x08002127
 80020a4:	08002127 	.word	0x08002127
 80020a8:	08002127 	.word	0x08002127
 80020ac:	08002127 	.word	0x08002127
 80020b0:	08002127 	.word	0x08002127
 80020b4:	08002127 	.word	0x08002127
 80020b8:	08002127 	.word	0x08002127
 80020bc:	080020d5 	.word	0x080020d5
 80020c0:	080020e9 	.word	0x080020e9
 80020c4:	4a79      	ldr	r2, [pc, #484]	@ (80022ac <HAL_GPIO_Init+0x2b4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ca:	e02c      	b.n	8002126 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	623b      	str	r3, [r7, #32]
          break;
 80020d2:	e029      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	3304      	adds	r3, #4
 80020da:	623b      	str	r3, [r7, #32]
          break;
 80020dc:	e024      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	3308      	adds	r3, #8
 80020e4:	623b      	str	r3, [r7, #32]
          break;
 80020e6:	e01f      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	330c      	adds	r3, #12
 80020ee:	623b      	str	r3, [r7, #32]
          break;
 80020f0:	e01a      	b.n	8002128 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020fa:	2304      	movs	r3, #4
 80020fc:	623b      	str	r3, [r7, #32]
          break;
 80020fe:	e013      	b.n	8002128 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002108:	2308      	movs	r3, #8
 800210a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	611a      	str	r2, [r3, #16]
          break;
 8002112:	e009      	b.n	8002128 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002114:	2308      	movs	r3, #8
 8002116:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	615a      	str	r2, [r3, #20]
          break;
 800211e:	e003      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
          break;
 8002124:	e000      	b.n	8002128 <HAL_GPIO_Init+0x130>
          break;
 8002126:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	2bff      	cmp	r3, #255	@ 0xff
 800212c:	d801      	bhi.n	8002132 <HAL_GPIO_Init+0x13a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	e001      	b.n	8002136 <HAL_GPIO_Init+0x13e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3304      	adds	r3, #4
 8002136:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2bff      	cmp	r3, #255	@ 0xff
 800213c:	d802      	bhi.n	8002144 <HAL_GPIO_Init+0x14c>
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	e002      	b.n	800214a <HAL_GPIO_Init+0x152>
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	3b08      	subs	r3, #8
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	210f      	movs	r1, #15
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	401a      	ands	r2, r3
 800215c:	6a39      	ldr	r1, [r7, #32]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	431a      	orrs	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80b1 	beq.w	80022da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002178:	4b4d      	ldr	r3, [pc, #308]	@ (80022b0 <HAL_GPIO_Init+0x2b8>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4a4c      	ldr	r2, [pc, #304]	@ (80022b0 <HAL_GPIO_Init+0x2b8>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6193      	str	r3, [r2, #24]
 8002184:	4b4a      	ldr	r3, [pc, #296]	@ (80022b0 <HAL_GPIO_Init+0x2b8>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002190:	4a48      	ldr	r2, [pc, #288]	@ (80022b4 <HAL_GPIO_Init+0x2bc>)
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	3302      	adds	r3, #2
 8002198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	220f      	movs	r2, #15
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4013      	ands	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a40      	ldr	r2, [pc, #256]	@ (80022b8 <HAL_GPIO_Init+0x2c0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <HAL_GPIO_Init+0x1ec>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a3f      	ldr	r2, [pc, #252]	@ (80022bc <HAL_GPIO_Init+0x2c4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d00d      	beq.n	80021e0 <HAL_GPIO_Init+0x1e8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3e      	ldr	r2, [pc, #248]	@ (80022c0 <HAL_GPIO_Init+0x2c8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d007      	beq.n	80021dc <HAL_GPIO_Init+0x1e4>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a3d      	ldr	r2, [pc, #244]	@ (80022c4 <HAL_GPIO_Init+0x2cc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d101      	bne.n	80021d8 <HAL_GPIO_Init+0x1e0>
 80021d4:	2303      	movs	r3, #3
 80021d6:	e006      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021d8:	2304      	movs	r3, #4
 80021da:	e004      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021dc:	2302      	movs	r3, #2
 80021de:	e002      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021e4:	2300      	movs	r3, #0
 80021e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e8:	f002 0203 	and.w	r2, r2, #3
 80021ec:	0092      	lsls	r2, r2, #2
 80021ee:	4093      	lsls	r3, r2
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021f6:	492f      	ldr	r1, [pc, #188]	@ (80022b4 <HAL_GPIO_Init+0x2bc>)
 80021f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d006      	beq.n	800221e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002210:	4b2d      	ldr	r3, [pc, #180]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	492c      	ldr	r1, [pc, #176]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]
 800221c:	e006      	b.n	800222c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800221e:	4b2a      	ldr	r3, [pc, #168]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	43db      	mvns	r3, r3
 8002226:	4928      	ldr	r1, [pc, #160]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002228:	4013      	ands	r3, r2
 800222a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d006      	beq.n	8002246 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002238:	4b23      	ldr	r3, [pc, #140]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	4922      	ldr	r1, [pc, #136]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	60cb      	str	r3, [r1, #12]
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002246:	4b20      	ldr	r3, [pc, #128]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	43db      	mvns	r3, r3
 800224e:	491e      	ldr	r1, [pc, #120]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002250:	4013      	ands	r3, r2
 8002252:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d006      	beq.n	800226e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002260:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	4918      	ldr	r1, [pc, #96]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800226e:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	43db      	mvns	r3, r3
 8002276:	4914      	ldr	r1, [pc, #80]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002278:	4013      	ands	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d021      	beq.n	80022cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002288:	4b0f      	ldr	r3, [pc, #60]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	490e      	ldr	r1, [pc, #56]	@ (80022c8 <HAL_GPIO_Init+0x2d0>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]
 8002294:	e021      	b.n	80022da <HAL_GPIO_Init+0x2e2>
 8002296:	bf00      	nop
 8002298:	10320000 	.word	0x10320000
 800229c:	10310000 	.word	0x10310000
 80022a0:	10220000 	.word	0x10220000
 80022a4:	10210000 	.word	0x10210000
 80022a8:	10120000 	.word	0x10120000
 80022ac:	10110000 	.word	0x10110000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40010000 	.word	0x40010000
 80022b8:	40010800 	.word	0x40010800
 80022bc:	40010c00 	.word	0x40010c00
 80022c0:	40011000 	.word	0x40011000
 80022c4:	40011400 	.word	0x40011400
 80022c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_GPIO_Init+0x304>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	4909      	ldr	r1, [pc, #36]	@ (80022fc <HAL_GPIO_Init+0x304>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022dc:	3301      	adds	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f47f ae8e 	bne.w	800200c <HAL_GPIO_Init+0x14>
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	372c      	adds	r7, #44	@ 0x2c
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	40010400 	.word	0x40010400

08002300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
 800230c:	4613      	mov	r3, r2
 800230e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002310:	787b      	ldrb	r3, [r7, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800231c:	e003      	b.n	8002326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800231e:	887b      	ldrh	r3, [r7, #2]
 8002320:	041a      	lsls	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	611a      	str	r2, [r3, #16]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e272      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8087 	beq.w	800245e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002350:	4b92      	ldr	r3, [pc, #584]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b04      	cmp	r3, #4
 800235a:	d00c      	beq.n	8002376 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800235c:	4b8f      	ldr	r3, [pc, #572]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d112      	bne.n	800238e <HAL_RCC_OscConfig+0x5e>
 8002368:	4b8c      	ldr	r3, [pc, #560]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002374:	d10b      	bne.n	800238e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002376:	4b89      	ldr	r3, [pc, #548]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d06c      	beq.n	800245c <HAL_RCC_OscConfig+0x12c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d168      	bne.n	800245c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e24c      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x76>
 8002398:	4b80      	ldr	r3, [pc, #512]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a7f      	ldr	r2, [pc, #508]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 800239e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	e02e      	b.n	8002404 <HAL_RCC_OscConfig+0xd4>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x98>
 80023ae:	4b7b      	ldr	r3, [pc, #492]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a7a      	ldr	r2, [pc, #488]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b78      	ldr	r3, [pc, #480]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a77      	ldr	r2, [pc, #476]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e01d      	b.n	8002404 <HAL_RCC_OscConfig+0xd4>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0xbc>
 80023d2:	4b72      	ldr	r3, [pc, #456]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a71      	ldr	r2, [pc, #452]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b6f      	ldr	r3, [pc, #444]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a6e      	ldr	r2, [pc, #440]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0xd4>
 80023ec:	4b6b      	ldr	r3, [pc, #428]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a6a      	ldr	r2, [pc, #424]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b68      	ldr	r3, [pc, #416]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a67      	ldr	r2, [pc, #412]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002402:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d013      	beq.n	8002434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe fb0a 	bl	8000a24 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7fe fb06 	bl	8000a24 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	@ 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e200      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b5d      	ldr	r3, [pc, #372]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0xe4>
 8002432:	e014      	b.n	800245e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fe faf6 	bl	8000a24 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243c:	f7fe faf2 	bl	8000a24 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	@ 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e1ec      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	4b53      	ldr	r3, [pc, #332]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x10c>
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d063      	beq.n	8002532 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800246a:	4b4c      	ldr	r3, [pc, #304]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00b      	beq.n	800248e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002476:	4b49      	ldr	r3, [pc, #292]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b08      	cmp	r3, #8
 8002480:	d11c      	bne.n	80024bc <HAL_RCC_OscConfig+0x18c>
 8002482:	4b46      	ldr	r3, [pc, #280]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d116      	bne.n	80024bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	4b43      	ldr	r3, [pc, #268]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_RCC_OscConfig+0x176>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e1c0      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a6:	4b3d      	ldr	r3, [pc, #244]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4939      	ldr	r1, [pc, #228]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	e03a      	b.n	8002532 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d020      	beq.n	8002506 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c4:	4b36      	ldr	r3, [pc, #216]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7fe faab 	bl	8000a24 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d2:	f7fe faa7 	bl	8000a24 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e1a1      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f0:	4b2a      	ldr	r3, [pc, #168]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4927      	ldr	r1, [pc, #156]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
 8002504:	e015      	b.n	8002532 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002506:	4b26      	ldr	r3, [pc, #152]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fa8a 	bl	8000a24 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002514:	f7fe fa86 	bl	8000a24 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e180      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	4b1d      	ldr	r3, [pc, #116]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d03a      	beq.n	80025b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d019      	beq.n	800257a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002546:	4b17      	ldr	r3, [pc, #92]	@ (80025a4 <HAL_RCC_OscConfig+0x274>)
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254c:	f7fe fa6a 	bl	8000a24 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002554:	f7fe fa66 	bl	8000a24 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e160      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002572:	2001      	movs	r0, #1
 8002574:	f000 faba 	bl	8002aec <RCC_Delay>
 8002578:	e01c      	b.n	80025b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257a:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <HAL_RCC_OscConfig+0x274>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002580:	f7fe fa50 	bl	8000a24 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002586:	e00f      	b.n	80025a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002588:	f7fe fa4c 	bl	8000a24 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d908      	bls.n	80025a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e146      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	42420000 	.word	0x42420000
 80025a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a8:	4b92      	ldr	r3, [pc, #584]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e9      	bne.n	8002588 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a6 	beq.w	800270e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c6:	4b8b      	ldr	r3, [pc, #556]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10d      	bne.n	80025ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	4b88      	ldr	r3, [pc, #544]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a87      	ldr	r2, [pc, #540]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025dc:	61d3      	str	r3, [r2, #28]
 80025de:	4b85      	ldr	r3, [pc, #532]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ea:	2301      	movs	r3, #1
 80025ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ee:	4b82      	ldr	r3, [pc, #520]	@ (80027f8 <HAL_RCC_OscConfig+0x4c8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d118      	bne.n	800262c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fa:	4b7f      	ldr	r3, [pc, #508]	@ (80027f8 <HAL_RCC_OscConfig+0x4c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a7e      	ldr	r2, [pc, #504]	@ (80027f8 <HAL_RCC_OscConfig+0x4c8>)
 8002600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002606:	f7fe fa0d 	bl	8000a24 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260e:	f7fe fa09 	bl	8000a24 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b64      	cmp	r3, #100	@ 0x64
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e103      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	4b75      	ldr	r3, [pc, #468]	@ (80027f8 <HAL_RCC_OscConfig+0x4c8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x312>
 8002634:	4b6f      	ldr	r3, [pc, #444]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4a6e      	ldr	r2, [pc, #440]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6213      	str	r3, [r2, #32]
 8002640:	e02d      	b.n	800269e <HAL_RCC_OscConfig+0x36e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x334>
 800264a:	4b6a      	ldr	r3, [pc, #424]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4a69      	ldr	r2, [pc, #420]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6213      	str	r3, [r2, #32]
 8002656:	4b67      	ldr	r3, [pc, #412]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a66      	ldr	r2, [pc, #408]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6213      	str	r3, [r2, #32]
 8002662:	e01c      	b.n	800269e <HAL_RCC_OscConfig+0x36e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b05      	cmp	r3, #5
 800266a:	d10c      	bne.n	8002686 <HAL_RCC_OscConfig+0x356>
 800266c:	4b61      	ldr	r3, [pc, #388]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	4a60      	ldr	r2, [pc, #384]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002672:	f043 0304 	orr.w	r3, r3, #4
 8002676:	6213      	str	r3, [r2, #32]
 8002678:	4b5e      	ldr	r3, [pc, #376]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4a5d      	ldr	r2, [pc, #372]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6213      	str	r3, [r2, #32]
 8002684:	e00b      	b.n	800269e <HAL_RCC_OscConfig+0x36e>
 8002686:	4b5b      	ldr	r3, [pc, #364]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	4a5a      	ldr	r2, [pc, #360]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6213      	str	r3, [r2, #32]
 8002692:	4b58      	ldr	r3, [pc, #352]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4a57      	ldr	r2, [pc, #348]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d015      	beq.n	80026d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7fe f9bd 	bl	8000a24 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7fe f9b9 	bl	8000a24 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e0b1      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	4b4b      	ldr	r3, [pc, #300]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ee      	beq.n	80026ae <HAL_RCC_OscConfig+0x37e>
 80026d0:	e014      	b.n	80026fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7fe f9a7 	bl	8000a24 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe f9a3 	bl	8000a24 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e09b      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f0:	4b40      	ldr	r3, [pc, #256]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ee      	bne.n	80026da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d105      	bne.n	800270e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002702:	4b3c      	ldr	r3, [pc, #240]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	4a3b      	ldr	r2, [pc, #236]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800270c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8087 	beq.w	8002826 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002718:	4b36      	ldr	r3, [pc, #216]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b08      	cmp	r3, #8
 8002722:	d061      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d146      	bne.n	80027ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272c:	4b33      	ldr	r3, [pc, #204]	@ (80027fc <HAL_RCC_OscConfig+0x4cc>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002732:	f7fe f977 	bl	8000a24 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273a:	f7fe f973 	bl	8000a24 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e06d      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274c:	4b29      	ldr	r3, [pc, #164]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f0      	bne.n	800273a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002760:	d108      	bne.n	8002774 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002762:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	4921      	ldr	r1, [pc, #132]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002774:	4b1f      	ldr	r3, [pc, #124]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a19      	ldr	r1, [r3, #32]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	430b      	orrs	r3, r1
 8002786:	491b      	ldr	r1, [pc, #108]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800278c:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <HAL_RCC_OscConfig+0x4cc>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7fe f947 	bl	8000a24 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279a:	f7fe f943 	bl	8000a24 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e03d      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ac:	4b11      	ldr	r3, [pc, #68]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x46a>
 80027b8:	e035      	b.n	8002826 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ba:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <HAL_RCC_OscConfig+0x4cc>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7fe f930 	bl	8000a24 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c8:	f7fe f92c 	bl	8000a24 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e026      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027da:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x498>
 80027e6:	e01e      	b.n	8002826 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e019      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40007000 	.word	0x40007000
 80027fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_RCC_OscConfig+0x500>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	429a      	cmp	r2, r3
 8002812:	d106      	bne.n	8002822 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000

08002834 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0d0      	b.n	80029ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002848:	4b6a      	ldr	r3, [pc, #424]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d910      	bls.n	8002878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b67      	ldr	r3, [pc, #412]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 0207 	bic.w	r2, r3, #7
 800285e:	4965      	ldr	r1, [pc, #404]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b63      	ldr	r3, [pc, #396]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0b8      	b.n	80029ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002890:	4b59      	ldr	r3, [pc, #356]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a58      	ldr	r2, [pc, #352]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800289a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a8:	4b53      	ldr	r3, [pc, #332]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4a52      	ldr	r2, [pc, #328]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b4:	4b50      	ldr	r3, [pc, #320]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	494d      	ldr	r1, [pc, #308]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d040      	beq.n	8002954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	4b47      	ldr	r3, [pc, #284]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d115      	bne.n	8002912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e07f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f2:	4b41      	ldr	r3, [pc, #260]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e073      	b.n	80029ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002902:	4b3d      	ldr	r3, [pc, #244]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e06b      	b.n	80029ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002912:	4b39      	ldr	r3, [pc, #228]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f023 0203 	bic.w	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4936      	ldr	r1, [pc, #216]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002924:	f7fe f87e 	bl	8000a24 <HAL_GetTick>
 8002928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	e00a      	b.n	8002942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292c:	f7fe f87a 	bl	8000a24 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e053      	b.n	80029ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002942:	4b2d      	ldr	r3, [pc, #180]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 020c 	and.w	r2, r3, #12
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	429a      	cmp	r2, r3
 8002952:	d1eb      	bne.n	800292c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002954:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d210      	bcs.n	8002984 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b24      	ldr	r3, [pc, #144]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 0207 	bic.w	r2, r3, #7
 800296a:	4922      	ldr	r1, [pc, #136]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e032      	b.n	80029ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002990:	4b19      	ldr	r3, [pc, #100]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4916      	ldr	r1, [pc, #88]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d009      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ae:	4b12      	ldr	r3, [pc, #72]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	490e      	ldr	r1, [pc, #56]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029c2:	f000 f821 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 80029c6:	4602      	mov	r2, r0
 80029c8:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	490a      	ldr	r1, [pc, #40]	@ (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 80029d4:	5ccb      	ldrb	r3, [r1, r3]
 80029d6:	fa22 f303 	lsr.w	r3, r2, r3
 80029da:	4a09      	ldr	r2, [pc, #36]	@ (8002a00 <HAL_RCC_ClockConfig+0x1cc>)
 80029dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029de:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <HAL_RCC_ClockConfig+0x1d0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd ffdc 	bl	80009a0 <HAL_InitTick>

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40022000 	.word	0x40022000
 80029f8:	40021000 	.word	0x40021000
 80029fc:	08002e70 	.word	0x08002e70
 8002a00:	20000000 	.word	0x20000000
 8002a04:	20000004 	.word	0x20000004

08002a08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a22:	4b1e      	ldr	r3, [pc, #120]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d002      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0x30>
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d003      	beq.n	8002a3e <HAL_RCC_GetSysClockFreq+0x36>
 8002a36:	e027      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a38:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a3a:	613b      	str	r3, [r7, #16]
      break;
 8002a3c:	e027      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	0c9b      	lsrs	r3, r3, #18
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	4a17      	ldr	r2, [pc, #92]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a48:	5cd3      	ldrb	r3, [r2, r3]
 8002a4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d010      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a56:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	0c5b      	lsrs	r3, r3, #17
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	4a11      	ldr	r2, [pc, #68]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a62:	5cd3      	ldrb	r3, [r2, r3]
 8002a64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a6a:	fb03 f202 	mul.w	r2, r3, r2
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e004      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a7c:	fb02 f303 	mul.w	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	613b      	str	r3, [r7, #16]
      break;
 8002a86:	e002      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a8a:	613b      	str	r3, [r7, #16]
      break;
 8002a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8e:	693b      	ldr	r3, [r7, #16]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	007a1200 	.word	0x007a1200
 8002aa4:	08002e88 	.word	0x08002e88
 8002aa8:	08002e98 	.word	0x08002e98
 8002aac:	003d0900 	.word	0x003d0900

08002ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b02      	ldr	r3, [pc, #8]	@ (8002ac0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	20000000 	.word	0x20000000

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac8:	f7ff fff2 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	0adb      	lsrs	r3, r3, #11
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4903      	ldr	r1, [pc, #12]	@ (8002ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	08002e80 	.word	0x08002e80

08002aec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002af4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <RCC_Delay+0x34>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0a      	ldr	r2, [pc, #40]	@ (8002b24 <RCC_Delay+0x38>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0a5b      	lsrs	r3, r3, #9
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b08:	bf00      	nop
  }
  while (Delay --);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1e5a      	subs	r2, r3, #1
 8002b0e:	60fa      	str	r2, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f9      	bne.n	8002b08 <RCC_Delay+0x1c>
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	20000000 	.word	0x20000000
 8002b24:	10624dd3 	.word	0x10624dd3

08002b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d07d      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b48:	4b4f      	ldr	r3, [pc, #316]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10d      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	4b4c      	ldr	r3, [pc, #304]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	4a4b      	ldr	r2, [pc, #300]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b5e:	61d3      	str	r3, [r2, #28]
 8002b60:	4b49      	ldr	r3, [pc, #292]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	4b46      	ldr	r3, [pc, #280]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d118      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7c:	4b43      	ldr	r3, [pc, #268]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a42      	ldr	r2, [pc, #264]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b88:	f7fd ff4c 	bl	8000a24 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b90:	f7fd ff48 	bl	8000a24 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	@ 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e06d      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba2:	4b3a      	ldr	r3, [pc, #232]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bae:	4b36      	ldr	r3, [pc, #216]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bb6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d02e      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d027      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002be2:	4a29      	ldr	r2, [pc, #164]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d014      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fd ff17 	bl	8000a24 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7fd ff13 	bl	8000a24 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e036      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c10:	4b1d      	ldr	r3, [pc, #116]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ee      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4917      	ldr	r1, [pc, #92]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d105      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c34:	4b14      	ldr	r3, [pc, #80]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	4a13      	ldr	r2, [pc, #76]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	490b      	ldr	r1, [pc, #44]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c6a:	4b07      	ldr	r3, [pc, #28]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4904      	ldr	r1, [pc, #16]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	42420440 	.word	0x42420440

08002c94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	2300      	movs	r3, #0
 8002cae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	f200 808a 	bhi.w	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d045      	beq.n	8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d075      	beq.n	8002db6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002cca:	e082      	b.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002ccc:	4b46      	ldr	r3, [pc, #280]	@ (8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002cd2:	4b45      	ldr	r3, [pc, #276]	@ (8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d07b      	beq.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	0c9b      	lsrs	r3, r3, #18
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	4a41      	ldr	r2, [pc, #260]	@ (8002dec <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002ce8:	5cd3      	ldrb	r3, [r2, r3]
 8002cea:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d015      	beq.n	8002d22 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	0c5b      	lsrs	r3, r3, #17
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	4a3b      	ldr	r2, [pc, #236]	@ (8002df0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002d02:	5cd3      	ldrb	r3, [r2, r3]
 8002d04:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00d      	beq.n	8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d10:	4a38      	ldr	r2, [pc, #224]	@ (8002df4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	fb02 f303 	mul.w	r3, r2, r3
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	e004      	b.n	8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4a34      	ldr	r2, [pc, #208]	@ (8002df8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d38:	d102      	bne.n	8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	61bb      	str	r3, [r7, #24]
      break;
 8002d3e:	e04a      	b.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4a2d      	ldr	r2, [pc, #180]	@ (8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d46:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	61bb      	str	r3, [r7, #24]
      break;
 8002d4e:	e042      	b.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002d50:	4b25      	ldr	r3, [pc, #148]	@ (8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d60:	d108      	bne.n	8002d74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002d6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e01f      	b.n	8002db4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d7e:	d109      	bne.n	8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002d80:	4b19      	ldr	r3, [pc, #100]	@ (8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002d8c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	e00f      	b.n	8002db4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d9e:	d11c      	bne.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002da0:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d016      	beq.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002dac:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002db0:	61bb      	str	r3, [r7, #24]
      break;
 8002db2:	e012      	b.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002db4:	e011      	b.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002db6:	f7ff fe85 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	0b9b      	lsrs	r3, r3, #14
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	61bb      	str	r3, [r7, #24]
      break;
 8002dd0:	e004      	b.n	8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e002      	b.n	8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002dda:	bf00      	nop
    }
  }
  return (frequency);
 8002ddc:	69bb      	ldr	r3, [r7, #24]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	08002e9c 	.word	0x08002e9c
 8002df0:	08002eac 	.word	0x08002eac
 8002df4:	007a1200 	.word	0x007a1200
 8002df8:	003d0900 	.word	0x003d0900
 8002dfc:	aaaaaaab 	.word	0xaaaaaaab

08002e00 <memset>:
 8002e00:	4603      	mov	r3, r0
 8002e02:	4402      	add	r2, r0
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d100      	bne.n	8002e0a <memset+0xa>
 8002e08:	4770      	bx	lr
 8002e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e0e:	e7f9      	b.n	8002e04 <memset+0x4>

08002e10 <__libc_init_array>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	2600      	movs	r6, #0
 8002e14:	4d0c      	ldr	r5, [pc, #48]	@ (8002e48 <__libc_init_array+0x38>)
 8002e16:	4c0d      	ldr	r4, [pc, #52]	@ (8002e4c <__libc_init_array+0x3c>)
 8002e18:	1b64      	subs	r4, r4, r5
 8002e1a:	10a4      	asrs	r4, r4, #2
 8002e1c:	42a6      	cmp	r6, r4
 8002e1e:	d109      	bne.n	8002e34 <__libc_init_array+0x24>
 8002e20:	f000 f81a 	bl	8002e58 <_init>
 8002e24:	2600      	movs	r6, #0
 8002e26:	4d0a      	ldr	r5, [pc, #40]	@ (8002e50 <__libc_init_array+0x40>)
 8002e28:	4c0a      	ldr	r4, [pc, #40]	@ (8002e54 <__libc_init_array+0x44>)
 8002e2a:	1b64      	subs	r4, r4, r5
 8002e2c:	10a4      	asrs	r4, r4, #2
 8002e2e:	42a6      	cmp	r6, r4
 8002e30:	d105      	bne.n	8002e3e <__libc_init_array+0x2e>
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
 8002e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e38:	4798      	blx	r3
 8002e3a:	3601      	adds	r6, #1
 8002e3c:	e7ee      	b.n	8002e1c <__libc_init_array+0xc>
 8002e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e42:	4798      	blx	r3
 8002e44:	3601      	adds	r6, #1
 8002e46:	e7f2      	b.n	8002e2e <__libc_init_array+0x1e>
 8002e48:	08002eb0 	.word	0x08002eb0
 8002e4c:	08002eb0 	.word	0x08002eb0
 8002e50:	08002eb0 	.word	0x08002eb0
 8002e54:	08002eb4 	.word	0x08002eb4

08002e58 <_init>:
 8002e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5a:	bf00      	nop
 8002e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5e:	bc08      	pop	{r3}
 8002e60:	469e      	mov	lr, r3
 8002e62:	4770      	bx	lr

08002e64 <_fini>:
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e66:	bf00      	nop
 8002e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6a:	bc08      	pop	{r3}
 8002e6c:	469e      	mov	lr, r3
 8002e6e:	4770      	bx	lr
