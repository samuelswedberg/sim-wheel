
stm-wheelbase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008884  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08008a58  08008a58  00009a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f20  08008f20  0000a1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008f20  08008f20  00009f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f28  08008f28  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f28  08008f28  00009f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f2c  08008f2c  00009f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08008f30  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  200001e0  08009110  0000a1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  08009110  0000a5c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc8b  00000000  00000000  0000a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5e  00000000  00000000  00015e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  00017d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000943  00000000  00000000  000188b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002271e  00000000  00000000  000191f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9d8  00000000  00000000  0003b911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd1e9  00000000  00000000  000492e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001164d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004384  00000000  00000000  00116518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0011a89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008a3c 	.word	0x08008a3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08008a3c 	.word	0x08008a3c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9a0 	b.w	8000fa0 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff5b 	bl	8000b3c <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fcd1 	bl	8000658 <__aeabi_dmul>
 8000cb6:	f7ff ffa7 	bl	8000c08 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc52 	bl	8000564 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fcc8 	bl	8000658 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fb0a 	bl	80002e8 <__aeabi_dsub>
 8000cd4:	f7ff ff98 	bl	8000c08 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	460c      	mov	r4, r1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14e      	bne.n	8000d8e <__udivmoddi4+0xaa>
 8000cf0:	4694      	mov	ip, r2
 8000cf2:	458c      	cmp	ip, r1
 8000cf4:	4686      	mov	lr, r0
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	d962      	bls.n	8000dc2 <__udivmoddi4+0xde>
 8000cfc:	b14a      	cbz	r2, 8000d12 <__udivmoddi4+0x2e>
 8000cfe:	f1c2 0320 	rsb	r3, r2, #32
 8000d02:	4091      	lsls	r1, r2
 8000d04:	fa20 f303 	lsr.w	r3, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	4319      	orrs	r1, r3
 8000d0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f f68c 	uxth.w	r6, ip
 8000d1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb07 1114 	mls	r1, r7, r4, r1
 8000d26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2a:	fb04 f106 	mul.w	r1, r4, r6
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x64>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3a:	f080 8112 	bcs.w	8000f62 <__udivmoddi4+0x27e>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 810f 	bls.w	8000f62 <__udivmoddi4+0x27e>
 8000d44:	3c02      	subs	r4, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a59      	subs	r1, r3, r1
 8000d4a:	fa1f f38e 	uxth.w	r3, lr
 8000d4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d52:	fb07 1110 	mls	r1, r7, r0, r1
 8000d56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5a:	fb00 f606 	mul.w	r6, r0, r6
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x94>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6a:	f080 80fc 	bcs.w	8000f66 <__udivmoddi4+0x282>
 8000d6e:	429e      	cmp	r6, r3
 8000d70:	f240 80f9 	bls.w	8000f66 <__udivmoddi4+0x282>
 8000d74:	4463      	add	r3, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	1b9b      	subs	r3, r3, r6
 8000d7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11d      	cbz	r5, 8000d8a <__udivmoddi4+0xa6>
 8000d82:	40d3      	lsrs	r3, r2
 8000d84:	2200      	movs	r2, #0
 8000d86:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d905      	bls.n	8000d9e <__udivmoddi4+0xba>
 8000d92:	b10d      	cbz	r5, 8000d98 <__udivmoddi4+0xb4>
 8000d94:	e9c5 0100 	strd	r0, r1, [r5]
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e7f5      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000d9e:	fab3 f183 	clz	r1, r3
 8000da2:	2900      	cmp	r1, #0
 8000da4:	d146      	bne.n	8000e34 <__udivmoddi4+0x150>
 8000da6:	42a3      	cmp	r3, r4
 8000da8:	d302      	bcc.n	8000db0 <__udivmoddi4+0xcc>
 8000daa:	4290      	cmp	r0, r2
 8000dac:	f0c0 80f0 	bcc.w	8000f90 <__udivmoddi4+0x2ac>
 8000db0:	1a86      	subs	r6, r0, r2
 8000db2:	eb64 0303 	sbc.w	r3, r4, r3
 8000db6:	2001      	movs	r0, #1
 8000db8:	2d00      	cmp	r5, #0
 8000dba:	d0e6      	beq.n	8000d8a <__udivmoddi4+0xa6>
 8000dbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc0:	e7e3      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x204>
 8000dc8:	eba1 040c 	sub.w	r4, r1, ip
 8000dcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd0:	fa1f f78c 	uxth.w	r7, ip
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dde:	fb08 4416 	mls	r4, r8, r6, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb07 f006 	mul.w	r0, r7, r6
 8000dea:	4298      	cmp	r0, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x11c>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x11a>
 8000df8:	4298      	cmp	r0, r3
 8000dfa:	f200 80cd 	bhi.w	8000f98 <__udivmoddi4+0x2b4>
 8000dfe:	4626      	mov	r6, r4
 8000e00:	1a1c      	subs	r4, r3, r0
 8000e02:	fa1f f38e 	uxth.w	r3, lr
 8000e06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e12:	fb00 f707 	mul.w	r7, r0, r7
 8000e16:	429f      	cmp	r7, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x148>
 8000e1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x146>
 8000e24:	429f      	cmp	r7, r3
 8000e26:	f200 80b0 	bhi.w	8000f8a <__udivmoddi4+0x2a6>
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	1bdb      	subs	r3, r3, r7
 8000e2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e32:	e7a5      	b.n	8000d80 <__udivmoddi4+0x9c>
 8000e34:	f1c1 0620 	rsb	r6, r1, #32
 8000e38:	408b      	lsls	r3, r1
 8000e3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e3e:	431f      	orrs	r7, r3
 8000e40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e44:	fa04 f301 	lsl.w	r3, r4, r1
 8000e48:	ea43 030c 	orr.w	r3, r3, ip
 8000e4c:	40f4      	lsrs	r4, r6
 8000e4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e52:	0c38      	lsrs	r0, r7, #16
 8000e54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e58:	fbb4 fef0 	udiv	lr, r4, r0
 8000e5c:	fa1f fc87 	uxth.w	ip, r7
 8000e60:	fb00 441e 	mls	r4, r0, lr, r4
 8000e64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e68:	fb0e f90c 	mul.w	r9, lr, ip
 8000e6c:	45a1      	cmp	r9, r4
 8000e6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e72:	d90a      	bls.n	8000e8a <__udivmoddi4+0x1a6>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7a:	f080 8084 	bcs.w	8000f86 <__udivmoddi4+0x2a2>
 8000e7e:	45a1      	cmp	r9, r4
 8000e80:	f240 8081 	bls.w	8000f86 <__udivmoddi4+0x2a2>
 8000e84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	eba4 0409 	sub.w	r4, r4, r9
 8000e8e:	fa1f f983 	uxth.w	r9, r3
 8000e92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e96:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x1d2>
 8000ea6:	193c      	adds	r4, r7, r4
 8000ea8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eac:	d267      	bcs.n	8000f7e <__udivmoddi4+0x29a>
 8000eae:	45a4      	cmp	ip, r4
 8000eb0:	d965      	bls.n	8000f7e <__udivmoddi4+0x29a>
 8000eb2:	3b02      	subs	r3, #2
 8000eb4:	443c      	add	r4, r7
 8000eb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eba:	fba0 9302 	umull	r9, r3, r0, r2
 8000ebe:	eba4 040c 	sub.w	r4, r4, ip
 8000ec2:	429c      	cmp	r4, r3
 8000ec4:	46ce      	mov	lr, r9
 8000ec6:	469c      	mov	ip, r3
 8000ec8:	d351      	bcc.n	8000f6e <__udivmoddi4+0x28a>
 8000eca:	d04e      	beq.n	8000f6a <__udivmoddi4+0x286>
 8000ecc:	b155      	cbz	r5, 8000ee4 <__udivmoddi4+0x200>
 8000ece:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ed6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eda:	40cb      	lsrs	r3, r1
 8000edc:	431e      	orrs	r6, r3
 8000ede:	40cc      	lsrs	r4, r1
 8000ee0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	e750      	b.n	8000d8a <__udivmoddi4+0xa6>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ef8:	4094      	lsls	r4, r2
 8000efa:	430c      	orrs	r4, r1
 8000efc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f04:	fa1f f78c 	uxth.w	r7, ip
 8000f08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f10:	0c23      	lsrs	r3, r4, #16
 8000f12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f16:	fb00 f107 	mul.w	r1, r0, r7
 8000f1a:	4299      	cmp	r1, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x24c>
 8000f1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f26:	d22c      	bcs.n	8000f82 <__udivmoddi4+0x29e>
 8000f28:	4299      	cmp	r1, r3
 8000f2a:	d92a      	bls.n	8000f82 <__udivmoddi4+0x29e>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f38:	fb08 3311 	mls	r3, r8, r1, r3
 8000f3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f40:	fb01 f307 	mul.w	r3, r1, r7
 8000f44:	42a3      	cmp	r3, r4
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x276>
 8000f48:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f50:	d213      	bcs.n	8000f7a <__udivmoddi4+0x296>
 8000f52:	42a3      	cmp	r3, r4
 8000f54:	d911      	bls.n	8000f7a <__udivmoddi4+0x296>
 8000f56:	3902      	subs	r1, #2
 8000f58:	4464      	add	r4, ip
 8000f5a:	1ae4      	subs	r4, r4, r3
 8000f5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f60:	e739      	b.n	8000dd6 <__udivmoddi4+0xf2>
 8000f62:	4604      	mov	r4, r0
 8000f64:	e6f0      	b.n	8000d48 <__udivmoddi4+0x64>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e706      	b.n	8000d78 <__udivmoddi4+0x94>
 8000f6a:	45c8      	cmp	r8, r9
 8000f6c:	d2ae      	bcs.n	8000ecc <__udivmoddi4+0x1e8>
 8000f6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7a8      	b.n	8000ecc <__udivmoddi4+0x1e8>
 8000f7a:	4631      	mov	r1, r6
 8000f7c:	e7ed      	b.n	8000f5a <__udivmoddi4+0x276>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	e799      	b.n	8000eb6 <__udivmoddi4+0x1d2>
 8000f82:	4630      	mov	r0, r6
 8000f84:	e7d4      	b.n	8000f30 <__udivmoddi4+0x24c>
 8000f86:	46d6      	mov	lr, sl
 8000f88:	e77f      	b.n	8000e8a <__udivmoddi4+0x1a6>
 8000f8a:	4463      	add	r3, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e74d      	b.n	8000e2c <__udivmoddi4+0x148>
 8000f90:	4606      	mov	r6, r0
 8000f92:	4623      	mov	r3, r4
 8000f94:	4608      	mov	r0, r1
 8000f96:	e70f      	b.n	8000db8 <__udivmoddi4+0xd4>
 8000f98:	3e02      	subs	r6, #2
 8000f9a:	4463      	add	r3, ip
 8000f9c:	e730      	b.n	8000e00 <__udivmoddi4+0x11c>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <case_insensitive_strcmp+0x16>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e056      	b.n	800106c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d10d      	bne.n	8000fe2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e050      	b.n	800106c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e04a      	b.n	800106c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	3301      	adds	r3, #1
 8000fec:	4a22      	ldr	r2, [pc, #136]	@ (8001078 <case_insensitive_strcmp+0xd4>)
 8000fee:	4413      	add	r3, r2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d103      	bne.n	8001002 <case_insensitive_strcmp+0x5e>
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f103 0220 	add.w	r2, r3, #32
 8001000:	e000      	b.n	8001004 <case_insensitive_strcmp+0x60>
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	73bb      	strb	r3, [r7, #14]
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	3301      	adds	r3, #1
 800100e:	491a      	ldr	r1, [pc, #104]	@ (8001078 <case_insensitive_strcmp+0xd4>)
 8001010:	440b      	add	r3, r1
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b01      	cmp	r3, #1
 800101a:	d102      	bne.n	8001022 <case_insensitive_strcmp+0x7e>
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	3320      	adds	r3, #32
 8001020:	e000      	b.n	8001024 <case_insensitive_strcmp+0x80>
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	429a      	cmp	r2, r3
 8001026:	d0d0      	beq.n	8000fca <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	737b      	strb	r3, [r7, #13]
 800102e:	7b7b      	ldrb	r3, [r7, #13]
 8001030:	3301      	adds	r3, #1
 8001032:	4a11      	ldr	r2, [pc, #68]	@ (8001078 <case_insensitive_strcmp+0xd4>)
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d103      	bne.n	8001048 <case_insensitive_strcmp+0xa4>
 8001040:	7b7b      	ldrb	r3, [r7, #13]
 8001042:	f103 0220 	add.w	r2, r3, #32
 8001046:	e000      	b.n	800104a <case_insensitive_strcmp+0xa6>
 8001048:	7b7a      	ldrb	r2, [r7, #13]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	733b      	strb	r3, [r7, #12]
 8001050:	7b3b      	ldrb	r3, [r7, #12]
 8001052:	3301      	adds	r3, #1
 8001054:	4908      	ldr	r1, [pc, #32]	@ (8001078 <case_insensitive_strcmp+0xd4>)
 8001056:	440b      	add	r3, r1
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <case_insensitive_strcmp+0xc4>
 8001062:	7b3b      	ldrb	r3, [r7, #12]
 8001064:	3320      	adds	r3, #32
 8001066:	e000      	b.n	800106a <case_insensitive_strcmp+0xc6>
 8001068:	7b3b      	ldrb	r3, [r7, #12]
 800106a:	1ad3      	subs	r3, r2, r3
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	08008b50 	.word	0x08008b50

0800107c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2028      	movs	r0, #40	@ 0x28
 800108a:	4798      	blx	r3
 800108c:	60f8      	str	r0, [r7, #12]
    if (node)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001094:	2228      	movs	r2, #40	@ 0x28
 8001096:	2100      	movs	r1, #0
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f005 f9d6 	bl	800644a <memset>
    }

    return node;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80010b4:	e03d      	b.n	8001132 <cJSON_Delete+0x8a>
    {
        next = item->next;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d108      	bne.n	80010da <cJSON_Delete+0x32>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ffe7 	bl	80010a8 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10c      	bne.n	8001100 <cJSON_Delete+0x58>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d008      	beq.n	8001100 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <cJSON_Delete+0x9c>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6912      	ldr	r2, [r2, #16]
 80010f6:	4610      	mov	r0, r2
 80010f8:	4798      	blx	r3
            item->valuestring = NULL;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10c      	bne.n	8001126 <cJSON_Delete+0x7e>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8001114:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <cJSON_Delete+0x9c>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6a12      	ldr	r2, [r2, #32]
 800111c:	4610      	mov	r0, r2
 800111e:	4798      	blx	r3
            item->string = NULL;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8001126:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <cJSON_Delete+0x9c>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	4798      	blx	r3
        item = next;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1be      	bne.n	80010b6 <cJSON_Delete+0xe>
    }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000000 	.word	0x20000000

08001148 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800114c:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b098      	sub	sp, #96	@ 0x60
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800116e:	2300      	movs	r3, #0
 8001170:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001172:	f7ff ffe9 	bl	8001148 <get_decimal_point>
 8001176:	4603      	mov	r3, r0
 8001178:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <parse_number+0x36>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <parse_number+0x3a>
    {
        return false;
 800118e:	2300      	movs	r3, #0
 8001190:	e0a0      	b.n	80012d4 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001192:	2300      	movs	r3, #0
 8001194:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001196:	e03d      	b.n	8001214 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	6899      	ldr	r1, [r3, #8]
 80011a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011a2:	440b      	add	r3, r1
 80011a4:	4413      	add	r3, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b45      	cmp	r3, #69	@ 0x45
 80011aa:	dc17      	bgt.n	80011dc <parse_number+0x84>
 80011ac:	2b2b      	cmp	r3, #43	@ 0x2b
 80011ae:	db40      	blt.n	8001232 <parse_number+0xda>
 80011b0:	3b2b      	subs	r3, #43	@ 0x2b
 80011b2:	2201      	movs	r2, #1
 80011b4:	409a      	lsls	r2, r3
 80011b6:	4b4c      	ldr	r3, [pc, #304]	@ (80012e8 <parse_number+0x190>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bf14      	ite	ne
 80011be:	2301      	movne	r3, #1
 80011c0:	2300      	moveq	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10b      	bne.n	80011e0 <parse_number+0x88>
 80011c8:	f002 0308 	and.w	r3, r2, #8
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	bf14      	ite	ne
 80011d0:	2301      	movne	r3, #1
 80011d2:	2300      	moveq	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d111      	bne.n	80011fe <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 80011da:	e02a      	b.n	8001232 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 80011dc:	2b65      	cmp	r3, #101	@ 0x65
 80011de:	d128      	bne.n	8001232 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	6899      	ldr	r1, [r3, #8]
 80011e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011ea:	440b      	add	r3, r1
 80011ec:	4413      	add	r3, r2
 80011ee:	7819      	ldrb	r1, [r3, #0]
 80011f0:	f107 0208 	add.w	r2, r7, #8
 80011f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011f6:	4413      	add	r3, r2
 80011f8:	460a      	mov	r2, r1
 80011fa:	701a      	strb	r2, [r3, #0]
                break;
 80011fc:	e007      	b.n	800120e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80011fe:	f107 0208 	add.w	r2, r7, #8
 8001202:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001204:	4413      	add	r3, r2
 8001206:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800120a:	701a      	strb	r2, [r3, #0]
                break;
 800120c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800120e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001210:	3301      	adds	r3, #1
 8001212:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001214:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001216:	2b3e      	cmp	r3, #62	@ 0x3e
 8001218:	d80d      	bhi.n	8001236 <parse_number+0xde>
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00a      	beq.n	8001236 <parse_number+0xde>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001226:	441a      	add	r2, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	d3b3      	bcc.n	8001198 <parse_number+0x40>
        }
    }
loop_end:
 8001230:	e001      	b.n	8001236 <parse_number+0xde>
                goto loop_end;
 8001232:	bf00      	nop
 8001234:	e000      	b.n	8001238 <parse_number+0xe0>
loop_end:
 8001236:	bf00      	nop
    number_c_string[i] = '\0';
 8001238:	f107 0208 	add.w	r2, r7, #8
 800123c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800123e:	4413      	add	r3, r2
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001244:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f004 fb92 	bl	8005978 <strtod>
 8001254:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8001258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	429a      	cmp	r2, r3
 8001260:	d101      	bne.n	8001266 <parse_number+0x10e>
    {
        return false; /* parse_error */
 8001262:	2300      	movs	r3, #0
 8001264:	e036      	b.n	80012d4 <parse_number+0x17c>
    }

    item->valuedouble = number;
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800126c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001270:	a31b      	add	r3, pc, #108	@ (adr r3, 80012e0 <parse_number+0x188>)
 8001272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001276:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800127a:	f7ff fc73 	bl	8000b64 <__aeabi_dcmpge>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800128a:	615a      	str	r2, [r3, #20]
 800128c:	e015      	b.n	80012ba <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <parse_number+0x194>)
 8001294:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001298:	f7ff fc5a 	bl	8000b50 <__aeabi_dcmple>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	e006      	b.n	80012ba <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 80012ac:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012b0:	f7ff fc82 	bl	8000bb8 <__aeabi_d2iz>
 80012b4:	4602      	mov	r2, r0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2208      	movs	r2, #8
 80012be:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80012c6:	f107 0208 	add.w	r2, r7, #8
 80012ca:	1a8a      	subs	r2, r1, r2
 80012cc:	441a      	add	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	609a      	str	r2, [r3, #8]
    return true;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3760      	adds	r7, #96	@ 0x60
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	f3af 8000 	nop.w
 80012e0:	ffc00000 	.word	0xffc00000
 80012e4:	41dfffff 	.word	0x41dfffff
 80012e8:	04007fe5 	.word	0x04007fe5
 80012ec:	c1e00000 	.word	0xc1e00000

080012f0 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	e04c      	b.n	80013a0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001310:	d90f      	bls.n	8001332 <parse_hex4+0x42>
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4413      	add	r3, r2
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b39      	cmp	r3, #57	@ 0x39
 800131c:	d809      	bhi.n	8001332 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4413      	add	r3, r2
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	3b30      	subs	r3, #48	@ 0x30
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	e02d      	b.n	800138e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b40      	cmp	r3, #64	@ 0x40
 800133c:	d90f      	bls.n	800135e <parse_hex4+0x6e>
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4413      	add	r3, r2
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b46      	cmp	r3, #70	@ 0x46
 8001348:	d809      	bhi.n	800135e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4413      	add	r3, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	3b37      	subs	r3, #55	@ 0x37
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e017      	b.n	800138e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b60      	cmp	r3, #96	@ 0x60
 8001368:	d90f      	bls.n	800138a <parse_hex4+0x9a>
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b66      	cmp	r3, #102	@ 0x66
 8001374:	d809      	bhi.n	800138a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	3b57      	subs	r3, #87	@ 0x57
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	e001      	b.n	800138e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800138a:	2300      	movs	r3, #0
 800138c:	e00c      	b.n	80013a8 <parse_hex4+0xb8>
        }

        if (i < 3)
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d802      	bhi.n	800139a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	3301      	adds	r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d9af      	bls.n	8001306 <parse_hex4+0x16>
        }
    }

    return h;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	f340 80b7 	ble.w	800155e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	3302      	adds	r3, #2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff7b 	bl	80012f0 <parse_hex4>
 80013fa:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001402:	d304      	bcc.n	800140e <utf16_literal_to_utf8+0x5a>
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800140a:	f0c0 80aa 	bcc.w	8001562 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8001414:	d337      	bcc.n	8001486 <utf16_literal_to_utf8+0xd2>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800141c:	d233      	bcs.n	8001486 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	3306      	adds	r3, #6
 8001422:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001428:	230c      	movs	r3, #12
 800142a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b05      	cmp	r3, #5
 8001436:	f340 8096 	ble.w	8001566 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001440:	f040 8093 	bne.w	800156a <utf16_literal_to_utf8+0x1b6>
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3301      	adds	r3, #1
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b75      	cmp	r3, #117	@ 0x75
 800144c:	f040 808d 	bne.w	800156a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3302      	adds	r3, #2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff4b 	bl	80012f0 <parse_hex4>
 800145a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001462:	f0c0 8084 	bcc.w	800156e <utf16_literal_to_utf8+0x1ba>
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800146c:	d27f      	bcs.n	800156e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	029a      	lsls	r2, r3, #10
 8001472:	4b43      	ldr	r3, [pc, #268]	@ (8001580 <utf16_literal_to_utf8+0x1cc>)
 8001474:	4013      	ands	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800147c:	4313      	orrs	r3, r2
 800147e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8001484:	e004      	b.n	8001490 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001486:	2306      	movs	r3, #6
 8001488:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001492:	2b7f      	cmp	r3, #127	@ 0x7f
 8001494:	d803      	bhi.n	800149e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001496:	2301      	movs	r3, #1
 8001498:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800149c:	e01f      	b.n	80014de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80014a4:	d206      	bcs.n	80014b4 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80014a6:	2302      	movs	r3, #2
 80014a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80014ac:	23c0      	movs	r3, #192	@ 0xc0
 80014ae:	f887 3020 	strb.w	r3, [r7, #32]
 80014b2:	e014      	b.n	80014de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ba:	d206      	bcs.n	80014ca <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80014bc:	2303      	movs	r3, #3
 80014be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80014c2:	23e0      	movs	r3, #224	@ 0xe0
 80014c4:	f887 3020 	strb.w	r3, [r7, #32]
 80014c8:	e009      	b.n	80014de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80014d0:	d24f      	bcs.n	8001572 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80014d2:	2304      	movs	r3, #4
 80014d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80014d8:	23f0      	movs	r3, #240	@ 0xf0
 80014da:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80014de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80014e8:	e015      	b.n	8001516 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80014ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6819      	ldr	r1, [r3, #0]
 80014f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80014fc:	440b      	add	r3, r1
 80014fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001508:	099b      	lsrs	r3, r3, #6
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800150c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001510:	3b01      	subs	r3, #1
 8001512:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001516:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1e5      	bne.n	80014ea <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800151e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001522:	2b01      	cmp	r3, #1
 8001524:	d909      	bls.n	800153a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	b2d9      	uxtb	r1, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001532:	430a      	orrs	r2, r1
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	e007      	b.n	800154a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	b2da      	uxtb	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001552:	441a      	add	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001558:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800155c:	e00b      	b.n	8001576 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800155e:	bf00      	nop
 8001560:	e008      	b.n	8001574 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001562:	bf00      	nop
 8001564:	e006      	b.n	8001574 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001566:	bf00      	nop
 8001568:	e004      	b.n	8001574 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800156a:	bf00      	nop
 800156c:	e002      	b.n	8001574 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800156e:	bf00      	nop
 8001570:	e000      	b.n	8001574 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001572:	bf00      	nop

fail:
    return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3728      	adds	r7, #40	@ 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	000ffc00 	.word	0x000ffc00

08001584 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	3301      	adds	r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	3301      	adds	r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	4413      	add	r3, r2
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b22      	cmp	r3, #34	@ 0x22
 80015c0:	f040 8103 	bne.w	80017ca <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80015cc:	e017      	b.n	80015fe <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b5c      	cmp	r3, #92	@ 0x5c
 80015d4:	d110      	bne.n	80015f8 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	f080 80f1 	bcs.w	80017ce <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	3301      	adds	r3, #1
 80015f0:	61bb      	str	r3, [r7, #24]
                input_end++;
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	3301      	adds	r3, #1
 80015f6:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	3301      	adds	r3, #1
 80015fc:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6a3a      	ldr	r2, [r7, #32]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	461a      	mov	r2, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	d203      	bcs.n	8001618 <parse_string+0x94>
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b22      	cmp	r3, #34	@ 0x22
 8001616:	d1da      	bne.n	80015ce <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6a3a      	ldr	r2, [r7, #32]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	461a      	mov	r2, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	f080 80d3 	bcs.w	80017d2 <parse_string+0x24e>
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b22      	cmp	r3, #34	@ 0x22
 8001632:	f040 80ce 	bne.w	80017d2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	4413      	add	r3, r2
 8001640:	6a3a      	ldr	r2, [r7, #32]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	461a      	mov	r2, r3
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	3201      	adds	r2, #1
 8001654:	4610      	mov	r0, r2
 8001656:	4798      	blx	r3
 8001658:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80ba 	beq.w	80017d6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001666:	e094      	b.n	8001792 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b5c      	cmp	r3, #92	@ 0x5c
 800166e:	d008      	beq.n	8001682 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001672:	1c53      	adds	r3, r2, #1
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1c59      	adds	r1, r3, #1
 800167a:	60f9      	str	r1, [r7, #12]
 800167c:	7812      	ldrb	r2, [r2, #0]
 800167e:	701a      	strb	r2, [r3, #0]
 8001680:	e087      	b.n	8001792 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001682:	2302      	movs	r3, #2
 8001684:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001686:	6a3a      	ldr	r2, [r7, #32]
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	f340 80a4 	ble.w	80017da <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	3301      	adds	r3, #1
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b75      	cmp	r3, #117	@ 0x75
 800169a:	f300 80a0 	bgt.w	80017de <parse_string+0x25a>
 800169e:	2b5c      	cmp	r3, #92	@ 0x5c
 80016a0:	da04      	bge.n	80016ac <parse_string+0x128>
 80016a2:	2b22      	cmp	r3, #34	@ 0x22
 80016a4:	d05c      	beq.n	8001760 <parse_string+0x1dc>
 80016a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80016a8:	d05a      	beq.n	8001760 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 80016aa:	e098      	b.n	80017de <parse_string+0x25a>
            switch (input_pointer[1])
 80016ac:	3b5c      	subs	r3, #92	@ 0x5c
 80016ae:	2b19      	cmp	r3, #25
 80016b0:	f200 8095 	bhi.w	80017de <parse_string+0x25a>
 80016b4:	a201      	add	r2, pc, #4	@ (adr r2, 80016bc <parse_string+0x138>)
 80016b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ba:	bf00      	nop
 80016bc:	08001761 	.word	0x08001761
 80016c0:	080017df 	.word	0x080017df
 80016c4:	080017df 	.word	0x080017df
 80016c8:	080017df 	.word	0x080017df
 80016cc:	080017df 	.word	0x080017df
 80016d0:	080017df 	.word	0x080017df
 80016d4:	08001725 	.word	0x08001725
 80016d8:	080017df 	.word	0x080017df
 80016dc:	080017df 	.word	0x080017df
 80016e0:	080017df 	.word	0x080017df
 80016e4:	08001731 	.word	0x08001731
 80016e8:	080017df 	.word	0x080017df
 80016ec:	080017df 	.word	0x080017df
 80016f0:	080017df 	.word	0x080017df
 80016f4:	080017df 	.word	0x080017df
 80016f8:	080017df 	.word	0x080017df
 80016fc:	080017df 	.word	0x080017df
 8001700:	080017df 	.word	0x080017df
 8001704:	0800173d 	.word	0x0800173d
 8001708:	080017df 	.word	0x080017df
 800170c:	080017df 	.word	0x080017df
 8001710:	080017df 	.word	0x080017df
 8001714:	08001749 	.word	0x08001749
 8001718:	080017df 	.word	0x080017df
 800171c:	08001755 	.word	0x08001755
 8001720:	08001771 	.word	0x08001771
                    *output_pointer++ = '\b';
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	60fa      	str	r2, [r7, #12]
 800172a:	2208      	movs	r2, #8
 800172c:	701a      	strb	r2, [r3, #0]
                    break;
 800172e:	e02c      	b.n	800178a <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	60fa      	str	r2, [r7, #12]
 8001736:	220c      	movs	r2, #12
 8001738:	701a      	strb	r2, [r3, #0]
                    break;
 800173a:	e026      	b.n	800178a <parse_string+0x206>
                    *output_pointer++ = '\n';
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	60fa      	str	r2, [r7, #12]
 8001742:	220a      	movs	r2, #10
 8001744:	701a      	strb	r2, [r3, #0]
                    break;
 8001746:	e020      	b.n	800178a <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60fa      	str	r2, [r7, #12]
 800174e:	220d      	movs	r2, #13
 8001750:	701a      	strb	r2, [r3, #0]
                    break;
 8001752:	e01a      	b.n	800178a <parse_string+0x206>
                    *output_pointer++ = '\t';
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	60fa      	str	r2, [r7, #12]
 800175a:	2209      	movs	r2, #9
 800175c:	701a      	strb	r2, [r3, #0]
                    break;
 800175e:	e014      	b.n	800178a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	60f9      	str	r1, [r7, #12]
 800176a:	7812      	ldrb	r2, [r2, #0]
 800176c:	701a      	strb	r2, [r3, #0]
                    break;
 800176e:	e00c      	b.n	800178a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	461a      	mov	r2, r3
 8001776:	6a39      	ldr	r1, [r7, #32]
 8001778:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800177a:	f7ff fe1b 	bl	80013b4 <utf16_literal_to_utf8>
 800177e:	4603      	mov	r3, r0
 8001780:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d02c      	beq.n	80017e2 <parse_string+0x25e>
                    break;
 8001788:	bf00      	nop
            }
            input_pointer += sequence_length;
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800178e:	4413      	add	r3, r2
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8001792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	429a      	cmp	r2, r3
 8001798:	f4ff af66 	bcc.w	8001668 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2210      	movs	r2, #16
 80017a6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a3a      	ldr	r2, [r7, #32]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	609a      	str	r2, [r3, #8]

    return true;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e020      	b.n	800180c <parse_string+0x288>
        goto fail;
 80017ca:	bf00      	nop
 80017cc:	e00a      	b.n	80017e4 <parse_string+0x260>
                    goto fail;
 80017ce:	bf00      	nop
 80017d0:	e008      	b.n	80017e4 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 80017d2:	bf00      	nop
 80017d4:	e006      	b.n	80017e4 <parse_string+0x260>
            goto fail; /* allocation failure */
 80017d6:	bf00      	nop
 80017d8:	e004      	b.n	80017e4 <parse_string+0x260>
                goto fail;
 80017da:	bf00      	nop
 80017dc:	e002      	b.n	80017e4 <parse_string+0x260>
                    goto fail;
 80017de:	bf00      	nop
 80017e0:	e000      	b.n	80017e4 <parse_string+0x260>
                        goto fail;
 80017e2:	bf00      	nop

fail:
    if (output != NULL)
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	69f8      	ldr	r0, [r7, #28]
 80017f0:	4798      	blx	r3
        output = NULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	461a      	mov	r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	609a      	str	r2, [r3, #8]
    }

    return false;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3728      	adds	r7, #40	@ 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <buffer_skip_whitespace+0x16>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800182a:	2300      	movs	r3, #0
 800182c:	e02c      	b.n	8001888 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <buffer_skip_whitespace+0x2c>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	d306      	bcc.n	800184e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	e021      	b.n	8001888 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00d      	beq.n	8001870 <buffer_skip_whitespace+0x5c>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	d207      	bcs.n	8001870 <buffer_skip_whitespace+0x5c>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4413      	add	r3, r2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b20      	cmp	r3, #32
 800186e:	d9e9      	bls.n	8001844 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	d104      	bne.n	8001886 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	1e5a      	subs	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001886:	687b      	ldr	r3, [r7, #4]
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <skip_utf8_bom+0x1e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <skip_utf8_bom+0x1e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <skip_utf8_bom+0x22>
    {
        return NULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e01c      	b.n	80018f0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d018      	beq.n	80018ee <skip_utf8_bom+0x5a>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	1d1a      	adds	r2, r3, #4
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d211      	bcs.n	80018ee <skip_utf8_bom+0x5a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	4413      	add	r3, r2
 80018d4:	2203      	movs	r2, #3
 80018d6:	4908      	ldr	r1, [pc, #32]	@ (80018f8 <skip_utf8_bom+0x64>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f004 fdbe 	bl	800645a <strncmp>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d104      	bne.n	80018ee <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	1cda      	adds	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80018ee:	687b      	ldr	r3, [r7, #4]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	08008a90 	.word	0x08008a90

080018fc <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800190e:	2300      	movs	r3, #0
 8001910:	e00c      	b.n	800192c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f7fe fcdc 	bl	80002d0 <strlen>
 8001918:	4603      	mov	r3, r0
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	6979      	ldr	r1, [r7, #20]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 f805 	bl	8001934 <cJSON_ParseWithLengthOpts>
 800192a:	4603      	mov	r3, r0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08e      	sub	sp, #56	@ 0x38
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001942:	f107 0318 	add.w	r3, r7, #24
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]
 8001952:	615a      	str	r2, [r3, #20]
 8001954:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 800195a:	4b41      	ldr	r3, [pc, #260]	@ (8001a60 <cJSON_ParseWithLengthOpts+0x12c>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001960:	4b3f      	ldr	r3, [pc, #252]	@ (8001a60 <cJSON_ParseWithLengthOpts+0x12c>)
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d042      	beq.n	80019f2 <cJSON_ParseWithLengthOpts+0xbe>
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d03f      	beq.n	80019f2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800197e:	4a39      	ldr	r2, [pc, #228]	@ (8001a64 <cJSON_ParseWithLengthOpts+0x130>)
 8001980:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001984:	ca07      	ldmia	r2, {r0, r1, r2}
 8001986:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800198a:	4836      	ldr	r0, [pc, #216]	@ (8001a64 <cJSON_ParseWithLengthOpts+0x130>)
 800198c:	f7ff fb76 	bl	800107c <cJSON_New_Item>
 8001990:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8001992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001994:	2b00      	cmp	r3, #0
 8001996:	d02e      	beq.n	80019f6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001998:	f107 0318 	add.w	r3, r7, #24
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff79 	bl	8001894 <skip_utf8_bom>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff35 	bl	8001814 <buffer_skip_whitespace>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4619      	mov	r1, r3
 80019ae:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80019b0:	f000 f868 	bl	8001a84 <parse_value>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01f      	beq.n	80019fa <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00e      	beq.n	80019de <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80019c0:	f107 0318 	add.w	r3, r7, #24
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff25 	bl	8001814 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80019ca:	6a3a      	ldr	r2, [r7, #32]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d215      	bcs.n	80019fe <cJSON_ParseWithLengthOpts+0xca>
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	4413      	add	r3, r2
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10f      	bne.n	80019fe <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	441a      	add	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	601a      	str	r2, [r3, #0]
    }

    return item;
 80019ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f0:	e031      	b.n	8001a56 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80019f2:	bf00      	nop
 80019f4:	e004      	b.n	8001a00 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80019f6:	bf00      	nop
 80019f8:	e002      	b.n	8001a00 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80019fa:	bf00      	nop
 80019fc:	e000      	b.n	8001a00 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80019fe:	bf00      	nop

fail:
    if (item != NULL)
 8001a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001a06:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a08:	f7ff fb4e 	bl	80010a8 <cJSON_Delete>
    }

    if (value != NULL)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d020      	beq.n	8001a54 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001a1a:	6a3a      	ldr	r2, [r7, #32]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d202      	bcs.n	8001a28 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e005      	b.n	8001a34 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d004      	beq.n	8001a44 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	441a      	add	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <cJSON_ParseWithLengthOpts+0x12c>)
 8001a46:	461a      	mov	r2, r3
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a50:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3738      	adds	r7, #56	@ 0x38
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200001fc 	.word	0x200001fc
 8001a64:	20000000 	.word	0x20000000

08001a68 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff41 	bl	80018fc <cJSON_ParseWithOpts>
 8001a7a:	4603      	mov	r3, r0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <parse_value+0x18>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <parse_value+0x1c>
    {
        return false; /* no input */
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e0d2      	b.n	8001c46 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d01d      	beq.n	8001ae2 <parse_value+0x5e>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	1d1a      	adds	r2, r3, #4
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d816      	bhi.n	8001ae2 <parse_value+0x5e>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4413      	add	r3, r2
 8001abe:	2204      	movs	r2, #4
 8001ac0:	4963      	ldr	r1, [pc, #396]	@ (8001c50 <parse_value+0x1cc>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f004 fcc9 	bl	800645a <strncmp>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	1d1a      	adds	r2, r3, #4
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	609a      	str	r2, [r3, #8]
        return true;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0b1      	b.n	8001c46 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d01d      	beq.n	8001b24 <parse_value+0xa0>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	1d5a      	adds	r2, r3, #5
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d816      	bhi.n	8001b24 <parse_value+0xa0>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	4413      	add	r3, r2
 8001b00:	2205      	movs	r2, #5
 8001b02:	4954      	ldr	r1, [pc, #336]	@ (8001c54 <parse_value+0x1d0>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 fca8 	bl	800645a <strncmp>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	1d5a      	adds	r2, r3, #5
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	609a      	str	r2, [r3, #8]
        return true;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e090      	b.n	8001c46 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d020      	beq.n	8001b6c <parse_value+0xe8>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	1d1a      	adds	r2, r3, #4
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d819      	bhi.n	8001b6c <parse_value+0xe8>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4413      	add	r3, r2
 8001b42:	2204      	movs	r2, #4
 8001b44:	4944      	ldr	r1, [pc, #272]	@ (8001c58 <parse_value+0x1d4>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f004 fc87 	bl	800645a <strncmp>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10c      	bne.n	8001b6c <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	1d1a      	adds	r2, r3, #4
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	609a      	str	r2, [r3, #8]
        return true;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e06c      	b.n	8001c46 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d013      	beq.n	8001b9a <parse_value+0x116>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d20d      	bcs.n	8001b9a <parse_value+0x116>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	4413      	add	r3, r2
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b22      	cmp	r3, #34	@ 0x22
 8001b8c:	d105      	bne.n	8001b9a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001b8e:	6839      	ldr	r1, [r7, #0]
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fcf7 	bl	8001584 <parse_string>
 8001b96:	4603      	mov	r3, r0
 8001b98:	e055      	b.n	8001c46 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d023      	beq.n	8001be8 <parse_value+0x164>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d21d      	bcs.n	8001be8 <parse_value+0x164>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b2d      	cmp	r3, #45	@ 0x2d
 8001bba:	d00f      	beq.n	8001bdc <parse_value+0x158>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b2f      	cmp	r3, #47	@ 0x2f
 8001bca:	d90d      	bls.n	8001be8 <parse_value+0x164>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b39      	cmp	r3, #57	@ 0x39
 8001bda:	d805      	bhi.n	8001be8 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001bdc:	6839      	ldr	r1, [r7, #0]
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff faba 	bl	8001158 <parse_number>
 8001be4:	4603      	mov	r3, r0
 8001be6:	e02e      	b.n	8001c46 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d013      	beq.n	8001c16 <parse_value+0x192>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d20d      	bcs.n	8001c16 <parse_value+0x192>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	4413      	add	r3, r2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b5b      	cmp	r3, #91	@ 0x5b
 8001c08:	d105      	bne.n	8001c16 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001c0a:	6839      	ldr	r1, [r7, #0]
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f825 	bl	8001c5c <parse_array>
 8001c12:	4603      	mov	r3, r0
 8001c14:	e017      	b.n	8001c46 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <parse_value+0x1c0>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d20d      	bcs.n	8001c44 <parse_value+0x1c0>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4413      	add	r3, r2
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b7b      	cmp	r3, #123	@ 0x7b
 8001c36:	d105      	bne.n	8001c44 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001c38:	6839      	ldr	r1, [r7, #0]
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f8d2 	bl	8001de4 <parse_object>
 8001c40:	4603      	mov	r3, r0
 8001c42:	e000      	b.n	8001c46 <parse_value+0x1c2>
    }

    return false;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	08008a64 	.word	0x08008a64
 8001c54:	08008a94 	.word	0x08008a94
 8001c58:	08008a9c 	.word	0x08008a9c

08001c5c <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c76:	d301      	bcc.n	8001c7c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e0af      	b.n	8001ddc <parse_array+0x180>
    }
    input_buffer->depth++;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4413      	add	r3, r2
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b5b      	cmp	r3, #91	@ 0x5b
 8001c94:	f040 8094 	bne.w	8001dc0 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001ca2:	6838      	ldr	r0, [r7, #0]
 8001ca4:	f7ff fdb6 	bl	8001814 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00d      	beq.n	8001cca <parse_array+0x6e>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d207      	bcs.n	8001cca <parse_array+0x6e>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b5d      	cmp	r3, #93	@ 0x5d
 8001cc8:	d061      	beq.n	8001d8e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <parse_array+0x80>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d305      	bcc.n	8001ce8 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	1e5a      	subs	r2, r3, #1
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	609a      	str	r2, [r3, #8]
        goto fail;
 8001ce6:	e072      	b.n	8001dce <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	1e5a      	subs	r2, r3, #1
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	3310      	adds	r3, #16
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f9c0 	bl	800107c <cJSON_New_Item>
 8001cfc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d05f      	beq.n	8001dc4 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d104      	bne.n	8001d14 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	e007      	b.n	8001d24 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001d2e:	6838      	ldr	r0, [r7, #0]
 8001d30:	f7ff fd70 	bl	8001814 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001d34:	6839      	ldr	r1, [r7, #0]
 8001d36:	6938      	ldr	r0, [r7, #16]
 8001d38:	f7ff fea4 	bl	8001a84 <parse_value>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d042      	beq.n	8001dc8 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001d42:	6838      	ldr	r0, [r7, #0]
 8001d44:	f7ff fd66 	bl	8001814 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00d      	beq.n	8001d6a <parse_array+0x10e>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d207      	bcs.n	8001d6a <parse_array+0x10e>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d68:	d0c3      	beq.n	8001cf2 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d02d      	beq.n	8001dcc <parse_array+0x170>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d227      	bcs.n	8001dcc <parse_array+0x170>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4413      	add	r3, r2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b5d      	cmp	r3, #93	@ 0x5d
 8001d8a:	d11f      	bne.n	8001dcc <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001d8c:	e000      	b.n	8001d90 <parse_array+0x134>
        goto success;
 8001d8e:	bf00      	nop
    input_buffer->depth--;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	1e5a      	subs	r2, r3, #1
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <parse_array+0x14a>
        head->prev = current_item;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2220      	movs	r2, #32
 8001daa:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	609a      	str	r2, [r3, #8]

    return true;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e00d      	b.n	8001ddc <parse_array+0x180>
        goto fail;
 8001dc0:	bf00      	nop
 8001dc2:	e004      	b.n	8001dce <parse_array+0x172>
            goto fail; /* allocation failure */
 8001dc4:	bf00      	nop
 8001dc6:	e002      	b.n	8001dce <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001dc8:	bf00      	nop
 8001dca:	e000      	b.n	8001dce <parse_array+0x172>
        goto fail; /* expected end of array */
 8001dcc:	bf00      	nop

fail:
    if (head != NULL)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001dd4:	6978      	ldr	r0, [r7, #20]
 8001dd6:	f7ff f967 	bl	80010a8 <cJSON_Delete>
    }

    return false;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dfe:	d301      	bcc.n	8001e04 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001e00:	2300      	movs	r3, #0
 8001e02:	e0f7      	b.n	8001ff4 <parse_object+0x210>
    }
    input_buffer->depth++;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80db 	beq.w	8001fcc <parse_object+0x1e8>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	f080 80d4 	bcs.w	8001fcc <parse_object+0x1e8>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b7b      	cmp	r3, #123	@ 0x7b
 8001e32:	f040 80cb 	bne.w	8001fcc <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001e40:	6838      	ldr	r0, [r7, #0]
 8001e42:	f7ff fce7 	bl	8001814 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00e      	beq.n	8001e6a <parse_object+0x86>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d208      	bcs.n	8001e6a <parse_object+0x86>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4413      	add	r3, r2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b7d      	cmp	r3, #125	@ 0x7d
 8001e66:	f000 8098 	beq.w	8001f9a <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <parse_object+0x98>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d305      	bcc.n	8001e88 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	609a      	str	r2, [r3, #8]
        goto fail;
 8001e86:	e0ae      	b.n	8001fe6 <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	1e5a      	subs	r2, r3, #1
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	3310      	adds	r3, #16
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff f8f0 	bl	800107c <cJSON_New_Item>
 8001e9c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 8095 	beq.w	8001fd0 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d104      	bne.n	8001eb6 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	e007      	b.n	8001ec6 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8083 	beq.w	8001fd4 <parse_object+0x1f0>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d27b      	bcs.n	8001fd4 <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001ee6:	6838      	ldr	r0, [r7, #0]
 8001ee8:	f7ff fc94 	bl	8001814 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001eec:	6839      	ldr	r1, [r7, #0]
 8001eee:	6938      	ldr	r0, [r7, #16]
 8001ef0:	f7ff fb48 	bl	8001584 <parse_string>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d06e      	beq.n	8001fd8 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001efa:	6838      	ldr	r0, [r7, #0]
 8001efc:	f7ff fc8a 	bl	8001814 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d063      	beq.n	8001fdc <parse_object+0x1f8>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d25d      	bcs.n	8001fdc <parse_object+0x1f8>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4413      	add	r3, r2
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b3a      	cmp	r3, #58	@ 0x3a
 8001f2e:	d155      	bne.n	8001fdc <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001f3a:	6838      	ldr	r0, [r7, #0]
 8001f3c:	f7ff fc6a 	bl	8001814 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	6938      	ldr	r0, [r7, #16]
 8001f44:	f7ff fd9e 	bl	8001a84 <parse_value>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d048      	beq.n	8001fe0 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001f4e:	6838      	ldr	r0, [r7, #0]
 8001f50:	f7ff fc60 	bl	8001814 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00d      	beq.n	8001f76 <parse_object+0x192>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d207      	bcs.n	8001f76 <parse_object+0x192>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	4413      	add	r3, r2
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b2c      	cmp	r3, #44	@ 0x2c
 8001f74:	d08d      	beq.n	8001e92 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d033      	beq.n	8001fe4 <parse_object+0x200>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d22d      	bcs.n	8001fe4 <parse_object+0x200>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	4413      	add	r3, r2
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b7d      	cmp	r3, #125	@ 0x7d
 8001f96:	d125      	bne.n	8001fe4 <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8001f98:	e000      	b.n	8001f9c <parse_object+0x1b8>
        goto success; /* empty object */
 8001f9a:	bf00      	nop
    input_buffer->depth--;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	1e5a      	subs	r2, r3, #1
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <parse_object+0x1ce>
        head->prev = current_item;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2240      	movs	r2, #64	@ 0x40
 8001fb6:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	609a      	str	r2, [r3, #8]
    return true;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e013      	b.n	8001ff4 <parse_object+0x210>
        goto fail; /* not an object */
 8001fcc:	bf00      	nop
 8001fce:	e00a      	b.n	8001fe6 <parse_object+0x202>
            goto fail; /* allocation failure */
 8001fd0:	bf00      	nop
 8001fd2:	e008      	b.n	8001fe6 <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8001fd4:	bf00      	nop
 8001fd6:	e006      	b.n	8001fe6 <parse_object+0x202>
            goto fail; /* failed to parse name */
 8001fd8:	bf00      	nop
 8001fda:	e004      	b.n	8001fe6 <parse_object+0x202>
            goto fail; /* invalid object */
 8001fdc:	bf00      	nop
 8001fde:	e002      	b.n	8001fe6 <parse_object+0x202>
            goto fail; /* failed to parse value */
 8001fe0:	bf00      	nop
 8001fe2:	e000      	b.n	8001fe6 <parse_object+0x202>
        goto fail; /* expected end of object */
 8001fe4:	bf00      	nop

fail:
    if (head != NULL)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8001fec:	6978      	ldr	r0, [r7, #20]
 8001fee:	f7ff f85b 	bl	80010a8 <cJSON_Delete>
    }

    return false;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <get_object_item+0x1c>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <get_object_item+0x20>
    {
        return NULL;
 8002018:	2300      	movs	r3, #0
 800201a:	e033      	b.n	8002084 <get_object_item+0x88>
    }

    current_element = object->child;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d017      	beq.n	8002058 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002028:	e002      	b.n	8002030 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01c      	beq.n	8002070 <get_object_item+0x74>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d018      	beq.n	8002070 <get_object_item+0x74>
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4619      	mov	r1, r3
 8002044:	68b8      	ldr	r0, [r7, #8]
 8002046:	f7fe f8e3 	bl	8000210 <strcmp>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ec      	bne.n	800202a <get_object_item+0x2e>
 8002050:	e00e      	b.n	8002070 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <get_object_item+0x74>
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4619      	mov	r1, r3
 8002064:	68b8      	ldr	r0, [r7, #8]
 8002066:	f7fe ff9d 	bl	8000fa4 <case_insensitive_strcmp>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f0      	bne.n	8002052 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <get_object_item+0x82>
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <get_object_item+0x86>
        return NULL;
 800207e:	2300      	movs	r3, #0
 8002080:	e000      	b.n	8002084 <get_object_item+0x88>
    }

    return current_element;
 8002082:	697b      	ldr	r3, [r7, #20]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002096:	2200      	movs	r2, #0
 8002098:	6839      	ldr	r1, [r7, #0]
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ffae 	bl	8001ffc <get_object_item>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <cJSON_IsNumber+0x12>
    {
        return false;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e007      	b.n	80020cc <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	bf0c      	ite	eq
 80020c6:	2301      	moveq	r3, #1
 80020c8:	2300      	movne	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <process_command>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void process_command(char* cmd) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08c      	sub	sp, #48	@ 0x30
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	cJSON *json_data = cJSON_Parse(cmd);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fcc1 	bl	8001a68 <cJSON_Parse>
 80020e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (json_data != NULL) {
 80020e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d077      	beq.n	80021de <process_command+0x106>
		// Extract data from the JSON object
		cJSON *rpm = cJSON_GetObjectItem(json_data, "rpm");
 80020ee:	4945      	ldr	r1, [pc, #276]	@ (8002204 <process_command+0x12c>)
 80020f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80020f2:	f7ff ffcb 	bl	800208c <cJSON_GetObjectItem>
 80020f6:	62b8      	str	r0, [r7, #40]	@ 0x28
		cJSON *gear = cJSON_GetObjectItem(json_data, "gear");
 80020f8:	4943      	ldr	r1, [pc, #268]	@ (8002208 <process_command+0x130>)
 80020fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80020fc:	f7ff ffc6 	bl	800208c <cJSON_GetObjectItem>
 8002100:	6278      	str	r0, [r7, #36]	@ 0x24
		cJSON *speedKmh = cJSON_GetObjectItem(json_data, "speedKmh");
 8002102:	4942      	ldr	r1, [pc, #264]	@ (800220c <process_command+0x134>)
 8002104:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002106:	f7ff ffc1 	bl	800208c <cJSON_GetObjectItem>
 800210a:	6238      	str	r0, [r7, #32]
		cJSON *hasDRS = cJSON_GetObjectItem(json_data, "hasDRS");
 800210c:	4940      	ldr	r1, [pc, #256]	@ (8002210 <process_command+0x138>)
 800210e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002110:	f7ff ffbc 	bl	800208c <cJSON_GetObjectItem>
 8002114:	61f8      	str	r0, [r7, #28]
		cJSON *drs = cJSON_GetObjectItem(json_data, "drs");
 8002116:	493f      	ldr	r1, [pc, #252]	@ (8002214 <process_command+0x13c>)
 8002118:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800211a:	f7ff ffb7 	bl	800208c <cJSON_GetObjectItem>
 800211e:	61b8      	str	r0, [r7, #24]
		cJSON *pitLim = cJSON_GetObjectItem(json_data, "pitLim");
 8002120:	493d      	ldr	r1, [pc, #244]	@ (8002218 <process_command+0x140>)
 8002122:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002124:	f7ff ffb2 	bl	800208c <cJSON_GetObjectItem>
 8002128:	6178      	str	r0, [r7, #20]
		cJSON *fuel = cJSON_GetObjectItem(json_data, "fuel");
 800212a:	493c      	ldr	r1, [pc, #240]	@ (800221c <process_command+0x144>)
 800212c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800212e:	f7ff ffad 	bl	800208c <cJSON_GetObjectItem>
 8002132:	6138      	str	r0, [r7, #16]
		cJSON *brakeBias = cJSON_GetObjectItem(json_data, "brakeBias");
 8002134:	493a      	ldr	r1, [pc, #232]	@ (8002220 <process_command+0x148>)
 8002136:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002138:	f7ff ffa8 	bl	800208c <cJSON_GetObjectItem>
 800213c:	60f8      	str	r0, [r7, #12]

		// Check if items were found and extract values
		if (cJSON_IsNumber(rpm)) { tRpm = rpm->valueint; }
 800213e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002140:	f7ff ffb3 	bl	80020aa <cJSON_IsNumber>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <process_command+0x7a>
 800214a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	4a35      	ldr	r2, [pc, #212]	@ (8002224 <process_command+0x14c>)
 8002150:	6013      	str	r3, [r2, #0]
		if (cJSON_IsNumber(gear)) { tGear = gear->valueint; }
 8002152:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002154:	f7ff ffa9 	bl	80020aa <cJSON_IsNumber>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <process_command+0x8e>
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	4a31      	ldr	r2, [pc, #196]	@ (8002228 <process_command+0x150>)
 8002164:	6013      	str	r3, [r2, #0]
		if (cJSON_IsNumber(speedKmh)) { tSpeedKmh = speedKmh->valueint; }
 8002166:	6a38      	ldr	r0, [r7, #32]
 8002168:	f7ff ff9f 	bl	80020aa <cJSON_IsNumber>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <process_command+0xa2>
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	4a2d      	ldr	r2, [pc, #180]	@ (800222c <process_command+0x154>)
 8002178:	6013      	str	r3, [r2, #0]
		if (cJSON_IsNumber(hasDRS)) { tHasDRS = hasDRS->valueint; }
 800217a:	69f8      	ldr	r0, [r7, #28]
 800217c:	f7ff ff95 	bl	80020aa <cJSON_IsNumber>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <process_command+0xb6>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4a29      	ldr	r2, [pc, #164]	@ (8002230 <process_command+0x158>)
 800218c:	6013      	str	r3, [r2, #0]
		if (cJSON_IsNumber(drs)) { tDrs = drs->valueint; }
 800218e:	69b8      	ldr	r0, [r7, #24]
 8002190:	f7ff ff8b 	bl	80020aa <cJSON_IsNumber>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <process_command+0xca>
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	4a25      	ldr	r2, [pc, #148]	@ (8002234 <process_command+0x15c>)
 80021a0:	6013      	str	r3, [r2, #0]
		if (cJSON_IsNumber(pitLim)) { tPitLim = pitLim->valueint; }
 80021a2:	6978      	ldr	r0, [r7, #20]
 80021a4:	f7ff ff81 	bl	80020aa <cJSON_IsNumber>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <process_command+0xde>
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4a21      	ldr	r2, [pc, #132]	@ (8002238 <process_command+0x160>)
 80021b4:	6013      	str	r3, [r2, #0]
		if (cJSON_IsNumber(fuel)) { tFuel = fuel->valueint; }
 80021b6:	6938      	ldr	r0, [r7, #16]
 80021b8:	f7ff ff77 	bl	80020aa <cJSON_IsNumber>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <process_command+0xf2>
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	4a1d      	ldr	r2, [pc, #116]	@ (800223c <process_command+0x164>)
 80021c8:	6013      	str	r3, [r2, #0]
		if (cJSON_IsNumber(brakeBias)) { tBrakeBias = brakeBias->valueint; }
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f7ff ff6d 	bl	80020aa <cJSON_IsNumber>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <process_command+0x106>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	4a19      	ldr	r2, [pc, #100]	@ (8002240 <process_command+0x168>)
 80021dc:	6013      	str	r3, [r2, #0]
		}
		// Cleanup
		cJSON_Delete(json_data);
 80021de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021e0:	f7fe ff62 	bl	80010a8 <cJSON_Delete>
		// Clear the buffer for the next message
		memset(gCommandData, 0, BUFFER_SIZE);
 80021e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021e8:	2100      	movs	r1, #0
 80021ea:	4816      	ldr	r0, [pc, #88]	@ (8002244 <process_command+0x16c>)
 80021ec:	f004 f92d 	bl	800644a <memset>
		// Re-enable UART reception
		HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 80021f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021f4:	4914      	ldr	r1, [pc, #80]	@ (8002248 <process_command+0x170>)
 80021f6:	4815      	ldr	r0, [pc, #84]	@ (800224c <process_command+0x174>)
 80021f8:	f001 fda0 	bl	8003d3c <HAL_UART_Receive_IT>
}
 80021fc:	bf00      	nop
 80021fe:	3730      	adds	r7, #48	@ 0x30
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	08008aa4 	.word	0x08008aa4
 8002208:	08008aa8 	.word	0x08008aa8
 800220c:	08008ab0 	.word	0x08008ab0
 8002210:	08008abc 	.word	0x08008abc
 8002214:	08008ac4 	.word	0x08008ac4
 8002218:	08008ac8 	.word	0x08008ac8
 800221c:	08008ad0 	.word	0x08008ad0
 8002220:	08008ad8 	.word	0x08008ad8
 8002224:	20000454 	.word	0x20000454
 8002228:	20000450 	.word	0x20000450
 800222c:	20000458 	.word	0x20000458
 8002230:	2000045c 	.word	0x2000045c
 8002234:	20000460 	.word	0x20000460
 8002238:	20000464 	.word	0x20000464
 800223c:	20000468 	.word	0x20000468
 8002240:	2000046c 	.word	0x2000046c
 8002244:	2000034c 	.word	0x2000034c
 8002248:	2000024c 	.word	0x2000024c
 800224c:	20000204 	.word	0x20000204

08002250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002254:	f000 fb52 	bl	80028fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002258:	f000 f83c 	bl	80022d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800225c:	f000 f8d2 	bl	8002404 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002260:	f000 f8a6 	bl	80023b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 8002264:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002268:	4914      	ldr	r1, [pc, #80]	@ (80022bc <main+0x6c>)
 800226a:	4815      	ldr	r0, [pc, #84]	@ (80022c0 <main+0x70>)
 800226c:	f001 fd66 	bl	8003d3c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(command_flag)
 8002270:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <main+0x74>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0fa      	beq.n	8002270 <main+0x20>
	  {
		  process_command(gCommandData);
 800227a:	4813      	ldr	r0, [pc, #76]	@ (80022c8 <main+0x78>)
 800227c:	f7ff ff2c 	bl	80020d8 <process_command>
		  command_flag = 0;
 8002280:	4b10      	ldr	r3, [pc, #64]	@ (80022c4 <main+0x74>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(100); // ! Increase this is value update is slower due to more telemetry data params
 8002286:	2064      	movs	r0, #100	@ 0x64
 8002288:	f000 fbaa 	bl	80029e0 <HAL_Delay>
		  if(tRpm >= 7000)
 800228c:	4b0f      	ldr	r3, [pc, #60]	@ (80022cc <main+0x7c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8002294:	4293      	cmp	r3, r2
 8002296:	dd05      	ble.n	80022a4 <main+0x54>
		  {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002298:	2201      	movs	r2, #1
 800229a:	2120      	movs	r1, #32
 800229c:	480c      	ldr	r0, [pc, #48]	@ (80022d0 <main+0x80>)
 800229e:	f000 fefb 	bl	8003098 <HAL_GPIO_WritePin>
 80022a2:	e004      	b.n	80022ae <main+0x5e>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2120      	movs	r1, #32
 80022a8:	4809      	ldr	r0, [pc, #36]	@ (80022d0 <main+0x80>)
 80022aa:	f000 fef5 	bl	8003098 <HAL_GPIO_WritePin>
		  }
		  // Re-enable UART reception
		  HAL_UART_Receive_IT(&huart2, rx_buffer, sizeof(rx_buffer));
 80022ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022b2:	4902      	ldr	r1, [pc, #8]	@ (80022bc <main+0x6c>)
 80022b4:	4802      	ldr	r0, [pc, #8]	@ (80022c0 <main+0x70>)
 80022b6:	f001 fd41 	bl	8003d3c <HAL_UART_Receive_IT>
	  if(command_flag)
 80022ba:	e7d9      	b.n	8002270 <main+0x20>
 80022bc:	2000024c 	.word	0x2000024c
 80022c0:	20000204 	.word	0x20000204
 80022c4:	2000044c 	.word	0x2000044c
 80022c8:	2000034c 	.word	0x2000034c
 80022cc:	20000454 	.word	0x20000454
 80022d0:	40020000 	.word	0x40020000

080022d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b094      	sub	sp, #80	@ 0x50
 80022d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	2234      	movs	r2, #52	@ 0x34
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f004 f8b1 	bl	800644a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022e8:	f107 0308 	add.w	r3, r7, #8
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	2300      	movs	r3, #0
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	4b2a      	ldr	r3, [pc, #168]	@ (80023a8 <SystemClock_Config+0xd4>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	4a29      	ldr	r2, [pc, #164]	@ (80023a8 <SystemClock_Config+0xd4>)
 8002302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002306:	6413      	str	r3, [r2, #64]	@ 0x40
 8002308:	4b27      	ldr	r3, [pc, #156]	@ (80023a8 <SystemClock_Config+0xd4>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002314:	2300      	movs	r3, #0
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	4b24      	ldr	r3, [pc, #144]	@ (80023ac <SystemClock_Config+0xd8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002320:	4a22      	ldr	r2, [pc, #136]	@ (80023ac <SystemClock_Config+0xd8>)
 8002322:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	4b20      	ldr	r3, [pc, #128]	@ (80023ac <SystemClock_Config+0xd8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002334:	2302      	movs	r3, #2
 8002336:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002338:	2301      	movs	r3, #1
 800233a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800233c:	2310      	movs	r3, #16
 800233e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002340:	2302      	movs	r3, #2
 8002342:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002344:	2300      	movs	r3, #0
 8002346:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002348:	2310      	movs	r3, #16
 800234a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800234c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002350:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002352:	2304      	movs	r3, #4
 8002354:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002356:	2302      	movs	r3, #2
 8002358:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800235a:	2302      	movs	r3, #2
 800235c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	4618      	mov	r0, r3
 8002364:	f001 f9fc 	bl	8003760 <HAL_RCC_OscConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800236e:	f000 f90b 	bl	8002588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002372:	230f      	movs	r3, #15
 8002374:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002376:	2302      	movs	r3, #2
 8002378:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800237e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002382:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002388:	f107 0308 	add.w	r3, r7, #8
 800238c:	2102      	movs	r1, #2
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fe9c 	bl	80030cc <HAL_RCC_ClockConfig>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800239a:	f000 f8f5 	bl	8002588 <Error_Handler>
  }
}
 800239e:	bf00      	nop
 80023a0:	3750      	adds	r7, #80	@ 0x50
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40007000 	.word	0x40007000

080023b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023b4:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <MX_USART2_UART_Init+0x4c>)
 80023b6:	4a12      	ldr	r2, [pc, #72]	@ (8002400 <MX_USART2_UART_Init+0x50>)
 80023b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023ba:	4b10      	ldr	r3, [pc, #64]	@ (80023fc <MX_USART2_UART_Init+0x4c>)
 80023bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <MX_USART2_UART_Init+0x4c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <MX_USART2_UART_Init+0x4c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ce:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <MX_USART2_UART_Init+0x4c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023d4:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <MX_USART2_UART_Init+0x4c>)
 80023d6:	220c      	movs	r2, #12
 80023d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023da:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <MX_USART2_UART_Init+0x4c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e0:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <MX_USART2_UART_Init+0x4c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023e6:	4805      	ldr	r0, [pc, #20]	@ (80023fc <MX_USART2_UART_Init+0x4c>)
 80023e8:	f001 fc58 	bl	8003c9c <HAL_UART_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023f2:	f000 f8c9 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000204 	.word	0x20000204
 8002400:	40004400 	.word	0x40004400

08002404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	@ 0x28
 8002408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240a:	f107 0314 	add.w	r3, r7, #20
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	4b2d      	ldr	r3, [pc, #180]	@ (80024d4 <MX_GPIO_Init+0xd0>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	4a2c      	ldr	r2, [pc, #176]	@ (80024d4 <MX_GPIO_Init+0xd0>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	6313      	str	r3, [r2, #48]	@ 0x30
 800242a:	4b2a      	ldr	r3, [pc, #168]	@ (80024d4 <MX_GPIO_Init+0xd0>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b26      	ldr	r3, [pc, #152]	@ (80024d4 <MX_GPIO_Init+0xd0>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	4a25      	ldr	r2, [pc, #148]	@ (80024d4 <MX_GPIO_Init+0xd0>)
 8002440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002444:	6313      	str	r3, [r2, #48]	@ 0x30
 8002446:	4b23      	ldr	r3, [pc, #140]	@ (80024d4 <MX_GPIO_Init+0xd0>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <MX_GPIO_Init+0xd0>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	4a1e      	ldr	r2, [pc, #120]	@ (80024d4 <MX_GPIO_Init+0xd0>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6313      	str	r3, [r2, #48]	@ 0x30
 8002462:	4b1c      	ldr	r3, [pc, #112]	@ (80024d4 <MX_GPIO_Init+0xd0>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	4b18      	ldr	r3, [pc, #96]	@ (80024d4 <MX_GPIO_Init+0xd0>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	4a17      	ldr	r2, [pc, #92]	@ (80024d4 <MX_GPIO_Init+0xd0>)
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	6313      	str	r3, [r2, #48]	@ 0x30
 800247e:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <MX_GPIO_Init+0xd0>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800248a:	2200      	movs	r2, #0
 800248c:	2120      	movs	r1, #32
 800248e:	4812      	ldr	r0, [pc, #72]	@ (80024d8 <MX_GPIO_Init+0xd4>)
 8002490:	f000 fe02 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002494:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800249a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800249e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	4619      	mov	r1, r3
 80024aa:	480c      	ldr	r0, [pc, #48]	@ (80024dc <MX_GPIO_Init+0xd8>)
 80024ac:	f000 fc60 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80024b0:	2320      	movs	r3, #32
 80024b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b4:	2301      	movs	r3, #1
 80024b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4619      	mov	r1, r3
 80024c6:	4804      	ldr	r0, [pc, #16]	@ (80024d8 <MX_GPIO_Init+0xd4>)
 80024c8:	f000 fc52 	bl	8002d70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024cc:	bf00      	nop
 80024ce:	3728      	adds	r7, #40	@ 0x28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40020000 	.word	0x40020000
 80024dc:	40020800 	.word	0x40020800

080024e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002520 <HAL_UART_RxCpltCallback+0x40>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d111      	bne.n	8002516 <HAL_UART_RxCpltCallback+0x36>
        // Process the received data (rx_buffer)
    	memcpy(gCommandData, rx_buffer, sizeof(rx_buffer));
 80024f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002524 <HAL_UART_RxCpltCallback+0x44>)
 80024f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002528 <HAL_UART_RxCpltCallback+0x48>)
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024fe:	461a      	mov	r2, r3
 8002500:	f004 f845 	bl	800658e <memcpy>
    	command_flag = 1; // Reset flag
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <HAL_UART_RxCpltCallback+0x4c>)
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
        // Clear the buffer for the next message
        memset(rx_buffer, 0, BUFFER_SIZE);
 800250a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800250e:	2100      	movs	r1, #0
 8002510:	4805      	ldr	r0, [pc, #20]	@ (8002528 <HAL_UART_RxCpltCallback+0x48>)
 8002512:	f003 ff9a 	bl	800644a <memset>

    }
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40004400 	.word	0x40004400
 8002524:	2000034c 	.word	0x2000034c
 8002528:	2000024c 	.word	0x2000024c
 800252c:	2000044c 	.word	0x2000044c

08002530 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
    uint32_t error_code = HAL_UART_GetError(huart);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f001 fecd 	bl	80042d8 <HAL_UART_GetError>
 800253e:	60f8      	str	r0, [r7, #12]

    // Identify which UART instance is causing the error (USART2 in this case)
    if (huart->Instance == USART2) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0e      	ldr	r2, [pc, #56]	@ (8002580 <HAL_UART_ErrorCallback+0x50>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d115      	bne.n	8002576 <HAL_UART_ErrorCallback+0x46>

        // Handle Overrun Error (ORE)
        if (error_code & HAL_UART_ERROR_ORE) {
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_UART_ErrorCallback+0x3a>
            __HAL_UART_CLEAR_OREFLAG(huart);  // Clear overrun error flag
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
            // Noise errors are usually transient but worth logging
        	//send_response("UART Noise Error");
        }

        // Recovery: Restart UART reception after clearing the error flags
        HAL_UART_Receive_IT(huart, rx_buffer, sizeof(rx_buffer));
 800256a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800256e:	4905      	ldr	r1, [pc, #20]	@ (8002584 <HAL_UART_ErrorCallback+0x54>)
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f001 fbe3 	bl	8003d3c <HAL_UART_Receive_IT>
    }
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40004400 	.word	0x40004400
 8002584:	2000024c 	.word	0x2000024c

08002588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800258c:	b672      	cpsid	i
}
 800258e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <Error_Handler+0x8>

08002594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <HAL_MspInit+0x4c>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	4a0f      	ldr	r2, [pc, #60]	@ (80025e0 <HAL_MspInit+0x4c>)
 80025a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025aa:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <HAL_MspInit+0x4c>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <HAL_MspInit+0x4c>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	4a08      	ldr	r2, [pc, #32]	@ (80025e0 <HAL_MspInit+0x4c>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025c6:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <HAL_MspInit+0x4c>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025d2:	2007      	movs	r0, #7
 80025d4:	f000 faf8 	bl	8002bc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40023800 	.word	0x40023800

080025e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	@ 0x28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a1d      	ldr	r2, [pc, #116]	@ (8002678 <HAL_UART_MspInit+0x94>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d133      	bne.n	800266e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	4b1c      	ldr	r3, [pc, #112]	@ (800267c <HAL_UART_MspInit+0x98>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	4a1b      	ldr	r2, [pc, #108]	@ (800267c <HAL_UART_MspInit+0x98>)
 8002610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002614:	6413      	str	r3, [r2, #64]	@ 0x40
 8002616:	4b19      	ldr	r3, [pc, #100]	@ (800267c <HAL_UART_MspInit+0x98>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <HAL_UART_MspInit+0x98>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	4a14      	ldr	r2, [pc, #80]	@ (800267c <HAL_UART_MspInit+0x98>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6313      	str	r3, [r2, #48]	@ 0x30
 8002632:	4b12      	ldr	r3, [pc, #72]	@ (800267c <HAL_UART_MspInit+0x98>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800263e:	230c      	movs	r3, #12
 8002640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264a:	2303      	movs	r3, #3
 800264c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800264e:	2307      	movs	r3, #7
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	4619      	mov	r1, r3
 8002658:	4809      	ldr	r0, [pc, #36]	@ (8002680 <HAL_UART_MspInit+0x9c>)
 800265a:	f000 fb89 	bl	8002d70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	2026      	movs	r0, #38	@ 0x26
 8002664:	f000 fabb 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002668:	2026      	movs	r0, #38	@ 0x26
 800266a:	f000 fad4 	bl	8002c16 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	@ 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40004400 	.word	0x40004400
 800267c:	40023800 	.word	0x40023800
 8002680:	40020000 	.word	0x40020000

08002684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <NMI_Handler+0x4>

0800268c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <HardFault_Handler+0x4>

08002694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <MemManage_Handler+0x4>

0800269c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <BusFault_Handler+0x4>

080026a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <UsageFault_Handler+0x4>

080026ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026da:	f000 f961 	bl	80029a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026e8:	4802      	ldr	r0, [pc, #8]	@ (80026f4 <USART2_IRQHandler+0x10>)
 80026ea:	f001 fb4d 	bl	8003d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000204 	.word	0x20000204

080026f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return 1;
 80026fc:	2301      	movs	r3, #1
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <_kill>:

int _kill(int pid, int sig)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002712:	f003 ff0f 	bl	8006534 <__errno>
 8002716:	4603      	mov	r3, r0
 8002718:	2216      	movs	r2, #22
 800271a:	601a      	str	r2, [r3, #0]
  return -1;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <_exit>:

void _exit (int status)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002730:	f04f 31ff 	mov.w	r1, #4294967295
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ffe7 	bl	8002708 <_kill>
  while (1) {}    /* Make sure we hang here */
 800273a:	bf00      	nop
 800273c:	e7fd      	b.n	800273a <_exit+0x12>

0800273e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	e00a      	b.n	8002766 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002750:	f3af 8000 	nop.w
 8002754:	4601      	mov	r1, r0
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	60ba      	str	r2, [r7, #8]
 800275c:	b2ca      	uxtb	r2, r1
 800275e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3301      	adds	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	429a      	cmp	r2, r3
 800276c:	dbf0      	blt.n	8002750 <_read+0x12>
  }

  return len;
 800276e:	687b      	ldr	r3, [r7, #4]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e009      	b.n	800279e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	60ba      	str	r2, [r7, #8]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	3301      	adds	r3, #1
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	dbf1      	blt.n	800278a <_write+0x12>
  }
  return len;
 80027a6:	687b      	ldr	r3, [r7, #4]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <_close>:

int _close(int file)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027d8:	605a      	str	r2, [r3, #4]
  return 0;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <_isatty>:

int _isatty(int file)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027f0:	2301      	movs	r3, #1
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002820:	4a14      	ldr	r2, [pc, #80]	@ (8002874 <_sbrk+0x5c>)
 8002822:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <_sbrk+0x60>)
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800282c:	4b13      	ldr	r3, [pc, #76]	@ (800287c <_sbrk+0x64>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002834:	4b11      	ldr	r3, [pc, #68]	@ (800287c <_sbrk+0x64>)
 8002836:	4a12      	ldr	r2, [pc, #72]	@ (8002880 <_sbrk+0x68>)
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800283a:	4b10      	ldr	r3, [pc, #64]	@ (800287c <_sbrk+0x64>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d207      	bcs.n	8002858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002848:	f003 fe74 	bl	8006534 <__errno>
 800284c:	4603      	mov	r3, r0
 800284e:	220c      	movs	r2, #12
 8002850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	e009      	b.n	800286c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002858:	4b08      	ldr	r3, [pc, #32]	@ (800287c <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800285e:	4b07      	ldr	r3, [pc, #28]	@ (800287c <_sbrk+0x64>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	4a05      	ldr	r2, [pc, #20]	@ (800287c <_sbrk+0x64>)
 8002868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20020000 	.word	0x20020000
 8002878:	00000400 	.word	0x00000400
 800287c:	20000470 	.word	0x20000470
 8002880:	200005c8 	.word	0x200005c8

08002884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <SystemInit+0x20>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288e:	4a05      	ldr	r2, [pc, #20]	@ (80028a4 <SystemInit+0x20>)
 8002890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028ac:	f7ff ffea 	bl	8002884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028b0:	480c      	ldr	r0, [pc, #48]	@ (80028e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028b2:	490d      	ldr	r1, [pc, #52]	@ (80028e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028b4:	4a0d      	ldr	r2, [pc, #52]	@ (80028ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b8:	e002      	b.n	80028c0 <LoopCopyDataInit>

080028ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028be:	3304      	adds	r3, #4

080028c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c4:	d3f9      	bcc.n	80028ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c6:	4a0a      	ldr	r2, [pc, #40]	@ (80028f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028c8:	4c0a      	ldr	r4, [pc, #40]	@ (80028f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028cc:	e001      	b.n	80028d2 <LoopFillZerobss>

080028ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d0:	3204      	adds	r2, #4

080028d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d4:	d3fb      	bcc.n	80028ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80028d6:	f003 fe33 	bl	8006540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028da:	f7ff fcb9 	bl	8002250 <main>
  bx  lr    
 80028de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80028ec:	08008f30 	.word	0x08008f30
  ldr r2, =_sbss
 80028f0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80028f4:	200005c4 	.word	0x200005c4

080028f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028f8:	e7fe      	b.n	80028f8 <ADC_IRQHandler>
	...

080028fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002900:	4b0e      	ldr	r3, [pc, #56]	@ (800293c <HAL_Init+0x40>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0d      	ldr	r2, [pc, #52]	@ (800293c <HAL_Init+0x40>)
 8002906:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800290a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800290c:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <HAL_Init+0x40>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0a      	ldr	r2, [pc, #40]	@ (800293c <HAL_Init+0x40>)
 8002912:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002918:	4b08      	ldr	r3, [pc, #32]	@ (800293c <HAL_Init+0x40>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a07      	ldr	r2, [pc, #28]	@ (800293c <HAL_Init+0x40>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002924:	2003      	movs	r0, #3
 8002926:	f000 f94f 	bl	8002bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800292a:	2000      	movs	r0, #0
 800292c:	f000 f808 	bl	8002940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002930:	f7ff fe30 	bl	8002594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023c00 	.word	0x40023c00

08002940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002948:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <HAL_InitTick+0x54>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <HAL_InitTick+0x58>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	4619      	mov	r1, r3
 8002952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002956:	fbb3 f3f1 	udiv	r3, r3, r1
 800295a:	fbb2 f3f3 	udiv	r3, r2, r3
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f967 	bl	8002c32 <HAL_SYSTICK_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e00e      	b.n	800298c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b0f      	cmp	r3, #15
 8002972:	d80a      	bhi.n	800298a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002974:	2200      	movs	r2, #0
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	f000 f92f 	bl	8002bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002980:	4a06      	ldr	r2, [pc, #24]	@ (800299c <HAL_InitTick+0x5c>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	2000000c 	.word	0x2000000c
 8002998:	20000014 	.word	0x20000014
 800299c:	20000010 	.word	0x20000010

080029a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_IncTick+0x20>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <HAL_IncTick+0x24>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	4a04      	ldr	r2, [pc, #16]	@ (80029c4 <HAL_IncTick+0x24>)
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000014 	.word	0x20000014
 80029c4:	20000474 	.word	0x20000474

080029c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return uwTick;
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <HAL_GetTick+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000474 	.word	0x20000474

080029e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e8:	f7ff ffee 	bl	80029c8 <HAL_GetTick>
 80029ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d005      	beq.n	8002a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <HAL_Delay+0x44>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a06:	bf00      	nop
 8002a08:	f7ff ffde 	bl	80029c8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d8f7      	bhi.n	8002a08 <HAL_Delay+0x28>
  {
  }
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000014 	.word	0x20000014

08002a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a38:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5a:	4a04      	ldr	r2, [pc, #16]	@ (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	60d3      	str	r3, [r2, #12]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a74:	4b04      	ldr	r3, [pc, #16]	@ (8002a88 <__NVIC_GetPriorityGrouping+0x18>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	f003 0307 	and.w	r3, r3, #7
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	db0b      	blt.n	8002ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	f003 021f 	and.w	r2, r3, #31
 8002aa4:	4907      	ldr	r1, [pc, #28]	@ (8002ac4 <__NVIC_EnableIRQ+0x38>)
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2001      	movs	r0, #1
 8002aae:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000e100 	.word	0xe000e100

08002ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db0a      	blt.n	8002af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	490c      	ldr	r1, [pc, #48]	@ (8002b14 <__NVIC_SetPriority+0x4c>)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	0112      	lsls	r2, r2, #4
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	440b      	add	r3, r1
 8002aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af0:	e00a      	b.n	8002b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4908      	ldr	r1, [pc, #32]	@ (8002b18 <__NVIC_SetPriority+0x50>)
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	3b04      	subs	r3, #4
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	440b      	add	r3, r1
 8002b06:	761a      	strb	r2, [r3, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000e100 	.word	0xe000e100
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	@ 0x24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f1c3 0307 	rsb	r3, r3, #7
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	bf28      	it	cs
 8002b3a:	2304      	movcs	r3, #4
 8002b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d902      	bls.n	8002b4c <NVIC_EncodePriority+0x30>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3b03      	subs	r3, #3
 8002b4a:	e000      	b.n	8002b4e <NVIC_EncodePriority+0x32>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	f04f 32ff 	mov.w	r2, #4294967295
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	401a      	ands	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b64:	f04f 31ff 	mov.w	r1, #4294967295
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	43d9      	mvns	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	4313      	orrs	r3, r2
         );
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3724      	adds	r7, #36	@ 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b94:	d301      	bcc.n	8002b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b96:	2301      	movs	r3, #1
 8002b98:	e00f      	b.n	8002bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc4 <SysTick_Config+0x40>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ba2:	210f      	movs	r1, #15
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	f7ff ff8e 	bl	8002ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bac:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <SysTick_Config+0x40>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bb2:	4b04      	ldr	r3, [pc, #16]	@ (8002bc4 <SysTick_Config+0x40>)
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	e000e010 	.word	0xe000e010

08002bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ff29 	bl	8002a28 <__NVIC_SetPriorityGrouping>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf0:	f7ff ff3e 	bl	8002a70 <__NVIC_GetPriorityGrouping>
 8002bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff ff8e 	bl	8002b1c <NVIC_EncodePriority>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff5d 	bl	8002ac8 <__NVIC_SetPriority>
}
 8002c0e:	bf00      	nop
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff31 	bl	8002a8c <__NVIC_EnableIRQ>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff ffa2 	bl	8002b84 <SysTick_Config>
 8002c40:	4603      	mov	r3, r0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c58:	f7ff feb6 	bl	80029c8 <HAL_GetTick>
 8002c5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d008      	beq.n	8002c7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2280      	movs	r2, #128	@ 0x80
 8002c6e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e052      	b.n	8002d22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0216 	bic.w	r2, r2, #22
 8002c8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d103      	bne.n	8002cac <HAL_DMA_Abort+0x62>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d007      	beq.n	8002cbc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0208 	bic.w	r2, r2, #8
 8002cba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ccc:	e013      	b.n	8002cf6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cce:	f7ff fe7b 	bl	80029c8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d90c      	bls.n	8002cf6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e015      	b.n	8002d22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1e4      	bne.n	8002cce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d08:	223f      	movs	r2, #63	@ 0x3f
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d004      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2280      	movs	r2, #128	@ 0x80
 8002d42:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e00c      	b.n	8002d62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2205      	movs	r2, #5
 8002d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	@ 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	e165      	b.n	8003058 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	f040 8154 	bne.w	8003052 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d005      	beq.n	8002dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d130      	bne.n	8002e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df8:	2201      	movs	r2, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 0201 	and.w	r2, r3, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d017      	beq.n	8002e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d123      	bne.n	8002eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	08da      	lsrs	r2, r3, #3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3208      	adds	r2, #8
 8002e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	220f      	movs	r2, #15
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3208      	adds	r2, #8
 8002eae:	69b9      	ldr	r1, [r7, #24]
 8002eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0203 	and.w	r2, r3, #3
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80ae 	beq.w	8003052 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	4b5d      	ldr	r3, [pc, #372]	@ (8003070 <HAL_GPIO_Init+0x300>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	4a5c      	ldr	r2, [pc, #368]	@ (8003070 <HAL_GPIO_Init+0x300>)
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f06:	4b5a      	ldr	r3, [pc, #360]	@ (8003070 <HAL_GPIO_Init+0x300>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f12:	4a58      	ldr	r2, [pc, #352]	@ (8003074 <HAL_GPIO_Init+0x304>)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4f      	ldr	r2, [pc, #316]	@ (8003078 <HAL_GPIO_Init+0x308>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d025      	beq.n	8002f8a <HAL_GPIO_Init+0x21a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4e      	ldr	r2, [pc, #312]	@ (800307c <HAL_GPIO_Init+0x30c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01f      	beq.n	8002f86 <HAL_GPIO_Init+0x216>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4d      	ldr	r2, [pc, #308]	@ (8003080 <HAL_GPIO_Init+0x310>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d019      	beq.n	8002f82 <HAL_GPIO_Init+0x212>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4c      	ldr	r2, [pc, #304]	@ (8003084 <HAL_GPIO_Init+0x314>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <HAL_GPIO_Init+0x20e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4b      	ldr	r2, [pc, #300]	@ (8003088 <HAL_GPIO_Init+0x318>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00d      	beq.n	8002f7a <HAL_GPIO_Init+0x20a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4a      	ldr	r2, [pc, #296]	@ (800308c <HAL_GPIO_Init+0x31c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <HAL_GPIO_Init+0x206>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a49      	ldr	r2, [pc, #292]	@ (8003090 <HAL_GPIO_Init+0x320>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d101      	bne.n	8002f72 <HAL_GPIO_Init+0x202>
 8002f6e:	2306      	movs	r3, #6
 8002f70:	e00c      	b.n	8002f8c <HAL_GPIO_Init+0x21c>
 8002f72:	2307      	movs	r3, #7
 8002f74:	e00a      	b.n	8002f8c <HAL_GPIO_Init+0x21c>
 8002f76:	2305      	movs	r3, #5
 8002f78:	e008      	b.n	8002f8c <HAL_GPIO_Init+0x21c>
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	e006      	b.n	8002f8c <HAL_GPIO_Init+0x21c>
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e004      	b.n	8002f8c <HAL_GPIO_Init+0x21c>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e002      	b.n	8002f8c <HAL_GPIO_Init+0x21c>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_GPIO_Init+0x21c>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	f002 0203 	and.w	r2, r2, #3
 8002f92:	0092      	lsls	r2, r2, #2
 8002f94:	4093      	lsls	r3, r2
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f9c:	4935      	ldr	r1, [pc, #212]	@ (8003074 <HAL_GPIO_Init+0x304>)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002faa:	4b3a      	ldr	r3, [pc, #232]	@ (8003094 <HAL_GPIO_Init+0x324>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fce:	4a31      	ldr	r2, [pc, #196]	@ (8003094 <HAL_GPIO_Init+0x324>)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8003094 <HAL_GPIO_Init+0x324>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ff8:	4a26      	ldr	r2, [pc, #152]	@ (8003094 <HAL_GPIO_Init+0x324>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ffe:	4b25      	ldr	r3, [pc, #148]	@ (8003094 <HAL_GPIO_Init+0x324>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003022:	4a1c      	ldr	r2, [pc, #112]	@ (8003094 <HAL_GPIO_Init+0x324>)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003028:	4b1a      	ldr	r3, [pc, #104]	@ (8003094 <HAL_GPIO_Init+0x324>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800304c:	4a11      	ldr	r2, [pc, #68]	@ (8003094 <HAL_GPIO_Init+0x324>)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	3301      	adds	r3, #1
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b0f      	cmp	r3, #15
 800305c:	f67f ae96 	bls.w	8002d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	3724      	adds	r7, #36	@ 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	40013800 	.word	0x40013800
 8003078:	40020000 	.word	0x40020000
 800307c:	40020400 	.word	0x40020400
 8003080:	40020800 	.word	0x40020800
 8003084:	40020c00 	.word	0x40020c00
 8003088:	40021000 	.word	0x40021000
 800308c:	40021400 	.word	0x40021400
 8003090:	40021800 	.word	0x40021800
 8003094:	40013c00 	.word	0x40013c00

08003098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
 80030a4:	4613      	mov	r3, r2
 80030a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a8:	787b      	ldrb	r3, [r7, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030b4:	e003      	b.n	80030be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	041a      	lsls	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	619a      	str	r2, [r3, #24]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0cc      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e0:	4b68      	ldr	r3, [pc, #416]	@ (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d90c      	bls.n	8003108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b65      	ldr	r3, [pc, #404]	@ (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b63      	ldr	r3, [pc, #396]	@ (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0b8      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d020      	beq.n	8003156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003120:	4b59      	ldr	r3, [pc, #356]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a58      	ldr	r2, [pc, #352]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800312a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003138:	4b53      	ldr	r3, [pc, #332]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	4a52      	ldr	r2, [pc, #328]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003144:	4b50      	ldr	r3, [pc, #320]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	494d      	ldr	r1, [pc, #308]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d044      	beq.n	80031ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b47      	ldr	r3, [pc, #284]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d119      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e07f      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d003      	beq.n	800318a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003186:	2b03      	cmp	r3, #3
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	4b3f      	ldr	r3, [pc, #252]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e06f      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319a:	4b3b      	ldr	r3, [pc, #236]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e067      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031aa:	4b37      	ldr	r3, [pc, #220]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f023 0203 	bic.w	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4934      	ldr	r1, [pc, #208]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031bc:	f7ff fc04 	bl	80029c8 <HAL_GetTick>
 80031c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	e00a      	b.n	80031da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c4:	f7ff fc00 	bl	80029c8 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e04f      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	4b2b      	ldr	r3, [pc, #172]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 020c 	and.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d1eb      	bne.n	80031c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ec:	4b25      	ldr	r3, [pc, #148]	@ (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d20c      	bcs.n	8003214 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b22      	ldr	r3, [pc, #136]	@ (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b20      	ldr	r3, [pc, #128]	@ (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e032      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003220:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4916      	ldr	r1, [pc, #88]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800323e:	4b12      	ldr	r3, [pc, #72]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	490e      	ldr	r1, [pc, #56]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003252:	f000 f855 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 8003256:	4602      	mov	r2, r0
 8003258:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	490a      	ldr	r1, [pc, #40]	@ (800328c <HAL_RCC_ClockConfig+0x1c0>)
 8003264:	5ccb      	ldrb	r3, [r1, r3]
 8003266:	fa22 f303 	lsr.w	r3, r2, r3
 800326a:	4a09      	ldr	r2, [pc, #36]	@ (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800326e:	4b09      	ldr	r3, [pc, #36]	@ (8003294 <HAL_RCC_ClockConfig+0x1c8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fb64 	bl	8002940 <HAL_InitTick>

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023c00 	.word	0x40023c00
 8003288:	40023800 	.word	0x40023800
 800328c:	08008ae4 	.word	0x08008ae4
 8003290:	2000000c 	.word	0x2000000c
 8003294:	20000010 	.word	0x20000010

08003298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800329c:	4b03      	ldr	r3, [pc, #12]	@ (80032ac <HAL_RCC_GetHCLKFreq+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	2000000c 	.word	0x2000000c

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b4:	f7ff fff0 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0a9b      	lsrs	r3, r3, #10
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	@ (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	08008af4 	.word	0x08008af4

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032dc:	f7ff ffdc 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0b5b      	lsrs	r3, r3, #13
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4903      	ldr	r1, [pc, #12]	@ (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	08008af4 	.word	0x08008af4

08003300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003304:	b0ae      	sub	sp, #184	@ 0xb8
 8003306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003326:	4bcb      	ldr	r3, [pc, #812]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b0c      	cmp	r3, #12
 8003330:	f200 8206 	bhi.w	8003740 <HAL_RCC_GetSysClockFreq+0x440>
 8003334:	a201      	add	r2, pc, #4	@ (adr r2, 800333c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333a:	bf00      	nop
 800333c:	08003371 	.word	0x08003371
 8003340:	08003741 	.word	0x08003741
 8003344:	08003741 	.word	0x08003741
 8003348:	08003741 	.word	0x08003741
 800334c:	08003379 	.word	0x08003379
 8003350:	08003741 	.word	0x08003741
 8003354:	08003741 	.word	0x08003741
 8003358:	08003741 	.word	0x08003741
 800335c:	08003381 	.word	0x08003381
 8003360:	08003741 	.word	0x08003741
 8003364:	08003741 	.word	0x08003741
 8003368:	08003741 	.word	0x08003741
 800336c:	08003571 	.word	0x08003571
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003370:	4bb9      	ldr	r3, [pc, #740]	@ (8003658 <HAL_RCC_GetSysClockFreq+0x358>)
 8003372:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003376:	e1e7      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003378:	4bb8      	ldr	r3, [pc, #736]	@ (800365c <HAL_RCC_GetSysClockFreq+0x35c>)
 800337a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800337e:	e1e3      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003380:	4bb4      	ldr	r3, [pc, #720]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003388:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800338c:	4bb1      	ldr	r3, [pc, #708]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d071      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003398:	4bae      	ldr	r3, [pc, #696]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	099b      	lsrs	r3, r3, #6
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033a4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80033a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033be:	4622      	mov	r2, r4
 80033c0:	462b      	mov	r3, r5
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	0159      	lsls	r1, r3, #5
 80033cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d0:	0150      	lsls	r0, r2, #5
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4621      	mov	r1, r4
 80033d8:	1a51      	subs	r1, r2, r1
 80033da:	6439      	str	r1, [r7, #64]	@ 0x40
 80033dc:	4629      	mov	r1, r5
 80033de:	eb63 0301 	sbc.w	r3, r3, r1
 80033e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80033f0:	4649      	mov	r1, r9
 80033f2:	018b      	lsls	r3, r1, #6
 80033f4:	4641      	mov	r1, r8
 80033f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033fa:	4641      	mov	r1, r8
 80033fc:	018a      	lsls	r2, r1, #6
 80033fe:	4641      	mov	r1, r8
 8003400:	1a51      	subs	r1, r2, r1
 8003402:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003404:	4649      	mov	r1, r9
 8003406:	eb63 0301 	sbc.w	r3, r3, r1
 800340a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003418:	4649      	mov	r1, r9
 800341a:	00cb      	lsls	r3, r1, #3
 800341c:	4641      	mov	r1, r8
 800341e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003422:	4641      	mov	r1, r8
 8003424:	00ca      	lsls	r2, r1, #3
 8003426:	4610      	mov	r0, r2
 8003428:	4619      	mov	r1, r3
 800342a:	4603      	mov	r3, r0
 800342c:	4622      	mov	r2, r4
 800342e:	189b      	adds	r3, r3, r2
 8003430:	633b      	str	r3, [r7, #48]	@ 0x30
 8003432:	462b      	mov	r3, r5
 8003434:	460a      	mov	r2, r1
 8003436:	eb42 0303 	adc.w	r3, r2, r3
 800343a:	637b      	str	r3, [r7, #52]	@ 0x34
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003448:	4629      	mov	r1, r5
 800344a:	024b      	lsls	r3, r1, #9
 800344c:	4621      	mov	r1, r4
 800344e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003452:	4621      	mov	r1, r4
 8003454:	024a      	lsls	r2, r1, #9
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003464:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003468:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800346c:	f7fd fbec 	bl	8000c48 <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4613      	mov	r3, r2
 8003476:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800347a:	e067      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347c:	4b75      	ldr	r3, [pc, #468]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	2200      	movs	r2, #0
 8003484:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003488:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800348c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003494:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003496:	2300      	movs	r3, #0
 8003498:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800349a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800349e:	4622      	mov	r2, r4
 80034a0:	462b      	mov	r3, r5
 80034a2:	f04f 0000 	mov.w	r0, #0
 80034a6:	f04f 0100 	mov.w	r1, #0
 80034aa:	0159      	lsls	r1, r3, #5
 80034ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b0:	0150      	lsls	r0, r2, #5
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4621      	mov	r1, r4
 80034b8:	1a51      	subs	r1, r2, r1
 80034ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80034bc:	4629      	mov	r1, r5
 80034be:	eb63 0301 	sbc.w	r3, r3, r1
 80034c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80034d0:	4649      	mov	r1, r9
 80034d2:	018b      	lsls	r3, r1, #6
 80034d4:	4641      	mov	r1, r8
 80034d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034da:	4641      	mov	r1, r8
 80034dc:	018a      	lsls	r2, r1, #6
 80034de:	4641      	mov	r1, r8
 80034e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80034e4:	4649      	mov	r1, r9
 80034e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034fe:	4692      	mov	sl, r2
 8003500:	469b      	mov	fp, r3
 8003502:	4623      	mov	r3, r4
 8003504:	eb1a 0303 	adds.w	r3, sl, r3
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	462b      	mov	r3, r5
 800350c:	eb4b 0303 	adc.w	r3, fp, r3
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800351e:	4629      	mov	r1, r5
 8003520:	028b      	lsls	r3, r1, #10
 8003522:	4621      	mov	r1, r4
 8003524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003528:	4621      	mov	r1, r4
 800352a:	028a      	lsls	r2, r1, #10
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003534:	2200      	movs	r2, #0
 8003536:	673b      	str	r3, [r7, #112]	@ 0x70
 8003538:	677a      	str	r2, [r7, #116]	@ 0x74
 800353a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800353e:	f7fd fb83 	bl	8000c48 <__aeabi_uldivmod>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4613      	mov	r3, r2
 8003548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800354c:	4b41      	ldr	r3, [pc, #260]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	3301      	adds	r3, #1
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800355e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003562:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003566:	fbb2 f3f3 	udiv	r3, r2, r3
 800356a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800356e:	e0eb      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003570:	4b38      	ldr	r3, [pc, #224]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003578:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800357c:	4b35      	ldr	r3, [pc, #212]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d06b      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003588:	4b32      	ldr	r3, [pc, #200]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	099b      	lsrs	r3, r3, #6
 800358e:	2200      	movs	r2, #0
 8003590:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003592:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359a:	663b      	str	r3, [r7, #96]	@ 0x60
 800359c:	2300      	movs	r3, #0
 800359e:	667b      	str	r3, [r7, #100]	@ 0x64
 80035a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80035a4:	4622      	mov	r2, r4
 80035a6:	462b      	mov	r3, r5
 80035a8:	f04f 0000 	mov.w	r0, #0
 80035ac:	f04f 0100 	mov.w	r1, #0
 80035b0:	0159      	lsls	r1, r3, #5
 80035b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b6:	0150      	lsls	r0, r2, #5
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4621      	mov	r1, r4
 80035be:	1a51      	subs	r1, r2, r1
 80035c0:	61b9      	str	r1, [r7, #24]
 80035c2:	4629      	mov	r1, r5
 80035c4:	eb63 0301 	sbc.w	r3, r3, r1
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80035d6:	4659      	mov	r1, fp
 80035d8:	018b      	lsls	r3, r1, #6
 80035da:	4651      	mov	r1, sl
 80035dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035e0:	4651      	mov	r1, sl
 80035e2:	018a      	lsls	r2, r1, #6
 80035e4:	4651      	mov	r1, sl
 80035e6:	ebb2 0801 	subs.w	r8, r2, r1
 80035ea:	4659      	mov	r1, fp
 80035ec:	eb63 0901 	sbc.w	r9, r3, r1
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003600:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003604:	4690      	mov	r8, r2
 8003606:	4699      	mov	r9, r3
 8003608:	4623      	mov	r3, r4
 800360a:	eb18 0303 	adds.w	r3, r8, r3
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	462b      	mov	r3, r5
 8003612:	eb49 0303 	adc.w	r3, r9, r3
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003624:	4629      	mov	r1, r5
 8003626:	024b      	lsls	r3, r1, #9
 8003628:	4621      	mov	r1, r4
 800362a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800362e:	4621      	mov	r1, r4
 8003630:	024a      	lsls	r2, r1, #9
 8003632:	4610      	mov	r0, r2
 8003634:	4619      	mov	r1, r3
 8003636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800363a:	2200      	movs	r2, #0
 800363c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800363e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003640:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003644:	f7fd fb00 	bl	8000c48 <__aeabi_uldivmod>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4613      	mov	r3, r2
 800364e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003652:	e065      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x420>
 8003654:	40023800 	.word	0x40023800
 8003658:	00f42400 	.word	0x00f42400
 800365c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003660:	4b3d      	ldr	r3, [pc, #244]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x458>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	099b      	lsrs	r3, r3, #6
 8003666:	2200      	movs	r2, #0
 8003668:	4618      	mov	r0, r3
 800366a:	4611      	mov	r1, r2
 800366c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003670:	653b      	str	r3, [r7, #80]	@ 0x50
 8003672:	2300      	movs	r3, #0
 8003674:	657b      	str	r3, [r7, #84]	@ 0x54
 8003676:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800367a:	4642      	mov	r2, r8
 800367c:	464b      	mov	r3, r9
 800367e:	f04f 0000 	mov.w	r0, #0
 8003682:	f04f 0100 	mov.w	r1, #0
 8003686:	0159      	lsls	r1, r3, #5
 8003688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800368c:	0150      	lsls	r0, r2, #5
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4641      	mov	r1, r8
 8003694:	1a51      	subs	r1, r2, r1
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	4649      	mov	r1, r9
 800369a:	eb63 0301 	sbc.w	r3, r3, r1
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80036ac:	4659      	mov	r1, fp
 80036ae:	018b      	lsls	r3, r1, #6
 80036b0:	4651      	mov	r1, sl
 80036b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036b6:	4651      	mov	r1, sl
 80036b8:	018a      	lsls	r2, r1, #6
 80036ba:	4651      	mov	r1, sl
 80036bc:	1a54      	subs	r4, r2, r1
 80036be:	4659      	mov	r1, fp
 80036c0:	eb63 0501 	sbc.w	r5, r3, r1
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	00eb      	lsls	r3, r5, #3
 80036ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036d2:	00e2      	lsls	r2, r4, #3
 80036d4:	4614      	mov	r4, r2
 80036d6:	461d      	mov	r5, r3
 80036d8:	4643      	mov	r3, r8
 80036da:	18e3      	adds	r3, r4, r3
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	464b      	mov	r3, r9
 80036e0:	eb45 0303 	adc.w	r3, r5, r3
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036f2:	4629      	mov	r1, r5
 80036f4:	028b      	lsls	r3, r1, #10
 80036f6:	4621      	mov	r1, r4
 80036f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036fc:	4621      	mov	r1, r4
 80036fe:	028a      	lsls	r2, r1, #10
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003708:	2200      	movs	r2, #0
 800370a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800370c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800370e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003712:	f7fd fa99 	bl	8000c48 <__aeabi_uldivmod>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4613      	mov	r3, r2
 800371c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003720:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x458>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	0f1b      	lsrs	r3, r3, #28
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800372e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003732:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003736:	fbb2 f3f3 	udiv	r3, r2, r3
 800373a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800373e:	e003      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b06      	ldr	r3, [pc, #24]	@ (800375c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003742:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003746:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003748:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800374c:	4618      	mov	r0, r3
 800374e:	37b8      	adds	r7, #184	@ 0xb8
 8003750:	46bd      	mov	sp, r7
 8003752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800
 800375c:	00f42400 	.word	0x00f42400

08003760 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e28d      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8083 	beq.w	8003886 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003780:	4b94      	ldr	r3, [pc, #592]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b04      	cmp	r3, #4
 800378a:	d019      	beq.n	80037c0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800378c:	4b91      	ldr	r3, [pc, #580]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 030c 	and.w	r3, r3, #12
        || \
 8003794:	2b08      	cmp	r3, #8
 8003796:	d106      	bne.n	80037a6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003798:	4b8e      	ldr	r3, [pc, #568]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037a4:	d00c      	beq.n	80037c0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a6:	4b8b      	ldr	r3, [pc, #556]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037ae:	2b0c      	cmp	r3, #12
 80037b0:	d112      	bne.n	80037d8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b2:	4b88      	ldr	r3, [pc, #544]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037be:	d10b      	bne.n	80037d8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	4b84      	ldr	r3, [pc, #528]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d05b      	beq.n	8003884 <HAL_RCC_OscConfig+0x124>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d157      	bne.n	8003884 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e25a      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e0:	d106      	bne.n	80037f0 <HAL_RCC_OscConfig+0x90>
 80037e2:	4b7c      	ldr	r3, [pc, #496]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a7b      	ldr	r2, [pc, #492]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e01d      	b.n	800382c <HAL_RCC_OscConfig+0xcc>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0xb4>
 80037fa:	4b76      	ldr	r3, [pc, #472]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a75      	ldr	r2, [pc, #468]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003800:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b73      	ldr	r3, [pc, #460]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a72      	ldr	r2, [pc, #456]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e00b      	b.n	800382c <HAL_RCC_OscConfig+0xcc>
 8003814:	4b6f      	ldr	r3, [pc, #444]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6e      	ldr	r2, [pc, #440]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 800381a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b6c      	ldr	r3, [pc, #432]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6b      	ldr	r2, [pc, #428]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003826:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800382a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7ff f8c8 	bl	80029c8 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7ff f8c4 	bl	80029c8 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	@ 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e21f      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	4b61      	ldr	r3, [pc, #388]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0xdc>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7ff f8b4 	bl	80029c8 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7ff f8b0 	bl	80029c8 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	@ 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e20b      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003876:	4b57      	ldr	r3, [pc, #348]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x104>
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d06f      	beq.n	8003972 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003892:	4b50      	ldr	r3, [pc, #320]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b00      	cmp	r3, #0
 800389c:	d017      	beq.n	80038ce <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800389e:	4b4d      	ldr	r3, [pc, #308]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
        || \
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d105      	bne.n	80038b6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038aa:	4b4a      	ldr	r3, [pc, #296]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b6:	4b47      	ldr	r3, [pc, #284]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038be:	2b0c      	cmp	r3, #12
 80038c0:	d11c      	bne.n	80038fc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038c2:	4b44      	ldr	r3, [pc, #272]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	4b41      	ldr	r3, [pc, #260]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_RCC_OscConfig+0x186>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e1d3      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	4b3b      	ldr	r3, [pc, #236]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4937      	ldr	r1, [pc, #220]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	e03a      	b.n	8003972 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003904:	4b34      	ldr	r3, [pc, #208]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390a:	f7ff f85d 	bl	80029c8 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003912:	f7ff f859 	bl	80029c8 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e1b4      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	4b2b      	ldr	r3, [pc, #172]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003930:	4b28      	ldr	r3, [pc, #160]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4925      	ldr	r1, [pc, #148]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]
 8003944:	e015      	b.n	8003972 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003946:	4b24      	ldr	r3, [pc, #144]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7ff f83c 	bl	80029c8 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003954:	f7ff f838 	bl	80029c8 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e193      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	4b1b      	ldr	r3, [pc, #108]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d036      	beq.n	80039ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d016      	beq.n	80039b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003986:	4b15      	ldr	r3, [pc, #84]	@ (80039dc <HAL_RCC_OscConfig+0x27c>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7ff f81c 	bl	80029c8 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003994:	f7ff f818 	bl	80029c8 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e173      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <HAL_RCC_OscConfig+0x274>)
 80039a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x234>
 80039b2:	e01b      	b.n	80039ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b4:	4b09      	ldr	r3, [pc, #36]	@ (80039dc <HAL_RCC_OscConfig+0x27c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ba:	f7ff f805 	bl	80029c8 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	e00e      	b.n	80039e0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c2:	f7ff f801 	bl	80029c8 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d907      	bls.n	80039e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e15c      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
 80039d4:	40023800 	.word	0x40023800
 80039d8:	42470000 	.word	0x42470000
 80039dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e0:	4b8a      	ldr	r3, [pc, #552]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 80039e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ea      	bne.n	80039c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8097 	beq.w	8003b28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fe:	4b83      	ldr	r3, [pc, #524]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	4a7e      	ldr	r2, [pc, #504]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	4b79      	ldr	r3, [pc, #484]	@ (8003c10 <HAL_RCC_OscConfig+0x4b0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d118      	bne.n	8003a68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a36:	4b76      	ldr	r3, [pc, #472]	@ (8003c10 <HAL_RCC_OscConfig+0x4b0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a75      	ldr	r2, [pc, #468]	@ (8003c10 <HAL_RCC_OscConfig+0x4b0>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a42:	f7fe ffc1 	bl	80029c8 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4a:	f7fe ffbd 	bl	80029c8 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e118      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8003c10 <HAL_RCC_OscConfig+0x4b0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCC_OscConfig+0x31e>
 8003a70:	4b66      	ldr	r3, [pc, #408]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a74:	4a65      	ldr	r2, [pc, #404]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a7c:	e01c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x358>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b05      	cmp	r3, #5
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x340>
 8003a86:	4b61      	ldr	r3, [pc, #388]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8a:	4a60      	ldr	r2, [pc, #384]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a8c:	f043 0304 	orr.w	r3, r3, #4
 8003a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a92:	4b5e      	ldr	r3, [pc, #376]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a96:	4a5d      	ldr	r2, [pc, #372]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCC_OscConfig+0x358>
 8003aa0:	4b5a      	ldr	r3, [pc, #360]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa4:	4a59      	ldr	r2, [pc, #356]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aac:	4b57      	ldr	r3, [pc, #348]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab0:	4a56      	ldr	r2, [pc, #344]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003ab2:	f023 0304 	bic.w	r3, r3, #4
 8003ab6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7fe ff82 	bl	80029c8 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fe ff7e 	bl	80029c8 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0d7      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ade:	4b4b      	ldr	r3, [pc, #300]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ee      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x368>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fe ff6c 	bl	80029c8 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af4:	f7fe ff68 	bl	80029c8 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e0c1      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0a:	4b40      	ldr	r3, [pc, #256]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ee      	bne.n	8003af4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d105      	bne.n	8003b28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	4a3a      	ldr	r2, [pc, #232]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003b22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80ad 	beq.w	8003c8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b32:	4b36      	ldr	r3, [pc, #216]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d060      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d145      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b46:	4b33      	ldr	r3, [pc, #204]	@ (8003c14 <HAL_RCC_OscConfig+0x4b4>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7fe ff3c 	bl	80029c8 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fe ff38 	bl	80029c8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e093      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b66:	4b29      	ldr	r3, [pc, #164]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	019b      	lsls	r3, r3, #6
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	041b      	lsls	r3, r3, #16
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b94:	061b      	lsls	r3, r3, #24
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9c:	071b      	lsls	r3, r3, #28
 8003b9e:	491b      	ldr	r1, [pc, #108]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c14 <HAL_RCC_OscConfig+0x4b4>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fe ff0d 	bl	80029c8 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb2:	f7fe ff09 	bl	80029c8 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e064      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc4:	4b11      	ldr	r3, [pc, #68]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x452>
 8003bd0:	e05c      	b.n	8003c8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b10      	ldr	r3, [pc, #64]	@ (8003c14 <HAL_RCC_OscConfig+0x4b4>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fe fef6 	bl	80029c8 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fe fef2 	bl	80029c8 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e04d      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	4b06      	ldr	r3, [pc, #24]	@ (8003c0c <HAL_RCC_OscConfig+0x4ac>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x480>
 8003bfe:	e045      	b.n	8003c8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d107      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e040      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40007000 	.word	0x40007000
 8003c14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c18:	4b1f      	ldr	r3, [pc, #124]	@ (8003c98 <HAL_RCC_OscConfig+0x538>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d030      	beq.n	8003c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d129      	bne.n	8003c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d122      	bne.n	8003c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d119      	bne.n	8003c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	3b01      	subs	r3, #1
 8003c62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d10f      	bne.n	8003c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800

08003c9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e042      	b.n	8003d34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fe fc8e 	bl	80025e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2224      	movs	r2, #36	@ 0x24
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fcdd 	bl	80046a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695a      	ldr	r2, [r3, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d112      	bne.n	8003d7c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_UART_Receive_IT+0x26>
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e00b      	b.n	8003d7e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fabc 	bl	80042f0 <UART_Start_Receive_IT>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	e000      	b.n	8003d7e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
  }
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b0ba      	sub	sp, #232	@ 0xe8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_UART_IRQHandler+0x66>
 8003dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fb9b 	bl	8004522 <UART_Receive_IT>
      return;
 8003dec:	e25b      	b.n	80042a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80de 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x22c>
 8003df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d106      	bne.n	8003e12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80d1 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_UART_IRQHandler+0xae>
 8003e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <HAL_UART_IRQHandler+0xd2>
 8003e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	f043 0202 	orr.w	r2, r3, #2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_UART_IRQHandler+0xf6>
 8003e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e76:	f043 0204 	orr.w	r2, r3, #4
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d011      	beq.n	8003eae <HAL_UART_IRQHandler+0x126>
 8003e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d105      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea6:	f043 0208 	orr.w	r2, r3, #8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 81f2 	beq.w	800429c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x14e>
 8003ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fb26 	bl	8004522 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee0:	2b40      	cmp	r3, #64	@ 0x40
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <HAL_UART_IRQHandler+0x17a>
 8003efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d04f      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fa2e 	bl	8004364 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f12:	2b40      	cmp	r3, #64	@ 0x40
 8003f14:	d141      	bne.n	8003f9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1d9      	bne.n	8003f16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d013      	beq.n	8003f92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6e:	4a7e      	ldr	r2, [pc, #504]	@ (8004168 <HAL_UART_IRQHandler+0x3e0>)
 8003f70:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe fed7 	bl	8002d2a <HAL_DMA_Abort_IT>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d016      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f90:	e00e      	b.n	8003fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fe facc 	bl	8002530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f98:	e00a      	b.n	8003fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fe fac8 	bl	8002530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	e006      	b.n	8003fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fe fac4 	bl	8002530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003fae:	e175      	b.n	800429c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	bf00      	nop
    return;
 8003fb2:	e173      	b.n	800429c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	f040 814f 	bne.w	800425c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 8148 	beq.w	800425c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8141 	beq.w	800425c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffa:	2b40      	cmp	r3, #64	@ 0x40
 8003ffc:	f040 80b6 	bne.w	800416c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800400c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8145 	beq.w	80042a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800401a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800401e:	429a      	cmp	r2, r3
 8004020:	f080 813e 	bcs.w	80042a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800402a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004036:	f000 8088 	beq.w	800414a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004050:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004058:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004066:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800406a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004072:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800407e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1d9      	bne.n	800403a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3314      	adds	r3, #20
 800408c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004096:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3314      	adds	r3, #20
 80040a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80040ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e1      	bne.n	8004086 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3314      	adds	r3, #20
 80040c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3314      	adds	r3, #20
 80040e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e3      	bne.n	80040c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004118:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800411a:	f023 0310 	bic.w	r3, r3, #16
 800411e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	330c      	adds	r3, #12
 8004128:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800412c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800412e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004132:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800413a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e3      	bne.n	8004108 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe fd80 	bl	8002c4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004158:	b29b      	uxth	r3, r3
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	b29b      	uxth	r3, r3
 800415e:	4619      	mov	r1, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f8ad 	bl	80042c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004166:	e09b      	b.n	80042a0 <HAL_UART_IRQHandler+0x518>
 8004168:	0800442b 	.word	0x0800442b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004174:	b29b      	uxth	r3, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 808e 	beq.w	80042a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004188:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8089 	beq.w	80042a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	330c      	adds	r3, #12
 8004198:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80041b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80041b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e3      	bne.n	8004192 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3314      	adds	r3, #20
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	623b      	str	r3, [r7, #32]
   return(result);
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3314      	adds	r3, #20
 80041ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e3      	bne.n	80041ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0310 	bic.w	r3, r3, #16
 8004226:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004234:	61fa      	str	r2, [r7, #28]
 8004236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	69b9      	ldr	r1, [r7, #24]
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	617b      	str	r3, [r7, #20]
   return(result);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e3      	bne.n	8004210 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800424e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004252:	4619      	mov	r1, r3
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f833 	bl	80042c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800425a:	e023      	b.n	80042a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800425c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004264:	2b00      	cmp	r3, #0
 8004266:	d009      	beq.n	800427c <HAL_UART_IRQHandler+0x4f4>
 8004268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800426c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f8ec 	bl	8004452 <UART_Transmit_IT>
    return;
 800427a:	e014      	b.n	80042a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800427c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00e      	beq.n	80042a6 <HAL_UART_IRQHandler+0x51e>
 8004288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f92c 	bl	80044f2 <UART_EndTransmit_IT>
    return;
 800429a:	e004      	b.n	80042a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800429c:	bf00      	nop
 800429e:	e002      	b.n	80042a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80042a0:	bf00      	nop
 80042a2:	e000      	b.n	80042a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80042a4:	bf00      	nop
  }
}
 80042a6:	37e8      	adds	r7, #232	@ 0xe8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	4613      	mov	r3, r2
 80042fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	88fa      	ldrh	r2, [r7, #6]
 8004308:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2222      	movs	r2, #34	@ 0x22
 800431a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004334:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0201 	orr.w	r2, r2, #1
 8004344:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0220 	orr.w	r2, r2, #32
 8004354:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b095      	sub	sp, #84	@ 0x54
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800437c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004382:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800438c:	643a      	str	r2, [r7, #64]	@ 0x40
 800438e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004392:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800439a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3314      	adds	r3, #20
 80043a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3314      	adds	r3, #20
 80043be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e5      	bne.n	80043a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d119      	bne.n	8004410 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f023 0310 	bic.w	r3, r3, #16
 80043f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043fc:	61ba      	str	r2, [r7, #24]
 80043fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6979      	ldr	r1, [r7, #20]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	613b      	str	r3, [r7, #16]
   return(result);
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e5      	bne.n	80043dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800441e:	bf00      	nop
 8004420:	3754      	adds	r7, #84	@ 0x54
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004436:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f7fe f873 	bl	8002530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b21      	cmp	r3, #33	@ 0x21
 8004464:	d13e      	bne.n	80044e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800446e:	d114      	bne.n	800449a <UART_Transmit_IT+0x48>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d110      	bne.n	800449a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800448c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	1c9a      	adds	r2, r3, #2
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	621a      	str	r2, [r3, #32]
 8004498:	e008      	b.n	80044ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	1c59      	adds	r1, r3, #1
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6211      	str	r1, [r2, #32]
 80044a4:	781a      	ldrb	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	4619      	mov	r1, r3
 80044ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10f      	bne.n	80044e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e000      	b.n	80044e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044e4:	2302      	movs	r3, #2
  }
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004508:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff feca 	bl	80042ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b08c      	sub	sp, #48	@ 0x30
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b22      	cmp	r3, #34	@ 0x22
 8004534:	f040 80ae 	bne.w	8004694 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004540:	d117      	bne.n	8004572 <UART_Receive_IT+0x50>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d113      	bne.n	8004572 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004552:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	b29b      	uxth	r3, r3
 800455c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004560:	b29a      	uxth	r2, r3
 8004562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004564:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456a:	1c9a      	adds	r2, r3, #2
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004570:	e026      	b.n	80045c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004576:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004578:	2300      	movs	r3, #0
 800457a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004584:	d007      	beq.n	8004596 <UART_Receive_IT+0x74>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <UART_Receive_IT+0x82>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e008      	b.n	80045b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4619      	mov	r1, r3
 80045ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d15d      	bne.n	8004690 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0220 	bic.w	r2, r2, #32
 80045e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	2b01      	cmp	r3, #1
 8004618:	d135      	bne.n	8004686 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	613b      	str	r3, [r7, #16]
   return(result);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f023 0310 	bic.w	r3, r3, #16
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004640:	623a      	str	r2, [r7, #32]
 8004642:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	69f9      	ldr	r1, [r7, #28]
 8004646:	6a3a      	ldr	r2, [r7, #32]
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	61bb      	str	r3, [r7, #24]
   return(result);
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e5      	bne.n	8004620 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	2b10      	cmp	r3, #16
 8004660:	d10a      	bne.n	8004678 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff fe1e 	bl	80042c0 <HAL_UARTEx_RxEventCallback>
 8004684:	e002      	b.n	800468c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fd ff2a 	bl	80024e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	e002      	b.n	8004696 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	e000      	b.n	8004696 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004694:	2302      	movs	r3, #2
  }
}
 8004696:	4618      	mov	r0, r3
 8004698:	3730      	adds	r7, #48	@ 0x30
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a4:	b0c0      	sub	sp, #256	@ 0x100
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046bc:	68d9      	ldr	r1, [r3, #12]
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	ea40 0301 	orr.w	r3, r0, r1
 80046c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	431a      	orrs	r2, r3
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046f8:	f021 010c 	bic.w	r1, r1, #12
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004706:	430b      	orrs	r3, r1
 8004708:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800470a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471a:	6999      	ldr	r1, [r3, #24]
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	ea40 0301 	orr.w	r3, r0, r1
 8004726:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b8f      	ldr	r3, [pc, #572]	@ (800496c <UART_SetConfig+0x2cc>)
 8004730:	429a      	cmp	r2, r3
 8004732:	d005      	beq.n	8004740 <UART_SetConfig+0xa0>
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b8d      	ldr	r3, [pc, #564]	@ (8004970 <UART_SetConfig+0x2d0>)
 800473c:	429a      	cmp	r2, r3
 800473e:	d104      	bne.n	800474a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004740:	f7fe fdca 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8004744:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004748:	e003      	b.n	8004752 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800474a:	f7fe fdb1 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 800474e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800475c:	f040 810c 	bne.w	8004978 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004764:	2200      	movs	r2, #0
 8004766:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800476a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800476e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004772:	4622      	mov	r2, r4
 8004774:	462b      	mov	r3, r5
 8004776:	1891      	adds	r1, r2, r2
 8004778:	65b9      	str	r1, [r7, #88]	@ 0x58
 800477a:	415b      	adcs	r3, r3
 800477c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800477e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004782:	4621      	mov	r1, r4
 8004784:	eb12 0801 	adds.w	r8, r2, r1
 8004788:	4629      	mov	r1, r5
 800478a:	eb43 0901 	adc.w	r9, r3, r1
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800479a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800479e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047a2:	4690      	mov	r8, r2
 80047a4:	4699      	mov	r9, r3
 80047a6:	4623      	mov	r3, r4
 80047a8:	eb18 0303 	adds.w	r3, r8, r3
 80047ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047b0:	462b      	mov	r3, r5
 80047b2:	eb49 0303 	adc.w	r3, r9, r3
 80047b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80047c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80047ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80047ce:	460b      	mov	r3, r1
 80047d0:	18db      	adds	r3, r3, r3
 80047d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80047d4:	4613      	mov	r3, r2
 80047d6:	eb42 0303 	adc.w	r3, r2, r3
 80047da:	657b      	str	r3, [r7, #84]	@ 0x54
 80047dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80047e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80047e4:	f7fc fa30 	bl	8000c48 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4b61      	ldr	r3, [pc, #388]	@ (8004974 <UART_SetConfig+0x2d4>)
 80047ee:	fba3 2302 	umull	r2, r3, r3, r2
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	011c      	lsls	r4, r3, #4
 80047f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004800:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004804:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	1891      	adds	r1, r2, r2
 800480e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004810:	415b      	adcs	r3, r3
 8004812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004814:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004818:	4641      	mov	r1, r8
 800481a:	eb12 0a01 	adds.w	sl, r2, r1
 800481e:	4649      	mov	r1, r9
 8004820:	eb43 0b01 	adc.w	fp, r3, r1
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004830:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004838:	4692      	mov	sl, r2
 800483a:	469b      	mov	fp, r3
 800483c:	4643      	mov	r3, r8
 800483e:	eb1a 0303 	adds.w	r3, sl, r3
 8004842:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004846:	464b      	mov	r3, r9
 8004848:	eb4b 0303 	adc.w	r3, fp, r3
 800484c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800485c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004860:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004864:	460b      	mov	r3, r1
 8004866:	18db      	adds	r3, r3, r3
 8004868:	643b      	str	r3, [r7, #64]	@ 0x40
 800486a:	4613      	mov	r3, r2
 800486c:	eb42 0303 	adc.w	r3, r2, r3
 8004870:	647b      	str	r3, [r7, #68]	@ 0x44
 8004872:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004876:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800487a:	f7fc f9e5 	bl	8000c48 <__aeabi_uldivmod>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4611      	mov	r1, r2
 8004884:	4b3b      	ldr	r3, [pc, #236]	@ (8004974 <UART_SetConfig+0x2d4>)
 8004886:	fba3 2301 	umull	r2, r3, r3, r1
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2264      	movs	r2, #100	@ 0x64
 800488e:	fb02 f303 	mul.w	r3, r2, r3
 8004892:	1acb      	subs	r3, r1, r3
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800489a:	4b36      	ldr	r3, [pc, #216]	@ (8004974 <UART_SetConfig+0x2d4>)
 800489c:	fba3 2302 	umull	r2, r3, r3, r2
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80048a8:	441c      	add	r4, r3
 80048aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80048b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	1891      	adds	r1, r2, r2
 80048c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048c4:	415b      	adcs	r3, r3
 80048c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80048cc:	4641      	mov	r1, r8
 80048ce:	1851      	adds	r1, r2, r1
 80048d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80048d2:	4649      	mov	r1, r9
 80048d4:	414b      	adcs	r3, r1
 80048d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80048e4:	4659      	mov	r1, fp
 80048e6:	00cb      	lsls	r3, r1, #3
 80048e8:	4651      	mov	r1, sl
 80048ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ee:	4651      	mov	r1, sl
 80048f0:	00ca      	lsls	r2, r1, #3
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	4603      	mov	r3, r0
 80048f8:	4642      	mov	r2, r8
 80048fa:	189b      	adds	r3, r3, r2
 80048fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004900:	464b      	mov	r3, r9
 8004902:	460a      	mov	r2, r1
 8004904:	eb42 0303 	adc.w	r3, r2, r3
 8004908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004918:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800491c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004920:	460b      	mov	r3, r1
 8004922:	18db      	adds	r3, r3, r3
 8004924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004926:	4613      	mov	r3, r2
 8004928:	eb42 0303 	adc.w	r3, r2, r3
 800492c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800492e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004932:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004936:	f7fc f987 	bl	8000c48 <__aeabi_uldivmod>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4b0d      	ldr	r3, [pc, #52]	@ (8004974 <UART_SetConfig+0x2d4>)
 8004940:	fba3 1302 	umull	r1, r3, r3, r2
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	2164      	movs	r1, #100	@ 0x64
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	3332      	adds	r3, #50	@ 0x32
 8004952:	4a08      	ldr	r2, [pc, #32]	@ (8004974 <UART_SetConfig+0x2d4>)
 8004954:	fba2 2303 	umull	r2, r3, r2, r3
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	f003 0207 	and.w	r2, r3, #7
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4422      	add	r2, r4
 8004966:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004968:	e106      	b.n	8004b78 <UART_SetConfig+0x4d8>
 800496a:	bf00      	nop
 800496c:	40011000 	.word	0x40011000
 8004970:	40011400 	.word	0x40011400
 8004974:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800497c:	2200      	movs	r2, #0
 800497e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004982:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004986:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800498a:	4642      	mov	r2, r8
 800498c:	464b      	mov	r3, r9
 800498e:	1891      	adds	r1, r2, r2
 8004990:	6239      	str	r1, [r7, #32]
 8004992:	415b      	adcs	r3, r3
 8004994:	627b      	str	r3, [r7, #36]	@ 0x24
 8004996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800499a:	4641      	mov	r1, r8
 800499c:	1854      	adds	r4, r2, r1
 800499e:	4649      	mov	r1, r9
 80049a0:	eb43 0501 	adc.w	r5, r3, r1
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	00eb      	lsls	r3, r5, #3
 80049ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049b2:	00e2      	lsls	r2, r4, #3
 80049b4:	4614      	mov	r4, r2
 80049b6:	461d      	mov	r5, r3
 80049b8:	4643      	mov	r3, r8
 80049ba:	18e3      	adds	r3, r4, r3
 80049bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049c0:	464b      	mov	r3, r9
 80049c2:	eb45 0303 	adc.w	r3, r5, r3
 80049c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049e6:	4629      	mov	r1, r5
 80049e8:	008b      	lsls	r3, r1, #2
 80049ea:	4621      	mov	r1, r4
 80049ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049f0:	4621      	mov	r1, r4
 80049f2:	008a      	lsls	r2, r1, #2
 80049f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049f8:	f7fc f926 	bl	8000c48 <__aeabi_uldivmod>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4b60      	ldr	r3, [pc, #384]	@ (8004b84 <UART_SetConfig+0x4e4>)
 8004a02:	fba3 2302 	umull	r2, r3, r3, r2
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	011c      	lsls	r4, r3, #4
 8004a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	464b      	mov	r3, r9
 8004a20:	1891      	adds	r1, r2, r2
 8004a22:	61b9      	str	r1, [r7, #24]
 8004a24:	415b      	adcs	r3, r3
 8004a26:	61fb      	str	r3, [r7, #28]
 8004a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	1851      	adds	r1, r2, r1
 8004a30:	6139      	str	r1, [r7, #16]
 8004a32:	4649      	mov	r1, r9
 8004a34:	414b      	adcs	r3, r1
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a44:	4659      	mov	r1, fp
 8004a46:	00cb      	lsls	r3, r1, #3
 8004a48:	4651      	mov	r1, sl
 8004a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a4e:	4651      	mov	r1, sl
 8004a50:	00ca      	lsls	r2, r1, #3
 8004a52:	4610      	mov	r0, r2
 8004a54:	4619      	mov	r1, r3
 8004a56:	4603      	mov	r3, r0
 8004a58:	4642      	mov	r2, r8
 8004a5a:	189b      	adds	r3, r3, r2
 8004a5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a60:	464b      	mov	r3, r9
 8004a62:	460a      	mov	r2, r1
 8004a64:	eb42 0303 	adc.w	r3, r2, r3
 8004a68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a84:	4649      	mov	r1, r9
 8004a86:	008b      	lsls	r3, r1, #2
 8004a88:	4641      	mov	r1, r8
 8004a8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a8e:	4641      	mov	r1, r8
 8004a90:	008a      	lsls	r2, r1, #2
 8004a92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a96:	f7fc f8d7 	bl	8000c48 <__aeabi_uldivmod>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4b38      	ldr	r3, [pc, #224]	@ (8004b84 <UART_SetConfig+0x4e4>)
 8004aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	2264      	movs	r2, #100	@ 0x64
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	1acb      	subs	r3, r1, r3
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	3332      	adds	r3, #50	@ 0x32
 8004ab4:	4a33      	ldr	r2, [pc, #204]	@ (8004b84 <UART_SetConfig+0x4e4>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ac0:	441c      	add	r4, r3
 8004ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004aca:	677a      	str	r2, [r7, #116]	@ 0x74
 8004acc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	1891      	adds	r1, r2, r2
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	415b      	adcs	r3, r3
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	1851      	adds	r1, r2, r1
 8004ae4:	6039      	str	r1, [r7, #0]
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	414b      	adcs	r3, r1
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004af8:	4659      	mov	r1, fp
 8004afa:	00cb      	lsls	r3, r1, #3
 8004afc:	4651      	mov	r1, sl
 8004afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b02:	4651      	mov	r1, sl
 8004b04:	00ca      	lsls	r2, r1, #3
 8004b06:	4610      	mov	r0, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b12:	464b      	mov	r3, r9
 8004b14:	460a      	mov	r2, r1
 8004b16:	eb42 0303 	adc.w	r3, r2, r3
 8004b1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b26:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b34:	4649      	mov	r1, r9
 8004b36:	008b      	lsls	r3, r1, #2
 8004b38:	4641      	mov	r1, r8
 8004b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b3e:	4641      	mov	r1, r8
 8004b40:	008a      	lsls	r2, r1, #2
 8004b42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b46:	f7fc f87f 	bl	8000c48 <__aeabi_uldivmod>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b84 <UART_SetConfig+0x4e4>)
 8004b50:	fba3 1302 	umull	r1, r3, r3, r2
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	2164      	movs	r1, #100	@ 0x64
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	3332      	adds	r3, #50	@ 0x32
 8004b62:	4a08      	ldr	r2, [pc, #32]	@ (8004b84 <UART_SetConfig+0x4e4>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	f003 020f 	and.w	r2, r3, #15
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4422      	add	r2, r4
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b84:	51eb851f 	.word	0x51eb851f

08004b88 <malloc>:
 8004b88:	4b02      	ldr	r3, [pc, #8]	@ (8004b94 <malloc+0xc>)
 8004b8a:	4601      	mov	r1, r0
 8004b8c:	6818      	ldr	r0, [r3, #0]
 8004b8e:	f000 b82d 	b.w	8004bec <_malloc_r>
 8004b92:	bf00      	nop
 8004b94:	20000190 	.word	0x20000190

08004b98 <free>:
 8004b98:	4b02      	ldr	r3, [pc, #8]	@ (8004ba4 <free+0xc>)
 8004b9a:	4601      	mov	r1, r0
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	f002 bb5b 	b.w	8007258 <_free_r>
 8004ba2:	bf00      	nop
 8004ba4:	20000190 	.word	0x20000190

08004ba8 <sbrk_aligned>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	4e0f      	ldr	r6, [pc, #60]	@ (8004be8 <sbrk_aligned+0x40>)
 8004bac:	460c      	mov	r4, r1
 8004bae:	6831      	ldr	r1, [r6, #0]
 8004bb0:	4605      	mov	r5, r0
 8004bb2:	b911      	cbnz	r1, 8004bba <sbrk_aligned+0x12>
 8004bb4:	f001 fc9c 	bl	80064f0 <_sbrk_r>
 8004bb8:	6030      	str	r0, [r6, #0]
 8004bba:	4621      	mov	r1, r4
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	f001 fc97 	bl	80064f0 <_sbrk_r>
 8004bc2:	1c43      	adds	r3, r0, #1
 8004bc4:	d103      	bne.n	8004bce <sbrk_aligned+0x26>
 8004bc6:	f04f 34ff 	mov.w	r4, #4294967295
 8004bca:	4620      	mov	r0, r4
 8004bcc:	bd70      	pop	{r4, r5, r6, pc}
 8004bce:	1cc4      	adds	r4, r0, #3
 8004bd0:	f024 0403 	bic.w	r4, r4, #3
 8004bd4:	42a0      	cmp	r0, r4
 8004bd6:	d0f8      	beq.n	8004bca <sbrk_aligned+0x22>
 8004bd8:	1a21      	subs	r1, r4, r0
 8004bda:	4628      	mov	r0, r5
 8004bdc:	f001 fc88 	bl	80064f0 <_sbrk_r>
 8004be0:	3001      	adds	r0, #1
 8004be2:	d1f2      	bne.n	8004bca <sbrk_aligned+0x22>
 8004be4:	e7ef      	b.n	8004bc6 <sbrk_aligned+0x1e>
 8004be6:	bf00      	nop
 8004be8:	20000478 	.word	0x20000478

08004bec <_malloc_r>:
 8004bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bf0:	1ccd      	adds	r5, r1, #3
 8004bf2:	f025 0503 	bic.w	r5, r5, #3
 8004bf6:	3508      	adds	r5, #8
 8004bf8:	2d0c      	cmp	r5, #12
 8004bfa:	bf38      	it	cc
 8004bfc:	250c      	movcc	r5, #12
 8004bfe:	2d00      	cmp	r5, #0
 8004c00:	4606      	mov	r6, r0
 8004c02:	db01      	blt.n	8004c08 <_malloc_r+0x1c>
 8004c04:	42a9      	cmp	r1, r5
 8004c06:	d904      	bls.n	8004c12 <_malloc_r+0x26>
 8004c08:	230c      	movs	r3, #12
 8004c0a:	6033      	str	r3, [r6, #0]
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ce8 <_malloc_r+0xfc>
 8004c16:	f000 f869 	bl	8004cec <__malloc_lock>
 8004c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c1e:	461c      	mov	r4, r3
 8004c20:	bb44      	cbnz	r4, 8004c74 <_malloc_r+0x88>
 8004c22:	4629      	mov	r1, r5
 8004c24:	4630      	mov	r0, r6
 8004c26:	f7ff ffbf 	bl	8004ba8 <sbrk_aligned>
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	d158      	bne.n	8004ce2 <_malloc_r+0xf6>
 8004c30:	f8d8 4000 	ldr.w	r4, [r8]
 8004c34:	4627      	mov	r7, r4
 8004c36:	2f00      	cmp	r7, #0
 8004c38:	d143      	bne.n	8004cc2 <_malloc_r+0xd6>
 8004c3a:	2c00      	cmp	r4, #0
 8004c3c:	d04b      	beq.n	8004cd6 <_malloc_r+0xea>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	4639      	mov	r1, r7
 8004c42:	4630      	mov	r0, r6
 8004c44:	eb04 0903 	add.w	r9, r4, r3
 8004c48:	f001 fc52 	bl	80064f0 <_sbrk_r>
 8004c4c:	4581      	cmp	r9, r0
 8004c4e:	d142      	bne.n	8004cd6 <_malloc_r+0xea>
 8004c50:	6821      	ldr	r1, [r4, #0]
 8004c52:	1a6d      	subs	r5, r5, r1
 8004c54:	4629      	mov	r1, r5
 8004c56:	4630      	mov	r0, r6
 8004c58:	f7ff ffa6 	bl	8004ba8 <sbrk_aligned>
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d03a      	beq.n	8004cd6 <_malloc_r+0xea>
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	442b      	add	r3, r5
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	f8d8 3000 	ldr.w	r3, [r8]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	bb62      	cbnz	r2, 8004cc8 <_malloc_r+0xdc>
 8004c6e:	f8c8 7000 	str.w	r7, [r8]
 8004c72:	e00f      	b.n	8004c94 <_malloc_r+0xa8>
 8004c74:	6822      	ldr	r2, [r4, #0]
 8004c76:	1b52      	subs	r2, r2, r5
 8004c78:	d420      	bmi.n	8004cbc <_malloc_r+0xd0>
 8004c7a:	2a0b      	cmp	r2, #11
 8004c7c:	d917      	bls.n	8004cae <_malloc_r+0xc2>
 8004c7e:	1961      	adds	r1, r4, r5
 8004c80:	42a3      	cmp	r3, r4
 8004c82:	6025      	str	r5, [r4, #0]
 8004c84:	bf18      	it	ne
 8004c86:	6059      	strne	r1, [r3, #4]
 8004c88:	6863      	ldr	r3, [r4, #4]
 8004c8a:	bf08      	it	eq
 8004c8c:	f8c8 1000 	streq.w	r1, [r8]
 8004c90:	5162      	str	r2, [r4, r5]
 8004c92:	604b      	str	r3, [r1, #4]
 8004c94:	4630      	mov	r0, r6
 8004c96:	f000 f82f 	bl	8004cf8 <__malloc_unlock>
 8004c9a:	f104 000b 	add.w	r0, r4, #11
 8004c9e:	1d23      	adds	r3, r4, #4
 8004ca0:	f020 0007 	bic.w	r0, r0, #7
 8004ca4:	1ac2      	subs	r2, r0, r3
 8004ca6:	bf1c      	itt	ne
 8004ca8:	1a1b      	subne	r3, r3, r0
 8004caa:	50a3      	strne	r3, [r4, r2]
 8004cac:	e7af      	b.n	8004c0e <_malloc_r+0x22>
 8004cae:	6862      	ldr	r2, [r4, #4]
 8004cb0:	42a3      	cmp	r3, r4
 8004cb2:	bf0c      	ite	eq
 8004cb4:	f8c8 2000 	streq.w	r2, [r8]
 8004cb8:	605a      	strne	r2, [r3, #4]
 8004cba:	e7eb      	b.n	8004c94 <_malloc_r+0xa8>
 8004cbc:	4623      	mov	r3, r4
 8004cbe:	6864      	ldr	r4, [r4, #4]
 8004cc0:	e7ae      	b.n	8004c20 <_malloc_r+0x34>
 8004cc2:	463c      	mov	r4, r7
 8004cc4:	687f      	ldr	r7, [r7, #4]
 8004cc6:	e7b6      	b.n	8004c36 <_malloc_r+0x4a>
 8004cc8:	461a      	mov	r2, r3
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	42a3      	cmp	r3, r4
 8004cce:	d1fb      	bne.n	8004cc8 <_malloc_r+0xdc>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	6053      	str	r3, [r2, #4]
 8004cd4:	e7de      	b.n	8004c94 <_malloc_r+0xa8>
 8004cd6:	230c      	movs	r3, #12
 8004cd8:	6033      	str	r3, [r6, #0]
 8004cda:	4630      	mov	r0, r6
 8004cdc:	f000 f80c 	bl	8004cf8 <__malloc_unlock>
 8004ce0:	e794      	b.n	8004c0c <_malloc_r+0x20>
 8004ce2:	6005      	str	r5, [r0, #0]
 8004ce4:	e7d6      	b.n	8004c94 <_malloc_r+0xa8>
 8004ce6:	bf00      	nop
 8004ce8:	2000047c 	.word	0x2000047c

08004cec <__malloc_lock>:
 8004cec:	4801      	ldr	r0, [pc, #4]	@ (8004cf4 <__malloc_lock+0x8>)
 8004cee:	f001 bc4c 	b.w	800658a <__retarget_lock_acquire_recursive>
 8004cf2:	bf00      	nop
 8004cf4:	200005c0 	.word	0x200005c0

08004cf8 <__malloc_unlock>:
 8004cf8:	4801      	ldr	r0, [pc, #4]	@ (8004d00 <__malloc_unlock+0x8>)
 8004cfa:	f001 bc47 	b.w	800658c <__retarget_lock_release_recursive>
 8004cfe:	bf00      	nop
 8004d00:	200005c0 	.word	0x200005c0

08004d04 <realloc>:
 8004d04:	4b02      	ldr	r3, [pc, #8]	@ (8004d10 <realloc+0xc>)
 8004d06:	460a      	mov	r2, r1
 8004d08:	4601      	mov	r1, r0
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	f000 b802 	b.w	8004d14 <_realloc_r>
 8004d10:	20000190 	.word	0x20000190

08004d14 <_realloc_r>:
 8004d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d18:	4680      	mov	r8, r0
 8004d1a:	4615      	mov	r5, r2
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	b921      	cbnz	r1, 8004d2a <_realloc_r+0x16>
 8004d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d24:	4611      	mov	r1, r2
 8004d26:	f7ff bf61 	b.w	8004bec <_malloc_r>
 8004d2a:	b92a      	cbnz	r2, 8004d38 <_realloc_r+0x24>
 8004d2c:	f002 fa94 	bl	8007258 <_free_r>
 8004d30:	2400      	movs	r4, #0
 8004d32:	4620      	mov	r0, r4
 8004d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d38:	f003 fad6 	bl	80082e8 <_malloc_usable_size_r>
 8004d3c:	4285      	cmp	r5, r0
 8004d3e:	4606      	mov	r6, r0
 8004d40:	d802      	bhi.n	8004d48 <_realloc_r+0x34>
 8004d42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d46:	d8f4      	bhi.n	8004d32 <_realloc_r+0x1e>
 8004d48:	4629      	mov	r1, r5
 8004d4a:	4640      	mov	r0, r8
 8004d4c:	f7ff ff4e 	bl	8004bec <_malloc_r>
 8004d50:	4607      	mov	r7, r0
 8004d52:	2800      	cmp	r0, #0
 8004d54:	d0ec      	beq.n	8004d30 <_realloc_r+0x1c>
 8004d56:	42b5      	cmp	r5, r6
 8004d58:	462a      	mov	r2, r5
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	bf28      	it	cs
 8004d5e:	4632      	movcs	r2, r6
 8004d60:	f001 fc15 	bl	800658e <memcpy>
 8004d64:	4621      	mov	r1, r4
 8004d66:	4640      	mov	r0, r8
 8004d68:	f002 fa76 	bl	8007258 <_free_r>
 8004d6c:	463c      	mov	r4, r7
 8004d6e:	e7e0      	b.n	8004d32 <_realloc_r+0x1e>

08004d70 <sulp>:
 8004d70:	b570      	push	{r4, r5, r6, lr}
 8004d72:	4604      	mov	r4, r0
 8004d74:	460d      	mov	r5, r1
 8004d76:	ec45 4b10 	vmov	d0, r4, r5
 8004d7a:	4616      	mov	r6, r2
 8004d7c:	f003 f976 	bl	800806c <__ulp>
 8004d80:	ec51 0b10 	vmov	r0, r1, d0
 8004d84:	b17e      	cbz	r6, 8004da6 <sulp+0x36>
 8004d86:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004d8a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	dd09      	ble.n	8004da6 <sulp+0x36>
 8004d92:	051b      	lsls	r3, r3, #20
 8004d94:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004d98:	2400      	movs	r4, #0
 8004d9a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004d9e:	4622      	mov	r2, r4
 8004da0:	462b      	mov	r3, r5
 8004da2:	f7fb fc59 	bl	8000658 <__aeabi_dmul>
 8004da6:	ec41 0b10 	vmov	d0, r0, r1
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	0000      	movs	r0, r0
	...

08004db0 <_strtod_l>:
 8004db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db4:	b09f      	sub	sp, #124	@ 0x7c
 8004db6:	460c      	mov	r4, r1
 8004db8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004dba:	2200      	movs	r2, #0
 8004dbc:	921a      	str	r2, [sp, #104]	@ 0x68
 8004dbe:	9005      	str	r0, [sp, #20]
 8004dc0:	f04f 0a00 	mov.w	sl, #0
 8004dc4:	f04f 0b00 	mov.w	fp, #0
 8004dc8:	460a      	mov	r2, r1
 8004dca:	9219      	str	r2, [sp, #100]	@ 0x64
 8004dcc:	7811      	ldrb	r1, [r2, #0]
 8004dce:	292b      	cmp	r1, #43	@ 0x2b
 8004dd0:	d04a      	beq.n	8004e68 <_strtod_l+0xb8>
 8004dd2:	d838      	bhi.n	8004e46 <_strtod_l+0x96>
 8004dd4:	290d      	cmp	r1, #13
 8004dd6:	d832      	bhi.n	8004e3e <_strtod_l+0x8e>
 8004dd8:	2908      	cmp	r1, #8
 8004dda:	d832      	bhi.n	8004e42 <_strtod_l+0x92>
 8004ddc:	2900      	cmp	r1, #0
 8004dde:	d03b      	beq.n	8004e58 <_strtod_l+0xa8>
 8004de0:	2200      	movs	r2, #0
 8004de2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004de4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004de6:	782a      	ldrb	r2, [r5, #0]
 8004de8:	2a30      	cmp	r2, #48	@ 0x30
 8004dea:	f040 80b3 	bne.w	8004f54 <_strtod_l+0x1a4>
 8004dee:	786a      	ldrb	r2, [r5, #1]
 8004df0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004df4:	2a58      	cmp	r2, #88	@ 0x58
 8004df6:	d16e      	bne.n	8004ed6 <_strtod_l+0x126>
 8004df8:	9302      	str	r3, [sp, #8]
 8004dfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	ab1a      	add	r3, sp, #104	@ 0x68
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	4a8e      	ldr	r2, [pc, #568]	@ (800503c <_strtod_l+0x28c>)
 8004e04:	9805      	ldr	r0, [sp, #20]
 8004e06:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004e08:	a919      	add	r1, sp, #100	@ 0x64
 8004e0a:	f002 fad7 	bl	80073bc <__gethex>
 8004e0e:	f010 060f 	ands.w	r6, r0, #15
 8004e12:	4604      	mov	r4, r0
 8004e14:	d005      	beq.n	8004e22 <_strtod_l+0x72>
 8004e16:	2e06      	cmp	r6, #6
 8004e18:	d128      	bne.n	8004e6c <_strtod_l+0xbc>
 8004e1a:	3501      	adds	r5, #1
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	9519      	str	r5, [sp, #100]	@ 0x64
 8004e20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f040 858e 	bne.w	8005946 <_strtod_l+0xb96>
 8004e2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e2c:	b1cb      	cbz	r3, 8004e62 <_strtod_l+0xb2>
 8004e2e:	4652      	mov	r2, sl
 8004e30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8004e34:	ec43 2b10 	vmov	d0, r2, r3
 8004e38:	b01f      	add	sp, #124	@ 0x7c
 8004e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3e:	2920      	cmp	r1, #32
 8004e40:	d1ce      	bne.n	8004de0 <_strtod_l+0x30>
 8004e42:	3201      	adds	r2, #1
 8004e44:	e7c1      	b.n	8004dca <_strtod_l+0x1a>
 8004e46:	292d      	cmp	r1, #45	@ 0x2d
 8004e48:	d1ca      	bne.n	8004de0 <_strtod_l+0x30>
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004e4e:	1c51      	adds	r1, r2, #1
 8004e50:	9119      	str	r1, [sp, #100]	@ 0x64
 8004e52:	7852      	ldrb	r2, [r2, #1]
 8004e54:	2a00      	cmp	r2, #0
 8004e56:	d1c5      	bne.n	8004de4 <_strtod_l+0x34>
 8004e58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004e5a:	9419      	str	r4, [sp, #100]	@ 0x64
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f040 8570 	bne.w	8005942 <_strtod_l+0xb92>
 8004e62:	4652      	mov	r2, sl
 8004e64:	465b      	mov	r3, fp
 8004e66:	e7e5      	b.n	8004e34 <_strtod_l+0x84>
 8004e68:	2100      	movs	r1, #0
 8004e6a:	e7ef      	b.n	8004e4c <_strtod_l+0x9c>
 8004e6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004e6e:	b13a      	cbz	r2, 8004e80 <_strtod_l+0xd0>
 8004e70:	2135      	movs	r1, #53	@ 0x35
 8004e72:	a81c      	add	r0, sp, #112	@ 0x70
 8004e74:	f003 f9f4 	bl	8008260 <__copybits>
 8004e78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004e7a:	9805      	ldr	r0, [sp, #20]
 8004e7c:	f002 fdc2 	bl	8007a04 <_Bfree>
 8004e80:	3e01      	subs	r6, #1
 8004e82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004e84:	2e04      	cmp	r6, #4
 8004e86:	d806      	bhi.n	8004e96 <_strtod_l+0xe6>
 8004e88:	e8df f006 	tbb	[pc, r6]
 8004e8c:	201d0314 	.word	0x201d0314
 8004e90:	14          	.byte	0x14
 8004e91:	00          	.byte	0x00
 8004e92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004e96:	05e1      	lsls	r1, r4, #23
 8004e98:	bf48      	it	mi
 8004e9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004e9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004ea2:	0d1b      	lsrs	r3, r3, #20
 8004ea4:	051b      	lsls	r3, r3, #20
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1bb      	bne.n	8004e22 <_strtod_l+0x72>
 8004eaa:	f001 fb43 	bl	8006534 <__errno>
 8004eae:	2322      	movs	r3, #34	@ 0x22
 8004eb0:	6003      	str	r3, [r0, #0]
 8004eb2:	e7b6      	b.n	8004e22 <_strtod_l+0x72>
 8004eb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004eb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004ebc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004ec0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004ec4:	e7e7      	b.n	8004e96 <_strtod_l+0xe6>
 8004ec6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005044 <_strtod_l+0x294>
 8004eca:	e7e4      	b.n	8004e96 <_strtod_l+0xe6>
 8004ecc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004ed0:	f04f 3aff 	mov.w	sl, #4294967295
 8004ed4:	e7df      	b.n	8004e96 <_strtod_l+0xe6>
 8004ed6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	9219      	str	r2, [sp, #100]	@ 0x64
 8004edc:	785b      	ldrb	r3, [r3, #1]
 8004ede:	2b30      	cmp	r3, #48	@ 0x30
 8004ee0:	d0f9      	beq.n	8004ed6 <_strtod_l+0x126>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d09d      	beq.n	8004e22 <_strtod_l+0x72>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004eec:	930c      	str	r3, [sp, #48]	@ 0x30
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9308      	str	r3, [sp, #32]
 8004ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ef4:	461f      	mov	r7, r3
 8004ef6:	220a      	movs	r2, #10
 8004ef8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004efa:	7805      	ldrb	r5, [r0, #0]
 8004efc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004f00:	b2d9      	uxtb	r1, r3
 8004f02:	2909      	cmp	r1, #9
 8004f04:	d928      	bls.n	8004f58 <_strtod_l+0x1a8>
 8004f06:	494e      	ldr	r1, [pc, #312]	@ (8005040 <_strtod_l+0x290>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f001 faa6 	bl	800645a <strncmp>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d032      	beq.n	8004f78 <_strtod_l+0x1c8>
 8004f12:	2000      	movs	r0, #0
 8004f14:	462a      	mov	r2, r5
 8004f16:	4681      	mov	r9, r0
 8004f18:	463d      	mov	r5, r7
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2a65      	cmp	r2, #101	@ 0x65
 8004f1e:	d001      	beq.n	8004f24 <_strtod_l+0x174>
 8004f20:	2a45      	cmp	r2, #69	@ 0x45
 8004f22:	d114      	bne.n	8004f4e <_strtod_l+0x19e>
 8004f24:	b91d      	cbnz	r5, 8004f2e <_strtod_l+0x17e>
 8004f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f28:	4302      	orrs	r2, r0
 8004f2a:	d095      	beq.n	8004e58 <_strtod_l+0xa8>
 8004f2c:	2500      	movs	r5, #0
 8004f2e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004f30:	1c62      	adds	r2, r4, #1
 8004f32:	9219      	str	r2, [sp, #100]	@ 0x64
 8004f34:	7862      	ldrb	r2, [r4, #1]
 8004f36:	2a2b      	cmp	r2, #43	@ 0x2b
 8004f38:	d077      	beq.n	800502a <_strtod_l+0x27a>
 8004f3a:	2a2d      	cmp	r2, #45	@ 0x2d
 8004f3c:	d07b      	beq.n	8005036 <_strtod_l+0x286>
 8004f3e:	f04f 0c00 	mov.w	ip, #0
 8004f42:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004f46:	2909      	cmp	r1, #9
 8004f48:	f240 8082 	bls.w	8005050 <_strtod_l+0x2a0>
 8004f4c:	9419      	str	r4, [sp, #100]	@ 0x64
 8004f4e:	f04f 0800 	mov.w	r8, #0
 8004f52:	e0a2      	b.n	800509a <_strtod_l+0x2ea>
 8004f54:	2300      	movs	r3, #0
 8004f56:	e7c7      	b.n	8004ee8 <_strtod_l+0x138>
 8004f58:	2f08      	cmp	r7, #8
 8004f5a:	bfd5      	itete	le
 8004f5c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004f5e:	9908      	ldrgt	r1, [sp, #32]
 8004f60:	fb02 3301 	mlale	r3, r2, r1, r3
 8004f64:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004f68:	f100 0001 	add.w	r0, r0, #1
 8004f6c:	bfd4      	ite	le
 8004f6e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004f70:	9308      	strgt	r3, [sp, #32]
 8004f72:	3701      	adds	r7, #1
 8004f74:	9019      	str	r0, [sp, #100]	@ 0x64
 8004f76:	e7bf      	b.n	8004ef8 <_strtod_l+0x148>
 8004f78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	9219      	str	r2, [sp, #100]	@ 0x64
 8004f7e:	785a      	ldrb	r2, [r3, #1]
 8004f80:	b37f      	cbz	r7, 8004fe2 <_strtod_l+0x232>
 8004f82:	4681      	mov	r9, r0
 8004f84:	463d      	mov	r5, r7
 8004f86:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004f8a:	2b09      	cmp	r3, #9
 8004f8c:	d912      	bls.n	8004fb4 <_strtod_l+0x204>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e7c4      	b.n	8004f1c <_strtod_l+0x16c>
 8004f92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	9219      	str	r2, [sp, #100]	@ 0x64
 8004f98:	785a      	ldrb	r2, [r3, #1]
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	2a30      	cmp	r2, #48	@ 0x30
 8004f9e:	d0f8      	beq.n	8004f92 <_strtod_l+0x1e2>
 8004fa0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	f200 84d3 	bhi.w	8005950 <_strtod_l+0xba0>
 8004faa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004fac:	930c      	str	r3, [sp, #48]	@ 0x30
 8004fae:	4681      	mov	r9, r0
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	3a30      	subs	r2, #48	@ 0x30
 8004fb6:	f100 0301 	add.w	r3, r0, #1
 8004fba:	d02a      	beq.n	8005012 <_strtod_l+0x262>
 8004fbc:	4499      	add	r9, r3
 8004fbe:	eb00 0c05 	add.w	ip, r0, r5
 8004fc2:	462b      	mov	r3, r5
 8004fc4:	210a      	movs	r1, #10
 8004fc6:	4563      	cmp	r3, ip
 8004fc8:	d10d      	bne.n	8004fe6 <_strtod_l+0x236>
 8004fca:	1c69      	adds	r1, r5, #1
 8004fcc:	4401      	add	r1, r0
 8004fce:	4428      	add	r0, r5
 8004fd0:	2808      	cmp	r0, #8
 8004fd2:	dc16      	bgt.n	8005002 <_strtod_l+0x252>
 8004fd4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004fd6:	230a      	movs	r3, #10
 8004fd8:	fb03 2300 	mla	r3, r3, r0, r2
 8004fdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e018      	b.n	8005014 <_strtod_l+0x264>
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	e7da      	b.n	8004f9c <_strtod_l+0x1ec>
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	f103 0301 	add.w	r3, r3, #1
 8004fec:	dc03      	bgt.n	8004ff6 <_strtod_l+0x246>
 8004fee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004ff0:	434e      	muls	r6, r1
 8004ff2:	960a      	str	r6, [sp, #40]	@ 0x28
 8004ff4:	e7e7      	b.n	8004fc6 <_strtod_l+0x216>
 8004ff6:	2b10      	cmp	r3, #16
 8004ff8:	bfde      	ittt	le
 8004ffa:	9e08      	ldrle	r6, [sp, #32]
 8004ffc:	434e      	mulle	r6, r1
 8004ffe:	9608      	strle	r6, [sp, #32]
 8005000:	e7e1      	b.n	8004fc6 <_strtod_l+0x216>
 8005002:	280f      	cmp	r0, #15
 8005004:	dceb      	bgt.n	8004fde <_strtod_l+0x22e>
 8005006:	9808      	ldr	r0, [sp, #32]
 8005008:	230a      	movs	r3, #10
 800500a:	fb03 2300 	mla	r3, r3, r0, r2
 800500e:	9308      	str	r3, [sp, #32]
 8005010:	e7e5      	b.n	8004fde <_strtod_l+0x22e>
 8005012:	4629      	mov	r1, r5
 8005014:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005016:	1c50      	adds	r0, r2, #1
 8005018:	9019      	str	r0, [sp, #100]	@ 0x64
 800501a:	7852      	ldrb	r2, [r2, #1]
 800501c:	4618      	mov	r0, r3
 800501e:	460d      	mov	r5, r1
 8005020:	e7b1      	b.n	8004f86 <_strtod_l+0x1d6>
 8005022:	f04f 0900 	mov.w	r9, #0
 8005026:	2301      	movs	r3, #1
 8005028:	e77d      	b.n	8004f26 <_strtod_l+0x176>
 800502a:	f04f 0c00 	mov.w	ip, #0
 800502e:	1ca2      	adds	r2, r4, #2
 8005030:	9219      	str	r2, [sp, #100]	@ 0x64
 8005032:	78a2      	ldrb	r2, [r4, #2]
 8005034:	e785      	b.n	8004f42 <_strtod_l+0x192>
 8005036:	f04f 0c01 	mov.w	ip, #1
 800503a:	e7f8      	b.n	800502e <_strtod_l+0x27e>
 800503c:	08008b14 	.word	0x08008b14
 8005040:	08008afc 	.word	0x08008afc
 8005044:	7ff00000 	.word	0x7ff00000
 8005048:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800504a:	1c51      	adds	r1, r2, #1
 800504c:	9119      	str	r1, [sp, #100]	@ 0x64
 800504e:	7852      	ldrb	r2, [r2, #1]
 8005050:	2a30      	cmp	r2, #48	@ 0x30
 8005052:	d0f9      	beq.n	8005048 <_strtod_l+0x298>
 8005054:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005058:	2908      	cmp	r1, #8
 800505a:	f63f af78 	bhi.w	8004f4e <_strtod_l+0x19e>
 800505e:	3a30      	subs	r2, #48	@ 0x30
 8005060:	920e      	str	r2, [sp, #56]	@ 0x38
 8005062:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005064:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005066:	f04f 080a 	mov.w	r8, #10
 800506a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800506c:	1c56      	adds	r6, r2, #1
 800506e:	9619      	str	r6, [sp, #100]	@ 0x64
 8005070:	7852      	ldrb	r2, [r2, #1]
 8005072:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005076:	f1be 0f09 	cmp.w	lr, #9
 800507a:	d939      	bls.n	80050f0 <_strtod_l+0x340>
 800507c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800507e:	1a76      	subs	r6, r6, r1
 8005080:	2e08      	cmp	r6, #8
 8005082:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005086:	dc03      	bgt.n	8005090 <_strtod_l+0x2e0>
 8005088:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800508a:	4588      	cmp	r8, r1
 800508c:	bfa8      	it	ge
 800508e:	4688      	movge	r8, r1
 8005090:	f1bc 0f00 	cmp.w	ip, #0
 8005094:	d001      	beq.n	800509a <_strtod_l+0x2ea>
 8005096:	f1c8 0800 	rsb	r8, r8, #0
 800509a:	2d00      	cmp	r5, #0
 800509c:	d14e      	bne.n	800513c <_strtod_l+0x38c>
 800509e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80050a0:	4308      	orrs	r0, r1
 80050a2:	f47f aebe 	bne.w	8004e22 <_strtod_l+0x72>
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f47f aed6 	bne.w	8004e58 <_strtod_l+0xa8>
 80050ac:	2a69      	cmp	r2, #105	@ 0x69
 80050ae:	d028      	beq.n	8005102 <_strtod_l+0x352>
 80050b0:	dc25      	bgt.n	80050fe <_strtod_l+0x34e>
 80050b2:	2a49      	cmp	r2, #73	@ 0x49
 80050b4:	d025      	beq.n	8005102 <_strtod_l+0x352>
 80050b6:	2a4e      	cmp	r2, #78	@ 0x4e
 80050b8:	f47f aece 	bne.w	8004e58 <_strtod_l+0xa8>
 80050bc:	499b      	ldr	r1, [pc, #620]	@ (800532c <_strtod_l+0x57c>)
 80050be:	a819      	add	r0, sp, #100	@ 0x64
 80050c0:	f002 fb9e 	bl	8007800 <__match>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	f43f aec7 	beq.w	8004e58 <_strtod_l+0xa8>
 80050ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b28      	cmp	r3, #40	@ 0x28
 80050d0:	d12e      	bne.n	8005130 <_strtod_l+0x380>
 80050d2:	4997      	ldr	r1, [pc, #604]	@ (8005330 <_strtod_l+0x580>)
 80050d4:	aa1c      	add	r2, sp, #112	@ 0x70
 80050d6:	a819      	add	r0, sp, #100	@ 0x64
 80050d8:	f002 fba6 	bl	8007828 <__hexnan>
 80050dc:	2805      	cmp	r0, #5
 80050de:	d127      	bne.n	8005130 <_strtod_l+0x380>
 80050e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80050e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80050e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80050ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80050ee:	e698      	b.n	8004e22 <_strtod_l+0x72>
 80050f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80050f2:	fb08 2101 	mla	r1, r8, r1, r2
 80050f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80050fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80050fc:	e7b5      	b.n	800506a <_strtod_l+0x2ba>
 80050fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8005100:	e7da      	b.n	80050b8 <_strtod_l+0x308>
 8005102:	498c      	ldr	r1, [pc, #560]	@ (8005334 <_strtod_l+0x584>)
 8005104:	a819      	add	r0, sp, #100	@ 0x64
 8005106:	f002 fb7b 	bl	8007800 <__match>
 800510a:	2800      	cmp	r0, #0
 800510c:	f43f aea4 	beq.w	8004e58 <_strtod_l+0xa8>
 8005110:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005112:	4989      	ldr	r1, [pc, #548]	@ (8005338 <_strtod_l+0x588>)
 8005114:	3b01      	subs	r3, #1
 8005116:	a819      	add	r0, sp, #100	@ 0x64
 8005118:	9319      	str	r3, [sp, #100]	@ 0x64
 800511a:	f002 fb71 	bl	8007800 <__match>
 800511e:	b910      	cbnz	r0, 8005126 <_strtod_l+0x376>
 8005120:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005122:	3301      	adds	r3, #1
 8005124:	9319      	str	r3, [sp, #100]	@ 0x64
 8005126:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8005348 <_strtod_l+0x598>
 800512a:	f04f 0a00 	mov.w	sl, #0
 800512e:	e678      	b.n	8004e22 <_strtod_l+0x72>
 8005130:	4882      	ldr	r0, [pc, #520]	@ (800533c <_strtod_l+0x58c>)
 8005132:	f001 fa3d 	bl	80065b0 <nan>
 8005136:	ec5b ab10 	vmov	sl, fp, d0
 800513a:	e672      	b.n	8004e22 <_strtod_l+0x72>
 800513c:	eba8 0309 	sub.w	r3, r8, r9
 8005140:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005142:	9309      	str	r3, [sp, #36]	@ 0x24
 8005144:	2f00      	cmp	r7, #0
 8005146:	bf08      	it	eq
 8005148:	462f      	moveq	r7, r5
 800514a:	2d10      	cmp	r5, #16
 800514c:	462c      	mov	r4, r5
 800514e:	bfa8      	it	ge
 8005150:	2410      	movge	r4, #16
 8005152:	f7fb fa07 	bl	8000564 <__aeabi_ui2d>
 8005156:	2d09      	cmp	r5, #9
 8005158:	4682      	mov	sl, r0
 800515a:	468b      	mov	fp, r1
 800515c:	dc13      	bgt.n	8005186 <_strtod_l+0x3d6>
 800515e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005160:	2b00      	cmp	r3, #0
 8005162:	f43f ae5e 	beq.w	8004e22 <_strtod_l+0x72>
 8005166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005168:	dd78      	ble.n	800525c <_strtod_l+0x4ac>
 800516a:	2b16      	cmp	r3, #22
 800516c:	dc5f      	bgt.n	800522e <_strtod_l+0x47e>
 800516e:	4974      	ldr	r1, [pc, #464]	@ (8005340 <_strtod_l+0x590>)
 8005170:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005174:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005178:	4652      	mov	r2, sl
 800517a:	465b      	mov	r3, fp
 800517c:	f7fb fa6c 	bl	8000658 <__aeabi_dmul>
 8005180:	4682      	mov	sl, r0
 8005182:	468b      	mov	fp, r1
 8005184:	e64d      	b.n	8004e22 <_strtod_l+0x72>
 8005186:	4b6e      	ldr	r3, [pc, #440]	@ (8005340 <_strtod_l+0x590>)
 8005188:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800518c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005190:	f7fb fa62 	bl	8000658 <__aeabi_dmul>
 8005194:	4682      	mov	sl, r0
 8005196:	9808      	ldr	r0, [sp, #32]
 8005198:	468b      	mov	fp, r1
 800519a:	f7fb f9e3 	bl	8000564 <__aeabi_ui2d>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4650      	mov	r0, sl
 80051a4:	4659      	mov	r1, fp
 80051a6:	f7fb f8a1 	bl	80002ec <__adddf3>
 80051aa:	2d0f      	cmp	r5, #15
 80051ac:	4682      	mov	sl, r0
 80051ae:	468b      	mov	fp, r1
 80051b0:	ddd5      	ble.n	800515e <_strtod_l+0x3ae>
 80051b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051b4:	1b2c      	subs	r4, r5, r4
 80051b6:	441c      	add	r4, r3
 80051b8:	2c00      	cmp	r4, #0
 80051ba:	f340 8096 	ble.w	80052ea <_strtod_l+0x53a>
 80051be:	f014 030f 	ands.w	r3, r4, #15
 80051c2:	d00a      	beq.n	80051da <_strtod_l+0x42a>
 80051c4:	495e      	ldr	r1, [pc, #376]	@ (8005340 <_strtod_l+0x590>)
 80051c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80051ca:	4652      	mov	r2, sl
 80051cc:	465b      	mov	r3, fp
 80051ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051d2:	f7fb fa41 	bl	8000658 <__aeabi_dmul>
 80051d6:	4682      	mov	sl, r0
 80051d8:	468b      	mov	fp, r1
 80051da:	f034 040f 	bics.w	r4, r4, #15
 80051de:	d073      	beq.n	80052c8 <_strtod_l+0x518>
 80051e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80051e4:	dd48      	ble.n	8005278 <_strtod_l+0x4c8>
 80051e6:	2400      	movs	r4, #0
 80051e8:	46a0      	mov	r8, r4
 80051ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80051ec:	46a1      	mov	r9, r4
 80051ee:	9a05      	ldr	r2, [sp, #20]
 80051f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8005348 <_strtod_l+0x598>
 80051f4:	2322      	movs	r3, #34	@ 0x22
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	f04f 0a00 	mov.w	sl, #0
 80051fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f43f ae0f 	beq.w	8004e22 <_strtod_l+0x72>
 8005204:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005206:	9805      	ldr	r0, [sp, #20]
 8005208:	f002 fbfc 	bl	8007a04 <_Bfree>
 800520c:	9805      	ldr	r0, [sp, #20]
 800520e:	4649      	mov	r1, r9
 8005210:	f002 fbf8 	bl	8007a04 <_Bfree>
 8005214:	9805      	ldr	r0, [sp, #20]
 8005216:	4641      	mov	r1, r8
 8005218:	f002 fbf4 	bl	8007a04 <_Bfree>
 800521c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800521e:	9805      	ldr	r0, [sp, #20]
 8005220:	f002 fbf0 	bl	8007a04 <_Bfree>
 8005224:	9805      	ldr	r0, [sp, #20]
 8005226:	4621      	mov	r1, r4
 8005228:	f002 fbec 	bl	8007a04 <_Bfree>
 800522c:	e5f9      	b.n	8004e22 <_strtod_l+0x72>
 800522e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005230:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005234:	4293      	cmp	r3, r2
 8005236:	dbbc      	blt.n	80051b2 <_strtod_l+0x402>
 8005238:	4c41      	ldr	r4, [pc, #260]	@ (8005340 <_strtod_l+0x590>)
 800523a:	f1c5 050f 	rsb	r5, r5, #15
 800523e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005242:	4652      	mov	r2, sl
 8005244:	465b      	mov	r3, fp
 8005246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800524a:	f7fb fa05 	bl	8000658 <__aeabi_dmul>
 800524e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005250:	1b5d      	subs	r5, r3, r5
 8005252:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005256:	e9d4 2300 	ldrd	r2, r3, [r4]
 800525a:	e78f      	b.n	800517c <_strtod_l+0x3cc>
 800525c:	3316      	adds	r3, #22
 800525e:	dba8      	blt.n	80051b2 <_strtod_l+0x402>
 8005260:	4b37      	ldr	r3, [pc, #220]	@ (8005340 <_strtod_l+0x590>)
 8005262:	eba9 0808 	sub.w	r8, r9, r8
 8005266:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800526a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800526e:	4650      	mov	r0, sl
 8005270:	4659      	mov	r1, fp
 8005272:	f7fb fb1b 	bl	80008ac <__aeabi_ddiv>
 8005276:	e783      	b.n	8005180 <_strtod_l+0x3d0>
 8005278:	4b32      	ldr	r3, [pc, #200]	@ (8005344 <_strtod_l+0x594>)
 800527a:	9308      	str	r3, [sp, #32]
 800527c:	2300      	movs	r3, #0
 800527e:	1124      	asrs	r4, r4, #4
 8005280:	4650      	mov	r0, sl
 8005282:	4659      	mov	r1, fp
 8005284:	461e      	mov	r6, r3
 8005286:	2c01      	cmp	r4, #1
 8005288:	dc21      	bgt.n	80052ce <_strtod_l+0x51e>
 800528a:	b10b      	cbz	r3, 8005290 <_strtod_l+0x4e0>
 800528c:	4682      	mov	sl, r0
 800528e:	468b      	mov	fp, r1
 8005290:	492c      	ldr	r1, [pc, #176]	@ (8005344 <_strtod_l+0x594>)
 8005292:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005296:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800529a:	4652      	mov	r2, sl
 800529c:	465b      	mov	r3, fp
 800529e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052a2:	f7fb f9d9 	bl	8000658 <__aeabi_dmul>
 80052a6:	4b28      	ldr	r3, [pc, #160]	@ (8005348 <_strtod_l+0x598>)
 80052a8:	460a      	mov	r2, r1
 80052aa:	400b      	ands	r3, r1
 80052ac:	4927      	ldr	r1, [pc, #156]	@ (800534c <_strtod_l+0x59c>)
 80052ae:	428b      	cmp	r3, r1
 80052b0:	4682      	mov	sl, r0
 80052b2:	d898      	bhi.n	80051e6 <_strtod_l+0x436>
 80052b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80052b8:	428b      	cmp	r3, r1
 80052ba:	bf86      	itte	hi
 80052bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8005350 <_strtod_l+0x5a0>
 80052c0:	f04f 3aff 	movhi.w	sl, #4294967295
 80052c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80052c8:	2300      	movs	r3, #0
 80052ca:	9308      	str	r3, [sp, #32]
 80052cc:	e07a      	b.n	80053c4 <_strtod_l+0x614>
 80052ce:	07e2      	lsls	r2, r4, #31
 80052d0:	d505      	bpl.n	80052de <_strtod_l+0x52e>
 80052d2:	9b08      	ldr	r3, [sp, #32]
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f7fb f9be 	bl	8000658 <__aeabi_dmul>
 80052dc:	2301      	movs	r3, #1
 80052de:	9a08      	ldr	r2, [sp, #32]
 80052e0:	3208      	adds	r2, #8
 80052e2:	3601      	adds	r6, #1
 80052e4:	1064      	asrs	r4, r4, #1
 80052e6:	9208      	str	r2, [sp, #32]
 80052e8:	e7cd      	b.n	8005286 <_strtod_l+0x4d6>
 80052ea:	d0ed      	beq.n	80052c8 <_strtod_l+0x518>
 80052ec:	4264      	negs	r4, r4
 80052ee:	f014 020f 	ands.w	r2, r4, #15
 80052f2:	d00a      	beq.n	800530a <_strtod_l+0x55a>
 80052f4:	4b12      	ldr	r3, [pc, #72]	@ (8005340 <_strtod_l+0x590>)
 80052f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052fa:	4650      	mov	r0, sl
 80052fc:	4659      	mov	r1, fp
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	f7fb fad3 	bl	80008ac <__aeabi_ddiv>
 8005306:	4682      	mov	sl, r0
 8005308:	468b      	mov	fp, r1
 800530a:	1124      	asrs	r4, r4, #4
 800530c:	d0dc      	beq.n	80052c8 <_strtod_l+0x518>
 800530e:	2c1f      	cmp	r4, #31
 8005310:	dd20      	ble.n	8005354 <_strtod_l+0x5a4>
 8005312:	2400      	movs	r4, #0
 8005314:	46a0      	mov	r8, r4
 8005316:	940a      	str	r4, [sp, #40]	@ 0x28
 8005318:	46a1      	mov	r9, r4
 800531a:	9a05      	ldr	r2, [sp, #20]
 800531c:	2322      	movs	r3, #34	@ 0x22
 800531e:	f04f 0a00 	mov.w	sl, #0
 8005322:	f04f 0b00 	mov.w	fp, #0
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	e768      	b.n	80051fc <_strtod_l+0x44c>
 800532a:	bf00      	nop
 800532c:	08008c5e 	.word	0x08008c5e
 8005330:	08008b00 	.word	0x08008b00
 8005334:	08008c56 	.word	0x08008c56
 8005338:	08008c90 	.word	0x08008c90
 800533c:	08008f0b 	.word	0x08008f0b
 8005340:	08008e08 	.word	0x08008e08
 8005344:	08008de0 	.word	0x08008de0
 8005348:	7ff00000 	.word	0x7ff00000
 800534c:	7ca00000 	.word	0x7ca00000
 8005350:	7fefffff 	.word	0x7fefffff
 8005354:	f014 0310 	ands.w	r3, r4, #16
 8005358:	bf18      	it	ne
 800535a:	236a      	movne	r3, #106	@ 0x6a
 800535c:	4ea9      	ldr	r6, [pc, #676]	@ (8005604 <_strtod_l+0x854>)
 800535e:	9308      	str	r3, [sp, #32]
 8005360:	4650      	mov	r0, sl
 8005362:	4659      	mov	r1, fp
 8005364:	2300      	movs	r3, #0
 8005366:	07e2      	lsls	r2, r4, #31
 8005368:	d504      	bpl.n	8005374 <_strtod_l+0x5c4>
 800536a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800536e:	f7fb f973 	bl	8000658 <__aeabi_dmul>
 8005372:	2301      	movs	r3, #1
 8005374:	1064      	asrs	r4, r4, #1
 8005376:	f106 0608 	add.w	r6, r6, #8
 800537a:	d1f4      	bne.n	8005366 <_strtod_l+0x5b6>
 800537c:	b10b      	cbz	r3, 8005382 <_strtod_l+0x5d2>
 800537e:	4682      	mov	sl, r0
 8005380:	468b      	mov	fp, r1
 8005382:	9b08      	ldr	r3, [sp, #32]
 8005384:	b1b3      	cbz	r3, 80053b4 <_strtod_l+0x604>
 8005386:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800538a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800538e:	2b00      	cmp	r3, #0
 8005390:	4659      	mov	r1, fp
 8005392:	dd0f      	ble.n	80053b4 <_strtod_l+0x604>
 8005394:	2b1f      	cmp	r3, #31
 8005396:	dd55      	ble.n	8005444 <_strtod_l+0x694>
 8005398:	2b34      	cmp	r3, #52	@ 0x34
 800539a:	bfde      	ittt	le
 800539c:	f04f 33ff 	movle.w	r3, #4294967295
 80053a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80053a4:	4093      	lslle	r3, r2
 80053a6:	f04f 0a00 	mov.w	sl, #0
 80053aa:	bfcc      	ite	gt
 80053ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80053b0:	ea03 0b01 	andle.w	fp, r3, r1
 80053b4:	2200      	movs	r2, #0
 80053b6:	2300      	movs	r3, #0
 80053b8:	4650      	mov	r0, sl
 80053ba:	4659      	mov	r1, fp
 80053bc:	f7fb fbb4 	bl	8000b28 <__aeabi_dcmpeq>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d1a6      	bne.n	8005312 <_strtod_l+0x562>
 80053c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80053ca:	9805      	ldr	r0, [sp, #20]
 80053cc:	462b      	mov	r3, r5
 80053ce:	463a      	mov	r2, r7
 80053d0:	f002 fb80 	bl	8007ad4 <__s2b>
 80053d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80053d6:	2800      	cmp	r0, #0
 80053d8:	f43f af05 	beq.w	80051e6 <_strtod_l+0x436>
 80053dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053de:	2a00      	cmp	r2, #0
 80053e0:	eba9 0308 	sub.w	r3, r9, r8
 80053e4:	bfa8      	it	ge
 80053e6:	2300      	movge	r3, #0
 80053e8:	9312      	str	r3, [sp, #72]	@ 0x48
 80053ea:	2400      	movs	r4, #0
 80053ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80053f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80053f2:	46a0      	mov	r8, r4
 80053f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053f6:	9805      	ldr	r0, [sp, #20]
 80053f8:	6859      	ldr	r1, [r3, #4]
 80053fa:	f002 fac3 	bl	8007984 <_Balloc>
 80053fe:	4681      	mov	r9, r0
 8005400:	2800      	cmp	r0, #0
 8005402:	f43f aef4 	beq.w	80051ee <_strtod_l+0x43e>
 8005406:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	3202      	adds	r2, #2
 800540c:	f103 010c 	add.w	r1, r3, #12
 8005410:	0092      	lsls	r2, r2, #2
 8005412:	300c      	adds	r0, #12
 8005414:	f001 f8bb 	bl	800658e <memcpy>
 8005418:	ec4b ab10 	vmov	d0, sl, fp
 800541c:	9805      	ldr	r0, [sp, #20]
 800541e:	aa1c      	add	r2, sp, #112	@ 0x70
 8005420:	a91b      	add	r1, sp, #108	@ 0x6c
 8005422:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005426:	f002 fe91 	bl	800814c <__d2b>
 800542a:	901a      	str	r0, [sp, #104]	@ 0x68
 800542c:	2800      	cmp	r0, #0
 800542e:	f43f aede 	beq.w	80051ee <_strtod_l+0x43e>
 8005432:	9805      	ldr	r0, [sp, #20]
 8005434:	2101      	movs	r1, #1
 8005436:	f002 fbe3 	bl	8007c00 <__i2b>
 800543a:	4680      	mov	r8, r0
 800543c:	b948      	cbnz	r0, 8005452 <_strtod_l+0x6a2>
 800543e:	f04f 0800 	mov.w	r8, #0
 8005442:	e6d4      	b.n	80051ee <_strtod_l+0x43e>
 8005444:	f04f 32ff 	mov.w	r2, #4294967295
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	ea03 0a0a 	and.w	sl, r3, sl
 8005450:	e7b0      	b.n	80053b4 <_strtod_l+0x604>
 8005452:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005454:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005456:	2d00      	cmp	r5, #0
 8005458:	bfab      	itete	ge
 800545a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800545c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800545e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005460:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005462:	bfac      	ite	ge
 8005464:	18ef      	addge	r7, r5, r3
 8005466:	1b5e      	sublt	r6, r3, r5
 8005468:	9b08      	ldr	r3, [sp, #32]
 800546a:	1aed      	subs	r5, r5, r3
 800546c:	4415      	add	r5, r2
 800546e:	4b66      	ldr	r3, [pc, #408]	@ (8005608 <_strtod_l+0x858>)
 8005470:	3d01      	subs	r5, #1
 8005472:	429d      	cmp	r5, r3
 8005474:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005478:	da50      	bge.n	800551c <_strtod_l+0x76c>
 800547a:	1b5b      	subs	r3, r3, r5
 800547c:	2b1f      	cmp	r3, #31
 800547e:	eba2 0203 	sub.w	r2, r2, r3
 8005482:	f04f 0101 	mov.w	r1, #1
 8005486:	dc3d      	bgt.n	8005504 <_strtod_l+0x754>
 8005488:	fa01 f303 	lsl.w	r3, r1, r3
 800548c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800548e:	2300      	movs	r3, #0
 8005490:	9310      	str	r3, [sp, #64]	@ 0x40
 8005492:	18bd      	adds	r5, r7, r2
 8005494:	9b08      	ldr	r3, [sp, #32]
 8005496:	42af      	cmp	r7, r5
 8005498:	4416      	add	r6, r2
 800549a:	441e      	add	r6, r3
 800549c:	463b      	mov	r3, r7
 800549e:	bfa8      	it	ge
 80054a0:	462b      	movge	r3, r5
 80054a2:	42b3      	cmp	r3, r6
 80054a4:	bfa8      	it	ge
 80054a6:	4633      	movge	r3, r6
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	bfc2      	ittt	gt
 80054ac:	1aed      	subgt	r5, r5, r3
 80054ae:	1af6      	subgt	r6, r6, r3
 80054b0:	1aff      	subgt	r7, r7, r3
 80054b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	dd16      	ble.n	80054e6 <_strtod_l+0x736>
 80054b8:	4641      	mov	r1, r8
 80054ba:	9805      	ldr	r0, [sp, #20]
 80054bc:	461a      	mov	r2, r3
 80054be:	f002 fc5f 	bl	8007d80 <__pow5mult>
 80054c2:	4680      	mov	r8, r0
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d0ba      	beq.n	800543e <_strtod_l+0x68e>
 80054c8:	4601      	mov	r1, r0
 80054ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80054cc:	9805      	ldr	r0, [sp, #20]
 80054ce:	f002 fbad 	bl	8007c2c <__multiply>
 80054d2:	900e      	str	r0, [sp, #56]	@ 0x38
 80054d4:	2800      	cmp	r0, #0
 80054d6:	f43f ae8a 	beq.w	80051ee <_strtod_l+0x43e>
 80054da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80054dc:	9805      	ldr	r0, [sp, #20]
 80054de:	f002 fa91 	bl	8007a04 <_Bfree>
 80054e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80054e6:	2d00      	cmp	r5, #0
 80054e8:	dc1d      	bgt.n	8005526 <_strtod_l+0x776>
 80054ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	dd23      	ble.n	8005538 <_strtod_l+0x788>
 80054f0:	4649      	mov	r1, r9
 80054f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80054f4:	9805      	ldr	r0, [sp, #20]
 80054f6:	f002 fc43 	bl	8007d80 <__pow5mult>
 80054fa:	4681      	mov	r9, r0
 80054fc:	b9e0      	cbnz	r0, 8005538 <_strtod_l+0x788>
 80054fe:	f04f 0900 	mov.w	r9, #0
 8005502:	e674      	b.n	80051ee <_strtod_l+0x43e>
 8005504:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005508:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800550c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005510:	35e2      	adds	r5, #226	@ 0xe2
 8005512:	fa01 f305 	lsl.w	r3, r1, r5
 8005516:	9310      	str	r3, [sp, #64]	@ 0x40
 8005518:	9113      	str	r1, [sp, #76]	@ 0x4c
 800551a:	e7ba      	b.n	8005492 <_strtod_l+0x6e2>
 800551c:	2300      	movs	r3, #0
 800551e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005520:	2301      	movs	r3, #1
 8005522:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005524:	e7b5      	b.n	8005492 <_strtod_l+0x6e2>
 8005526:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005528:	9805      	ldr	r0, [sp, #20]
 800552a:	462a      	mov	r2, r5
 800552c:	f002 fc82 	bl	8007e34 <__lshift>
 8005530:	901a      	str	r0, [sp, #104]	@ 0x68
 8005532:	2800      	cmp	r0, #0
 8005534:	d1d9      	bne.n	80054ea <_strtod_l+0x73a>
 8005536:	e65a      	b.n	80051ee <_strtod_l+0x43e>
 8005538:	2e00      	cmp	r6, #0
 800553a:	dd07      	ble.n	800554c <_strtod_l+0x79c>
 800553c:	4649      	mov	r1, r9
 800553e:	9805      	ldr	r0, [sp, #20]
 8005540:	4632      	mov	r2, r6
 8005542:	f002 fc77 	bl	8007e34 <__lshift>
 8005546:	4681      	mov	r9, r0
 8005548:	2800      	cmp	r0, #0
 800554a:	d0d8      	beq.n	80054fe <_strtod_l+0x74e>
 800554c:	2f00      	cmp	r7, #0
 800554e:	dd08      	ble.n	8005562 <_strtod_l+0x7b2>
 8005550:	4641      	mov	r1, r8
 8005552:	9805      	ldr	r0, [sp, #20]
 8005554:	463a      	mov	r2, r7
 8005556:	f002 fc6d 	bl	8007e34 <__lshift>
 800555a:	4680      	mov	r8, r0
 800555c:	2800      	cmp	r0, #0
 800555e:	f43f ae46 	beq.w	80051ee <_strtod_l+0x43e>
 8005562:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005564:	9805      	ldr	r0, [sp, #20]
 8005566:	464a      	mov	r2, r9
 8005568:	f002 fcec 	bl	8007f44 <__mdiff>
 800556c:	4604      	mov	r4, r0
 800556e:	2800      	cmp	r0, #0
 8005570:	f43f ae3d 	beq.w	80051ee <_strtod_l+0x43e>
 8005574:	68c3      	ldr	r3, [r0, #12]
 8005576:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005578:	2300      	movs	r3, #0
 800557a:	60c3      	str	r3, [r0, #12]
 800557c:	4641      	mov	r1, r8
 800557e:	f002 fcc5 	bl	8007f0c <__mcmp>
 8005582:	2800      	cmp	r0, #0
 8005584:	da46      	bge.n	8005614 <_strtod_l+0x864>
 8005586:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005588:	ea53 030a 	orrs.w	r3, r3, sl
 800558c:	d16c      	bne.n	8005668 <_strtod_l+0x8b8>
 800558e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005592:	2b00      	cmp	r3, #0
 8005594:	d168      	bne.n	8005668 <_strtod_l+0x8b8>
 8005596:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800559a:	0d1b      	lsrs	r3, r3, #20
 800559c:	051b      	lsls	r3, r3, #20
 800559e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80055a2:	d961      	bls.n	8005668 <_strtod_l+0x8b8>
 80055a4:	6963      	ldr	r3, [r4, #20]
 80055a6:	b913      	cbnz	r3, 80055ae <_strtod_l+0x7fe>
 80055a8:	6923      	ldr	r3, [r4, #16]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	dd5c      	ble.n	8005668 <_strtod_l+0x8b8>
 80055ae:	4621      	mov	r1, r4
 80055b0:	2201      	movs	r2, #1
 80055b2:	9805      	ldr	r0, [sp, #20]
 80055b4:	f002 fc3e 	bl	8007e34 <__lshift>
 80055b8:	4641      	mov	r1, r8
 80055ba:	4604      	mov	r4, r0
 80055bc:	f002 fca6 	bl	8007f0c <__mcmp>
 80055c0:	2800      	cmp	r0, #0
 80055c2:	dd51      	ble.n	8005668 <_strtod_l+0x8b8>
 80055c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80055c8:	9a08      	ldr	r2, [sp, #32]
 80055ca:	0d1b      	lsrs	r3, r3, #20
 80055cc:	051b      	lsls	r3, r3, #20
 80055ce:	2a00      	cmp	r2, #0
 80055d0:	d06b      	beq.n	80056aa <_strtod_l+0x8fa>
 80055d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80055d6:	d868      	bhi.n	80056aa <_strtod_l+0x8fa>
 80055d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80055dc:	f67f ae9d 	bls.w	800531a <_strtod_l+0x56a>
 80055e0:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <_strtod_l+0x85c>)
 80055e2:	4650      	mov	r0, sl
 80055e4:	4659      	mov	r1, fp
 80055e6:	2200      	movs	r2, #0
 80055e8:	f7fb f836 	bl	8000658 <__aeabi_dmul>
 80055ec:	4b08      	ldr	r3, [pc, #32]	@ (8005610 <_strtod_l+0x860>)
 80055ee:	400b      	ands	r3, r1
 80055f0:	4682      	mov	sl, r0
 80055f2:	468b      	mov	fp, r1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f47f ae05 	bne.w	8005204 <_strtod_l+0x454>
 80055fa:	9a05      	ldr	r2, [sp, #20]
 80055fc:	2322      	movs	r3, #34	@ 0x22
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	e600      	b.n	8005204 <_strtod_l+0x454>
 8005602:	bf00      	nop
 8005604:	08008b28 	.word	0x08008b28
 8005608:	fffffc02 	.word	0xfffffc02
 800560c:	39500000 	.word	0x39500000
 8005610:	7ff00000 	.word	0x7ff00000
 8005614:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005618:	d165      	bne.n	80056e6 <_strtod_l+0x936>
 800561a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800561c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005620:	b35a      	cbz	r2, 800567a <_strtod_l+0x8ca>
 8005622:	4a9f      	ldr	r2, [pc, #636]	@ (80058a0 <_strtod_l+0xaf0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d12b      	bne.n	8005680 <_strtod_l+0x8d0>
 8005628:	9b08      	ldr	r3, [sp, #32]
 800562a:	4651      	mov	r1, sl
 800562c:	b303      	cbz	r3, 8005670 <_strtod_l+0x8c0>
 800562e:	4b9d      	ldr	r3, [pc, #628]	@ (80058a4 <_strtod_l+0xaf4>)
 8005630:	465a      	mov	r2, fp
 8005632:	4013      	ands	r3, r2
 8005634:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005638:	f04f 32ff 	mov.w	r2, #4294967295
 800563c:	d81b      	bhi.n	8005676 <_strtod_l+0x8c6>
 800563e:	0d1b      	lsrs	r3, r3, #20
 8005640:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	4299      	cmp	r1, r3
 800564a:	d119      	bne.n	8005680 <_strtod_l+0x8d0>
 800564c:	4b96      	ldr	r3, [pc, #600]	@ (80058a8 <_strtod_l+0xaf8>)
 800564e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005650:	429a      	cmp	r2, r3
 8005652:	d102      	bne.n	800565a <_strtod_l+0x8aa>
 8005654:	3101      	adds	r1, #1
 8005656:	f43f adca 	beq.w	80051ee <_strtod_l+0x43e>
 800565a:	4b92      	ldr	r3, [pc, #584]	@ (80058a4 <_strtod_l+0xaf4>)
 800565c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800565e:	401a      	ands	r2, r3
 8005660:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005664:	f04f 0a00 	mov.w	sl, #0
 8005668:	9b08      	ldr	r3, [sp, #32]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1b8      	bne.n	80055e0 <_strtod_l+0x830>
 800566e:	e5c9      	b.n	8005204 <_strtod_l+0x454>
 8005670:	f04f 33ff 	mov.w	r3, #4294967295
 8005674:	e7e8      	b.n	8005648 <_strtod_l+0x898>
 8005676:	4613      	mov	r3, r2
 8005678:	e7e6      	b.n	8005648 <_strtod_l+0x898>
 800567a:	ea53 030a 	orrs.w	r3, r3, sl
 800567e:	d0a1      	beq.n	80055c4 <_strtod_l+0x814>
 8005680:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005682:	b1db      	cbz	r3, 80056bc <_strtod_l+0x90c>
 8005684:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005686:	4213      	tst	r3, r2
 8005688:	d0ee      	beq.n	8005668 <_strtod_l+0x8b8>
 800568a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800568c:	9a08      	ldr	r2, [sp, #32]
 800568e:	4650      	mov	r0, sl
 8005690:	4659      	mov	r1, fp
 8005692:	b1bb      	cbz	r3, 80056c4 <_strtod_l+0x914>
 8005694:	f7ff fb6c 	bl	8004d70 <sulp>
 8005698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800569c:	ec53 2b10 	vmov	r2, r3, d0
 80056a0:	f7fa fe24 	bl	80002ec <__adddf3>
 80056a4:	4682      	mov	sl, r0
 80056a6:	468b      	mov	fp, r1
 80056a8:	e7de      	b.n	8005668 <_strtod_l+0x8b8>
 80056aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80056ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80056b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80056b6:	f04f 3aff 	mov.w	sl, #4294967295
 80056ba:	e7d5      	b.n	8005668 <_strtod_l+0x8b8>
 80056bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80056be:	ea13 0f0a 	tst.w	r3, sl
 80056c2:	e7e1      	b.n	8005688 <_strtod_l+0x8d8>
 80056c4:	f7ff fb54 	bl	8004d70 <sulp>
 80056c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056cc:	ec53 2b10 	vmov	r2, r3, d0
 80056d0:	f7fa fe0a 	bl	80002e8 <__aeabi_dsub>
 80056d4:	2200      	movs	r2, #0
 80056d6:	2300      	movs	r3, #0
 80056d8:	4682      	mov	sl, r0
 80056da:	468b      	mov	fp, r1
 80056dc:	f7fb fa24 	bl	8000b28 <__aeabi_dcmpeq>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d0c1      	beq.n	8005668 <_strtod_l+0x8b8>
 80056e4:	e619      	b.n	800531a <_strtod_l+0x56a>
 80056e6:	4641      	mov	r1, r8
 80056e8:	4620      	mov	r0, r4
 80056ea:	f002 fd87 	bl	80081fc <__ratio>
 80056ee:	ec57 6b10 	vmov	r6, r7, d0
 80056f2:	2200      	movs	r2, #0
 80056f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80056f8:	4630      	mov	r0, r6
 80056fa:	4639      	mov	r1, r7
 80056fc:	f7fb fa28 	bl	8000b50 <__aeabi_dcmple>
 8005700:	2800      	cmp	r0, #0
 8005702:	d06f      	beq.n	80057e4 <_strtod_l+0xa34>
 8005704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005706:	2b00      	cmp	r3, #0
 8005708:	d17a      	bne.n	8005800 <_strtod_l+0xa50>
 800570a:	f1ba 0f00 	cmp.w	sl, #0
 800570e:	d158      	bne.n	80057c2 <_strtod_l+0xa12>
 8005710:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005712:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005716:	2b00      	cmp	r3, #0
 8005718:	d15a      	bne.n	80057d0 <_strtod_l+0xa20>
 800571a:	4b64      	ldr	r3, [pc, #400]	@ (80058ac <_strtod_l+0xafc>)
 800571c:	2200      	movs	r2, #0
 800571e:	4630      	mov	r0, r6
 8005720:	4639      	mov	r1, r7
 8005722:	f7fb fa0b 	bl	8000b3c <__aeabi_dcmplt>
 8005726:	2800      	cmp	r0, #0
 8005728:	d159      	bne.n	80057de <_strtod_l+0xa2e>
 800572a:	4630      	mov	r0, r6
 800572c:	4639      	mov	r1, r7
 800572e:	4b60      	ldr	r3, [pc, #384]	@ (80058b0 <_strtod_l+0xb00>)
 8005730:	2200      	movs	r2, #0
 8005732:	f7fa ff91 	bl	8000658 <__aeabi_dmul>
 8005736:	4606      	mov	r6, r0
 8005738:	460f      	mov	r7, r1
 800573a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800573e:	9606      	str	r6, [sp, #24]
 8005740:	9307      	str	r3, [sp, #28]
 8005742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005746:	4d57      	ldr	r5, [pc, #348]	@ (80058a4 <_strtod_l+0xaf4>)
 8005748:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800574c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800574e:	401d      	ands	r5, r3
 8005750:	4b58      	ldr	r3, [pc, #352]	@ (80058b4 <_strtod_l+0xb04>)
 8005752:	429d      	cmp	r5, r3
 8005754:	f040 80b2 	bne.w	80058bc <_strtod_l+0xb0c>
 8005758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800575a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800575e:	ec4b ab10 	vmov	d0, sl, fp
 8005762:	f002 fc83 	bl	800806c <__ulp>
 8005766:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800576a:	ec51 0b10 	vmov	r0, r1, d0
 800576e:	f7fa ff73 	bl	8000658 <__aeabi_dmul>
 8005772:	4652      	mov	r2, sl
 8005774:	465b      	mov	r3, fp
 8005776:	f7fa fdb9 	bl	80002ec <__adddf3>
 800577a:	460b      	mov	r3, r1
 800577c:	4949      	ldr	r1, [pc, #292]	@ (80058a4 <_strtod_l+0xaf4>)
 800577e:	4a4e      	ldr	r2, [pc, #312]	@ (80058b8 <_strtod_l+0xb08>)
 8005780:	4019      	ands	r1, r3
 8005782:	4291      	cmp	r1, r2
 8005784:	4682      	mov	sl, r0
 8005786:	d942      	bls.n	800580e <_strtod_l+0xa5e>
 8005788:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800578a:	4b47      	ldr	r3, [pc, #284]	@ (80058a8 <_strtod_l+0xaf8>)
 800578c:	429a      	cmp	r2, r3
 800578e:	d103      	bne.n	8005798 <_strtod_l+0x9e8>
 8005790:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005792:	3301      	adds	r3, #1
 8005794:	f43f ad2b 	beq.w	80051ee <_strtod_l+0x43e>
 8005798:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80058a8 <_strtod_l+0xaf8>
 800579c:	f04f 3aff 	mov.w	sl, #4294967295
 80057a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80057a2:	9805      	ldr	r0, [sp, #20]
 80057a4:	f002 f92e 	bl	8007a04 <_Bfree>
 80057a8:	9805      	ldr	r0, [sp, #20]
 80057aa:	4649      	mov	r1, r9
 80057ac:	f002 f92a 	bl	8007a04 <_Bfree>
 80057b0:	9805      	ldr	r0, [sp, #20]
 80057b2:	4641      	mov	r1, r8
 80057b4:	f002 f926 	bl	8007a04 <_Bfree>
 80057b8:	9805      	ldr	r0, [sp, #20]
 80057ba:	4621      	mov	r1, r4
 80057bc:	f002 f922 	bl	8007a04 <_Bfree>
 80057c0:	e618      	b.n	80053f4 <_strtod_l+0x644>
 80057c2:	f1ba 0f01 	cmp.w	sl, #1
 80057c6:	d103      	bne.n	80057d0 <_strtod_l+0xa20>
 80057c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f43f ada5 	beq.w	800531a <_strtod_l+0x56a>
 80057d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005880 <_strtod_l+0xad0>
 80057d4:	4f35      	ldr	r7, [pc, #212]	@ (80058ac <_strtod_l+0xafc>)
 80057d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80057da:	2600      	movs	r6, #0
 80057dc:	e7b1      	b.n	8005742 <_strtod_l+0x992>
 80057de:	4f34      	ldr	r7, [pc, #208]	@ (80058b0 <_strtod_l+0xb00>)
 80057e0:	2600      	movs	r6, #0
 80057e2:	e7aa      	b.n	800573a <_strtod_l+0x98a>
 80057e4:	4b32      	ldr	r3, [pc, #200]	@ (80058b0 <_strtod_l+0xb00>)
 80057e6:	4630      	mov	r0, r6
 80057e8:	4639      	mov	r1, r7
 80057ea:	2200      	movs	r2, #0
 80057ec:	f7fa ff34 	bl	8000658 <__aeabi_dmul>
 80057f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057f2:	4606      	mov	r6, r0
 80057f4:	460f      	mov	r7, r1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d09f      	beq.n	800573a <_strtod_l+0x98a>
 80057fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80057fe:	e7a0      	b.n	8005742 <_strtod_l+0x992>
 8005800:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005888 <_strtod_l+0xad8>
 8005804:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005808:	ec57 6b17 	vmov	r6, r7, d7
 800580c:	e799      	b.n	8005742 <_strtod_l+0x992>
 800580e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005812:	9b08      	ldr	r3, [sp, #32]
 8005814:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1c1      	bne.n	80057a0 <_strtod_l+0x9f0>
 800581c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005820:	0d1b      	lsrs	r3, r3, #20
 8005822:	051b      	lsls	r3, r3, #20
 8005824:	429d      	cmp	r5, r3
 8005826:	d1bb      	bne.n	80057a0 <_strtod_l+0x9f0>
 8005828:	4630      	mov	r0, r6
 800582a:	4639      	mov	r1, r7
 800582c:	f7fb fa24 	bl	8000c78 <__aeabi_d2lz>
 8005830:	f7fa fee4 	bl	80005fc <__aeabi_l2d>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4630      	mov	r0, r6
 800583a:	4639      	mov	r1, r7
 800583c:	f7fa fd54 	bl	80002e8 <__aeabi_dsub>
 8005840:	460b      	mov	r3, r1
 8005842:	4602      	mov	r2, r0
 8005844:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005848:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800584c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800584e:	ea46 060a 	orr.w	r6, r6, sl
 8005852:	431e      	orrs	r6, r3
 8005854:	d06f      	beq.n	8005936 <_strtod_l+0xb86>
 8005856:	a30e      	add	r3, pc, #56	@ (adr r3, 8005890 <_strtod_l+0xae0>)
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	f7fb f96e 	bl	8000b3c <__aeabi_dcmplt>
 8005860:	2800      	cmp	r0, #0
 8005862:	f47f accf 	bne.w	8005204 <_strtod_l+0x454>
 8005866:	a30c      	add	r3, pc, #48	@ (adr r3, 8005898 <_strtod_l+0xae8>)
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005870:	f7fb f982 	bl	8000b78 <__aeabi_dcmpgt>
 8005874:	2800      	cmp	r0, #0
 8005876:	d093      	beq.n	80057a0 <_strtod_l+0x9f0>
 8005878:	e4c4      	b.n	8005204 <_strtod_l+0x454>
 800587a:	bf00      	nop
 800587c:	f3af 8000 	nop.w
 8005880:	00000000 	.word	0x00000000
 8005884:	bff00000 	.word	0xbff00000
 8005888:	00000000 	.word	0x00000000
 800588c:	3ff00000 	.word	0x3ff00000
 8005890:	94a03595 	.word	0x94a03595
 8005894:	3fdfffff 	.word	0x3fdfffff
 8005898:	35afe535 	.word	0x35afe535
 800589c:	3fe00000 	.word	0x3fe00000
 80058a0:	000fffff 	.word	0x000fffff
 80058a4:	7ff00000 	.word	0x7ff00000
 80058a8:	7fefffff 	.word	0x7fefffff
 80058ac:	3ff00000 	.word	0x3ff00000
 80058b0:	3fe00000 	.word	0x3fe00000
 80058b4:	7fe00000 	.word	0x7fe00000
 80058b8:	7c9fffff 	.word	0x7c9fffff
 80058bc:	9b08      	ldr	r3, [sp, #32]
 80058be:	b323      	cbz	r3, 800590a <_strtod_l+0xb5a>
 80058c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80058c4:	d821      	bhi.n	800590a <_strtod_l+0xb5a>
 80058c6:	a328      	add	r3, pc, #160	@ (adr r3, 8005968 <_strtod_l+0xbb8>)
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	4630      	mov	r0, r6
 80058ce:	4639      	mov	r1, r7
 80058d0:	f7fb f93e 	bl	8000b50 <__aeabi_dcmple>
 80058d4:	b1a0      	cbz	r0, 8005900 <_strtod_l+0xb50>
 80058d6:	4639      	mov	r1, r7
 80058d8:	4630      	mov	r0, r6
 80058da:	f7fb f995 	bl	8000c08 <__aeabi_d2uiz>
 80058de:	2801      	cmp	r0, #1
 80058e0:	bf38      	it	cc
 80058e2:	2001      	movcc	r0, #1
 80058e4:	f7fa fe3e 	bl	8000564 <__aeabi_ui2d>
 80058e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058ea:	4606      	mov	r6, r0
 80058ec:	460f      	mov	r7, r1
 80058ee:	b9fb      	cbnz	r3, 8005930 <_strtod_l+0xb80>
 80058f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80058f4:	9014      	str	r0, [sp, #80]	@ 0x50
 80058f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80058f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80058fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005900:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005902:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005906:	1b5b      	subs	r3, r3, r5
 8005908:	9311      	str	r3, [sp, #68]	@ 0x44
 800590a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800590e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005912:	f002 fbab 	bl	800806c <__ulp>
 8005916:	4650      	mov	r0, sl
 8005918:	ec53 2b10 	vmov	r2, r3, d0
 800591c:	4659      	mov	r1, fp
 800591e:	f7fa fe9b 	bl	8000658 <__aeabi_dmul>
 8005922:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005926:	f7fa fce1 	bl	80002ec <__adddf3>
 800592a:	4682      	mov	sl, r0
 800592c:	468b      	mov	fp, r1
 800592e:	e770      	b.n	8005812 <_strtod_l+0xa62>
 8005930:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005934:	e7e0      	b.n	80058f8 <_strtod_l+0xb48>
 8005936:	a30e      	add	r3, pc, #56	@ (adr r3, 8005970 <_strtod_l+0xbc0>)
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f7fb f8fe 	bl	8000b3c <__aeabi_dcmplt>
 8005940:	e798      	b.n	8005874 <_strtod_l+0xac4>
 8005942:	2300      	movs	r3, #0
 8005944:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005946:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005948:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	f7ff ba6d 	b.w	8004e2a <_strtod_l+0x7a>
 8005950:	2a65      	cmp	r2, #101	@ 0x65
 8005952:	f43f ab66 	beq.w	8005022 <_strtod_l+0x272>
 8005956:	2a45      	cmp	r2, #69	@ 0x45
 8005958:	f43f ab63 	beq.w	8005022 <_strtod_l+0x272>
 800595c:	2301      	movs	r3, #1
 800595e:	f7ff bb9e 	b.w	800509e <_strtod_l+0x2ee>
 8005962:	bf00      	nop
 8005964:	f3af 8000 	nop.w
 8005968:	ffc00000 	.word	0xffc00000
 800596c:	41dfffff 	.word	0x41dfffff
 8005970:	94a03595 	.word	0x94a03595
 8005974:	3fcfffff 	.word	0x3fcfffff

08005978 <strtod>:
 8005978:	460a      	mov	r2, r1
 800597a:	4601      	mov	r1, r0
 800597c:	4802      	ldr	r0, [pc, #8]	@ (8005988 <strtod+0x10>)
 800597e:	4b03      	ldr	r3, [pc, #12]	@ (800598c <strtod+0x14>)
 8005980:	6800      	ldr	r0, [r0, #0]
 8005982:	f7ff ba15 	b.w	8004db0 <_strtod_l>
 8005986:	bf00      	nop
 8005988:	20000190 	.word	0x20000190
 800598c:	20000024 	.word	0x20000024

08005990 <__cvt>:
 8005990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005994:	ec57 6b10 	vmov	r6, r7, d0
 8005998:	2f00      	cmp	r7, #0
 800599a:	460c      	mov	r4, r1
 800599c:	4619      	mov	r1, r3
 800599e:	463b      	mov	r3, r7
 80059a0:	bfbb      	ittet	lt
 80059a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80059a6:	461f      	movlt	r7, r3
 80059a8:	2300      	movge	r3, #0
 80059aa:	232d      	movlt	r3, #45	@ 0x2d
 80059ac:	700b      	strb	r3, [r1, #0]
 80059ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80059b4:	4691      	mov	r9, r2
 80059b6:	f023 0820 	bic.w	r8, r3, #32
 80059ba:	bfbc      	itt	lt
 80059bc:	4632      	movlt	r2, r6
 80059be:	4616      	movlt	r6, r2
 80059c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059c4:	d005      	beq.n	80059d2 <__cvt+0x42>
 80059c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80059ca:	d100      	bne.n	80059ce <__cvt+0x3e>
 80059cc:	3401      	adds	r4, #1
 80059ce:	2102      	movs	r1, #2
 80059d0:	e000      	b.n	80059d4 <__cvt+0x44>
 80059d2:	2103      	movs	r1, #3
 80059d4:	ab03      	add	r3, sp, #12
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	ab02      	add	r3, sp, #8
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	ec47 6b10 	vmov	d0, r6, r7
 80059e0:	4653      	mov	r3, sl
 80059e2:	4622      	mov	r2, r4
 80059e4:	f000 fe74 	bl	80066d0 <_dtoa_r>
 80059e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80059ec:	4605      	mov	r5, r0
 80059ee:	d119      	bne.n	8005a24 <__cvt+0x94>
 80059f0:	f019 0f01 	tst.w	r9, #1
 80059f4:	d00e      	beq.n	8005a14 <__cvt+0x84>
 80059f6:	eb00 0904 	add.w	r9, r0, r4
 80059fa:	2200      	movs	r2, #0
 80059fc:	2300      	movs	r3, #0
 80059fe:	4630      	mov	r0, r6
 8005a00:	4639      	mov	r1, r7
 8005a02:	f7fb f891 	bl	8000b28 <__aeabi_dcmpeq>
 8005a06:	b108      	cbz	r0, 8005a0c <__cvt+0x7c>
 8005a08:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a0c:	2230      	movs	r2, #48	@ 0x30
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	454b      	cmp	r3, r9
 8005a12:	d31e      	bcc.n	8005a52 <__cvt+0xc2>
 8005a14:	9b03      	ldr	r3, [sp, #12]
 8005a16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a18:	1b5b      	subs	r3, r3, r5
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	b004      	add	sp, #16
 8005a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a28:	eb00 0904 	add.w	r9, r0, r4
 8005a2c:	d1e5      	bne.n	80059fa <__cvt+0x6a>
 8005a2e:	7803      	ldrb	r3, [r0, #0]
 8005a30:	2b30      	cmp	r3, #48	@ 0x30
 8005a32:	d10a      	bne.n	8005a4a <__cvt+0xba>
 8005a34:	2200      	movs	r2, #0
 8005a36:	2300      	movs	r3, #0
 8005a38:	4630      	mov	r0, r6
 8005a3a:	4639      	mov	r1, r7
 8005a3c:	f7fb f874 	bl	8000b28 <__aeabi_dcmpeq>
 8005a40:	b918      	cbnz	r0, 8005a4a <__cvt+0xba>
 8005a42:	f1c4 0401 	rsb	r4, r4, #1
 8005a46:	f8ca 4000 	str.w	r4, [sl]
 8005a4a:	f8da 3000 	ldr.w	r3, [sl]
 8005a4e:	4499      	add	r9, r3
 8005a50:	e7d3      	b.n	80059fa <__cvt+0x6a>
 8005a52:	1c59      	adds	r1, r3, #1
 8005a54:	9103      	str	r1, [sp, #12]
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	e7d9      	b.n	8005a0e <__cvt+0x7e>

08005a5a <__exponent>:
 8005a5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a5c:	2900      	cmp	r1, #0
 8005a5e:	bfba      	itte	lt
 8005a60:	4249      	neglt	r1, r1
 8005a62:	232d      	movlt	r3, #45	@ 0x2d
 8005a64:	232b      	movge	r3, #43	@ 0x2b
 8005a66:	2909      	cmp	r1, #9
 8005a68:	7002      	strb	r2, [r0, #0]
 8005a6a:	7043      	strb	r3, [r0, #1]
 8005a6c:	dd29      	ble.n	8005ac2 <__exponent+0x68>
 8005a6e:	f10d 0307 	add.w	r3, sp, #7
 8005a72:	461d      	mov	r5, r3
 8005a74:	270a      	movs	r7, #10
 8005a76:	461a      	mov	r2, r3
 8005a78:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a7c:	fb07 1416 	mls	r4, r7, r6, r1
 8005a80:	3430      	adds	r4, #48	@ 0x30
 8005a82:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a86:	460c      	mov	r4, r1
 8005a88:	2c63      	cmp	r4, #99	@ 0x63
 8005a8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a8e:	4631      	mov	r1, r6
 8005a90:	dcf1      	bgt.n	8005a76 <__exponent+0x1c>
 8005a92:	3130      	adds	r1, #48	@ 0x30
 8005a94:	1e94      	subs	r4, r2, #2
 8005a96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a9a:	1c41      	adds	r1, r0, #1
 8005a9c:	4623      	mov	r3, r4
 8005a9e:	42ab      	cmp	r3, r5
 8005aa0:	d30a      	bcc.n	8005ab8 <__exponent+0x5e>
 8005aa2:	f10d 0309 	add.w	r3, sp, #9
 8005aa6:	1a9b      	subs	r3, r3, r2
 8005aa8:	42ac      	cmp	r4, r5
 8005aaa:	bf88      	it	hi
 8005aac:	2300      	movhi	r3, #0
 8005aae:	3302      	adds	r3, #2
 8005ab0:	4403      	add	r3, r0
 8005ab2:	1a18      	subs	r0, r3, r0
 8005ab4:	b003      	add	sp, #12
 8005ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005abc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005ac0:	e7ed      	b.n	8005a9e <__exponent+0x44>
 8005ac2:	2330      	movs	r3, #48	@ 0x30
 8005ac4:	3130      	adds	r1, #48	@ 0x30
 8005ac6:	7083      	strb	r3, [r0, #2]
 8005ac8:	70c1      	strb	r1, [r0, #3]
 8005aca:	1d03      	adds	r3, r0, #4
 8005acc:	e7f1      	b.n	8005ab2 <__exponent+0x58>
	...

08005ad0 <_printf_float>:
 8005ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad4:	b08d      	sub	sp, #52	@ 0x34
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005adc:	4616      	mov	r6, r2
 8005ade:	461f      	mov	r7, r3
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	f000 fccd 	bl	8006480 <_localeconv_r>
 8005ae6:	6803      	ldr	r3, [r0, #0]
 8005ae8:	9304      	str	r3, [sp, #16]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fa fbf0 	bl	80002d0 <strlen>
 8005af0:	2300      	movs	r3, #0
 8005af2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005af4:	f8d8 3000 	ldr.w	r3, [r8]
 8005af8:	9005      	str	r0, [sp, #20]
 8005afa:	3307      	adds	r3, #7
 8005afc:	f023 0307 	bic.w	r3, r3, #7
 8005b00:	f103 0208 	add.w	r2, r3, #8
 8005b04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b08:	f8d4 b000 	ldr.w	fp, [r4]
 8005b0c:	f8c8 2000 	str.w	r2, [r8]
 8005b10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005b18:	9307      	str	r3, [sp, #28]
 8005b1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005b22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b26:	4b9c      	ldr	r3, [pc, #624]	@ (8005d98 <_printf_float+0x2c8>)
 8005b28:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2c:	f7fb f82e 	bl	8000b8c <__aeabi_dcmpun>
 8005b30:	bb70      	cbnz	r0, 8005b90 <_printf_float+0xc0>
 8005b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b36:	4b98      	ldr	r3, [pc, #608]	@ (8005d98 <_printf_float+0x2c8>)
 8005b38:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3c:	f7fb f808 	bl	8000b50 <__aeabi_dcmple>
 8005b40:	bb30      	cbnz	r0, 8005b90 <_printf_float+0xc0>
 8005b42:	2200      	movs	r2, #0
 8005b44:	2300      	movs	r3, #0
 8005b46:	4640      	mov	r0, r8
 8005b48:	4649      	mov	r1, r9
 8005b4a:	f7fa fff7 	bl	8000b3c <__aeabi_dcmplt>
 8005b4e:	b110      	cbz	r0, 8005b56 <_printf_float+0x86>
 8005b50:	232d      	movs	r3, #45	@ 0x2d
 8005b52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b56:	4a91      	ldr	r2, [pc, #580]	@ (8005d9c <_printf_float+0x2cc>)
 8005b58:	4b91      	ldr	r3, [pc, #580]	@ (8005da0 <_printf_float+0x2d0>)
 8005b5a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005b5e:	bf94      	ite	ls
 8005b60:	4690      	movls	r8, r2
 8005b62:	4698      	movhi	r8, r3
 8005b64:	2303      	movs	r3, #3
 8005b66:	6123      	str	r3, [r4, #16]
 8005b68:	f02b 0304 	bic.w	r3, fp, #4
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	f04f 0900 	mov.w	r9, #0
 8005b72:	9700      	str	r7, [sp, #0]
 8005b74:	4633      	mov	r3, r6
 8005b76:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005b78:	4621      	mov	r1, r4
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f000 f9d2 	bl	8005f24 <_printf_common>
 8005b80:	3001      	adds	r0, #1
 8005b82:	f040 808d 	bne.w	8005ca0 <_printf_float+0x1d0>
 8005b86:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8a:	b00d      	add	sp, #52	@ 0x34
 8005b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b90:	4642      	mov	r2, r8
 8005b92:	464b      	mov	r3, r9
 8005b94:	4640      	mov	r0, r8
 8005b96:	4649      	mov	r1, r9
 8005b98:	f7fa fff8 	bl	8000b8c <__aeabi_dcmpun>
 8005b9c:	b140      	cbz	r0, 8005bb0 <_printf_float+0xe0>
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	bfbc      	itt	lt
 8005ba4:	232d      	movlt	r3, #45	@ 0x2d
 8005ba6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005baa:	4a7e      	ldr	r2, [pc, #504]	@ (8005da4 <_printf_float+0x2d4>)
 8005bac:	4b7e      	ldr	r3, [pc, #504]	@ (8005da8 <_printf_float+0x2d8>)
 8005bae:	e7d4      	b.n	8005b5a <_printf_float+0x8a>
 8005bb0:	6863      	ldr	r3, [r4, #4]
 8005bb2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005bb6:	9206      	str	r2, [sp, #24]
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	d13b      	bne.n	8005c34 <_printf_float+0x164>
 8005bbc:	2306      	movs	r3, #6
 8005bbe:	6063      	str	r3, [r4, #4]
 8005bc0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6022      	str	r2, [r4, #0]
 8005bc8:	9303      	str	r3, [sp, #12]
 8005bca:	ab0a      	add	r3, sp, #40	@ 0x28
 8005bcc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005bd0:	ab09      	add	r3, sp, #36	@ 0x24
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	6861      	ldr	r1, [r4, #4]
 8005bd6:	ec49 8b10 	vmov	d0, r8, r9
 8005bda:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005bde:	4628      	mov	r0, r5
 8005be0:	f7ff fed6 	bl	8005990 <__cvt>
 8005be4:	9b06      	ldr	r3, [sp, #24]
 8005be6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005be8:	2b47      	cmp	r3, #71	@ 0x47
 8005bea:	4680      	mov	r8, r0
 8005bec:	d129      	bne.n	8005c42 <_printf_float+0x172>
 8005bee:	1cc8      	adds	r0, r1, #3
 8005bf0:	db02      	blt.n	8005bf8 <_printf_float+0x128>
 8005bf2:	6863      	ldr	r3, [r4, #4]
 8005bf4:	4299      	cmp	r1, r3
 8005bf6:	dd41      	ble.n	8005c7c <_printf_float+0x1ac>
 8005bf8:	f1aa 0a02 	sub.w	sl, sl, #2
 8005bfc:	fa5f fa8a 	uxtb.w	sl, sl
 8005c00:	3901      	subs	r1, #1
 8005c02:	4652      	mov	r2, sl
 8005c04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c08:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c0a:	f7ff ff26 	bl	8005a5a <__exponent>
 8005c0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c10:	1813      	adds	r3, r2, r0
 8005c12:	2a01      	cmp	r2, #1
 8005c14:	4681      	mov	r9, r0
 8005c16:	6123      	str	r3, [r4, #16]
 8005c18:	dc02      	bgt.n	8005c20 <_printf_float+0x150>
 8005c1a:	6822      	ldr	r2, [r4, #0]
 8005c1c:	07d2      	lsls	r2, r2, #31
 8005c1e:	d501      	bpl.n	8005c24 <_printf_float+0x154>
 8005c20:	3301      	adds	r3, #1
 8005c22:	6123      	str	r3, [r4, #16]
 8005c24:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0a2      	beq.n	8005b72 <_printf_float+0xa2>
 8005c2c:	232d      	movs	r3, #45	@ 0x2d
 8005c2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c32:	e79e      	b.n	8005b72 <_printf_float+0xa2>
 8005c34:	9a06      	ldr	r2, [sp, #24]
 8005c36:	2a47      	cmp	r2, #71	@ 0x47
 8005c38:	d1c2      	bne.n	8005bc0 <_printf_float+0xf0>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1c0      	bne.n	8005bc0 <_printf_float+0xf0>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e7bd      	b.n	8005bbe <_printf_float+0xee>
 8005c42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c46:	d9db      	bls.n	8005c00 <_printf_float+0x130>
 8005c48:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005c4c:	d118      	bne.n	8005c80 <_printf_float+0x1b0>
 8005c4e:	2900      	cmp	r1, #0
 8005c50:	6863      	ldr	r3, [r4, #4]
 8005c52:	dd0b      	ble.n	8005c6c <_printf_float+0x19c>
 8005c54:	6121      	str	r1, [r4, #16]
 8005c56:	b913      	cbnz	r3, 8005c5e <_printf_float+0x18e>
 8005c58:	6822      	ldr	r2, [r4, #0]
 8005c5a:	07d0      	lsls	r0, r2, #31
 8005c5c:	d502      	bpl.n	8005c64 <_printf_float+0x194>
 8005c5e:	3301      	adds	r3, #1
 8005c60:	440b      	add	r3, r1
 8005c62:	6123      	str	r3, [r4, #16]
 8005c64:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005c66:	f04f 0900 	mov.w	r9, #0
 8005c6a:	e7db      	b.n	8005c24 <_printf_float+0x154>
 8005c6c:	b913      	cbnz	r3, 8005c74 <_printf_float+0x1a4>
 8005c6e:	6822      	ldr	r2, [r4, #0]
 8005c70:	07d2      	lsls	r2, r2, #31
 8005c72:	d501      	bpl.n	8005c78 <_printf_float+0x1a8>
 8005c74:	3302      	adds	r3, #2
 8005c76:	e7f4      	b.n	8005c62 <_printf_float+0x192>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e7f2      	b.n	8005c62 <_printf_float+0x192>
 8005c7c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c82:	4299      	cmp	r1, r3
 8005c84:	db05      	blt.n	8005c92 <_printf_float+0x1c2>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	6121      	str	r1, [r4, #16]
 8005c8a:	07d8      	lsls	r0, r3, #31
 8005c8c:	d5ea      	bpl.n	8005c64 <_printf_float+0x194>
 8005c8e:	1c4b      	adds	r3, r1, #1
 8005c90:	e7e7      	b.n	8005c62 <_printf_float+0x192>
 8005c92:	2900      	cmp	r1, #0
 8005c94:	bfd4      	ite	le
 8005c96:	f1c1 0202 	rsble	r2, r1, #2
 8005c9a:	2201      	movgt	r2, #1
 8005c9c:	4413      	add	r3, r2
 8005c9e:	e7e0      	b.n	8005c62 <_printf_float+0x192>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	055a      	lsls	r2, r3, #21
 8005ca4:	d407      	bmi.n	8005cb6 <_printf_float+0x1e6>
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	4642      	mov	r2, r8
 8005caa:	4631      	mov	r1, r6
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b8      	blx	r7
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d12b      	bne.n	8005d0c <_printf_float+0x23c>
 8005cb4:	e767      	b.n	8005b86 <_printf_float+0xb6>
 8005cb6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cba:	f240 80dd 	bls.w	8005e78 <_printf_float+0x3a8>
 8005cbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f7fa ff2f 	bl	8000b28 <__aeabi_dcmpeq>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d033      	beq.n	8005d36 <_printf_float+0x266>
 8005cce:	4a37      	ldr	r2, [pc, #220]	@ (8005dac <_printf_float+0x2dc>)
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	47b8      	blx	r7
 8005cd8:	3001      	adds	r0, #1
 8005cda:	f43f af54 	beq.w	8005b86 <_printf_float+0xb6>
 8005cde:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005ce2:	4543      	cmp	r3, r8
 8005ce4:	db02      	blt.n	8005cec <_printf_float+0x21c>
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	07d8      	lsls	r0, r3, #31
 8005cea:	d50f      	bpl.n	8005d0c <_printf_float+0x23c>
 8005cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cf0:	4631      	mov	r1, r6
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	47b8      	blx	r7
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	f43f af45 	beq.w	8005b86 <_printf_float+0xb6>
 8005cfc:	f04f 0900 	mov.w	r9, #0
 8005d00:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d04:	f104 0a1a 	add.w	sl, r4, #26
 8005d08:	45c8      	cmp	r8, r9
 8005d0a:	dc09      	bgt.n	8005d20 <_printf_float+0x250>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	079b      	lsls	r3, r3, #30
 8005d10:	f100 8103 	bmi.w	8005f1a <_printf_float+0x44a>
 8005d14:	68e0      	ldr	r0, [r4, #12]
 8005d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d18:	4298      	cmp	r0, r3
 8005d1a:	bfb8      	it	lt
 8005d1c:	4618      	movlt	r0, r3
 8005d1e:	e734      	b.n	8005b8a <_printf_float+0xba>
 8005d20:	2301      	movs	r3, #1
 8005d22:	4652      	mov	r2, sl
 8005d24:	4631      	mov	r1, r6
 8005d26:	4628      	mov	r0, r5
 8005d28:	47b8      	blx	r7
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	f43f af2b 	beq.w	8005b86 <_printf_float+0xb6>
 8005d30:	f109 0901 	add.w	r9, r9, #1
 8005d34:	e7e8      	b.n	8005d08 <_printf_float+0x238>
 8005d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	dc39      	bgt.n	8005db0 <_printf_float+0x2e0>
 8005d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dac <_printf_float+0x2dc>)
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4631      	mov	r1, r6
 8005d42:	4628      	mov	r0, r5
 8005d44:	47b8      	blx	r7
 8005d46:	3001      	adds	r0, #1
 8005d48:	f43f af1d 	beq.w	8005b86 <_printf_float+0xb6>
 8005d4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005d50:	ea59 0303 	orrs.w	r3, r9, r3
 8005d54:	d102      	bne.n	8005d5c <_printf_float+0x28c>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	07d9      	lsls	r1, r3, #31
 8005d5a:	d5d7      	bpl.n	8005d0c <_printf_float+0x23c>
 8005d5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d60:	4631      	mov	r1, r6
 8005d62:	4628      	mov	r0, r5
 8005d64:	47b8      	blx	r7
 8005d66:	3001      	adds	r0, #1
 8005d68:	f43f af0d 	beq.w	8005b86 <_printf_float+0xb6>
 8005d6c:	f04f 0a00 	mov.w	sl, #0
 8005d70:	f104 0b1a 	add.w	fp, r4, #26
 8005d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d76:	425b      	negs	r3, r3
 8005d78:	4553      	cmp	r3, sl
 8005d7a:	dc01      	bgt.n	8005d80 <_printf_float+0x2b0>
 8005d7c:	464b      	mov	r3, r9
 8005d7e:	e793      	b.n	8005ca8 <_printf_float+0x1d8>
 8005d80:	2301      	movs	r3, #1
 8005d82:	465a      	mov	r2, fp
 8005d84:	4631      	mov	r1, r6
 8005d86:	4628      	mov	r0, r5
 8005d88:	47b8      	blx	r7
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	f43f aefb 	beq.w	8005b86 <_printf_float+0xb6>
 8005d90:	f10a 0a01 	add.w	sl, sl, #1
 8005d94:	e7ee      	b.n	8005d74 <_printf_float+0x2a4>
 8005d96:	bf00      	nop
 8005d98:	7fefffff 	.word	0x7fefffff
 8005d9c:	08008c51 	.word	0x08008c51
 8005da0:	08008c55 	.word	0x08008c55
 8005da4:	08008c59 	.word	0x08008c59
 8005da8:	08008c5d 	.word	0x08008c5d
 8005dac:	08008c61 	.word	0x08008c61
 8005db0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005db2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005db6:	4553      	cmp	r3, sl
 8005db8:	bfa8      	it	ge
 8005dba:	4653      	movge	r3, sl
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	4699      	mov	r9, r3
 8005dc0:	dc36      	bgt.n	8005e30 <_printf_float+0x360>
 8005dc2:	f04f 0b00 	mov.w	fp, #0
 8005dc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dca:	f104 021a 	add.w	r2, r4, #26
 8005dce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005dd0:	9306      	str	r3, [sp, #24]
 8005dd2:	eba3 0309 	sub.w	r3, r3, r9
 8005dd6:	455b      	cmp	r3, fp
 8005dd8:	dc31      	bgt.n	8005e3e <_printf_float+0x36e>
 8005dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ddc:	459a      	cmp	sl, r3
 8005dde:	dc3a      	bgt.n	8005e56 <_printf_float+0x386>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	07da      	lsls	r2, r3, #31
 8005de4:	d437      	bmi.n	8005e56 <_printf_float+0x386>
 8005de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005de8:	ebaa 0903 	sub.w	r9, sl, r3
 8005dec:	9b06      	ldr	r3, [sp, #24]
 8005dee:	ebaa 0303 	sub.w	r3, sl, r3
 8005df2:	4599      	cmp	r9, r3
 8005df4:	bfa8      	it	ge
 8005df6:	4699      	movge	r9, r3
 8005df8:	f1b9 0f00 	cmp.w	r9, #0
 8005dfc:	dc33      	bgt.n	8005e66 <_printf_float+0x396>
 8005dfe:	f04f 0800 	mov.w	r8, #0
 8005e02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e06:	f104 0b1a 	add.w	fp, r4, #26
 8005e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0c:	ebaa 0303 	sub.w	r3, sl, r3
 8005e10:	eba3 0309 	sub.w	r3, r3, r9
 8005e14:	4543      	cmp	r3, r8
 8005e16:	f77f af79 	ble.w	8005d0c <_printf_float+0x23c>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	465a      	mov	r2, fp
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b8      	blx	r7
 8005e24:	3001      	adds	r0, #1
 8005e26:	f43f aeae 	beq.w	8005b86 <_printf_float+0xb6>
 8005e2a:	f108 0801 	add.w	r8, r8, #1
 8005e2e:	e7ec      	b.n	8005e0a <_printf_float+0x33a>
 8005e30:	4642      	mov	r2, r8
 8005e32:	4631      	mov	r1, r6
 8005e34:	4628      	mov	r0, r5
 8005e36:	47b8      	blx	r7
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d1c2      	bne.n	8005dc2 <_printf_float+0x2f2>
 8005e3c:	e6a3      	b.n	8005b86 <_printf_float+0xb6>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	4631      	mov	r1, r6
 8005e42:	4628      	mov	r0, r5
 8005e44:	9206      	str	r2, [sp, #24]
 8005e46:	47b8      	blx	r7
 8005e48:	3001      	adds	r0, #1
 8005e4a:	f43f ae9c 	beq.w	8005b86 <_printf_float+0xb6>
 8005e4e:	9a06      	ldr	r2, [sp, #24]
 8005e50:	f10b 0b01 	add.w	fp, fp, #1
 8005e54:	e7bb      	b.n	8005dce <_printf_float+0x2fe>
 8005e56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b8      	blx	r7
 8005e60:	3001      	adds	r0, #1
 8005e62:	d1c0      	bne.n	8005de6 <_printf_float+0x316>
 8005e64:	e68f      	b.n	8005b86 <_printf_float+0xb6>
 8005e66:	9a06      	ldr	r2, [sp, #24]
 8005e68:	464b      	mov	r3, r9
 8005e6a:	4442      	add	r2, r8
 8005e6c:	4631      	mov	r1, r6
 8005e6e:	4628      	mov	r0, r5
 8005e70:	47b8      	blx	r7
 8005e72:	3001      	adds	r0, #1
 8005e74:	d1c3      	bne.n	8005dfe <_printf_float+0x32e>
 8005e76:	e686      	b.n	8005b86 <_printf_float+0xb6>
 8005e78:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e7c:	f1ba 0f01 	cmp.w	sl, #1
 8005e80:	dc01      	bgt.n	8005e86 <_printf_float+0x3b6>
 8005e82:	07db      	lsls	r3, r3, #31
 8005e84:	d536      	bpl.n	8005ef4 <_printf_float+0x424>
 8005e86:	2301      	movs	r3, #1
 8005e88:	4642      	mov	r2, r8
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	47b8      	blx	r7
 8005e90:	3001      	adds	r0, #1
 8005e92:	f43f ae78 	beq.w	8005b86 <_printf_float+0xb6>
 8005e96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	f43f ae70 	beq.w	8005b86 <_printf_float+0xb6>
 8005ea6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2300      	movs	r3, #0
 8005eae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eb2:	f7fa fe39 	bl	8000b28 <__aeabi_dcmpeq>
 8005eb6:	b9c0      	cbnz	r0, 8005eea <_printf_float+0x41a>
 8005eb8:	4653      	mov	r3, sl
 8005eba:	f108 0201 	add.w	r2, r8, #1
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47b8      	blx	r7
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d10c      	bne.n	8005ee2 <_printf_float+0x412>
 8005ec8:	e65d      	b.n	8005b86 <_printf_float+0xb6>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	465a      	mov	r2, fp
 8005ece:	4631      	mov	r1, r6
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	47b8      	blx	r7
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	f43f ae56 	beq.w	8005b86 <_printf_float+0xb6>
 8005eda:	f108 0801 	add.w	r8, r8, #1
 8005ede:	45d0      	cmp	r8, sl
 8005ee0:	dbf3      	blt.n	8005eca <_printf_float+0x3fa>
 8005ee2:	464b      	mov	r3, r9
 8005ee4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005ee8:	e6df      	b.n	8005caa <_printf_float+0x1da>
 8005eea:	f04f 0800 	mov.w	r8, #0
 8005eee:	f104 0b1a 	add.w	fp, r4, #26
 8005ef2:	e7f4      	b.n	8005ede <_printf_float+0x40e>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	4642      	mov	r2, r8
 8005ef8:	e7e1      	b.n	8005ebe <_printf_float+0x3ee>
 8005efa:	2301      	movs	r3, #1
 8005efc:	464a      	mov	r2, r9
 8005efe:	4631      	mov	r1, r6
 8005f00:	4628      	mov	r0, r5
 8005f02:	47b8      	blx	r7
 8005f04:	3001      	adds	r0, #1
 8005f06:	f43f ae3e 	beq.w	8005b86 <_printf_float+0xb6>
 8005f0a:	f108 0801 	add.w	r8, r8, #1
 8005f0e:	68e3      	ldr	r3, [r4, #12]
 8005f10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005f12:	1a5b      	subs	r3, r3, r1
 8005f14:	4543      	cmp	r3, r8
 8005f16:	dcf0      	bgt.n	8005efa <_printf_float+0x42a>
 8005f18:	e6fc      	b.n	8005d14 <_printf_float+0x244>
 8005f1a:	f04f 0800 	mov.w	r8, #0
 8005f1e:	f104 0919 	add.w	r9, r4, #25
 8005f22:	e7f4      	b.n	8005f0e <_printf_float+0x43e>

08005f24 <_printf_common>:
 8005f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	4616      	mov	r6, r2
 8005f2a:	4698      	mov	r8, r3
 8005f2c:	688a      	ldr	r2, [r1, #8]
 8005f2e:	690b      	ldr	r3, [r1, #16]
 8005f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f34:	4293      	cmp	r3, r2
 8005f36:	bfb8      	it	lt
 8005f38:	4613      	movlt	r3, r2
 8005f3a:	6033      	str	r3, [r6, #0]
 8005f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f40:	4607      	mov	r7, r0
 8005f42:	460c      	mov	r4, r1
 8005f44:	b10a      	cbz	r2, 8005f4a <_printf_common+0x26>
 8005f46:	3301      	adds	r3, #1
 8005f48:	6033      	str	r3, [r6, #0]
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	0699      	lsls	r1, r3, #26
 8005f4e:	bf42      	ittt	mi
 8005f50:	6833      	ldrmi	r3, [r6, #0]
 8005f52:	3302      	addmi	r3, #2
 8005f54:	6033      	strmi	r3, [r6, #0]
 8005f56:	6825      	ldr	r5, [r4, #0]
 8005f58:	f015 0506 	ands.w	r5, r5, #6
 8005f5c:	d106      	bne.n	8005f6c <_printf_common+0x48>
 8005f5e:	f104 0a19 	add.w	sl, r4, #25
 8005f62:	68e3      	ldr	r3, [r4, #12]
 8005f64:	6832      	ldr	r2, [r6, #0]
 8005f66:	1a9b      	subs	r3, r3, r2
 8005f68:	42ab      	cmp	r3, r5
 8005f6a:	dc26      	bgt.n	8005fba <_printf_common+0x96>
 8005f6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f70:	6822      	ldr	r2, [r4, #0]
 8005f72:	3b00      	subs	r3, #0
 8005f74:	bf18      	it	ne
 8005f76:	2301      	movne	r3, #1
 8005f78:	0692      	lsls	r2, r2, #26
 8005f7a:	d42b      	bmi.n	8005fd4 <_printf_common+0xb0>
 8005f7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f80:	4641      	mov	r1, r8
 8005f82:	4638      	mov	r0, r7
 8005f84:	47c8      	blx	r9
 8005f86:	3001      	adds	r0, #1
 8005f88:	d01e      	beq.n	8005fc8 <_printf_common+0xa4>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	6922      	ldr	r2, [r4, #16]
 8005f8e:	f003 0306 	and.w	r3, r3, #6
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	bf02      	ittt	eq
 8005f96:	68e5      	ldreq	r5, [r4, #12]
 8005f98:	6833      	ldreq	r3, [r6, #0]
 8005f9a:	1aed      	subeq	r5, r5, r3
 8005f9c:	68a3      	ldr	r3, [r4, #8]
 8005f9e:	bf0c      	ite	eq
 8005fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fa4:	2500      	movne	r5, #0
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	bfc4      	itt	gt
 8005faa:	1a9b      	subgt	r3, r3, r2
 8005fac:	18ed      	addgt	r5, r5, r3
 8005fae:	2600      	movs	r6, #0
 8005fb0:	341a      	adds	r4, #26
 8005fb2:	42b5      	cmp	r5, r6
 8005fb4:	d11a      	bne.n	8005fec <_printf_common+0xc8>
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	e008      	b.n	8005fcc <_printf_common+0xa8>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	4652      	mov	r2, sl
 8005fbe:	4641      	mov	r1, r8
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	47c8      	blx	r9
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d103      	bne.n	8005fd0 <_printf_common+0xac>
 8005fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd0:	3501      	adds	r5, #1
 8005fd2:	e7c6      	b.n	8005f62 <_printf_common+0x3e>
 8005fd4:	18e1      	adds	r1, r4, r3
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	2030      	movs	r0, #48	@ 0x30
 8005fda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fde:	4422      	add	r2, r4
 8005fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fe8:	3302      	adds	r3, #2
 8005fea:	e7c7      	b.n	8005f7c <_printf_common+0x58>
 8005fec:	2301      	movs	r3, #1
 8005fee:	4622      	mov	r2, r4
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	47c8      	blx	r9
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d0e6      	beq.n	8005fc8 <_printf_common+0xa4>
 8005ffa:	3601      	adds	r6, #1
 8005ffc:	e7d9      	b.n	8005fb2 <_printf_common+0x8e>
	...

08006000 <_printf_i>:
 8006000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006004:	7e0f      	ldrb	r7, [r1, #24]
 8006006:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006008:	2f78      	cmp	r7, #120	@ 0x78
 800600a:	4691      	mov	r9, r2
 800600c:	4680      	mov	r8, r0
 800600e:	460c      	mov	r4, r1
 8006010:	469a      	mov	sl, r3
 8006012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006016:	d807      	bhi.n	8006028 <_printf_i+0x28>
 8006018:	2f62      	cmp	r7, #98	@ 0x62
 800601a:	d80a      	bhi.n	8006032 <_printf_i+0x32>
 800601c:	2f00      	cmp	r7, #0
 800601e:	f000 80d2 	beq.w	80061c6 <_printf_i+0x1c6>
 8006022:	2f58      	cmp	r7, #88	@ 0x58
 8006024:	f000 80b9 	beq.w	800619a <_printf_i+0x19a>
 8006028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800602c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006030:	e03a      	b.n	80060a8 <_printf_i+0xa8>
 8006032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006036:	2b15      	cmp	r3, #21
 8006038:	d8f6      	bhi.n	8006028 <_printf_i+0x28>
 800603a:	a101      	add	r1, pc, #4	@ (adr r1, 8006040 <_printf_i+0x40>)
 800603c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006040:	08006099 	.word	0x08006099
 8006044:	080060ad 	.word	0x080060ad
 8006048:	08006029 	.word	0x08006029
 800604c:	08006029 	.word	0x08006029
 8006050:	08006029 	.word	0x08006029
 8006054:	08006029 	.word	0x08006029
 8006058:	080060ad 	.word	0x080060ad
 800605c:	08006029 	.word	0x08006029
 8006060:	08006029 	.word	0x08006029
 8006064:	08006029 	.word	0x08006029
 8006068:	08006029 	.word	0x08006029
 800606c:	080061ad 	.word	0x080061ad
 8006070:	080060d7 	.word	0x080060d7
 8006074:	08006167 	.word	0x08006167
 8006078:	08006029 	.word	0x08006029
 800607c:	08006029 	.word	0x08006029
 8006080:	080061cf 	.word	0x080061cf
 8006084:	08006029 	.word	0x08006029
 8006088:	080060d7 	.word	0x080060d7
 800608c:	08006029 	.word	0x08006029
 8006090:	08006029 	.word	0x08006029
 8006094:	0800616f 	.word	0x0800616f
 8006098:	6833      	ldr	r3, [r6, #0]
 800609a:	1d1a      	adds	r2, r3, #4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6032      	str	r2, [r6, #0]
 80060a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060a8:	2301      	movs	r3, #1
 80060aa:	e09d      	b.n	80061e8 <_printf_i+0x1e8>
 80060ac:	6833      	ldr	r3, [r6, #0]
 80060ae:	6820      	ldr	r0, [r4, #0]
 80060b0:	1d19      	adds	r1, r3, #4
 80060b2:	6031      	str	r1, [r6, #0]
 80060b4:	0606      	lsls	r6, r0, #24
 80060b6:	d501      	bpl.n	80060bc <_printf_i+0xbc>
 80060b8:	681d      	ldr	r5, [r3, #0]
 80060ba:	e003      	b.n	80060c4 <_printf_i+0xc4>
 80060bc:	0645      	lsls	r5, r0, #25
 80060be:	d5fb      	bpl.n	80060b8 <_printf_i+0xb8>
 80060c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060c4:	2d00      	cmp	r5, #0
 80060c6:	da03      	bge.n	80060d0 <_printf_i+0xd0>
 80060c8:	232d      	movs	r3, #45	@ 0x2d
 80060ca:	426d      	negs	r5, r5
 80060cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060d0:	4859      	ldr	r0, [pc, #356]	@ (8006238 <_printf_i+0x238>)
 80060d2:	230a      	movs	r3, #10
 80060d4:	e011      	b.n	80060fa <_printf_i+0xfa>
 80060d6:	6821      	ldr	r1, [r4, #0]
 80060d8:	6833      	ldr	r3, [r6, #0]
 80060da:	0608      	lsls	r0, r1, #24
 80060dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80060e0:	d402      	bmi.n	80060e8 <_printf_i+0xe8>
 80060e2:	0649      	lsls	r1, r1, #25
 80060e4:	bf48      	it	mi
 80060e6:	b2ad      	uxthmi	r5, r5
 80060e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80060ea:	4853      	ldr	r0, [pc, #332]	@ (8006238 <_printf_i+0x238>)
 80060ec:	6033      	str	r3, [r6, #0]
 80060ee:	bf14      	ite	ne
 80060f0:	230a      	movne	r3, #10
 80060f2:	2308      	moveq	r3, #8
 80060f4:	2100      	movs	r1, #0
 80060f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060fa:	6866      	ldr	r6, [r4, #4]
 80060fc:	60a6      	str	r6, [r4, #8]
 80060fe:	2e00      	cmp	r6, #0
 8006100:	bfa2      	ittt	ge
 8006102:	6821      	ldrge	r1, [r4, #0]
 8006104:	f021 0104 	bicge.w	r1, r1, #4
 8006108:	6021      	strge	r1, [r4, #0]
 800610a:	b90d      	cbnz	r5, 8006110 <_printf_i+0x110>
 800610c:	2e00      	cmp	r6, #0
 800610e:	d04b      	beq.n	80061a8 <_printf_i+0x1a8>
 8006110:	4616      	mov	r6, r2
 8006112:	fbb5 f1f3 	udiv	r1, r5, r3
 8006116:	fb03 5711 	mls	r7, r3, r1, r5
 800611a:	5dc7      	ldrb	r7, [r0, r7]
 800611c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006120:	462f      	mov	r7, r5
 8006122:	42bb      	cmp	r3, r7
 8006124:	460d      	mov	r5, r1
 8006126:	d9f4      	bls.n	8006112 <_printf_i+0x112>
 8006128:	2b08      	cmp	r3, #8
 800612a:	d10b      	bne.n	8006144 <_printf_i+0x144>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	07df      	lsls	r7, r3, #31
 8006130:	d508      	bpl.n	8006144 <_printf_i+0x144>
 8006132:	6923      	ldr	r3, [r4, #16]
 8006134:	6861      	ldr	r1, [r4, #4]
 8006136:	4299      	cmp	r1, r3
 8006138:	bfde      	ittt	le
 800613a:	2330      	movle	r3, #48	@ 0x30
 800613c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006140:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006144:	1b92      	subs	r2, r2, r6
 8006146:	6122      	str	r2, [r4, #16]
 8006148:	f8cd a000 	str.w	sl, [sp]
 800614c:	464b      	mov	r3, r9
 800614e:	aa03      	add	r2, sp, #12
 8006150:	4621      	mov	r1, r4
 8006152:	4640      	mov	r0, r8
 8006154:	f7ff fee6 	bl	8005f24 <_printf_common>
 8006158:	3001      	adds	r0, #1
 800615a:	d14a      	bne.n	80061f2 <_printf_i+0x1f2>
 800615c:	f04f 30ff 	mov.w	r0, #4294967295
 8006160:	b004      	add	sp, #16
 8006162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	f043 0320 	orr.w	r3, r3, #32
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	4833      	ldr	r0, [pc, #204]	@ (800623c <_printf_i+0x23c>)
 8006170:	2778      	movs	r7, #120	@ 0x78
 8006172:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	6831      	ldr	r1, [r6, #0]
 800617a:	061f      	lsls	r7, r3, #24
 800617c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006180:	d402      	bmi.n	8006188 <_printf_i+0x188>
 8006182:	065f      	lsls	r7, r3, #25
 8006184:	bf48      	it	mi
 8006186:	b2ad      	uxthmi	r5, r5
 8006188:	6031      	str	r1, [r6, #0]
 800618a:	07d9      	lsls	r1, r3, #31
 800618c:	bf44      	itt	mi
 800618e:	f043 0320 	orrmi.w	r3, r3, #32
 8006192:	6023      	strmi	r3, [r4, #0]
 8006194:	b11d      	cbz	r5, 800619e <_printf_i+0x19e>
 8006196:	2310      	movs	r3, #16
 8006198:	e7ac      	b.n	80060f4 <_printf_i+0xf4>
 800619a:	4827      	ldr	r0, [pc, #156]	@ (8006238 <_printf_i+0x238>)
 800619c:	e7e9      	b.n	8006172 <_printf_i+0x172>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	f023 0320 	bic.w	r3, r3, #32
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	e7f6      	b.n	8006196 <_printf_i+0x196>
 80061a8:	4616      	mov	r6, r2
 80061aa:	e7bd      	b.n	8006128 <_printf_i+0x128>
 80061ac:	6833      	ldr	r3, [r6, #0]
 80061ae:	6825      	ldr	r5, [r4, #0]
 80061b0:	6961      	ldr	r1, [r4, #20]
 80061b2:	1d18      	adds	r0, r3, #4
 80061b4:	6030      	str	r0, [r6, #0]
 80061b6:	062e      	lsls	r6, r5, #24
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	d501      	bpl.n	80061c0 <_printf_i+0x1c0>
 80061bc:	6019      	str	r1, [r3, #0]
 80061be:	e002      	b.n	80061c6 <_printf_i+0x1c6>
 80061c0:	0668      	lsls	r0, r5, #25
 80061c2:	d5fb      	bpl.n	80061bc <_printf_i+0x1bc>
 80061c4:	8019      	strh	r1, [r3, #0]
 80061c6:	2300      	movs	r3, #0
 80061c8:	6123      	str	r3, [r4, #16]
 80061ca:	4616      	mov	r6, r2
 80061cc:	e7bc      	b.n	8006148 <_printf_i+0x148>
 80061ce:	6833      	ldr	r3, [r6, #0]
 80061d0:	1d1a      	adds	r2, r3, #4
 80061d2:	6032      	str	r2, [r6, #0]
 80061d4:	681e      	ldr	r6, [r3, #0]
 80061d6:	6862      	ldr	r2, [r4, #4]
 80061d8:	2100      	movs	r1, #0
 80061da:	4630      	mov	r0, r6
 80061dc:	f7fa f828 	bl	8000230 <memchr>
 80061e0:	b108      	cbz	r0, 80061e6 <_printf_i+0x1e6>
 80061e2:	1b80      	subs	r0, r0, r6
 80061e4:	6060      	str	r0, [r4, #4]
 80061e6:	6863      	ldr	r3, [r4, #4]
 80061e8:	6123      	str	r3, [r4, #16]
 80061ea:	2300      	movs	r3, #0
 80061ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061f0:	e7aa      	b.n	8006148 <_printf_i+0x148>
 80061f2:	6923      	ldr	r3, [r4, #16]
 80061f4:	4632      	mov	r2, r6
 80061f6:	4649      	mov	r1, r9
 80061f8:	4640      	mov	r0, r8
 80061fa:	47d0      	blx	sl
 80061fc:	3001      	adds	r0, #1
 80061fe:	d0ad      	beq.n	800615c <_printf_i+0x15c>
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	079b      	lsls	r3, r3, #30
 8006204:	d413      	bmi.n	800622e <_printf_i+0x22e>
 8006206:	68e0      	ldr	r0, [r4, #12]
 8006208:	9b03      	ldr	r3, [sp, #12]
 800620a:	4298      	cmp	r0, r3
 800620c:	bfb8      	it	lt
 800620e:	4618      	movlt	r0, r3
 8006210:	e7a6      	b.n	8006160 <_printf_i+0x160>
 8006212:	2301      	movs	r3, #1
 8006214:	4632      	mov	r2, r6
 8006216:	4649      	mov	r1, r9
 8006218:	4640      	mov	r0, r8
 800621a:	47d0      	blx	sl
 800621c:	3001      	adds	r0, #1
 800621e:	d09d      	beq.n	800615c <_printf_i+0x15c>
 8006220:	3501      	adds	r5, #1
 8006222:	68e3      	ldr	r3, [r4, #12]
 8006224:	9903      	ldr	r1, [sp, #12]
 8006226:	1a5b      	subs	r3, r3, r1
 8006228:	42ab      	cmp	r3, r5
 800622a:	dcf2      	bgt.n	8006212 <_printf_i+0x212>
 800622c:	e7eb      	b.n	8006206 <_printf_i+0x206>
 800622e:	2500      	movs	r5, #0
 8006230:	f104 0619 	add.w	r6, r4, #25
 8006234:	e7f5      	b.n	8006222 <_printf_i+0x222>
 8006236:	bf00      	nop
 8006238:	08008c63 	.word	0x08008c63
 800623c:	08008c74 	.word	0x08008c74

08006240 <std>:
 8006240:	2300      	movs	r3, #0
 8006242:	b510      	push	{r4, lr}
 8006244:	4604      	mov	r4, r0
 8006246:	e9c0 3300 	strd	r3, r3, [r0]
 800624a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800624e:	6083      	str	r3, [r0, #8]
 8006250:	8181      	strh	r1, [r0, #12]
 8006252:	6643      	str	r3, [r0, #100]	@ 0x64
 8006254:	81c2      	strh	r2, [r0, #14]
 8006256:	6183      	str	r3, [r0, #24]
 8006258:	4619      	mov	r1, r3
 800625a:	2208      	movs	r2, #8
 800625c:	305c      	adds	r0, #92	@ 0x5c
 800625e:	f000 f8f4 	bl	800644a <memset>
 8006262:	4b0d      	ldr	r3, [pc, #52]	@ (8006298 <std+0x58>)
 8006264:	6263      	str	r3, [r4, #36]	@ 0x24
 8006266:	4b0d      	ldr	r3, [pc, #52]	@ (800629c <std+0x5c>)
 8006268:	62a3      	str	r3, [r4, #40]	@ 0x28
 800626a:	4b0d      	ldr	r3, [pc, #52]	@ (80062a0 <std+0x60>)
 800626c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800626e:	4b0d      	ldr	r3, [pc, #52]	@ (80062a4 <std+0x64>)
 8006270:	6323      	str	r3, [r4, #48]	@ 0x30
 8006272:	4b0d      	ldr	r3, [pc, #52]	@ (80062a8 <std+0x68>)
 8006274:	6224      	str	r4, [r4, #32]
 8006276:	429c      	cmp	r4, r3
 8006278:	d006      	beq.n	8006288 <std+0x48>
 800627a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800627e:	4294      	cmp	r4, r2
 8006280:	d002      	beq.n	8006288 <std+0x48>
 8006282:	33d0      	adds	r3, #208	@ 0xd0
 8006284:	429c      	cmp	r4, r3
 8006286:	d105      	bne.n	8006294 <std+0x54>
 8006288:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800628c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006290:	f000 b97a 	b.w	8006588 <__retarget_lock_init_recursive>
 8006294:	bd10      	pop	{r4, pc}
 8006296:	bf00      	nop
 8006298:	080063c5 	.word	0x080063c5
 800629c:	080063e7 	.word	0x080063e7
 80062a0:	0800641f 	.word	0x0800641f
 80062a4:	08006443 	.word	0x08006443
 80062a8:	20000480 	.word	0x20000480

080062ac <stdio_exit_handler>:
 80062ac:	4a02      	ldr	r2, [pc, #8]	@ (80062b8 <stdio_exit_handler+0xc>)
 80062ae:	4903      	ldr	r1, [pc, #12]	@ (80062bc <stdio_exit_handler+0x10>)
 80062b0:	4803      	ldr	r0, [pc, #12]	@ (80062c0 <stdio_exit_handler+0x14>)
 80062b2:	f000 b869 	b.w	8006388 <_fwalk_sglue>
 80062b6:	bf00      	nop
 80062b8:	20000018 	.word	0x20000018
 80062bc:	0800841d 	.word	0x0800841d
 80062c0:	20000194 	.word	0x20000194

080062c4 <cleanup_stdio>:
 80062c4:	6841      	ldr	r1, [r0, #4]
 80062c6:	4b0c      	ldr	r3, [pc, #48]	@ (80062f8 <cleanup_stdio+0x34>)
 80062c8:	4299      	cmp	r1, r3
 80062ca:	b510      	push	{r4, lr}
 80062cc:	4604      	mov	r4, r0
 80062ce:	d001      	beq.n	80062d4 <cleanup_stdio+0x10>
 80062d0:	f002 f8a4 	bl	800841c <_fflush_r>
 80062d4:	68a1      	ldr	r1, [r4, #8]
 80062d6:	4b09      	ldr	r3, [pc, #36]	@ (80062fc <cleanup_stdio+0x38>)
 80062d8:	4299      	cmp	r1, r3
 80062da:	d002      	beq.n	80062e2 <cleanup_stdio+0x1e>
 80062dc:	4620      	mov	r0, r4
 80062de:	f002 f89d 	bl	800841c <_fflush_r>
 80062e2:	68e1      	ldr	r1, [r4, #12]
 80062e4:	4b06      	ldr	r3, [pc, #24]	@ (8006300 <cleanup_stdio+0x3c>)
 80062e6:	4299      	cmp	r1, r3
 80062e8:	d004      	beq.n	80062f4 <cleanup_stdio+0x30>
 80062ea:	4620      	mov	r0, r4
 80062ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f0:	f002 b894 	b.w	800841c <_fflush_r>
 80062f4:	bd10      	pop	{r4, pc}
 80062f6:	bf00      	nop
 80062f8:	20000480 	.word	0x20000480
 80062fc:	200004e8 	.word	0x200004e8
 8006300:	20000550 	.word	0x20000550

08006304 <global_stdio_init.part.0>:
 8006304:	b510      	push	{r4, lr}
 8006306:	4b0b      	ldr	r3, [pc, #44]	@ (8006334 <global_stdio_init.part.0+0x30>)
 8006308:	4c0b      	ldr	r4, [pc, #44]	@ (8006338 <global_stdio_init.part.0+0x34>)
 800630a:	4a0c      	ldr	r2, [pc, #48]	@ (800633c <global_stdio_init.part.0+0x38>)
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	4620      	mov	r0, r4
 8006310:	2200      	movs	r2, #0
 8006312:	2104      	movs	r1, #4
 8006314:	f7ff ff94 	bl	8006240 <std>
 8006318:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800631c:	2201      	movs	r2, #1
 800631e:	2109      	movs	r1, #9
 8006320:	f7ff ff8e 	bl	8006240 <std>
 8006324:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006328:	2202      	movs	r2, #2
 800632a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800632e:	2112      	movs	r1, #18
 8006330:	f7ff bf86 	b.w	8006240 <std>
 8006334:	200005b8 	.word	0x200005b8
 8006338:	20000480 	.word	0x20000480
 800633c:	080062ad 	.word	0x080062ad

08006340 <__sfp_lock_acquire>:
 8006340:	4801      	ldr	r0, [pc, #4]	@ (8006348 <__sfp_lock_acquire+0x8>)
 8006342:	f000 b922 	b.w	800658a <__retarget_lock_acquire_recursive>
 8006346:	bf00      	nop
 8006348:	200005c1 	.word	0x200005c1

0800634c <__sfp_lock_release>:
 800634c:	4801      	ldr	r0, [pc, #4]	@ (8006354 <__sfp_lock_release+0x8>)
 800634e:	f000 b91d 	b.w	800658c <__retarget_lock_release_recursive>
 8006352:	bf00      	nop
 8006354:	200005c1 	.word	0x200005c1

08006358 <__sinit>:
 8006358:	b510      	push	{r4, lr}
 800635a:	4604      	mov	r4, r0
 800635c:	f7ff fff0 	bl	8006340 <__sfp_lock_acquire>
 8006360:	6a23      	ldr	r3, [r4, #32]
 8006362:	b11b      	cbz	r3, 800636c <__sinit+0x14>
 8006364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006368:	f7ff bff0 	b.w	800634c <__sfp_lock_release>
 800636c:	4b04      	ldr	r3, [pc, #16]	@ (8006380 <__sinit+0x28>)
 800636e:	6223      	str	r3, [r4, #32]
 8006370:	4b04      	ldr	r3, [pc, #16]	@ (8006384 <__sinit+0x2c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1f5      	bne.n	8006364 <__sinit+0xc>
 8006378:	f7ff ffc4 	bl	8006304 <global_stdio_init.part.0>
 800637c:	e7f2      	b.n	8006364 <__sinit+0xc>
 800637e:	bf00      	nop
 8006380:	080062c5 	.word	0x080062c5
 8006384:	200005b8 	.word	0x200005b8

08006388 <_fwalk_sglue>:
 8006388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800638c:	4607      	mov	r7, r0
 800638e:	4688      	mov	r8, r1
 8006390:	4614      	mov	r4, r2
 8006392:	2600      	movs	r6, #0
 8006394:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006398:	f1b9 0901 	subs.w	r9, r9, #1
 800639c:	d505      	bpl.n	80063aa <_fwalk_sglue+0x22>
 800639e:	6824      	ldr	r4, [r4, #0]
 80063a0:	2c00      	cmp	r4, #0
 80063a2:	d1f7      	bne.n	8006394 <_fwalk_sglue+0xc>
 80063a4:	4630      	mov	r0, r6
 80063a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063aa:	89ab      	ldrh	r3, [r5, #12]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d907      	bls.n	80063c0 <_fwalk_sglue+0x38>
 80063b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063b4:	3301      	adds	r3, #1
 80063b6:	d003      	beq.n	80063c0 <_fwalk_sglue+0x38>
 80063b8:	4629      	mov	r1, r5
 80063ba:	4638      	mov	r0, r7
 80063bc:	47c0      	blx	r8
 80063be:	4306      	orrs	r6, r0
 80063c0:	3568      	adds	r5, #104	@ 0x68
 80063c2:	e7e9      	b.n	8006398 <_fwalk_sglue+0x10>

080063c4 <__sread>:
 80063c4:	b510      	push	{r4, lr}
 80063c6:	460c      	mov	r4, r1
 80063c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063cc:	f000 f87e 	bl	80064cc <_read_r>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	bfab      	itete	ge
 80063d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80063d6:	89a3      	ldrhlt	r3, [r4, #12]
 80063d8:	181b      	addge	r3, r3, r0
 80063da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063de:	bfac      	ite	ge
 80063e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063e2:	81a3      	strhlt	r3, [r4, #12]
 80063e4:	bd10      	pop	{r4, pc}

080063e6 <__swrite>:
 80063e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ea:	461f      	mov	r7, r3
 80063ec:	898b      	ldrh	r3, [r1, #12]
 80063ee:	05db      	lsls	r3, r3, #23
 80063f0:	4605      	mov	r5, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	4616      	mov	r6, r2
 80063f6:	d505      	bpl.n	8006404 <__swrite+0x1e>
 80063f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fc:	2302      	movs	r3, #2
 80063fe:	2200      	movs	r2, #0
 8006400:	f000 f852 	bl	80064a8 <_lseek_r>
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800640a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800640e:	81a3      	strh	r3, [r4, #12]
 8006410:	4632      	mov	r2, r6
 8006412:	463b      	mov	r3, r7
 8006414:	4628      	mov	r0, r5
 8006416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800641a:	f000 b879 	b.w	8006510 <_write_r>

0800641e <__sseek>:
 800641e:	b510      	push	{r4, lr}
 8006420:	460c      	mov	r4, r1
 8006422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006426:	f000 f83f 	bl	80064a8 <_lseek_r>
 800642a:	1c43      	adds	r3, r0, #1
 800642c:	89a3      	ldrh	r3, [r4, #12]
 800642e:	bf15      	itete	ne
 8006430:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006432:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006436:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800643a:	81a3      	strheq	r3, [r4, #12]
 800643c:	bf18      	it	ne
 800643e:	81a3      	strhne	r3, [r4, #12]
 8006440:	bd10      	pop	{r4, pc}

08006442 <__sclose>:
 8006442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006446:	f000 b81f 	b.w	8006488 <_close_r>

0800644a <memset>:
 800644a:	4402      	add	r2, r0
 800644c:	4603      	mov	r3, r0
 800644e:	4293      	cmp	r3, r2
 8006450:	d100      	bne.n	8006454 <memset+0xa>
 8006452:	4770      	bx	lr
 8006454:	f803 1b01 	strb.w	r1, [r3], #1
 8006458:	e7f9      	b.n	800644e <memset+0x4>

0800645a <strncmp>:
 800645a:	b510      	push	{r4, lr}
 800645c:	b16a      	cbz	r2, 800647a <strncmp+0x20>
 800645e:	3901      	subs	r1, #1
 8006460:	1884      	adds	r4, r0, r2
 8006462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006466:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800646a:	429a      	cmp	r2, r3
 800646c:	d103      	bne.n	8006476 <strncmp+0x1c>
 800646e:	42a0      	cmp	r0, r4
 8006470:	d001      	beq.n	8006476 <strncmp+0x1c>
 8006472:	2a00      	cmp	r2, #0
 8006474:	d1f5      	bne.n	8006462 <strncmp+0x8>
 8006476:	1ad0      	subs	r0, r2, r3
 8006478:	bd10      	pop	{r4, pc}
 800647a:	4610      	mov	r0, r2
 800647c:	e7fc      	b.n	8006478 <strncmp+0x1e>
	...

08006480 <_localeconv_r>:
 8006480:	4800      	ldr	r0, [pc, #0]	@ (8006484 <_localeconv_r+0x4>)
 8006482:	4770      	bx	lr
 8006484:	20000114 	.word	0x20000114

08006488 <_close_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	4d06      	ldr	r5, [pc, #24]	@ (80064a4 <_close_r+0x1c>)
 800648c:	2300      	movs	r3, #0
 800648e:	4604      	mov	r4, r0
 8006490:	4608      	mov	r0, r1
 8006492:	602b      	str	r3, [r5, #0]
 8006494:	f7fc f98c 	bl	80027b0 <_close>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d102      	bne.n	80064a2 <_close_r+0x1a>
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	b103      	cbz	r3, 80064a2 <_close_r+0x1a>
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	bd38      	pop	{r3, r4, r5, pc}
 80064a4:	200005bc 	.word	0x200005bc

080064a8 <_lseek_r>:
 80064a8:	b538      	push	{r3, r4, r5, lr}
 80064aa:	4d07      	ldr	r5, [pc, #28]	@ (80064c8 <_lseek_r+0x20>)
 80064ac:	4604      	mov	r4, r0
 80064ae:	4608      	mov	r0, r1
 80064b0:	4611      	mov	r1, r2
 80064b2:	2200      	movs	r2, #0
 80064b4:	602a      	str	r2, [r5, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	f7fc f9a1 	bl	80027fe <_lseek>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d102      	bne.n	80064c6 <_lseek_r+0x1e>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	b103      	cbz	r3, 80064c6 <_lseek_r+0x1e>
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	200005bc 	.word	0x200005bc

080064cc <_read_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4d07      	ldr	r5, [pc, #28]	@ (80064ec <_read_r+0x20>)
 80064d0:	4604      	mov	r4, r0
 80064d2:	4608      	mov	r0, r1
 80064d4:	4611      	mov	r1, r2
 80064d6:	2200      	movs	r2, #0
 80064d8:	602a      	str	r2, [r5, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	f7fc f92f 	bl	800273e <_read>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d102      	bne.n	80064ea <_read_r+0x1e>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	b103      	cbz	r3, 80064ea <_read_r+0x1e>
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	200005bc 	.word	0x200005bc

080064f0 <_sbrk_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4d06      	ldr	r5, [pc, #24]	@ (800650c <_sbrk_r+0x1c>)
 80064f4:	2300      	movs	r3, #0
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	602b      	str	r3, [r5, #0]
 80064fc:	f7fc f98c 	bl	8002818 <_sbrk>
 8006500:	1c43      	adds	r3, r0, #1
 8006502:	d102      	bne.n	800650a <_sbrk_r+0x1a>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	b103      	cbz	r3, 800650a <_sbrk_r+0x1a>
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	200005bc 	.word	0x200005bc

08006510 <_write_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4d07      	ldr	r5, [pc, #28]	@ (8006530 <_write_r+0x20>)
 8006514:	4604      	mov	r4, r0
 8006516:	4608      	mov	r0, r1
 8006518:	4611      	mov	r1, r2
 800651a:	2200      	movs	r2, #0
 800651c:	602a      	str	r2, [r5, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	f7fc f92a 	bl	8002778 <_write>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d102      	bne.n	800652e <_write_r+0x1e>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	b103      	cbz	r3, 800652e <_write_r+0x1e>
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	200005bc 	.word	0x200005bc

08006534 <__errno>:
 8006534:	4b01      	ldr	r3, [pc, #4]	@ (800653c <__errno+0x8>)
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	20000190 	.word	0x20000190

08006540 <__libc_init_array>:
 8006540:	b570      	push	{r4, r5, r6, lr}
 8006542:	4d0d      	ldr	r5, [pc, #52]	@ (8006578 <__libc_init_array+0x38>)
 8006544:	4c0d      	ldr	r4, [pc, #52]	@ (800657c <__libc_init_array+0x3c>)
 8006546:	1b64      	subs	r4, r4, r5
 8006548:	10a4      	asrs	r4, r4, #2
 800654a:	2600      	movs	r6, #0
 800654c:	42a6      	cmp	r6, r4
 800654e:	d109      	bne.n	8006564 <__libc_init_array+0x24>
 8006550:	4d0b      	ldr	r5, [pc, #44]	@ (8006580 <__libc_init_array+0x40>)
 8006552:	4c0c      	ldr	r4, [pc, #48]	@ (8006584 <__libc_init_array+0x44>)
 8006554:	f002 fa72 	bl	8008a3c <_init>
 8006558:	1b64      	subs	r4, r4, r5
 800655a:	10a4      	asrs	r4, r4, #2
 800655c:	2600      	movs	r6, #0
 800655e:	42a6      	cmp	r6, r4
 8006560:	d105      	bne.n	800656e <__libc_init_array+0x2e>
 8006562:	bd70      	pop	{r4, r5, r6, pc}
 8006564:	f855 3b04 	ldr.w	r3, [r5], #4
 8006568:	4798      	blx	r3
 800656a:	3601      	adds	r6, #1
 800656c:	e7ee      	b.n	800654c <__libc_init_array+0xc>
 800656e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006572:	4798      	blx	r3
 8006574:	3601      	adds	r6, #1
 8006576:	e7f2      	b.n	800655e <__libc_init_array+0x1e>
 8006578:	08008f28 	.word	0x08008f28
 800657c:	08008f28 	.word	0x08008f28
 8006580:	08008f28 	.word	0x08008f28
 8006584:	08008f2c 	.word	0x08008f2c

08006588 <__retarget_lock_init_recursive>:
 8006588:	4770      	bx	lr

0800658a <__retarget_lock_acquire_recursive>:
 800658a:	4770      	bx	lr

0800658c <__retarget_lock_release_recursive>:
 800658c:	4770      	bx	lr

0800658e <memcpy>:
 800658e:	440a      	add	r2, r1
 8006590:	4291      	cmp	r1, r2
 8006592:	f100 33ff 	add.w	r3, r0, #4294967295
 8006596:	d100      	bne.n	800659a <memcpy+0xc>
 8006598:	4770      	bx	lr
 800659a:	b510      	push	{r4, lr}
 800659c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065a4:	4291      	cmp	r1, r2
 80065a6:	d1f9      	bne.n	800659c <memcpy+0xe>
 80065a8:	bd10      	pop	{r4, pc}
 80065aa:	0000      	movs	r0, r0
 80065ac:	0000      	movs	r0, r0
	...

080065b0 <nan>:
 80065b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80065b8 <nan+0x8>
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	00000000 	.word	0x00000000
 80065bc:	7ff80000 	.word	0x7ff80000

080065c0 <quorem>:
 80065c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	6903      	ldr	r3, [r0, #16]
 80065c6:	690c      	ldr	r4, [r1, #16]
 80065c8:	42a3      	cmp	r3, r4
 80065ca:	4607      	mov	r7, r0
 80065cc:	db7e      	blt.n	80066cc <quorem+0x10c>
 80065ce:	3c01      	subs	r4, #1
 80065d0:	f101 0814 	add.w	r8, r1, #20
 80065d4:	00a3      	lsls	r3, r4, #2
 80065d6:	f100 0514 	add.w	r5, r0, #20
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065ea:	3301      	adds	r3, #1
 80065ec:	429a      	cmp	r2, r3
 80065ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80065f6:	d32e      	bcc.n	8006656 <quorem+0x96>
 80065f8:	f04f 0a00 	mov.w	sl, #0
 80065fc:	46c4      	mov	ip, r8
 80065fe:	46ae      	mov	lr, r5
 8006600:	46d3      	mov	fp, sl
 8006602:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006606:	b298      	uxth	r0, r3
 8006608:	fb06 a000 	mla	r0, r6, r0, sl
 800660c:	0c02      	lsrs	r2, r0, #16
 800660e:	0c1b      	lsrs	r3, r3, #16
 8006610:	fb06 2303 	mla	r3, r6, r3, r2
 8006614:	f8de 2000 	ldr.w	r2, [lr]
 8006618:	b280      	uxth	r0, r0
 800661a:	b292      	uxth	r2, r2
 800661c:	1a12      	subs	r2, r2, r0
 800661e:	445a      	add	r2, fp
 8006620:	f8de 0000 	ldr.w	r0, [lr]
 8006624:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006628:	b29b      	uxth	r3, r3
 800662a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800662e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006632:	b292      	uxth	r2, r2
 8006634:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006638:	45e1      	cmp	r9, ip
 800663a:	f84e 2b04 	str.w	r2, [lr], #4
 800663e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006642:	d2de      	bcs.n	8006602 <quorem+0x42>
 8006644:	9b00      	ldr	r3, [sp, #0]
 8006646:	58eb      	ldr	r3, [r5, r3]
 8006648:	b92b      	cbnz	r3, 8006656 <quorem+0x96>
 800664a:	9b01      	ldr	r3, [sp, #4]
 800664c:	3b04      	subs	r3, #4
 800664e:	429d      	cmp	r5, r3
 8006650:	461a      	mov	r2, r3
 8006652:	d32f      	bcc.n	80066b4 <quorem+0xf4>
 8006654:	613c      	str	r4, [r7, #16]
 8006656:	4638      	mov	r0, r7
 8006658:	f001 fc58 	bl	8007f0c <__mcmp>
 800665c:	2800      	cmp	r0, #0
 800665e:	db25      	blt.n	80066ac <quorem+0xec>
 8006660:	4629      	mov	r1, r5
 8006662:	2000      	movs	r0, #0
 8006664:	f858 2b04 	ldr.w	r2, [r8], #4
 8006668:	f8d1 c000 	ldr.w	ip, [r1]
 800666c:	fa1f fe82 	uxth.w	lr, r2
 8006670:	fa1f f38c 	uxth.w	r3, ip
 8006674:	eba3 030e 	sub.w	r3, r3, lr
 8006678:	4403      	add	r3, r0
 800667a:	0c12      	lsrs	r2, r2, #16
 800667c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006680:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006684:	b29b      	uxth	r3, r3
 8006686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800668a:	45c1      	cmp	r9, r8
 800668c:	f841 3b04 	str.w	r3, [r1], #4
 8006690:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006694:	d2e6      	bcs.n	8006664 <quorem+0xa4>
 8006696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800669a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800669e:	b922      	cbnz	r2, 80066aa <quorem+0xea>
 80066a0:	3b04      	subs	r3, #4
 80066a2:	429d      	cmp	r5, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	d30b      	bcc.n	80066c0 <quorem+0x100>
 80066a8:	613c      	str	r4, [r7, #16]
 80066aa:	3601      	adds	r6, #1
 80066ac:	4630      	mov	r0, r6
 80066ae:	b003      	add	sp, #12
 80066b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b4:	6812      	ldr	r2, [r2, #0]
 80066b6:	3b04      	subs	r3, #4
 80066b8:	2a00      	cmp	r2, #0
 80066ba:	d1cb      	bne.n	8006654 <quorem+0x94>
 80066bc:	3c01      	subs	r4, #1
 80066be:	e7c6      	b.n	800664e <quorem+0x8e>
 80066c0:	6812      	ldr	r2, [r2, #0]
 80066c2:	3b04      	subs	r3, #4
 80066c4:	2a00      	cmp	r2, #0
 80066c6:	d1ef      	bne.n	80066a8 <quorem+0xe8>
 80066c8:	3c01      	subs	r4, #1
 80066ca:	e7ea      	b.n	80066a2 <quorem+0xe2>
 80066cc:	2000      	movs	r0, #0
 80066ce:	e7ee      	b.n	80066ae <quorem+0xee>

080066d0 <_dtoa_r>:
 80066d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d4:	69c7      	ldr	r7, [r0, #28]
 80066d6:	b099      	sub	sp, #100	@ 0x64
 80066d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80066dc:	ec55 4b10 	vmov	r4, r5, d0
 80066e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80066e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80066e4:	4683      	mov	fp, r0
 80066e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80066e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80066ea:	b97f      	cbnz	r7, 800670c <_dtoa_r+0x3c>
 80066ec:	2010      	movs	r0, #16
 80066ee:	f7fe fa4b 	bl	8004b88 <malloc>
 80066f2:	4602      	mov	r2, r0
 80066f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80066f8:	b920      	cbnz	r0, 8006704 <_dtoa_r+0x34>
 80066fa:	4ba7      	ldr	r3, [pc, #668]	@ (8006998 <_dtoa_r+0x2c8>)
 80066fc:	21ef      	movs	r1, #239	@ 0xef
 80066fe:	48a7      	ldr	r0, [pc, #668]	@ (800699c <_dtoa_r+0x2cc>)
 8006700:	f001 feb4 	bl	800846c <__assert_func>
 8006704:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006708:	6007      	str	r7, [r0, #0]
 800670a:	60c7      	str	r7, [r0, #12]
 800670c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006710:	6819      	ldr	r1, [r3, #0]
 8006712:	b159      	cbz	r1, 800672c <_dtoa_r+0x5c>
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	604a      	str	r2, [r1, #4]
 8006718:	2301      	movs	r3, #1
 800671a:	4093      	lsls	r3, r2
 800671c:	608b      	str	r3, [r1, #8]
 800671e:	4658      	mov	r0, fp
 8006720:	f001 f970 	bl	8007a04 <_Bfree>
 8006724:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	1e2b      	subs	r3, r5, #0
 800672e:	bfb9      	ittee	lt
 8006730:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006734:	9303      	strlt	r3, [sp, #12]
 8006736:	2300      	movge	r3, #0
 8006738:	6033      	strge	r3, [r6, #0]
 800673a:	9f03      	ldr	r7, [sp, #12]
 800673c:	4b98      	ldr	r3, [pc, #608]	@ (80069a0 <_dtoa_r+0x2d0>)
 800673e:	bfbc      	itt	lt
 8006740:	2201      	movlt	r2, #1
 8006742:	6032      	strlt	r2, [r6, #0]
 8006744:	43bb      	bics	r3, r7
 8006746:	d112      	bne.n	800676e <_dtoa_r+0x9e>
 8006748:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800674a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800674e:	6013      	str	r3, [r2, #0]
 8006750:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006754:	4323      	orrs	r3, r4
 8006756:	f000 854d 	beq.w	80071f4 <_dtoa_r+0xb24>
 800675a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800675c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80069b4 <_dtoa_r+0x2e4>
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 854f 	beq.w	8007204 <_dtoa_r+0xb34>
 8006766:	f10a 0303 	add.w	r3, sl, #3
 800676a:	f000 bd49 	b.w	8007200 <_dtoa_r+0xb30>
 800676e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006772:	2200      	movs	r2, #0
 8006774:	ec51 0b17 	vmov	r0, r1, d7
 8006778:	2300      	movs	r3, #0
 800677a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800677e:	f7fa f9d3 	bl	8000b28 <__aeabi_dcmpeq>
 8006782:	4680      	mov	r8, r0
 8006784:	b158      	cbz	r0, 800679e <_dtoa_r+0xce>
 8006786:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006788:	2301      	movs	r3, #1
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800678e:	b113      	cbz	r3, 8006796 <_dtoa_r+0xc6>
 8006790:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006792:	4b84      	ldr	r3, [pc, #528]	@ (80069a4 <_dtoa_r+0x2d4>)
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80069b8 <_dtoa_r+0x2e8>
 800679a:	f000 bd33 	b.w	8007204 <_dtoa_r+0xb34>
 800679e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80067a2:	aa16      	add	r2, sp, #88	@ 0x58
 80067a4:	a917      	add	r1, sp, #92	@ 0x5c
 80067a6:	4658      	mov	r0, fp
 80067a8:	f001 fcd0 	bl	800814c <__d2b>
 80067ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80067b0:	4681      	mov	r9, r0
 80067b2:	2e00      	cmp	r6, #0
 80067b4:	d077      	beq.n	80068a6 <_dtoa_r+0x1d6>
 80067b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80067bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80067c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80067cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80067d0:	4619      	mov	r1, r3
 80067d2:	2200      	movs	r2, #0
 80067d4:	4b74      	ldr	r3, [pc, #464]	@ (80069a8 <_dtoa_r+0x2d8>)
 80067d6:	f7f9 fd87 	bl	80002e8 <__aeabi_dsub>
 80067da:	a369      	add	r3, pc, #420	@ (adr r3, 8006980 <_dtoa_r+0x2b0>)
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	f7f9 ff3a 	bl	8000658 <__aeabi_dmul>
 80067e4:	a368      	add	r3, pc, #416	@ (adr r3, 8006988 <_dtoa_r+0x2b8>)
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	f7f9 fd7f 	bl	80002ec <__adddf3>
 80067ee:	4604      	mov	r4, r0
 80067f0:	4630      	mov	r0, r6
 80067f2:	460d      	mov	r5, r1
 80067f4:	f7f9 fec6 	bl	8000584 <__aeabi_i2d>
 80067f8:	a365      	add	r3, pc, #404	@ (adr r3, 8006990 <_dtoa_r+0x2c0>)
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f7f9 ff2b 	bl	8000658 <__aeabi_dmul>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4620      	mov	r0, r4
 8006808:	4629      	mov	r1, r5
 800680a:	f7f9 fd6f 	bl	80002ec <__adddf3>
 800680e:	4604      	mov	r4, r0
 8006810:	460d      	mov	r5, r1
 8006812:	f7fa f9d1 	bl	8000bb8 <__aeabi_d2iz>
 8006816:	2200      	movs	r2, #0
 8006818:	4607      	mov	r7, r0
 800681a:	2300      	movs	r3, #0
 800681c:	4620      	mov	r0, r4
 800681e:	4629      	mov	r1, r5
 8006820:	f7fa f98c 	bl	8000b3c <__aeabi_dcmplt>
 8006824:	b140      	cbz	r0, 8006838 <_dtoa_r+0x168>
 8006826:	4638      	mov	r0, r7
 8006828:	f7f9 feac 	bl	8000584 <__aeabi_i2d>
 800682c:	4622      	mov	r2, r4
 800682e:	462b      	mov	r3, r5
 8006830:	f7fa f97a 	bl	8000b28 <__aeabi_dcmpeq>
 8006834:	b900      	cbnz	r0, 8006838 <_dtoa_r+0x168>
 8006836:	3f01      	subs	r7, #1
 8006838:	2f16      	cmp	r7, #22
 800683a:	d851      	bhi.n	80068e0 <_dtoa_r+0x210>
 800683c:	4b5b      	ldr	r3, [pc, #364]	@ (80069ac <_dtoa_r+0x2dc>)
 800683e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800684a:	f7fa f977 	bl	8000b3c <__aeabi_dcmplt>
 800684e:	2800      	cmp	r0, #0
 8006850:	d048      	beq.n	80068e4 <_dtoa_r+0x214>
 8006852:	3f01      	subs	r7, #1
 8006854:	2300      	movs	r3, #0
 8006856:	9312      	str	r3, [sp, #72]	@ 0x48
 8006858:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800685a:	1b9b      	subs	r3, r3, r6
 800685c:	1e5a      	subs	r2, r3, #1
 800685e:	bf44      	itt	mi
 8006860:	f1c3 0801 	rsbmi	r8, r3, #1
 8006864:	2300      	movmi	r3, #0
 8006866:	9208      	str	r2, [sp, #32]
 8006868:	bf54      	ite	pl
 800686a:	f04f 0800 	movpl.w	r8, #0
 800686e:	9308      	strmi	r3, [sp, #32]
 8006870:	2f00      	cmp	r7, #0
 8006872:	db39      	blt.n	80068e8 <_dtoa_r+0x218>
 8006874:	9b08      	ldr	r3, [sp, #32]
 8006876:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006878:	443b      	add	r3, r7
 800687a:	9308      	str	r3, [sp, #32]
 800687c:	2300      	movs	r3, #0
 800687e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006882:	2b09      	cmp	r3, #9
 8006884:	d864      	bhi.n	8006950 <_dtoa_r+0x280>
 8006886:	2b05      	cmp	r3, #5
 8006888:	bfc4      	itt	gt
 800688a:	3b04      	subgt	r3, #4
 800688c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800688e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006890:	f1a3 0302 	sub.w	r3, r3, #2
 8006894:	bfcc      	ite	gt
 8006896:	2400      	movgt	r4, #0
 8006898:	2401      	movle	r4, #1
 800689a:	2b03      	cmp	r3, #3
 800689c:	d863      	bhi.n	8006966 <_dtoa_r+0x296>
 800689e:	e8df f003 	tbb	[pc, r3]
 80068a2:	372a      	.short	0x372a
 80068a4:	5535      	.short	0x5535
 80068a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80068aa:	441e      	add	r6, r3
 80068ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80068b0:	2b20      	cmp	r3, #32
 80068b2:	bfc1      	itttt	gt
 80068b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80068b8:	409f      	lslgt	r7, r3
 80068ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80068be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80068c2:	bfd6      	itet	le
 80068c4:	f1c3 0320 	rsble	r3, r3, #32
 80068c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80068cc:	fa04 f003 	lslle.w	r0, r4, r3
 80068d0:	f7f9 fe48 	bl	8000564 <__aeabi_ui2d>
 80068d4:	2201      	movs	r2, #1
 80068d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80068da:	3e01      	subs	r6, #1
 80068dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80068de:	e777      	b.n	80067d0 <_dtoa_r+0x100>
 80068e0:	2301      	movs	r3, #1
 80068e2:	e7b8      	b.n	8006856 <_dtoa_r+0x186>
 80068e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80068e6:	e7b7      	b.n	8006858 <_dtoa_r+0x188>
 80068e8:	427b      	negs	r3, r7
 80068ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80068ec:	2300      	movs	r3, #0
 80068ee:	eba8 0807 	sub.w	r8, r8, r7
 80068f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80068f4:	e7c4      	b.n	8006880 <_dtoa_r+0x1b0>
 80068f6:	2300      	movs	r3, #0
 80068f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	dc35      	bgt.n	800696c <_dtoa_r+0x29c>
 8006900:	2301      	movs	r3, #1
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	9307      	str	r3, [sp, #28]
 8006906:	461a      	mov	r2, r3
 8006908:	920e      	str	r2, [sp, #56]	@ 0x38
 800690a:	e00b      	b.n	8006924 <_dtoa_r+0x254>
 800690c:	2301      	movs	r3, #1
 800690e:	e7f3      	b.n	80068f8 <_dtoa_r+0x228>
 8006910:	2300      	movs	r3, #0
 8006912:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006916:	18fb      	adds	r3, r7, r3
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	3301      	adds	r3, #1
 800691c:	2b01      	cmp	r3, #1
 800691e:	9307      	str	r3, [sp, #28]
 8006920:	bfb8      	it	lt
 8006922:	2301      	movlt	r3, #1
 8006924:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006928:	2100      	movs	r1, #0
 800692a:	2204      	movs	r2, #4
 800692c:	f102 0514 	add.w	r5, r2, #20
 8006930:	429d      	cmp	r5, r3
 8006932:	d91f      	bls.n	8006974 <_dtoa_r+0x2a4>
 8006934:	6041      	str	r1, [r0, #4]
 8006936:	4658      	mov	r0, fp
 8006938:	f001 f824 	bl	8007984 <_Balloc>
 800693c:	4682      	mov	sl, r0
 800693e:	2800      	cmp	r0, #0
 8006940:	d13c      	bne.n	80069bc <_dtoa_r+0x2ec>
 8006942:	4b1b      	ldr	r3, [pc, #108]	@ (80069b0 <_dtoa_r+0x2e0>)
 8006944:	4602      	mov	r2, r0
 8006946:	f240 11af 	movw	r1, #431	@ 0x1af
 800694a:	e6d8      	b.n	80066fe <_dtoa_r+0x2e>
 800694c:	2301      	movs	r3, #1
 800694e:	e7e0      	b.n	8006912 <_dtoa_r+0x242>
 8006950:	2401      	movs	r4, #1
 8006952:	2300      	movs	r3, #0
 8006954:	9309      	str	r3, [sp, #36]	@ 0x24
 8006956:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006958:	f04f 33ff 	mov.w	r3, #4294967295
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	9307      	str	r3, [sp, #28]
 8006960:	2200      	movs	r2, #0
 8006962:	2312      	movs	r3, #18
 8006964:	e7d0      	b.n	8006908 <_dtoa_r+0x238>
 8006966:	2301      	movs	r3, #1
 8006968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800696a:	e7f5      	b.n	8006958 <_dtoa_r+0x288>
 800696c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	9307      	str	r3, [sp, #28]
 8006972:	e7d7      	b.n	8006924 <_dtoa_r+0x254>
 8006974:	3101      	adds	r1, #1
 8006976:	0052      	lsls	r2, r2, #1
 8006978:	e7d8      	b.n	800692c <_dtoa_r+0x25c>
 800697a:	bf00      	nop
 800697c:	f3af 8000 	nop.w
 8006980:	636f4361 	.word	0x636f4361
 8006984:	3fd287a7 	.word	0x3fd287a7
 8006988:	8b60c8b3 	.word	0x8b60c8b3
 800698c:	3fc68a28 	.word	0x3fc68a28
 8006990:	509f79fb 	.word	0x509f79fb
 8006994:	3fd34413 	.word	0x3fd34413
 8006998:	08008c9a 	.word	0x08008c9a
 800699c:	08008cb1 	.word	0x08008cb1
 80069a0:	7ff00000 	.word	0x7ff00000
 80069a4:	08008c62 	.word	0x08008c62
 80069a8:	3ff80000 	.word	0x3ff80000
 80069ac:	08008e08 	.word	0x08008e08
 80069b0:	08008d09 	.word	0x08008d09
 80069b4:	08008c96 	.word	0x08008c96
 80069b8:	08008c61 	.word	0x08008c61
 80069bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80069c0:	6018      	str	r0, [r3, #0]
 80069c2:	9b07      	ldr	r3, [sp, #28]
 80069c4:	2b0e      	cmp	r3, #14
 80069c6:	f200 80a4 	bhi.w	8006b12 <_dtoa_r+0x442>
 80069ca:	2c00      	cmp	r4, #0
 80069cc:	f000 80a1 	beq.w	8006b12 <_dtoa_r+0x442>
 80069d0:	2f00      	cmp	r7, #0
 80069d2:	dd33      	ble.n	8006a3c <_dtoa_r+0x36c>
 80069d4:	4bad      	ldr	r3, [pc, #692]	@ (8006c8c <_dtoa_r+0x5bc>)
 80069d6:	f007 020f 	and.w	r2, r7, #15
 80069da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069de:	ed93 7b00 	vldr	d7, [r3]
 80069e2:	05f8      	lsls	r0, r7, #23
 80069e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80069e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80069ec:	d516      	bpl.n	8006a1c <_dtoa_r+0x34c>
 80069ee:	4ba8      	ldr	r3, [pc, #672]	@ (8006c90 <_dtoa_r+0x5c0>)
 80069f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069f8:	f7f9 ff58 	bl	80008ac <__aeabi_ddiv>
 80069fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a00:	f004 040f 	and.w	r4, r4, #15
 8006a04:	2603      	movs	r6, #3
 8006a06:	4da2      	ldr	r5, [pc, #648]	@ (8006c90 <_dtoa_r+0x5c0>)
 8006a08:	b954      	cbnz	r4, 8006a20 <_dtoa_r+0x350>
 8006a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a12:	f7f9 ff4b 	bl	80008ac <__aeabi_ddiv>
 8006a16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a1a:	e028      	b.n	8006a6e <_dtoa_r+0x39e>
 8006a1c:	2602      	movs	r6, #2
 8006a1e:	e7f2      	b.n	8006a06 <_dtoa_r+0x336>
 8006a20:	07e1      	lsls	r1, r4, #31
 8006a22:	d508      	bpl.n	8006a36 <_dtoa_r+0x366>
 8006a24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a2c:	f7f9 fe14 	bl	8000658 <__aeabi_dmul>
 8006a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a34:	3601      	adds	r6, #1
 8006a36:	1064      	asrs	r4, r4, #1
 8006a38:	3508      	adds	r5, #8
 8006a3a:	e7e5      	b.n	8006a08 <_dtoa_r+0x338>
 8006a3c:	f000 80d2 	beq.w	8006be4 <_dtoa_r+0x514>
 8006a40:	427c      	negs	r4, r7
 8006a42:	4b92      	ldr	r3, [pc, #584]	@ (8006c8c <_dtoa_r+0x5bc>)
 8006a44:	4d92      	ldr	r5, [pc, #584]	@ (8006c90 <_dtoa_r+0x5c0>)
 8006a46:	f004 020f 	and.w	r2, r4, #15
 8006a4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a56:	f7f9 fdff 	bl	8000658 <__aeabi_dmul>
 8006a5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a5e:	1124      	asrs	r4, r4, #4
 8006a60:	2300      	movs	r3, #0
 8006a62:	2602      	movs	r6, #2
 8006a64:	2c00      	cmp	r4, #0
 8006a66:	f040 80b2 	bne.w	8006bce <_dtoa_r+0x4fe>
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1d3      	bne.n	8006a16 <_dtoa_r+0x346>
 8006a6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 80b7 	beq.w	8006be8 <_dtoa_r+0x518>
 8006a7a:	4b86      	ldr	r3, [pc, #536]	@ (8006c94 <_dtoa_r+0x5c4>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4620      	mov	r0, r4
 8006a80:	4629      	mov	r1, r5
 8006a82:	f7fa f85b 	bl	8000b3c <__aeabi_dcmplt>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	f000 80ae 	beq.w	8006be8 <_dtoa_r+0x518>
 8006a8c:	9b07      	ldr	r3, [sp, #28]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 80aa 	beq.w	8006be8 <_dtoa_r+0x518>
 8006a94:	9b00      	ldr	r3, [sp, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dd37      	ble.n	8006b0a <_dtoa_r+0x43a>
 8006a9a:	1e7b      	subs	r3, r7, #1
 8006a9c:	9304      	str	r3, [sp, #16]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	4b7d      	ldr	r3, [pc, #500]	@ (8006c98 <_dtoa_r+0x5c8>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	f7f9 fdd7 	bl	8000658 <__aeabi_dmul>
 8006aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aae:	9c00      	ldr	r4, [sp, #0]
 8006ab0:	3601      	adds	r6, #1
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f7f9 fd66 	bl	8000584 <__aeabi_i2d>
 8006ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006abc:	f7f9 fdcc 	bl	8000658 <__aeabi_dmul>
 8006ac0:	4b76      	ldr	r3, [pc, #472]	@ (8006c9c <_dtoa_r+0x5cc>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f7f9 fc12 	bl	80002ec <__adddf3>
 8006ac8:	4605      	mov	r5, r0
 8006aca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006ace:	2c00      	cmp	r4, #0
 8006ad0:	f040 808d 	bne.w	8006bee <_dtoa_r+0x51e>
 8006ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ad8:	4b71      	ldr	r3, [pc, #452]	@ (8006ca0 <_dtoa_r+0x5d0>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	f7f9 fc04 	bl	80002e8 <__aeabi_dsub>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ae8:	462a      	mov	r2, r5
 8006aea:	4633      	mov	r3, r6
 8006aec:	f7fa f844 	bl	8000b78 <__aeabi_dcmpgt>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	f040 828b 	bne.w	800700c <_dtoa_r+0x93c>
 8006af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006afa:	462a      	mov	r2, r5
 8006afc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b00:	f7fa f81c 	bl	8000b3c <__aeabi_dcmplt>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	f040 8128 	bne.w	8006d5a <_dtoa_r+0x68a>
 8006b0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006b0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006b12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f2c0 815a 	blt.w	8006dce <_dtoa_r+0x6fe>
 8006b1a:	2f0e      	cmp	r7, #14
 8006b1c:	f300 8157 	bgt.w	8006dce <_dtoa_r+0x6fe>
 8006b20:	4b5a      	ldr	r3, [pc, #360]	@ (8006c8c <_dtoa_r+0x5bc>)
 8006b22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b26:	ed93 7b00 	vldr	d7, [r3]
 8006b2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	ed8d 7b00 	vstr	d7, [sp]
 8006b32:	da03      	bge.n	8006b3c <_dtoa_r+0x46c>
 8006b34:	9b07      	ldr	r3, [sp, #28]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f340 8101 	ble.w	8006d3e <_dtoa_r+0x66e>
 8006b3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b40:	4656      	mov	r6, sl
 8006b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b46:	4620      	mov	r0, r4
 8006b48:	4629      	mov	r1, r5
 8006b4a:	f7f9 feaf 	bl	80008ac <__aeabi_ddiv>
 8006b4e:	f7fa f833 	bl	8000bb8 <__aeabi_d2iz>
 8006b52:	4680      	mov	r8, r0
 8006b54:	f7f9 fd16 	bl	8000584 <__aeabi_i2d>
 8006b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b5c:	f7f9 fd7c 	bl	8000658 <__aeabi_dmul>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4620      	mov	r0, r4
 8006b66:	4629      	mov	r1, r5
 8006b68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006b6c:	f7f9 fbbc 	bl	80002e8 <__aeabi_dsub>
 8006b70:	f806 4b01 	strb.w	r4, [r6], #1
 8006b74:	9d07      	ldr	r5, [sp, #28]
 8006b76:	eba6 040a 	sub.w	r4, r6, sl
 8006b7a:	42a5      	cmp	r5, r4
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	f040 8117 	bne.w	8006db2 <_dtoa_r+0x6e2>
 8006b84:	f7f9 fbb2 	bl	80002ec <__adddf3>
 8006b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	460d      	mov	r5, r1
 8006b90:	f7f9 fff2 	bl	8000b78 <__aeabi_dcmpgt>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	f040 80f9 	bne.w	8006d8c <_dtoa_r+0x6bc>
 8006b9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	f7f9 ffc1 	bl	8000b28 <__aeabi_dcmpeq>
 8006ba6:	b118      	cbz	r0, 8006bb0 <_dtoa_r+0x4e0>
 8006ba8:	f018 0f01 	tst.w	r8, #1
 8006bac:	f040 80ee 	bne.w	8006d8c <_dtoa_r+0x6bc>
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	4658      	mov	r0, fp
 8006bb4:	f000 ff26 	bl	8007a04 <_Bfree>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	7033      	strb	r3, [r6, #0]
 8006bbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006bbe:	3701      	adds	r7, #1
 8006bc0:	601f      	str	r7, [r3, #0]
 8006bc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 831d 	beq.w	8007204 <_dtoa_r+0xb34>
 8006bca:	601e      	str	r6, [r3, #0]
 8006bcc:	e31a      	b.n	8007204 <_dtoa_r+0xb34>
 8006bce:	07e2      	lsls	r2, r4, #31
 8006bd0:	d505      	bpl.n	8006bde <_dtoa_r+0x50e>
 8006bd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006bd6:	f7f9 fd3f 	bl	8000658 <__aeabi_dmul>
 8006bda:	3601      	adds	r6, #1
 8006bdc:	2301      	movs	r3, #1
 8006bde:	1064      	asrs	r4, r4, #1
 8006be0:	3508      	adds	r5, #8
 8006be2:	e73f      	b.n	8006a64 <_dtoa_r+0x394>
 8006be4:	2602      	movs	r6, #2
 8006be6:	e742      	b.n	8006a6e <_dtoa_r+0x39e>
 8006be8:	9c07      	ldr	r4, [sp, #28]
 8006bea:	9704      	str	r7, [sp, #16]
 8006bec:	e761      	b.n	8006ab2 <_dtoa_r+0x3e2>
 8006bee:	4b27      	ldr	r3, [pc, #156]	@ (8006c8c <_dtoa_r+0x5bc>)
 8006bf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006bf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006bf6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006bfa:	4454      	add	r4, sl
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	d053      	beq.n	8006ca8 <_dtoa_r+0x5d8>
 8006c00:	4928      	ldr	r1, [pc, #160]	@ (8006ca4 <_dtoa_r+0x5d4>)
 8006c02:	2000      	movs	r0, #0
 8006c04:	f7f9 fe52 	bl	80008ac <__aeabi_ddiv>
 8006c08:	4633      	mov	r3, r6
 8006c0a:	462a      	mov	r2, r5
 8006c0c:	f7f9 fb6c 	bl	80002e8 <__aeabi_dsub>
 8006c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c14:	4656      	mov	r6, sl
 8006c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c1a:	f7f9 ffcd 	bl	8000bb8 <__aeabi_d2iz>
 8006c1e:	4605      	mov	r5, r0
 8006c20:	f7f9 fcb0 	bl	8000584 <__aeabi_i2d>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c2c:	f7f9 fb5c 	bl	80002e8 <__aeabi_dsub>
 8006c30:	3530      	adds	r5, #48	@ 0x30
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c3a:	f806 5b01 	strb.w	r5, [r6], #1
 8006c3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c42:	f7f9 ff7b 	bl	8000b3c <__aeabi_dcmplt>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d171      	bne.n	8006d2e <_dtoa_r+0x65e>
 8006c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c4e:	4911      	ldr	r1, [pc, #68]	@ (8006c94 <_dtoa_r+0x5c4>)
 8006c50:	2000      	movs	r0, #0
 8006c52:	f7f9 fb49 	bl	80002e8 <__aeabi_dsub>
 8006c56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c5a:	f7f9 ff6f 	bl	8000b3c <__aeabi_dcmplt>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	f040 8095 	bne.w	8006d8e <_dtoa_r+0x6be>
 8006c64:	42a6      	cmp	r6, r4
 8006c66:	f43f af50 	beq.w	8006b0a <_dtoa_r+0x43a>
 8006c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c98 <_dtoa_r+0x5c8>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	f7f9 fcf1 	bl	8000658 <__aeabi_dmul>
 8006c76:	4b08      	ldr	r3, [pc, #32]	@ (8006c98 <_dtoa_r+0x5c8>)
 8006c78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c82:	f7f9 fce9 	bl	8000658 <__aeabi_dmul>
 8006c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c8a:	e7c4      	b.n	8006c16 <_dtoa_r+0x546>
 8006c8c:	08008e08 	.word	0x08008e08
 8006c90:	08008de0 	.word	0x08008de0
 8006c94:	3ff00000 	.word	0x3ff00000
 8006c98:	40240000 	.word	0x40240000
 8006c9c:	401c0000 	.word	0x401c0000
 8006ca0:	40140000 	.word	0x40140000
 8006ca4:	3fe00000 	.word	0x3fe00000
 8006ca8:	4631      	mov	r1, r6
 8006caa:	4628      	mov	r0, r5
 8006cac:	f7f9 fcd4 	bl	8000658 <__aeabi_dmul>
 8006cb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cb4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006cb6:	4656      	mov	r6, sl
 8006cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cbc:	f7f9 ff7c 	bl	8000bb8 <__aeabi_d2iz>
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	f7f9 fc5f 	bl	8000584 <__aeabi_i2d>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cce:	f7f9 fb0b 	bl	80002e8 <__aeabi_dsub>
 8006cd2:	3530      	adds	r5, #48	@ 0x30
 8006cd4:	f806 5b01 	strb.w	r5, [r6], #1
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	42a6      	cmp	r6, r4
 8006cde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ce2:	f04f 0200 	mov.w	r2, #0
 8006ce6:	d124      	bne.n	8006d32 <_dtoa_r+0x662>
 8006ce8:	4bac      	ldr	r3, [pc, #688]	@ (8006f9c <_dtoa_r+0x8cc>)
 8006cea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006cee:	f7f9 fafd 	bl	80002ec <__adddf3>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cfa:	f7f9 ff3d 	bl	8000b78 <__aeabi_dcmpgt>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d145      	bne.n	8006d8e <_dtoa_r+0x6be>
 8006d02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d06:	49a5      	ldr	r1, [pc, #660]	@ (8006f9c <_dtoa_r+0x8cc>)
 8006d08:	2000      	movs	r0, #0
 8006d0a:	f7f9 faed 	bl	80002e8 <__aeabi_dsub>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d16:	f7f9 ff11 	bl	8000b3c <__aeabi_dcmplt>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	f43f aef5 	beq.w	8006b0a <_dtoa_r+0x43a>
 8006d20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006d22:	1e73      	subs	r3, r6, #1
 8006d24:	9315      	str	r3, [sp, #84]	@ 0x54
 8006d26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d2a:	2b30      	cmp	r3, #48	@ 0x30
 8006d2c:	d0f8      	beq.n	8006d20 <_dtoa_r+0x650>
 8006d2e:	9f04      	ldr	r7, [sp, #16]
 8006d30:	e73e      	b.n	8006bb0 <_dtoa_r+0x4e0>
 8006d32:	4b9b      	ldr	r3, [pc, #620]	@ (8006fa0 <_dtoa_r+0x8d0>)
 8006d34:	f7f9 fc90 	bl	8000658 <__aeabi_dmul>
 8006d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d3c:	e7bc      	b.n	8006cb8 <_dtoa_r+0x5e8>
 8006d3e:	d10c      	bne.n	8006d5a <_dtoa_r+0x68a>
 8006d40:	4b98      	ldr	r3, [pc, #608]	@ (8006fa4 <_dtoa_r+0x8d4>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d48:	f7f9 fc86 	bl	8000658 <__aeabi_dmul>
 8006d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d50:	f7f9 ff08 	bl	8000b64 <__aeabi_dcmpge>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	f000 8157 	beq.w	8007008 <_dtoa_r+0x938>
 8006d5a:	2400      	movs	r4, #0
 8006d5c:	4625      	mov	r5, r4
 8006d5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d60:	43db      	mvns	r3, r3
 8006d62:	9304      	str	r3, [sp, #16]
 8006d64:	4656      	mov	r6, sl
 8006d66:	2700      	movs	r7, #0
 8006d68:	4621      	mov	r1, r4
 8006d6a:	4658      	mov	r0, fp
 8006d6c:	f000 fe4a 	bl	8007a04 <_Bfree>
 8006d70:	2d00      	cmp	r5, #0
 8006d72:	d0dc      	beq.n	8006d2e <_dtoa_r+0x65e>
 8006d74:	b12f      	cbz	r7, 8006d82 <_dtoa_r+0x6b2>
 8006d76:	42af      	cmp	r7, r5
 8006d78:	d003      	beq.n	8006d82 <_dtoa_r+0x6b2>
 8006d7a:	4639      	mov	r1, r7
 8006d7c:	4658      	mov	r0, fp
 8006d7e:	f000 fe41 	bl	8007a04 <_Bfree>
 8006d82:	4629      	mov	r1, r5
 8006d84:	4658      	mov	r0, fp
 8006d86:	f000 fe3d 	bl	8007a04 <_Bfree>
 8006d8a:	e7d0      	b.n	8006d2e <_dtoa_r+0x65e>
 8006d8c:	9704      	str	r7, [sp, #16]
 8006d8e:	4633      	mov	r3, r6
 8006d90:	461e      	mov	r6, r3
 8006d92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d96:	2a39      	cmp	r2, #57	@ 0x39
 8006d98:	d107      	bne.n	8006daa <_dtoa_r+0x6da>
 8006d9a:	459a      	cmp	sl, r3
 8006d9c:	d1f8      	bne.n	8006d90 <_dtoa_r+0x6c0>
 8006d9e:	9a04      	ldr	r2, [sp, #16]
 8006da0:	3201      	adds	r2, #1
 8006da2:	9204      	str	r2, [sp, #16]
 8006da4:	2230      	movs	r2, #48	@ 0x30
 8006da6:	f88a 2000 	strb.w	r2, [sl]
 8006daa:	781a      	ldrb	r2, [r3, #0]
 8006dac:	3201      	adds	r2, #1
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	e7bd      	b.n	8006d2e <_dtoa_r+0x65e>
 8006db2:	4b7b      	ldr	r3, [pc, #492]	@ (8006fa0 <_dtoa_r+0x8d0>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	f7f9 fc4f 	bl	8000658 <__aeabi_dmul>
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	460d      	mov	r5, r1
 8006dc2:	f7f9 feb1 	bl	8000b28 <__aeabi_dcmpeq>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f43f aebb 	beq.w	8006b42 <_dtoa_r+0x472>
 8006dcc:	e6f0      	b.n	8006bb0 <_dtoa_r+0x4e0>
 8006dce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006dd0:	2a00      	cmp	r2, #0
 8006dd2:	f000 80db 	beq.w	8006f8c <_dtoa_r+0x8bc>
 8006dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dd8:	2a01      	cmp	r2, #1
 8006dda:	f300 80bf 	bgt.w	8006f5c <_dtoa_r+0x88c>
 8006dde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006de0:	2a00      	cmp	r2, #0
 8006de2:	f000 80b7 	beq.w	8006f54 <_dtoa_r+0x884>
 8006de6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006dea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006dec:	4646      	mov	r6, r8
 8006dee:	9a08      	ldr	r2, [sp, #32]
 8006df0:	2101      	movs	r1, #1
 8006df2:	441a      	add	r2, r3
 8006df4:	4658      	mov	r0, fp
 8006df6:	4498      	add	r8, r3
 8006df8:	9208      	str	r2, [sp, #32]
 8006dfa:	f000 ff01 	bl	8007c00 <__i2b>
 8006dfe:	4605      	mov	r5, r0
 8006e00:	b15e      	cbz	r6, 8006e1a <_dtoa_r+0x74a>
 8006e02:	9b08      	ldr	r3, [sp, #32]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	dd08      	ble.n	8006e1a <_dtoa_r+0x74a>
 8006e08:	42b3      	cmp	r3, r6
 8006e0a:	9a08      	ldr	r2, [sp, #32]
 8006e0c:	bfa8      	it	ge
 8006e0e:	4633      	movge	r3, r6
 8006e10:	eba8 0803 	sub.w	r8, r8, r3
 8006e14:	1af6      	subs	r6, r6, r3
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	9308      	str	r3, [sp, #32]
 8006e1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e1c:	b1f3      	cbz	r3, 8006e5c <_dtoa_r+0x78c>
 8006e1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 80b7 	beq.w	8006f94 <_dtoa_r+0x8c4>
 8006e26:	b18c      	cbz	r4, 8006e4c <_dtoa_r+0x77c>
 8006e28:	4629      	mov	r1, r5
 8006e2a:	4622      	mov	r2, r4
 8006e2c:	4658      	mov	r0, fp
 8006e2e:	f000 ffa7 	bl	8007d80 <__pow5mult>
 8006e32:	464a      	mov	r2, r9
 8006e34:	4601      	mov	r1, r0
 8006e36:	4605      	mov	r5, r0
 8006e38:	4658      	mov	r0, fp
 8006e3a:	f000 fef7 	bl	8007c2c <__multiply>
 8006e3e:	4649      	mov	r1, r9
 8006e40:	9004      	str	r0, [sp, #16]
 8006e42:	4658      	mov	r0, fp
 8006e44:	f000 fdde 	bl	8007a04 <_Bfree>
 8006e48:	9b04      	ldr	r3, [sp, #16]
 8006e4a:	4699      	mov	r9, r3
 8006e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e4e:	1b1a      	subs	r2, r3, r4
 8006e50:	d004      	beq.n	8006e5c <_dtoa_r+0x78c>
 8006e52:	4649      	mov	r1, r9
 8006e54:	4658      	mov	r0, fp
 8006e56:	f000 ff93 	bl	8007d80 <__pow5mult>
 8006e5a:	4681      	mov	r9, r0
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	4658      	mov	r0, fp
 8006e60:	f000 fece 	bl	8007c00 <__i2b>
 8006e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e66:	4604      	mov	r4, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 81cf 	beq.w	800720c <_dtoa_r+0xb3c>
 8006e6e:	461a      	mov	r2, r3
 8006e70:	4601      	mov	r1, r0
 8006e72:	4658      	mov	r0, fp
 8006e74:	f000 ff84 	bl	8007d80 <__pow5mult>
 8006e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	f300 8095 	bgt.w	8006fac <_dtoa_r+0x8dc>
 8006e82:	9b02      	ldr	r3, [sp, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f040 8087 	bne.w	8006f98 <_dtoa_r+0x8c8>
 8006e8a:	9b03      	ldr	r3, [sp, #12]
 8006e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f040 8089 	bne.w	8006fa8 <_dtoa_r+0x8d8>
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e9c:	0d1b      	lsrs	r3, r3, #20
 8006e9e:	051b      	lsls	r3, r3, #20
 8006ea0:	b12b      	cbz	r3, 8006eae <_dtoa_r+0x7de>
 8006ea2:	9b08      	ldr	r3, [sp, #32]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	9308      	str	r3, [sp, #32]
 8006ea8:	f108 0801 	add.w	r8, r8, #1
 8006eac:	2301      	movs	r3, #1
 8006eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 81b0 	beq.w	8007218 <_dtoa_r+0xb48>
 8006eb8:	6923      	ldr	r3, [r4, #16]
 8006eba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ebe:	6918      	ldr	r0, [r3, #16]
 8006ec0:	f000 fe52 	bl	8007b68 <__hi0bits>
 8006ec4:	f1c0 0020 	rsb	r0, r0, #32
 8006ec8:	9b08      	ldr	r3, [sp, #32]
 8006eca:	4418      	add	r0, r3
 8006ecc:	f010 001f 	ands.w	r0, r0, #31
 8006ed0:	d077      	beq.n	8006fc2 <_dtoa_r+0x8f2>
 8006ed2:	f1c0 0320 	rsb	r3, r0, #32
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	dd6b      	ble.n	8006fb2 <_dtoa_r+0x8e2>
 8006eda:	9b08      	ldr	r3, [sp, #32]
 8006edc:	f1c0 001c 	rsb	r0, r0, #28
 8006ee0:	4403      	add	r3, r0
 8006ee2:	4480      	add	r8, r0
 8006ee4:	4406      	add	r6, r0
 8006ee6:	9308      	str	r3, [sp, #32]
 8006ee8:	f1b8 0f00 	cmp.w	r8, #0
 8006eec:	dd05      	ble.n	8006efa <_dtoa_r+0x82a>
 8006eee:	4649      	mov	r1, r9
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	4658      	mov	r0, fp
 8006ef4:	f000 ff9e 	bl	8007e34 <__lshift>
 8006ef8:	4681      	mov	r9, r0
 8006efa:	9b08      	ldr	r3, [sp, #32]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	dd05      	ble.n	8006f0c <_dtoa_r+0x83c>
 8006f00:	4621      	mov	r1, r4
 8006f02:	461a      	mov	r2, r3
 8006f04:	4658      	mov	r0, fp
 8006f06:	f000 ff95 	bl	8007e34 <__lshift>
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d059      	beq.n	8006fc6 <_dtoa_r+0x8f6>
 8006f12:	4621      	mov	r1, r4
 8006f14:	4648      	mov	r0, r9
 8006f16:	f000 fff9 	bl	8007f0c <__mcmp>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	da53      	bge.n	8006fc6 <_dtoa_r+0x8f6>
 8006f1e:	1e7b      	subs	r3, r7, #1
 8006f20:	9304      	str	r3, [sp, #16]
 8006f22:	4649      	mov	r1, r9
 8006f24:	2300      	movs	r3, #0
 8006f26:	220a      	movs	r2, #10
 8006f28:	4658      	mov	r0, fp
 8006f2a:	f000 fd8d 	bl	8007a48 <__multadd>
 8006f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f30:	4681      	mov	r9, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8172 	beq.w	800721c <_dtoa_r+0xb4c>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	220a      	movs	r2, #10
 8006f3e:	4658      	mov	r0, fp
 8006f40:	f000 fd82 	bl	8007a48 <__multadd>
 8006f44:	9b00      	ldr	r3, [sp, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	4605      	mov	r5, r0
 8006f4a:	dc67      	bgt.n	800701c <_dtoa_r+0x94c>
 8006f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	dc41      	bgt.n	8006fd6 <_dtoa_r+0x906>
 8006f52:	e063      	b.n	800701c <_dtoa_r+0x94c>
 8006f54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006f5a:	e746      	b.n	8006dea <_dtoa_r+0x71a>
 8006f5c:	9b07      	ldr	r3, [sp, #28]
 8006f5e:	1e5c      	subs	r4, r3, #1
 8006f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f62:	42a3      	cmp	r3, r4
 8006f64:	bfbf      	itttt	lt
 8006f66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006f68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006f6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006f6c:	1ae3      	sublt	r3, r4, r3
 8006f6e:	bfb4      	ite	lt
 8006f70:	18d2      	addlt	r2, r2, r3
 8006f72:	1b1c      	subge	r4, r3, r4
 8006f74:	9b07      	ldr	r3, [sp, #28]
 8006f76:	bfbc      	itt	lt
 8006f78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006f7a:	2400      	movlt	r4, #0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	bfb5      	itete	lt
 8006f80:	eba8 0603 	sublt.w	r6, r8, r3
 8006f84:	9b07      	ldrge	r3, [sp, #28]
 8006f86:	2300      	movlt	r3, #0
 8006f88:	4646      	movge	r6, r8
 8006f8a:	e730      	b.n	8006dee <_dtoa_r+0x71e>
 8006f8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006f90:	4646      	mov	r6, r8
 8006f92:	e735      	b.n	8006e00 <_dtoa_r+0x730>
 8006f94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f96:	e75c      	b.n	8006e52 <_dtoa_r+0x782>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e788      	b.n	8006eae <_dtoa_r+0x7de>
 8006f9c:	3fe00000 	.word	0x3fe00000
 8006fa0:	40240000 	.word	0x40240000
 8006fa4:	40140000 	.word	0x40140000
 8006fa8:	9b02      	ldr	r3, [sp, #8]
 8006faa:	e780      	b.n	8006eae <_dtoa_r+0x7de>
 8006fac:	2300      	movs	r3, #0
 8006fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fb0:	e782      	b.n	8006eb8 <_dtoa_r+0x7e8>
 8006fb2:	d099      	beq.n	8006ee8 <_dtoa_r+0x818>
 8006fb4:	9a08      	ldr	r2, [sp, #32]
 8006fb6:	331c      	adds	r3, #28
 8006fb8:	441a      	add	r2, r3
 8006fba:	4498      	add	r8, r3
 8006fbc:	441e      	add	r6, r3
 8006fbe:	9208      	str	r2, [sp, #32]
 8006fc0:	e792      	b.n	8006ee8 <_dtoa_r+0x818>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	e7f6      	b.n	8006fb4 <_dtoa_r+0x8e4>
 8006fc6:	9b07      	ldr	r3, [sp, #28]
 8006fc8:	9704      	str	r7, [sp, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	dc20      	bgt.n	8007010 <_dtoa_r+0x940>
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	dd1e      	ble.n	8007014 <_dtoa_r+0x944>
 8006fd6:	9b00      	ldr	r3, [sp, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f47f aec0 	bne.w	8006d5e <_dtoa_r+0x68e>
 8006fde:	4621      	mov	r1, r4
 8006fe0:	2205      	movs	r2, #5
 8006fe2:	4658      	mov	r0, fp
 8006fe4:	f000 fd30 	bl	8007a48 <__multadd>
 8006fe8:	4601      	mov	r1, r0
 8006fea:	4604      	mov	r4, r0
 8006fec:	4648      	mov	r0, r9
 8006fee:	f000 ff8d 	bl	8007f0c <__mcmp>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	f77f aeb3 	ble.w	8006d5e <_dtoa_r+0x68e>
 8006ff8:	4656      	mov	r6, sl
 8006ffa:	2331      	movs	r3, #49	@ 0x31
 8006ffc:	f806 3b01 	strb.w	r3, [r6], #1
 8007000:	9b04      	ldr	r3, [sp, #16]
 8007002:	3301      	adds	r3, #1
 8007004:	9304      	str	r3, [sp, #16]
 8007006:	e6ae      	b.n	8006d66 <_dtoa_r+0x696>
 8007008:	9c07      	ldr	r4, [sp, #28]
 800700a:	9704      	str	r7, [sp, #16]
 800700c:	4625      	mov	r5, r4
 800700e:	e7f3      	b.n	8006ff8 <_dtoa_r+0x928>
 8007010:	9b07      	ldr	r3, [sp, #28]
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 8104 	beq.w	8007224 <_dtoa_r+0xb54>
 800701c:	2e00      	cmp	r6, #0
 800701e:	dd05      	ble.n	800702c <_dtoa_r+0x95c>
 8007020:	4629      	mov	r1, r5
 8007022:	4632      	mov	r2, r6
 8007024:	4658      	mov	r0, fp
 8007026:	f000 ff05 	bl	8007e34 <__lshift>
 800702a:	4605      	mov	r5, r0
 800702c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800702e:	2b00      	cmp	r3, #0
 8007030:	d05a      	beq.n	80070e8 <_dtoa_r+0xa18>
 8007032:	6869      	ldr	r1, [r5, #4]
 8007034:	4658      	mov	r0, fp
 8007036:	f000 fca5 	bl	8007984 <_Balloc>
 800703a:	4606      	mov	r6, r0
 800703c:	b928      	cbnz	r0, 800704a <_dtoa_r+0x97a>
 800703e:	4b84      	ldr	r3, [pc, #528]	@ (8007250 <_dtoa_r+0xb80>)
 8007040:	4602      	mov	r2, r0
 8007042:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007046:	f7ff bb5a 	b.w	80066fe <_dtoa_r+0x2e>
 800704a:	692a      	ldr	r2, [r5, #16]
 800704c:	3202      	adds	r2, #2
 800704e:	0092      	lsls	r2, r2, #2
 8007050:	f105 010c 	add.w	r1, r5, #12
 8007054:	300c      	adds	r0, #12
 8007056:	f7ff fa9a 	bl	800658e <memcpy>
 800705a:	2201      	movs	r2, #1
 800705c:	4631      	mov	r1, r6
 800705e:	4658      	mov	r0, fp
 8007060:	f000 fee8 	bl	8007e34 <__lshift>
 8007064:	f10a 0301 	add.w	r3, sl, #1
 8007068:	9307      	str	r3, [sp, #28]
 800706a:	9b00      	ldr	r3, [sp, #0]
 800706c:	4453      	add	r3, sl
 800706e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007070:	9b02      	ldr	r3, [sp, #8]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	462f      	mov	r7, r5
 8007078:	930a      	str	r3, [sp, #40]	@ 0x28
 800707a:	4605      	mov	r5, r0
 800707c:	9b07      	ldr	r3, [sp, #28]
 800707e:	4621      	mov	r1, r4
 8007080:	3b01      	subs	r3, #1
 8007082:	4648      	mov	r0, r9
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	f7ff fa9b 	bl	80065c0 <quorem>
 800708a:	4639      	mov	r1, r7
 800708c:	9002      	str	r0, [sp, #8]
 800708e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007092:	4648      	mov	r0, r9
 8007094:	f000 ff3a 	bl	8007f0c <__mcmp>
 8007098:	462a      	mov	r2, r5
 800709a:	9008      	str	r0, [sp, #32]
 800709c:	4621      	mov	r1, r4
 800709e:	4658      	mov	r0, fp
 80070a0:	f000 ff50 	bl	8007f44 <__mdiff>
 80070a4:	68c2      	ldr	r2, [r0, #12]
 80070a6:	4606      	mov	r6, r0
 80070a8:	bb02      	cbnz	r2, 80070ec <_dtoa_r+0xa1c>
 80070aa:	4601      	mov	r1, r0
 80070ac:	4648      	mov	r0, r9
 80070ae:	f000 ff2d 	bl	8007f0c <__mcmp>
 80070b2:	4602      	mov	r2, r0
 80070b4:	4631      	mov	r1, r6
 80070b6:	4658      	mov	r0, fp
 80070b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80070ba:	f000 fca3 	bl	8007a04 <_Bfree>
 80070be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070c2:	9e07      	ldr	r6, [sp, #28]
 80070c4:	ea43 0102 	orr.w	r1, r3, r2
 80070c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070ca:	4319      	orrs	r1, r3
 80070cc:	d110      	bne.n	80070f0 <_dtoa_r+0xa20>
 80070ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80070d2:	d029      	beq.n	8007128 <_dtoa_r+0xa58>
 80070d4:	9b08      	ldr	r3, [sp, #32]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	dd02      	ble.n	80070e0 <_dtoa_r+0xa10>
 80070da:	9b02      	ldr	r3, [sp, #8]
 80070dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80070e0:	9b00      	ldr	r3, [sp, #0]
 80070e2:	f883 8000 	strb.w	r8, [r3]
 80070e6:	e63f      	b.n	8006d68 <_dtoa_r+0x698>
 80070e8:	4628      	mov	r0, r5
 80070ea:	e7bb      	b.n	8007064 <_dtoa_r+0x994>
 80070ec:	2201      	movs	r2, #1
 80070ee:	e7e1      	b.n	80070b4 <_dtoa_r+0x9e4>
 80070f0:	9b08      	ldr	r3, [sp, #32]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	db04      	blt.n	8007100 <_dtoa_r+0xa30>
 80070f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80070f8:	430b      	orrs	r3, r1
 80070fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070fc:	430b      	orrs	r3, r1
 80070fe:	d120      	bne.n	8007142 <_dtoa_r+0xa72>
 8007100:	2a00      	cmp	r2, #0
 8007102:	dded      	ble.n	80070e0 <_dtoa_r+0xa10>
 8007104:	4649      	mov	r1, r9
 8007106:	2201      	movs	r2, #1
 8007108:	4658      	mov	r0, fp
 800710a:	f000 fe93 	bl	8007e34 <__lshift>
 800710e:	4621      	mov	r1, r4
 8007110:	4681      	mov	r9, r0
 8007112:	f000 fefb 	bl	8007f0c <__mcmp>
 8007116:	2800      	cmp	r0, #0
 8007118:	dc03      	bgt.n	8007122 <_dtoa_r+0xa52>
 800711a:	d1e1      	bne.n	80070e0 <_dtoa_r+0xa10>
 800711c:	f018 0f01 	tst.w	r8, #1
 8007120:	d0de      	beq.n	80070e0 <_dtoa_r+0xa10>
 8007122:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007126:	d1d8      	bne.n	80070da <_dtoa_r+0xa0a>
 8007128:	9a00      	ldr	r2, [sp, #0]
 800712a:	2339      	movs	r3, #57	@ 0x39
 800712c:	7013      	strb	r3, [r2, #0]
 800712e:	4633      	mov	r3, r6
 8007130:	461e      	mov	r6, r3
 8007132:	3b01      	subs	r3, #1
 8007134:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007138:	2a39      	cmp	r2, #57	@ 0x39
 800713a:	d052      	beq.n	80071e2 <_dtoa_r+0xb12>
 800713c:	3201      	adds	r2, #1
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	e612      	b.n	8006d68 <_dtoa_r+0x698>
 8007142:	2a00      	cmp	r2, #0
 8007144:	dd07      	ble.n	8007156 <_dtoa_r+0xa86>
 8007146:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800714a:	d0ed      	beq.n	8007128 <_dtoa_r+0xa58>
 800714c:	9a00      	ldr	r2, [sp, #0]
 800714e:	f108 0301 	add.w	r3, r8, #1
 8007152:	7013      	strb	r3, [r2, #0]
 8007154:	e608      	b.n	8006d68 <_dtoa_r+0x698>
 8007156:	9b07      	ldr	r3, [sp, #28]
 8007158:	9a07      	ldr	r2, [sp, #28]
 800715a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800715e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007160:	4293      	cmp	r3, r2
 8007162:	d028      	beq.n	80071b6 <_dtoa_r+0xae6>
 8007164:	4649      	mov	r1, r9
 8007166:	2300      	movs	r3, #0
 8007168:	220a      	movs	r2, #10
 800716a:	4658      	mov	r0, fp
 800716c:	f000 fc6c 	bl	8007a48 <__multadd>
 8007170:	42af      	cmp	r7, r5
 8007172:	4681      	mov	r9, r0
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	f04f 020a 	mov.w	r2, #10
 800717c:	4639      	mov	r1, r7
 800717e:	4658      	mov	r0, fp
 8007180:	d107      	bne.n	8007192 <_dtoa_r+0xac2>
 8007182:	f000 fc61 	bl	8007a48 <__multadd>
 8007186:	4607      	mov	r7, r0
 8007188:	4605      	mov	r5, r0
 800718a:	9b07      	ldr	r3, [sp, #28]
 800718c:	3301      	adds	r3, #1
 800718e:	9307      	str	r3, [sp, #28]
 8007190:	e774      	b.n	800707c <_dtoa_r+0x9ac>
 8007192:	f000 fc59 	bl	8007a48 <__multadd>
 8007196:	4629      	mov	r1, r5
 8007198:	4607      	mov	r7, r0
 800719a:	2300      	movs	r3, #0
 800719c:	220a      	movs	r2, #10
 800719e:	4658      	mov	r0, fp
 80071a0:	f000 fc52 	bl	8007a48 <__multadd>
 80071a4:	4605      	mov	r5, r0
 80071a6:	e7f0      	b.n	800718a <_dtoa_r+0xaba>
 80071a8:	9b00      	ldr	r3, [sp, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	bfcc      	ite	gt
 80071ae:	461e      	movgt	r6, r3
 80071b0:	2601      	movle	r6, #1
 80071b2:	4456      	add	r6, sl
 80071b4:	2700      	movs	r7, #0
 80071b6:	4649      	mov	r1, r9
 80071b8:	2201      	movs	r2, #1
 80071ba:	4658      	mov	r0, fp
 80071bc:	f000 fe3a 	bl	8007e34 <__lshift>
 80071c0:	4621      	mov	r1, r4
 80071c2:	4681      	mov	r9, r0
 80071c4:	f000 fea2 	bl	8007f0c <__mcmp>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	dcb0      	bgt.n	800712e <_dtoa_r+0xa5e>
 80071cc:	d102      	bne.n	80071d4 <_dtoa_r+0xb04>
 80071ce:	f018 0f01 	tst.w	r8, #1
 80071d2:	d1ac      	bne.n	800712e <_dtoa_r+0xa5e>
 80071d4:	4633      	mov	r3, r6
 80071d6:	461e      	mov	r6, r3
 80071d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071dc:	2a30      	cmp	r2, #48	@ 0x30
 80071de:	d0fa      	beq.n	80071d6 <_dtoa_r+0xb06>
 80071e0:	e5c2      	b.n	8006d68 <_dtoa_r+0x698>
 80071e2:	459a      	cmp	sl, r3
 80071e4:	d1a4      	bne.n	8007130 <_dtoa_r+0xa60>
 80071e6:	9b04      	ldr	r3, [sp, #16]
 80071e8:	3301      	adds	r3, #1
 80071ea:	9304      	str	r3, [sp, #16]
 80071ec:	2331      	movs	r3, #49	@ 0x31
 80071ee:	f88a 3000 	strb.w	r3, [sl]
 80071f2:	e5b9      	b.n	8006d68 <_dtoa_r+0x698>
 80071f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007254 <_dtoa_r+0xb84>
 80071fa:	b11b      	cbz	r3, 8007204 <_dtoa_r+0xb34>
 80071fc:	f10a 0308 	add.w	r3, sl, #8
 8007200:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	4650      	mov	r0, sl
 8007206:	b019      	add	sp, #100	@ 0x64
 8007208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800720e:	2b01      	cmp	r3, #1
 8007210:	f77f ae37 	ble.w	8006e82 <_dtoa_r+0x7b2>
 8007214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007216:	930a      	str	r3, [sp, #40]	@ 0x28
 8007218:	2001      	movs	r0, #1
 800721a:	e655      	b.n	8006ec8 <_dtoa_r+0x7f8>
 800721c:	9b00      	ldr	r3, [sp, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f77f aed6 	ble.w	8006fd0 <_dtoa_r+0x900>
 8007224:	4656      	mov	r6, sl
 8007226:	4621      	mov	r1, r4
 8007228:	4648      	mov	r0, r9
 800722a:	f7ff f9c9 	bl	80065c0 <quorem>
 800722e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007232:	f806 8b01 	strb.w	r8, [r6], #1
 8007236:	9b00      	ldr	r3, [sp, #0]
 8007238:	eba6 020a 	sub.w	r2, r6, sl
 800723c:	4293      	cmp	r3, r2
 800723e:	ddb3      	ble.n	80071a8 <_dtoa_r+0xad8>
 8007240:	4649      	mov	r1, r9
 8007242:	2300      	movs	r3, #0
 8007244:	220a      	movs	r2, #10
 8007246:	4658      	mov	r0, fp
 8007248:	f000 fbfe 	bl	8007a48 <__multadd>
 800724c:	4681      	mov	r9, r0
 800724e:	e7ea      	b.n	8007226 <_dtoa_r+0xb56>
 8007250:	08008d09 	.word	0x08008d09
 8007254:	08008c8d 	.word	0x08008c8d

08007258 <_free_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	4605      	mov	r5, r0
 800725c:	2900      	cmp	r1, #0
 800725e:	d041      	beq.n	80072e4 <_free_r+0x8c>
 8007260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007264:	1f0c      	subs	r4, r1, #4
 8007266:	2b00      	cmp	r3, #0
 8007268:	bfb8      	it	lt
 800726a:	18e4      	addlt	r4, r4, r3
 800726c:	f7fd fd3e 	bl	8004cec <__malloc_lock>
 8007270:	4a1d      	ldr	r2, [pc, #116]	@ (80072e8 <_free_r+0x90>)
 8007272:	6813      	ldr	r3, [r2, #0]
 8007274:	b933      	cbnz	r3, 8007284 <_free_r+0x2c>
 8007276:	6063      	str	r3, [r4, #4]
 8007278:	6014      	str	r4, [r2, #0]
 800727a:	4628      	mov	r0, r5
 800727c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007280:	f7fd bd3a 	b.w	8004cf8 <__malloc_unlock>
 8007284:	42a3      	cmp	r3, r4
 8007286:	d908      	bls.n	800729a <_free_r+0x42>
 8007288:	6820      	ldr	r0, [r4, #0]
 800728a:	1821      	adds	r1, r4, r0
 800728c:	428b      	cmp	r3, r1
 800728e:	bf01      	itttt	eq
 8007290:	6819      	ldreq	r1, [r3, #0]
 8007292:	685b      	ldreq	r3, [r3, #4]
 8007294:	1809      	addeq	r1, r1, r0
 8007296:	6021      	streq	r1, [r4, #0]
 8007298:	e7ed      	b.n	8007276 <_free_r+0x1e>
 800729a:	461a      	mov	r2, r3
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	b10b      	cbz	r3, 80072a4 <_free_r+0x4c>
 80072a0:	42a3      	cmp	r3, r4
 80072a2:	d9fa      	bls.n	800729a <_free_r+0x42>
 80072a4:	6811      	ldr	r1, [r2, #0]
 80072a6:	1850      	adds	r0, r2, r1
 80072a8:	42a0      	cmp	r0, r4
 80072aa:	d10b      	bne.n	80072c4 <_free_r+0x6c>
 80072ac:	6820      	ldr	r0, [r4, #0]
 80072ae:	4401      	add	r1, r0
 80072b0:	1850      	adds	r0, r2, r1
 80072b2:	4283      	cmp	r3, r0
 80072b4:	6011      	str	r1, [r2, #0]
 80072b6:	d1e0      	bne.n	800727a <_free_r+0x22>
 80072b8:	6818      	ldr	r0, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	6053      	str	r3, [r2, #4]
 80072be:	4408      	add	r0, r1
 80072c0:	6010      	str	r0, [r2, #0]
 80072c2:	e7da      	b.n	800727a <_free_r+0x22>
 80072c4:	d902      	bls.n	80072cc <_free_r+0x74>
 80072c6:	230c      	movs	r3, #12
 80072c8:	602b      	str	r3, [r5, #0]
 80072ca:	e7d6      	b.n	800727a <_free_r+0x22>
 80072cc:	6820      	ldr	r0, [r4, #0]
 80072ce:	1821      	adds	r1, r4, r0
 80072d0:	428b      	cmp	r3, r1
 80072d2:	bf04      	itt	eq
 80072d4:	6819      	ldreq	r1, [r3, #0]
 80072d6:	685b      	ldreq	r3, [r3, #4]
 80072d8:	6063      	str	r3, [r4, #4]
 80072da:	bf04      	itt	eq
 80072dc:	1809      	addeq	r1, r1, r0
 80072de:	6021      	streq	r1, [r4, #0]
 80072e0:	6054      	str	r4, [r2, #4]
 80072e2:	e7ca      	b.n	800727a <_free_r+0x22>
 80072e4:	bd38      	pop	{r3, r4, r5, pc}
 80072e6:	bf00      	nop
 80072e8:	2000047c 	.word	0x2000047c

080072ec <rshift>:
 80072ec:	6903      	ldr	r3, [r0, #16]
 80072ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80072f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80072fa:	f100 0414 	add.w	r4, r0, #20
 80072fe:	dd45      	ble.n	800738c <rshift+0xa0>
 8007300:	f011 011f 	ands.w	r1, r1, #31
 8007304:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007308:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800730c:	d10c      	bne.n	8007328 <rshift+0x3c>
 800730e:	f100 0710 	add.w	r7, r0, #16
 8007312:	4629      	mov	r1, r5
 8007314:	42b1      	cmp	r1, r6
 8007316:	d334      	bcc.n	8007382 <rshift+0x96>
 8007318:	1a9b      	subs	r3, r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	1eea      	subs	r2, r5, #3
 800731e:	4296      	cmp	r6, r2
 8007320:	bf38      	it	cc
 8007322:	2300      	movcc	r3, #0
 8007324:	4423      	add	r3, r4
 8007326:	e015      	b.n	8007354 <rshift+0x68>
 8007328:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800732c:	f1c1 0820 	rsb	r8, r1, #32
 8007330:	40cf      	lsrs	r7, r1
 8007332:	f105 0e04 	add.w	lr, r5, #4
 8007336:	46a1      	mov	r9, r4
 8007338:	4576      	cmp	r6, lr
 800733a:	46f4      	mov	ip, lr
 800733c:	d815      	bhi.n	800736a <rshift+0x7e>
 800733e:	1a9a      	subs	r2, r3, r2
 8007340:	0092      	lsls	r2, r2, #2
 8007342:	3a04      	subs	r2, #4
 8007344:	3501      	adds	r5, #1
 8007346:	42ae      	cmp	r6, r5
 8007348:	bf38      	it	cc
 800734a:	2200      	movcc	r2, #0
 800734c:	18a3      	adds	r3, r4, r2
 800734e:	50a7      	str	r7, [r4, r2]
 8007350:	b107      	cbz	r7, 8007354 <rshift+0x68>
 8007352:	3304      	adds	r3, #4
 8007354:	1b1a      	subs	r2, r3, r4
 8007356:	42a3      	cmp	r3, r4
 8007358:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800735c:	bf08      	it	eq
 800735e:	2300      	moveq	r3, #0
 8007360:	6102      	str	r2, [r0, #16]
 8007362:	bf08      	it	eq
 8007364:	6143      	streq	r3, [r0, #20]
 8007366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800736a:	f8dc c000 	ldr.w	ip, [ip]
 800736e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007372:	ea4c 0707 	orr.w	r7, ip, r7
 8007376:	f849 7b04 	str.w	r7, [r9], #4
 800737a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800737e:	40cf      	lsrs	r7, r1
 8007380:	e7da      	b.n	8007338 <rshift+0x4c>
 8007382:	f851 cb04 	ldr.w	ip, [r1], #4
 8007386:	f847 cf04 	str.w	ip, [r7, #4]!
 800738a:	e7c3      	b.n	8007314 <rshift+0x28>
 800738c:	4623      	mov	r3, r4
 800738e:	e7e1      	b.n	8007354 <rshift+0x68>

08007390 <__hexdig_fun>:
 8007390:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007394:	2b09      	cmp	r3, #9
 8007396:	d802      	bhi.n	800739e <__hexdig_fun+0xe>
 8007398:	3820      	subs	r0, #32
 800739a:	b2c0      	uxtb	r0, r0
 800739c:	4770      	bx	lr
 800739e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80073a2:	2b05      	cmp	r3, #5
 80073a4:	d801      	bhi.n	80073aa <__hexdig_fun+0x1a>
 80073a6:	3847      	subs	r0, #71	@ 0x47
 80073a8:	e7f7      	b.n	800739a <__hexdig_fun+0xa>
 80073aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80073ae:	2b05      	cmp	r3, #5
 80073b0:	d801      	bhi.n	80073b6 <__hexdig_fun+0x26>
 80073b2:	3827      	subs	r0, #39	@ 0x27
 80073b4:	e7f1      	b.n	800739a <__hexdig_fun+0xa>
 80073b6:	2000      	movs	r0, #0
 80073b8:	4770      	bx	lr
	...

080073bc <__gethex>:
 80073bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c0:	b085      	sub	sp, #20
 80073c2:	468a      	mov	sl, r1
 80073c4:	9302      	str	r3, [sp, #8]
 80073c6:	680b      	ldr	r3, [r1, #0]
 80073c8:	9001      	str	r0, [sp, #4]
 80073ca:	4690      	mov	r8, r2
 80073cc:	1c9c      	adds	r4, r3, #2
 80073ce:	46a1      	mov	r9, r4
 80073d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80073d4:	2830      	cmp	r0, #48	@ 0x30
 80073d6:	d0fa      	beq.n	80073ce <__gethex+0x12>
 80073d8:	eba9 0303 	sub.w	r3, r9, r3
 80073dc:	f1a3 0b02 	sub.w	fp, r3, #2
 80073e0:	f7ff ffd6 	bl	8007390 <__hexdig_fun>
 80073e4:	4605      	mov	r5, r0
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d168      	bne.n	80074bc <__gethex+0x100>
 80073ea:	49a0      	ldr	r1, [pc, #640]	@ (800766c <__gethex+0x2b0>)
 80073ec:	2201      	movs	r2, #1
 80073ee:	4648      	mov	r0, r9
 80073f0:	f7ff f833 	bl	800645a <strncmp>
 80073f4:	4607      	mov	r7, r0
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d167      	bne.n	80074ca <__gethex+0x10e>
 80073fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80073fe:	4626      	mov	r6, r4
 8007400:	f7ff ffc6 	bl	8007390 <__hexdig_fun>
 8007404:	2800      	cmp	r0, #0
 8007406:	d062      	beq.n	80074ce <__gethex+0x112>
 8007408:	4623      	mov	r3, r4
 800740a:	7818      	ldrb	r0, [r3, #0]
 800740c:	2830      	cmp	r0, #48	@ 0x30
 800740e:	4699      	mov	r9, r3
 8007410:	f103 0301 	add.w	r3, r3, #1
 8007414:	d0f9      	beq.n	800740a <__gethex+0x4e>
 8007416:	f7ff ffbb 	bl	8007390 <__hexdig_fun>
 800741a:	fab0 f580 	clz	r5, r0
 800741e:	096d      	lsrs	r5, r5, #5
 8007420:	f04f 0b01 	mov.w	fp, #1
 8007424:	464a      	mov	r2, r9
 8007426:	4616      	mov	r6, r2
 8007428:	3201      	adds	r2, #1
 800742a:	7830      	ldrb	r0, [r6, #0]
 800742c:	f7ff ffb0 	bl	8007390 <__hexdig_fun>
 8007430:	2800      	cmp	r0, #0
 8007432:	d1f8      	bne.n	8007426 <__gethex+0x6a>
 8007434:	498d      	ldr	r1, [pc, #564]	@ (800766c <__gethex+0x2b0>)
 8007436:	2201      	movs	r2, #1
 8007438:	4630      	mov	r0, r6
 800743a:	f7ff f80e 	bl	800645a <strncmp>
 800743e:	2800      	cmp	r0, #0
 8007440:	d13f      	bne.n	80074c2 <__gethex+0x106>
 8007442:	b944      	cbnz	r4, 8007456 <__gethex+0x9a>
 8007444:	1c74      	adds	r4, r6, #1
 8007446:	4622      	mov	r2, r4
 8007448:	4616      	mov	r6, r2
 800744a:	3201      	adds	r2, #1
 800744c:	7830      	ldrb	r0, [r6, #0]
 800744e:	f7ff ff9f 	bl	8007390 <__hexdig_fun>
 8007452:	2800      	cmp	r0, #0
 8007454:	d1f8      	bne.n	8007448 <__gethex+0x8c>
 8007456:	1ba4      	subs	r4, r4, r6
 8007458:	00a7      	lsls	r7, r4, #2
 800745a:	7833      	ldrb	r3, [r6, #0]
 800745c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007460:	2b50      	cmp	r3, #80	@ 0x50
 8007462:	d13e      	bne.n	80074e2 <__gethex+0x126>
 8007464:	7873      	ldrb	r3, [r6, #1]
 8007466:	2b2b      	cmp	r3, #43	@ 0x2b
 8007468:	d033      	beq.n	80074d2 <__gethex+0x116>
 800746a:	2b2d      	cmp	r3, #45	@ 0x2d
 800746c:	d034      	beq.n	80074d8 <__gethex+0x11c>
 800746e:	1c71      	adds	r1, r6, #1
 8007470:	2400      	movs	r4, #0
 8007472:	7808      	ldrb	r0, [r1, #0]
 8007474:	f7ff ff8c 	bl	8007390 <__hexdig_fun>
 8007478:	1e43      	subs	r3, r0, #1
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b18      	cmp	r3, #24
 800747e:	d830      	bhi.n	80074e2 <__gethex+0x126>
 8007480:	f1a0 0210 	sub.w	r2, r0, #16
 8007484:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007488:	f7ff ff82 	bl	8007390 <__hexdig_fun>
 800748c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007490:	fa5f fc8c 	uxtb.w	ip, ip
 8007494:	f1bc 0f18 	cmp.w	ip, #24
 8007498:	f04f 030a 	mov.w	r3, #10
 800749c:	d91e      	bls.n	80074dc <__gethex+0x120>
 800749e:	b104      	cbz	r4, 80074a2 <__gethex+0xe6>
 80074a0:	4252      	negs	r2, r2
 80074a2:	4417      	add	r7, r2
 80074a4:	f8ca 1000 	str.w	r1, [sl]
 80074a8:	b1ed      	cbz	r5, 80074e6 <__gethex+0x12a>
 80074aa:	f1bb 0f00 	cmp.w	fp, #0
 80074ae:	bf0c      	ite	eq
 80074b0:	2506      	moveq	r5, #6
 80074b2:	2500      	movne	r5, #0
 80074b4:	4628      	mov	r0, r5
 80074b6:	b005      	add	sp, #20
 80074b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074bc:	2500      	movs	r5, #0
 80074be:	462c      	mov	r4, r5
 80074c0:	e7b0      	b.n	8007424 <__gethex+0x68>
 80074c2:	2c00      	cmp	r4, #0
 80074c4:	d1c7      	bne.n	8007456 <__gethex+0x9a>
 80074c6:	4627      	mov	r7, r4
 80074c8:	e7c7      	b.n	800745a <__gethex+0x9e>
 80074ca:	464e      	mov	r6, r9
 80074cc:	462f      	mov	r7, r5
 80074ce:	2501      	movs	r5, #1
 80074d0:	e7c3      	b.n	800745a <__gethex+0x9e>
 80074d2:	2400      	movs	r4, #0
 80074d4:	1cb1      	adds	r1, r6, #2
 80074d6:	e7cc      	b.n	8007472 <__gethex+0xb6>
 80074d8:	2401      	movs	r4, #1
 80074da:	e7fb      	b.n	80074d4 <__gethex+0x118>
 80074dc:	fb03 0002 	mla	r0, r3, r2, r0
 80074e0:	e7ce      	b.n	8007480 <__gethex+0xc4>
 80074e2:	4631      	mov	r1, r6
 80074e4:	e7de      	b.n	80074a4 <__gethex+0xe8>
 80074e6:	eba6 0309 	sub.w	r3, r6, r9
 80074ea:	3b01      	subs	r3, #1
 80074ec:	4629      	mov	r1, r5
 80074ee:	2b07      	cmp	r3, #7
 80074f0:	dc0a      	bgt.n	8007508 <__gethex+0x14c>
 80074f2:	9801      	ldr	r0, [sp, #4]
 80074f4:	f000 fa46 	bl	8007984 <_Balloc>
 80074f8:	4604      	mov	r4, r0
 80074fa:	b940      	cbnz	r0, 800750e <__gethex+0x152>
 80074fc:	4b5c      	ldr	r3, [pc, #368]	@ (8007670 <__gethex+0x2b4>)
 80074fe:	4602      	mov	r2, r0
 8007500:	21e4      	movs	r1, #228	@ 0xe4
 8007502:	485c      	ldr	r0, [pc, #368]	@ (8007674 <__gethex+0x2b8>)
 8007504:	f000 ffb2 	bl	800846c <__assert_func>
 8007508:	3101      	adds	r1, #1
 800750a:	105b      	asrs	r3, r3, #1
 800750c:	e7ef      	b.n	80074ee <__gethex+0x132>
 800750e:	f100 0a14 	add.w	sl, r0, #20
 8007512:	2300      	movs	r3, #0
 8007514:	4655      	mov	r5, sl
 8007516:	469b      	mov	fp, r3
 8007518:	45b1      	cmp	r9, r6
 800751a:	d337      	bcc.n	800758c <__gethex+0x1d0>
 800751c:	f845 bb04 	str.w	fp, [r5], #4
 8007520:	eba5 050a 	sub.w	r5, r5, sl
 8007524:	10ad      	asrs	r5, r5, #2
 8007526:	6125      	str	r5, [r4, #16]
 8007528:	4658      	mov	r0, fp
 800752a:	f000 fb1d 	bl	8007b68 <__hi0bits>
 800752e:	016d      	lsls	r5, r5, #5
 8007530:	f8d8 6000 	ldr.w	r6, [r8]
 8007534:	1a2d      	subs	r5, r5, r0
 8007536:	42b5      	cmp	r5, r6
 8007538:	dd54      	ble.n	80075e4 <__gethex+0x228>
 800753a:	1bad      	subs	r5, r5, r6
 800753c:	4629      	mov	r1, r5
 800753e:	4620      	mov	r0, r4
 8007540:	f000 feb1 	bl	80082a6 <__any_on>
 8007544:	4681      	mov	r9, r0
 8007546:	b178      	cbz	r0, 8007568 <__gethex+0x1ac>
 8007548:	1e6b      	subs	r3, r5, #1
 800754a:	1159      	asrs	r1, r3, #5
 800754c:	f003 021f 	and.w	r2, r3, #31
 8007550:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007554:	f04f 0901 	mov.w	r9, #1
 8007558:	fa09 f202 	lsl.w	r2, r9, r2
 800755c:	420a      	tst	r2, r1
 800755e:	d003      	beq.n	8007568 <__gethex+0x1ac>
 8007560:	454b      	cmp	r3, r9
 8007562:	dc36      	bgt.n	80075d2 <__gethex+0x216>
 8007564:	f04f 0902 	mov.w	r9, #2
 8007568:	4629      	mov	r1, r5
 800756a:	4620      	mov	r0, r4
 800756c:	f7ff febe 	bl	80072ec <rshift>
 8007570:	442f      	add	r7, r5
 8007572:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007576:	42bb      	cmp	r3, r7
 8007578:	da42      	bge.n	8007600 <__gethex+0x244>
 800757a:	9801      	ldr	r0, [sp, #4]
 800757c:	4621      	mov	r1, r4
 800757e:	f000 fa41 	bl	8007a04 <_Bfree>
 8007582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007584:	2300      	movs	r3, #0
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	25a3      	movs	r5, #163	@ 0xa3
 800758a:	e793      	b.n	80074b4 <__gethex+0xf8>
 800758c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007590:	2a2e      	cmp	r2, #46	@ 0x2e
 8007592:	d012      	beq.n	80075ba <__gethex+0x1fe>
 8007594:	2b20      	cmp	r3, #32
 8007596:	d104      	bne.n	80075a2 <__gethex+0x1e6>
 8007598:	f845 bb04 	str.w	fp, [r5], #4
 800759c:	f04f 0b00 	mov.w	fp, #0
 80075a0:	465b      	mov	r3, fp
 80075a2:	7830      	ldrb	r0, [r6, #0]
 80075a4:	9303      	str	r3, [sp, #12]
 80075a6:	f7ff fef3 	bl	8007390 <__hexdig_fun>
 80075aa:	9b03      	ldr	r3, [sp, #12]
 80075ac:	f000 000f 	and.w	r0, r0, #15
 80075b0:	4098      	lsls	r0, r3
 80075b2:	ea4b 0b00 	orr.w	fp, fp, r0
 80075b6:	3304      	adds	r3, #4
 80075b8:	e7ae      	b.n	8007518 <__gethex+0x15c>
 80075ba:	45b1      	cmp	r9, r6
 80075bc:	d8ea      	bhi.n	8007594 <__gethex+0x1d8>
 80075be:	492b      	ldr	r1, [pc, #172]	@ (800766c <__gethex+0x2b0>)
 80075c0:	9303      	str	r3, [sp, #12]
 80075c2:	2201      	movs	r2, #1
 80075c4:	4630      	mov	r0, r6
 80075c6:	f7fe ff48 	bl	800645a <strncmp>
 80075ca:	9b03      	ldr	r3, [sp, #12]
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d1e1      	bne.n	8007594 <__gethex+0x1d8>
 80075d0:	e7a2      	b.n	8007518 <__gethex+0x15c>
 80075d2:	1ea9      	subs	r1, r5, #2
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 fe66 	bl	80082a6 <__any_on>
 80075da:	2800      	cmp	r0, #0
 80075dc:	d0c2      	beq.n	8007564 <__gethex+0x1a8>
 80075de:	f04f 0903 	mov.w	r9, #3
 80075e2:	e7c1      	b.n	8007568 <__gethex+0x1ac>
 80075e4:	da09      	bge.n	80075fa <__gethex+0x23e>
 80075e6:	1b75      	subs	r5, r6, r5
 80075e8:	4621      	mov	r1, r4
 80075ea:	9801      	ldr	r0, [sp, #4]
 80075ec:	462a      	mov	r2, r5
 80075ee:	f000 fc21 	bl	8007e34 <__lshift>
 80075f2:	1b7f      	subs	r7, r7, r5
 80075f4:	4604      	mov	r4, r0
 80075f6:	f100 0a14 	add.w	sl, r0, #20
 80075fa:	f04f 0900 	mov.w	r9, #0
 80075fe:	e7b8      	b.n	8007572 <__gethex+0x1b6>
 8007600:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007604:	42bd      	cmp	r5, r7
 8007606:	dd6f      	ble.n	80076e8 <__gethex+0x32c>
 8007608:	1bed      	subs	r5, r5, r7
 800760a:	42ae      	cmp	r6, r5
 800760c:	dc34      	bgt.n	8007678 <__gethex+0x2bc>
 800760e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007612:	2b02      	cmp	r3, #2
 8007614:	d022      	beq.n	800765c <__gethex+0x2a0>
 8007616:	2b03      	cmp	r3, #3
 8007618:	d024      	beq.n	8007664 <__gethex+0x2a8>
 800761a:	2b01      	cmp	r3, #1
 800761c:	d115      	bne.n	800764a <__gethex+0x28e>
 800761e:	42ae      	cmp	r6, r5
 8007620:	d113      	bne.n	800764a <__gethex+0x28e>
 8007622:	2e01      	cmp	r6, #1
 8007624:	d10b      	bne.n	800763e <__gethex+0x282>
 8007626:	9a02      	ldr	r2, [sp, #8]
 8007628:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	2301      	movs	r3, #1
 8007630:	6123      	str	r3, [r4, #16]
 8007632:	f8ca 3000 	str.w	r3, [sl]
 8007636:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007638:	2562      	movs	r5, #98	@ 0x62
 800763a:	601c      	str	r4, [r3, #0]
 800763c:	e73a      	b.n	80074b4 <__gethex+0xf8>
 800763e:	1e71      	subs	r1, r6, #1
 8007640:	4620      	mov	r0, r4
 8007642:	f000 fe30 	bl	80082a6 <__any_on>
 8007646:	2800      	cmp	r0, #0
 8007648:	d1ed      	bne.n	8007626 <__gethex+0x26a>
 800764a:	9801      	ldr	r0, [sp, #4]
 800764c:	4621      	mov	r1, r4
 800764e:	f000 f9d9 	bl	8007a04 <_Bfree>
 8007652:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007654:	2300      	movs	r3, #0
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	2550      	movs	r5, #80	@ 0x50
 800765a:	e72b      	b.n	80074b4 <__gethex+0xf8>
 800765c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1f3      	bne.n	800764a <__gethex+0x28e>
 8007662:	e7e0      	b.n	8007626 <__gethex+0x26a>
 8007664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1dd      	bne.n	8007626 <__gethex+0x26a>
 800766a:	e7ee      	b.n	800764a <__gethex+0x28e>
 800766c:	08008afc 	.word	0x08008afc
 8007670:	08008d09 	.word	0x08008d09
 8007674:	08008d1a 	.word	0x08008d1a
 8007678:	1e6f      	subs	r7, r5, #1
 800767a:	f1b9 0f00 	cmp.w	r9, #0
 800767e:	d130      	bne.n	80076e2 <__gethex+0x326>
 8007680:	b127      	cbz	r7, 800768c <__gethex+0x2d0>
 8007682:	4639      	mov	r1, r7
 8007684:	4620      	mov	r0, r4
 8007686:	f000 fe0e 	bl	80082a6 <__any_on>
 800768a:	4681      	mov	r9, r0
 800768c:	117a      	asrs	r2, r7, #5
 800768e:	2301      	movs	r3, #1
 8007690:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007694:	f007 071f 	and.w	r7, r7, #31
 8007698:	40bb      	lsls	r3, r7
 800769a:	4213      	tst	r3, r2
 800769c:	4629      	mov	r1, r5
 800769e:	4620      	mov	r0, r4
 80076a0:	bf18      	it	ne
 80076a2:	f049 0902 	orrne.w	r9, r9, #2
 80076a6:	f7ff fe21 	bl	80072ec <rshift>
 80076aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80076ae:	1b76      	subs	r6, r6, r5
 80076b0:	2502      	movs	r5, #2
 80076b2:	f1b9 0f00 	cmp.w	r9, #0
 80076b6:	d047      	beq.n	8007748 <__gethex+0x38c>
 80076b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d015      	beq.n	80076ec <__gethex+0x330>
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d017      	beq.n	80076f4 <__gethex+0x338>
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d109      	bne.n	80076dc <__gethex+0x320>
 80076c8:	f019 0f02 	tst.w	r9, #2
 80076cc:	d006      	beq.n	80076dc <__gethex+0x320>
 80076ce:	f8da 3000 	ldr.w	r3, [sl]
 80076d2:	ea49 0903 	orr.w	r9, r9, r3
 80076d6:	f019 0f01 	tst.w	r9, #1
 80076da:	d10e      	bne.n	80076fa <__gethex+0x33e>
 80076dc:	f045 0510 	orr.w	r5, r5, #16
 80076e0:	e032      	b.n	8007748 <__gethex+0x38c>
 80076e2:	f04f 0901 	mov.w	r9, #1
 80076e6:	e7d1      	b.n	800768c <__gethex+0x2d0>
 80076e8:	2501      	movs	r5, #1
 80076ea:	e7e2      	b.n	80076b2 <__gethex+0x2f6>
 80076ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076ee:	f1c3 0301 	rsb	r3, r3, #1
 80076f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80076f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0f0      	beq.n	80076dc <__gethex+0x320>
 80076fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80076fe:	f104 0314 	add.w	r3, r4, #20
 8007702:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007706:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800770a:	f04f 0c00 	mov.w	ip, #0
 800770e:	4618      	mov	r0, r3
 8007710:	f853 2b04 	ldr.w	r2, [r3], #4
 8007714:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007718:	d01b      	beq.n	8007752 <__gethex+0x396>
 800771a:	3201      	adds	r2, #1
 800771c:	6002      	str	r2, [r0, #0]
 800771e:	2d02      	cmp	r5, #2
 8007720:	f104 0314 	add.w	r3, r4, #20
 8007724:	d13c      	bne.n	80077a0 <__gethex+0x3e4>
 8007726:	f8d8 2000 	ldr.w	r2, [r8]
 800772a:	3a01      	subs	r2, #1
 800772c:	42b2      	cmp	r2, r6
 800772e:	d109      	bne.n	8007744 <__gethex+0x388>
 8007730:	1171      	asrs	r1, r6, #5
 8007732:	2201      	movs	r2, #1
 8007734:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007738:	f006 061f 	and.w	r6, r6, #31
 800773c:	fa02 f606 	lsl.w	r6, r2, r6
 8007740:	421e      	tst	r6, r3
 8007742:	d13a      	bne.n	80077ba <__gethex+0x3fe>
 8007744:	f045 0520 	orr.w	r5, r5, #32
 8007748:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800774a:	601c      	str	r4, [r3, #0]
 800774c:	9b02      	ldr	r3, [sp, #8]
 800774e:	601f      	str	r7, [r3, #0]
 8007750:	e6b0      	b.n	80074b4 <__gethex+0xf8>
 8007752:	4299      	cmp	r1, r3
 8007754:	f843 cc04 	str.w	ip, [r3, #-4]
 8007758:	d8d9      	bhi.n	800770e <__gethex+0x352>
 800775a:	68a3      	ldr	r3, [r4, #8]
 800775c:	459b      	cmp	fp, r3
 800775e:	db17      	blt.n	8007790 <__gethex+0x3d4>
 8007760:	6861      	ldr	r1, [r4, #4]
 8007762:	9801      	ldr	r0, [sp, #4]
 8007764:	3101      	adds	r1, #1
 8007766:	f000 f90d 	bl	8007984 <_Balloc>
 800776a:	4681      	mov	r9, r0
 800776c:	b918      	cbnz	r0, 8007776 <__gethex+0x3ba>
 800776e:	4b1a      	ldr	r3, [pc, #104]	@ (80077d8 <__gethex+0x41c>)
 8007770:	4602      	mov	r2, r0
 8007772:	2184      	movs	r1, #132	@ 0x84
 8007774:	e6c5      	b.n	8007502 <__gethex+0x146>
 8007776:	6922      	ldr	r2, [r4, #16]
 8007778:	3202      	adds	r2, #2
 800777a:	f104 010c 	add.w	r1, r4, #12
 800777e:	0092      	lsls	r2, r2, #2
 8007780:	300c      	adds	r0, #12
 8007782:	f7fe ff04 	bl	800658e <memcpy>
 8007786:	4621      	mov	r1, r4
 8007788:	9801      	ldr	r0, [sp, #4]
 800778a:	f000 f93b 	bl	8007a04 <_Bfree>
 800778e:	464c      	mov	r4, r9
 8007790:	6923      	ldr	r3, [r4, #16]
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007798:	6122      	str	r2, [r4, #16]
 800779a:	2201      	movs	r2, #1
 800779c:	615a      	str	r2, [r3, #20]
 800779e:	e7be      	b.n	800771e <__gethex+0x362>
 80077a0:	6922      	ldr	r2, [r4, #16]
 80077a2:	455a      	cmp	r2, fp
 80077a4:	dd0b      	ble.n	80077be <__gethex+0x402>
 80077a6:	2101      	movs	r1, #1
 80077a8:	4620      	mov	r0, r4
 80077aa:	f7ff fd9f 	bl	80072ec <rshift>
 80077ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077b2:	3701      	adds	r7, #1
 80077b4:	42bb      	cmp	r3, r7
 80077b6:	f6ff aee0 	blt.w	800757a <__gethex+0x1be>
 80077ba:	2501      	movs	r5, #1
 80077bc:	e7c2      	b.n	8007744 <__gethex+0x388>
 80077be:	f016 061f 	ands.w	r6, r6, #31
 80077c2:	d0fa      	beq.n	80077ba <__gethex+0x3fe>
 80077c4:	4453      	add	r3, sl
 80077c6:	f1c6 0620 	rsb	r6, r6, #32
 80077ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80077ce:	f000 f9cb 	bl	8007b68 <__hi0bits>
 80077d2:	42b0      	cmp	r0, r6
 80077d4:	dbe7      	blt.n	80077a6 <__gethex+0x3ea>
 80077d6:	e7f0      	b.n	80077ba <__gethex+0x3fe>
 80077d8:	08008d09 	.word	0x08008d09

080077dc <L_shift>:
 80077dc:	f1c2 0208 	rsb	r2, r2, #8
 80077e0:	0092      	lsls	r2, r2, #2
 80077e2:	b570      	push	{r4, r5, r6, lr}
 80077e4:	f1c2 0620 	rsb	r6, r2, #32
 80077e8:	6843      	ldr	r3, [r0, #4]
 80077ea:	6804      	ldr	r4, [r0, #0]
 80077ec:	fa03 f506 	lsl.w	r5, r3, r6
 80077f0:	432c      	orrs	r4, r5
 80077f2:	40d3      	lsrs	r3, r2
 80077f4:	6004      	str	r4, [r0, #0]
 80077f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80077fa:	4288      	cmp	r0, r1
 80077fc:	d3f4      	bcc.n	80077e8 <L_shift+0xc>
 80077fe:	bd70      	pop	{r4, r5, r6, pc}

08007800 <__match>:
 8007800:	b530      	push	{r4, r5, lr}
 8007802:	6803      	ldr	r3, [r0, #0]
 8007804:	3301      	adds	r3, #1
 8007806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800780a:	b914      	cbnz	r4, 8007812 <__match+0x12>
 800780c:	6003      	str	r3, [r0, #0]
 800780e:	2001      	movs	r0, #1
 8007810:	bd30      	pop	{r4, r5, pc}
 8007812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007816:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800781a:	2d19      	cmp	r5, #25
 800781c:	bf98      	it	ls
 800781e:	3220      	addls	r2, #32
 8007820:	42a2      	cmp	r2, r4
 8007822:	d0f0      	beq.n	8007806 <__match+0x6>
 8007824:	2000      	movs	r0, #0
 8007826:	e7f3      	b.n	8007810 <__match+0x10>

08007828 <__hexnan>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	680b      	ldr	r3, [r1, #0]
 800782e:	6801      	ldr	r1, [r0, #0]
 8007830:	115e      	asrs	r6, r3, #5
 8007832:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007836:	f013 031f 	ands.w	r3, r3, #31
 800783a:	b087      	sub	sp, #28
 800783c:	bf18      	it	ne
 800783e:	3604      	addne	r6, #4
 8007840:	2500      	movs	r5, #0
 8007842:	1f37      	subs	r7, r6, #4
 8007844:	4682      	mov	sl, r0
 8007846:	4690      	mov	r8, r2
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	f846 5c04 	str.w	r5, [r6, #-4]
 800784e:	46b9      	mov	r9, r7
 8007850:	463c      	mov	r4, r7
 8007852:	9502      	str	r5, [sp, #8]
 8007854:	46ab      	mov	fp, r5
 8007856:	784a      	ldrb	r2, [r1, #1]
 8007858:	1c4b      	adds	r3, r1, #1
 800785a:	9303      	str	r3, [sp, #12]
 800785c:	b342      	cbz	r2, 80078b0 <__hexnan+0x88>
 800785e:	4610      	mov	r0, r2
 8007860:	9105      	str	r1, [sp, #20]
 8007862:	9204      	str	r2, [sp, #16]
 8007864:	f7ff fd94 	bl	8007390 <__hexdig_fun>
 8007868:	2800      	cmp	r0, #0
 800786a:	d151      	bne.n	8007910 <__hexnan+0xe8>
 800786c:	9a04      	ldr	r2, [sp, #16]
 800786e:	9905      	ldr	r1, [sp, #20]
 8007870:	2a20      	cmp	r2, #32
 8007872:	d818      	bhi.n	80078a6 <__hexnan+0x7e>
 8007874:	9b02      	ldr	r3, [sp, #8]
 8007876:	459b      	cmp	fp, r3
 8007878:	dd13      	ble.n	80078a2 <__hexnan+0x7a>
 800787a:	454c      	cmp	r4, r9
 800787c:	d206      	bcs.n	800788c <__hexnan+0x64>
 800787e:	2d07      	cmp	r5, #7
 8007880:	dc04      	bgt.n	800788c <__hexnan+0x64>
 8007882:	462a      	mov	r2, r5
 8007884:	4649      	mov	r1, r9
 8007886:	4620      	mov	r0, r4
 8007888:	f7ff ffa8 	bl	80077dc <L_shift>
 800788c:	4544      	cmp	r4, r8
 800788e:	d952      	bls.n	8007936 <__hexnan+0x10e>
 8007890:	2300      	movs	r3, #0
 8007892:	f1a4 0904 	sub.w	r9, r4, #4
 8007896:	f844 3c04 	str.w	r3, [r4, #-4]
 800789a:	f8cd b008 	str.w	fp, [sp, #8]
 800789e:	464c      	mov	r4, r9
 80078a0:	461d      	mov	r5, r3
 80078a2:	9903      	ldr	r1, [sp, #12]
 80078a4:	e7d7      	b.n	8007856 <__hexnan+0x2e>
 80078a6:	2a29      	cmp	r2, #41	@ 0x29
 80078a8:	d157      	bne.n	800795a <__hexnan+0x132>
 80078aa:	3102      	adds	r1, #2
 80078ac:	f8ca 1000 	str.w	r1, [sl]
 80078b0:	f1bb 0f00 	cmp.w	fp, #0
 80078b4:	d051      	beq.n	800795a <__hexnan+0x132>
 80078b6:	454c      	cmp	r4, r9
 80078b8:	d206      	bcs.n	80078c8 <__hexnan+0xa0>
 80078ba:	2d07      	cmp	r5, #7
 80078bc:	dc04      	bgt.n	80078c8 <__hexnan+0xa0>
 80078be:	462a      	mov	r2, r5
 80078c0:	4649      	mov	r1, r9
 80078c2:	4620      	mov	r0, r4
 80078c4:	f7ff ff8a 	bl	80077dc <L_shift>
 80078c8:	4544      	cmp	r4, r8
 80078ca:	d936      	bls.n	800793a <__hexnan+0x112>
 80078cc:	f1a8 0204 	sub.w	r2, r8, #4
 80078d0:	4623      	mov	r3, r4
 80078d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80078d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80078da:	429f      	cmp	r7, r3
 80078dc:	d2f9      	bcs.n	80078d2 <__hexnan+0xaa>
 80078de:	1b3b      	subs	r3, r7, r4
 80078e0:	f023 0303 	bic.w	r3, r3, #3
 80078e4:	3304      	adds	r3, #4
 80078e6:	3401      	adds	r4, #1
 80078e8:	3e03      	subs	r6, #3
 80078ea:	42b4      	cmp	r4, r6
 80078ec:	bf88      	it	hi
 80078ee:	2304      	movhi	r3, #4
 80078f0:	4443      	add	r3, r8
 80078f2:	2200      	movs	r2, #0
 80078f4:	f843 2b04 	str.w	r2, [r3], #4
 80078f8:	429f      	cmp	r7, r3
 80078fa:	d2fb      	bcs.n	80078f4 <__hexnan+0xcc>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	b91b      	cbnz	r3, 8007908 <__hexnan+0xe0>
 8007900:	4547      	cmp	r7, r8
 8007902:	d128      	bne.n	8007956 <__hexnan+0x12e>
 8007904:	2301      	movs	r3, #1
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	2005      	movs	r0, #5
 800790a:	b007      	add	sp, #28
 800790c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007910:	3501      	adds	r5, #1
 8007912:	2d08      	cmp	r5, #8
 8007914:	f10b 0b01 	add.w	fp, fp, #1
 8007918:	dd06      	ble.n	8007928 <__hexnan+0x100>
 800791a:	4544      	cmp	r4, r8
 800791c:	d9c1      	bls.n	80078a2 <__hexnan+0x7a>
 800791e:	2300      	movs	r3, #0
 8007920:	f844 3c04 	str.w	r3, [r4, #-4]
 8007924:	2501      	movs	r5, #1
 8007926:	3c04      	subs	r4, #4
 8007928:	6822      	ldr	r2, [r4, #0]
 800792a:	f000 000f 	and.w	r0, r0, #15
 800792e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007932:	6020      	str	r0, [r4, #0]
 8007934:	e7b5      	b.n	80078a2 <__hexnan+0x7a>
 8007936:	2508      	movs	r5, #8
 8007938:	e7b3      	b.n	80078a2 <__hexnan+0x7a>
 800793a:	9b01      	ldr	r3, [sp, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d0dd      	beq.n	80078fc <__hexnan+0xd4>
 8007940:	f1c3 0320 	rsb	r3, r3, #32
 8007944:	f04f 32ff 	mov.w	r2, #4294967295
 8007948:	40da      	lsrs	r2, r3
 800794a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800794e:	4013      	ands	r3, r2
 8007950:	f846 3c04 	str.w	r3, [r6, #-4]
 8007954:	e7d2      	b.n	80078fc <__hexnan+0xd4>
 8007956:	3f04      	subs	r7, #4
 8007958:	e7d0      	b.n	80078fc <__hexnan+0xd4>
 800795a:	2004      	movs	r0, #4
 800795c:	e7d5      	b.n	800790a <__hexnan+0xe2>

0800795e <__ascii_mbtowc>:
 800795e:	b082      	sub	sp, #8
 8007960:	b901      	cbnz	r1, 8007964 <__ascii_mbtowc+0x6>
 8007962:	a901      	add	r1, sp, #4
 8007964:	b142      	cbz	r2, 8007978 <__ascii_mbtowc+0x1a>
 8007966:	b14b      	cbz	r3, 800797c <__ascii_mbtowc+0x1e>
 8007968:	7813      	ldrb	r3, [r2, #0]
 800796a:	600b      	str	r3, [r1, #0]
 800796c:	7812      	ldrb	r2, [r2, #0]
 800796e:	1e10      	subs	r0, r2, #0
 8007970:	bf18      	it	ne
 8007972:	2001      	movne	r0, #1
 8007974:	b002      	add	sp, #8
 8007976:	4770      	bx	lr
 8007978:	4610      	mov	r0, r2
 800797a:	e7fb      	b.n	8007974 <__ascii_mbtowc+0x16>
 800797c:	f06f 0001 	mvn.w	r0, #1
 8007980:	e7f8      	b.n	8007974 <__ascii_mbtowc+0x16>
	...

08007984 <_Balloc>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	69c6      	ldr	r6, [r0, #28]
 8007988:	4604      	mov	r4, r0
 800798a:	460d      	mov	r5, r1
 800798c:	b976      	cbnz	r6, 80079ac <_Balloc+0x28>
 800798e:	2010      	movs	r0, #16
 8007990:	f7fd f8fa 	bl	8004b88 <malloc>
 8007994:	4602      	mov	r2, r0
 8007996:	61e0      	str	r0, [r4, #28]
 8007998:	b920      	cbnz	r0, 80079a4 <_Balloc+0x20>
 800799a:	4b18      	ldr	r3, [pc, #96]	@ (80079fc <_Balloc+0x78>)
 800799c:	4818      	ldr	r0, [pc, #96]	@ (8007a00 <_Balloc+0x7c>)
 800799e:	216b      	movs	r1, #107	@ 0x6b
 80079a0:	f000 fd64 	bl	800846c <__assert_func>
 80079a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079a8:	6006      	str	r6, [r0, #0]
 80079aa:	60c6      	str	r6, [r0, #12]
 80079ac:	69e6      	ldr	r6, [r4, #28]
 80079ae:	68f3      	ldr	r3, [r6, #12]
 80079b0:	b183      	cbz	r3, 80079d4 <_Balloc+0x50>
 80079b2:	69e3      	ldr	r3, [r4, #28]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079ba:	b9b8      	cbnz	r0, 80079ec <_Balloc+0x68>
 80079bc:	2101      	movs	r1, #1
 80079be:	fa01 f605 	lsl.w	r6, r1, r5
 80079c2:	1d72      	adds	r2, r6, #5
 80079c4:	0092      	lsls	r2, r2, #2
 80079c6:	4620      	mov	r0, r4
 80079c8:	f000 fd6e 	bl	80084a8 <_calloc_r>
 80079cc:	b160      	cbz	r0, 80079e8 <_Balloc+0x64>
 80079ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079d2:	e00e      	b.n	80079f2 <_Balloc+0x6e>
 80079d4:	2221      	movs	r2, #33	@ 0x21
 80079d6:	2104      	movs	r1, #4
 80079d8:	4620      	mov	r0, r4
 80079da:	f000 fd65 	bl	80084a8 <_calloc_r>
 80079de:	69e3      	ldr	r3, [r4, #28]
 80079e0:	60f0      	str	r0, [r6, #12]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e4      	bne.n	80079b2 <_Balloc+0x2e>
 80079e8:	2000      	movs	r0, #0
 80079ea:	bd70      	pop	{r4, r5, r6, pc}
 80079ec:	6802      	ldr	r2, [r0, #0]
 80079ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079f2:	2300      	movs	r3, #0
 80079f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079f8:	e7f7      	b.n	80079ea <_Balloc+0x66>
 80079fa:	bf00      	nop
 80079fc:	08008c9a 	.word	0x08008c9a
 8007a00:	08008d7a 	.word	0x08008d7a

08007a04 <_Bfree>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	69c6      	ldr	r6, [r0, #28]
 8007a08:	4605      	mov	r5, r0
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	b976      	cbnz	r6, 8007a2c <_Bfree+0x28>
 8007a0e:	2010      	movs	r0, #16
 8007a10:	f7fd f8ba 	bl	8004b88 <malloc>
 8007a14:	4602      	mov	r2, r0
 8007a16:	61e8      	str	r0, [r5, #28]
 8007a18:	b920      	cbnz	r0, 8007a24 <_Bfree+0x20>
 8007a1a:	4b09      	ldr	r3, [pc, #36]	@ (8007a40 <_Bfree+0x3c>)
 8007a1c:	4809      	ldr	r0, [pc, #36]	@ (8007a44 <_Bfree+0x40>)
 8007a1e:	218f      	movs	r1, #143	@ 0x8f
 8007a20:	f000 fd24 	bl	800846c <__assert_func>
 8007a24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a28:	6006      	str	r6, [r0, #0]
 8007a2a:	60c6      	str	r6, [r0, #12]
 8007a2c:	b13c      	cbz	r4, 8007a3e <_Bfree+0x3a>
 8007a2e:	69eb      	ldr	r3, [r5, #28]
 8007a30:	6862      	ldr	r2, [r4, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a38:	6021      	str	r1, [r4, #0]
 8007a3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a3e:	bd70      	pop	{r4, r5, r6, pc}
 8007a40:	08008c9a 	.word	0x08008c9a
 8007a44:	08008d7a 	.word	0x08008d7a

08007a48 <__multadd>:
 8007a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4c:	690d      	ldr	r5, [r1, #16]
 8007a4e:	4607      	mov	r7, r0
 8007a50:	460c      	mov	r4, r1
 8007a52:	461e      	mov	r6, r3
 8007a54:	f101 0c14 	add.w	ip, r1, #20
 8007a58:	2000      	movs	r0, #0
 8007a5a:	f8dc 3000 	ldr.w	r3, [ip]
 8007a5e:	b299      	uxth	r1, r3
 8007a60:	fb02 6101 	mla	r1, r2, r1, r6
 8007a64:	0c1e      	lsrs	r6, r3, #16
 8007a66:	0c0b      	lsrs	r3, r1, #16
 8007a68:	fb02 3306 	mla	r3, r2, r6, r3
 8007a6c:	b289      	uxth	r1, r1
 8007a6e:	3001      	adds	r0, #1
 8007a70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a74:	4285      	cmp	r5, r0
 8007a76:	f84c 1b04 	str.w	r1, [ip], #4
 8007a7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a7e:	dcec      	bgt.n	8007a5a <__multadd+0x12>
 8007a80:	b30e      	cbz	r6, 8007ac6 <__multadd+0x7e>
 8007a82:	68a3      	ldr	r3, [r4, #8]
 8007a84:	42ab      	cmp	r3, r5
 8007a86:	dc19      	bgt.n	8007abc <__multadd+0x74>
 8007a88:	6861      	ldr	r1, [r4, #4]
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	3101      	adds	r1, #1
 8007a8e:	f7ff ff79 	bl	8007984 <_Balloc>
 8007a92:	4680      	mov	r8, r0
 8007a94:	b928      	cbnz	r0, 8007aa2 <__multadd+0x5a>
 8007a96:	4602      	mov	r2, r0
 8007a98:	4b0c      	ldr	r3, [pc, #48]	@ (8007acc <__multadd+0x84>)
 8007a9a:	480d      	ldr	r0, [pc, #52]	@ (8007ad0 <__multadd+0x88>)
 8007a9c:	21ba      	movs	r1, #186	@ 0xba
 8007a9e:	f000 fce5 	bl	800846c <__assert_func>
 8007aa2:	6922      	ldr	r2, [r4, #16]
 8007aa4:	3202      	adds	r2, #2
 8007aa6:	f104 010c 	add.w	r1, r4, #12
 8007aaa:	0092      	lsls	r2, r2, #2
 8007aac:	300c      	adds	r0, #12
 8007aae:	f7fe fd6e 	bl	800658e <memcpy>
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	f7ff ffa5 	bl	8007a04 <_Bfree>
 8007aba:	4644      	mov	r4, r8
 8007abc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ac0:	3501      	adds	r5, #1
 8007ac2:	615e      	str	r6, [r3, #20]
 8007ac4:	6125      	str	r5, [r4, #16]
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007acc:	08008d09 	.word	0x08008d09
 8007ad0:	08008d7a 	.word	0x08008d7a

08007ad4 <__s2b>:
 8007ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad8:	460c      	mov	r4, r1
 8007ada:	4615      	mov	r5, r2
 8007adc:	461f      	mov	r7, r3
 8007ade:	2209      	movs	r2, #9
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ae8:	2100      	movs	r1, #0
 8007aea:	2201      	movs	r2, #1
 8007aec:	429a      	cmp	r2, r3
 8007aee:	db09      	blt.n	8007b04 <__s2b+0x30>
 8007af0:	4630      	mov	r0, r6
 8007af2:	f7ff ff47 	bl	8007984 <_Balloc>
 8007af6:	b940      	cbnz	r0, 8007b0a <__s2b+0x36>
 8007af8:	4602      	mov	r2, r0
 8007afa:	4b19      	ldr	r3, [pc, #100]	@ (8007b60 <__s2b+0x8c>)
 8007afc:	4819      	ldr	r0, [pc, #100]	@ (8007b64 <__s2b+0x90>)
 8007afe:	21d3      	movs	r1, #211	@ 0xd3
 8007b00:	f000 fcb4 	bl	800846c <__assert_func>
 8007b04:	0052      	lsls	r2, r2, #1
 8007b06:	3101      	adds	r1, #1
 8007b08:	e7f0      	b.n	8007aec <__s2b+0x18>
 8007b0a:	9b08      	ldr	r3, [sp, #32]
 8007b0c:	6143      	str	r3, [r0, #20]
 8007b0e:	2d09      	cmp	r5, #9
 8007b10:	f04f 0301 	mov.w	r3, #1
 8007b14:	6103      	str	r3, [r0, #16]
 8007b16:	dd16      	ble.n	8007b46 <__s2b+0x72>
 8007b18:	f104 0909 	add.w	r9, r4, #9
 8007b1c:	46c8      	mov	r8, r9
 8007b1e:	442c      	add	r4, r5
 8007b20:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007b24:	4601      	mov	r1, r0
 8007b26:	3b30      	subs	r3, #48	@ 0x30
 8007b28:	220a      	movs	r2, #10
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7ff ff8c 	bl	8007a48 <__multadd>
 8007b30:	45a0      	cmp	r8, r4
 8007b32:	d1f5      	bne.n	8007b20 <__s2b+0x4c>
 8007b34:	f1a5 0408 	sub.w	r4, r5, #8
 8007b38:	444c      	add	r4, r9
 8007b3a:	1b2d      	subs	r5, r5, r4
 8007b3c:	1963      	adds	r3, r4, r5
 8007b3e:	42bb      	cmp	r3, r7
 8007b40:	db04      	blt.n	8007b4c <__s2b+0x78>
 8007b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b46:	340a      	adds	r4, #10
 8007b48:	2509      	movs	r5, #9
 8007b4a:	e7f6      	b.n	8007b3a <__s2b+0x66>
 8007b4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b50:	4601      	mov	r1, r0
 8007b52:	3b30      	subs	r3, #48	@ 0x30
 8007b54:	220a      	movs	r2, #10
 8007b56:	4630      	mov	r0, r6
 8007b58:	f7ff ff76 	bl	8007a48 <__multadd>
 8007b5c:	e7ee      	b.n	8007b3c <__s2b+0x68>
 8007b5e:	bf00      	nop
 8007b60:	08008d09 	.word	0x08008d09
 8007b64:	08008d7a 	.word	0x08008d7a

08007b68 <__hi0bits>:
 8007b68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	bf36      	itet	cc
 8007b70:	0403      	lslcc	r3, r0, #16
 8007b72:	2000      	movcs	r0, #0
 8007b74:	2010      	movcc	r0, #16
 8007b76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b7a:	bf3c      	itt	cc
 8007b7c:	021b      	lslcc	r3, r3, #8
 8007b7e:	3008      	addcc	r0, #8
 8007b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b84:	bf3c      	itt	cc
 8007b86:	011b      	lslcc	r3, r3, #4
 8007b88:	3004      	addcc	r0, #4
 8007b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b8e:	bf3c      	itt	cc
 8007b90:	009b      	lslcc	r3, r3, #2
 8007b92:	3002      	addcc	r0, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	db05      	blt.n	8007ba4 <__hi0bits+0x3c>
 8007b98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b9c:	f100 0001 	add.w	r0, r0, #1
 8007ba0:	bf08      	it	eq
 8007ba2:	2020      	moveq	r0, #32
 8007ba4:	4770      	bx	lr

08007ba6 <__lo0bits>:
 8007ba6:	6803      	ldr	r3, [r0, #0]
 8007ba8:	4602      	mov	r2, r0
 8007baa:	f013 0007 	ands.w	r0, r3, #7
 8007bae:	d00b      	beq.n	8007bc8 <__lo0bits+0x22>
 8007bb0:	07d9      	lsls	r1, r3, #31
 8007bb2:	d421      	bmi.n	8007bf8 <__lo0bits+0x52>
 8007bb4:	0798      	lsls	r0, r3, #30
 8007bb6:	bf49      	itett	mi
 8007bb8:	085b      	lsrmi	r3, r3, #1
 8007bba:	089b      	lsrpl	r3, r3, #2
 8007bbc:	2001      	movmi	r0, #1
 8007bbe:	6013      	strmi	r3, [r2, #0]
 8007bc0:	bf5c      	itt	pl
 8007bc2:	6013      	strpl	r3, [r2, #0]
 8007bc4:	2002      	movpl	r0, #2
 8007bc6:	4770      	bx	lr
 8007bc8:	b299      	uxth	r1, r3
 8007bca:	b909      	cbnz	r1, 8007bd0 <__lo0bits+0x2a>
 8007bcc:	0c1b      	lsrs	r3, r3, #16
 8007bce:	2010      	movs	r0, #16
 8007bd0:	b2d9      	uxtb	r1, r3
 8007bd2:	b909      	cbnz	r1, 8007bd8 <__lo0bits+0x32>
 8007bd4:	3008      	adds	r0, #8
 8007bd6:	0a1b      	lsrs	r3, r3, #8
 8007bd8:	0719      	lsls	r1, r3, #28
 8007bda:	bf04      	itt	eq
 8007bdc:	091b      	lsreq	r3, r3, #4
 8007bde:	3004      	addeq	r0, #4
 8007be0:	0799      	lsls	r1, r3, #30
 8007be2:	bf04      	itt	eq
 8007be4:	089b      	lsreq	r3, r3, #2
 8007be6:	3002      	addeq	r0, #2
 8007be8:	07d9      	lsls	r1, r3, #31
 8007bea:	d403      	bmi.n	8007bf4 <__lo0bits+0x4e>
 8007bec:	085b      	lsrs	r3, r3, #1
 8007bee:	f100 0001 	add.w	r0, r0, #1
 8007bf2:	d003      	beq.n	8007bfc <__lo0bits+0x56>
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	4770      	bx	lr
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	4770      	bx	lr
 8007bfc:	2020      	movs	r0, #32
 8007bfe:	4770      	bx	lr

08007c00 <__i2b>:
 8007c00:	b510      	push	{r4, lr}
 8007c02:	460c      	mov	r4, r1
 8007c04:	2101      	movs	r1, #1
 8007c06:	f7ff febd 	bl	8007984 <_Balloc>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	b928      	cbnz	r0, 8007c1a <__i2b+0x1a>
 8007c0e:	4b05      	ldr	r3, [pc, #20]	@ (8007c24 <__i2b+0x24>)
 8007c10:	4805      	ldr	r0, [pc, #20]	@ (8007c28 <__i2b+0x28>)
 8007c12:	f240 1145 	movw	r1, #325	@ 0x145
 8007c16:	f000 fc29 	bl	800846c <__assert_func>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	6144      	str	r4, [r0, #20]
 8007c1e:	6103      	str	r3, [r0, #16]
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	bf00      	nop
 8007c24:	08008d09 	.word	0x08008d09
 8007c28:	08008d7a 	.word	0x08008d7a

08007c2c <__multiply>:
 8007c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c30:	4614      	mov	r4, r2
 8007c32:	690a      	ldr	r2, [r1, #16]
 8007c34:	6923      	ldr	r3, [r4, #16]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	bfa8      	it	ge
 8007c3a:	4623      	movge	r3, r4
 8007c3c:	460f      	mov	r7, r1
 8007c3e:	bfa4      	itt	ge
 8007c40:	460c      	movge	r4, r1
 8007c42:	461f      	movge	r7, r3
 8007c44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007c48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007c4c:	68a3      	ldr	r3, [r4, #8]
 8007c4e:	6861      	ldr	r1, [r4, #4]
 8007c50:	eb0a 0609 	add.w	r6, sl, r9
 8007c54:	42b3      	cmp	r3, r6
 8007c56:	b085      	sub	sp, #20
 8007c58:	bfb8      	it	lt
 8007c5a:	3101      	addlt	r1, #1
 8007c5c:	f7ff fe92 	bl	8007984 <_Balloc>
 8007c60:	b930      	cbnz	r0, 8007c70 <__multiply+0x44>
 8007c62:	4602      	mov	r2, r0
 8007c64:	4b44      	ldr	r3, [pc, #272]	@ (8007d78 <__multiply+0x14c>)
 8007c66:	4845      	ldr	r0, [pc, #276]	@ (8007d7c <__multiply+0x150>)
 8007c68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c6c:	f000 fbfe 	bl	800846c <__assert_func>
 8007c70:	f100 0514 	add.w	r5, r0, #20
 8007c74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c78:	462b      	mov	r3, r5
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	4543      	cmp	r3, r8
 8007c7e:	d321      	bcc.n	8007cc4 <__multiply+0x98>
 8007c80:	f107 0114 	add.w	r1, r7, #20
 8007c84:	f104 0214 	add.w	r2, r4, #20
 8007c88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007c90:	9302      	str	r3, [sp, #8]
 8007c92:	1b13      	subs	r3, r2, r4
 8007c94:	3b15      	subs	r3, #21
 8007c96:	f023 0303 	bic.w	r3, r3, #3
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	f104 0715 	add.w	r7, r4, #21
 8007ca0:	42ba      	cmp	r2, r7
 8007ca2:	bf38      	it	cc
 8007ca4:	2304      	movcc	r3, #4
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	9b02      	ldr	r3, [sp, #8]
 8007caa:	9103      	str	r1, [sp, #12]
 8007cac:	428b      	cmp	r3, r1
 8007cae:	d80c      	bhi.n	8007cca <__multiply+0x9e>
 8007cb0:	2e00      	cmp	r6, #0
 8007cb2:	dd03      	ble.n	8007cbc <__multiply+0x90>
 8007cb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d05b      	beq.n	8007d74 <__multiply+0x148>
 8007cbc:	6106      	str	r6, [r0, #16]
 8007cbe:	b005      	add	sp, #20
 8007cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc4:	f843 2b04 	str.w	r2, [r3], #4
 8007cc8:	e7d8      	b.n	8007c7c <__multiply+0x50>
 8007cca:	f8b1 a000 	ldrh.w	sl, [r1]
 8007cce:	f1ba 0f00 	cmp.w	sl, #0
 8007cd2:	d024      	beq.n	8007d1e <__multiply+0xf2>
 8007cd4:	f104 0e14 	add.w	lr, r4, #20
 8007cd8:	46a9      	mov	r9, r5
 8007cda:	f04f 0c00 	mov.w	ip, #0
 8007cde:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ce2:	f8d9 3000 	ldr.w	r3, [r9]
 8007ce6:	fa1f fb87 	uxth.w	fp, r7
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	fb0a 330b 	mla	r3, sl, fp, r3
 8007cf0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007cf4:	f8d9 7000 	ldr.w	r7, [r9]
 8007cf8:	4463      	add	r3, ip
 8007cfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cfe:	fb0a c70b 	mla	r7, sl, fp, ip
 8007d02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d0c:	4572      	cmp	r2, lr
 8007d0e:	f849 3b04 	str.w	r3, [r9], #4
 8007d12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d16:	d8e2      	bhi.n	8007cde <__multiply+0xb2>
 8007d18:	9b01      	ldr	r3, [sp, #4]
 8007d1a:	f845 c003 	str.w	ip, [r5, r3]
 8007d1e:	9b03      	ldr	r3, [sp, #12]
 8007d20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d24:	3104      	adds	r1, #4
 8007d26:	f1b9 0f00 	cmp.w	r9, #0
 8007d2a:	d021      	beq.n	8007d70 <__multiply+0x144>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	f104 0c14 	add.w	ip, r4, #20
 8007d32:	46ae      	mov	lr, r5
 8007d34:	f04f 0a00 	mov.w	sl, #0
 8007d38:	f8bc b000 	ldrh.w	fp, [ip]
 8007d3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007d40:	fb09 770b 	mla	r7, r9, fp, r7
 8007d44:	4457      	add	r7, sl
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d4c:	f84e 3b04 	str.w	r3, [lr], #4
 8007d50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d58:	f8be 3000 	ldrh.w	r3, [lr]
 8007d5c:	fb09 330a 	mla	r3, r9, sl, r3
 8007d60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d64:	4562      	cmp	r2, ip
 8007d66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d6a:	d8e5      	bhi.n	8007d38 <__multiply+0x10c>
 8007d6c:	9f01      	ldr	r7, [sp, #4]
 8007d6e:	51eb      	str	r3, [r5, r7]
 8007d70:	3504      	adds	r5, #4
 8007d72:	e799      	b.n	8007ca8 <__multiply+0x7c>
 8007d74:	3e01      	subs	r6, #1
 8007d76:	e79b      	b.n	8007cb0 <__multiply+0x84>
 8007d78:	08008d09 	.word	0x08008d09
 8007d7c:	08008d7a 	.word	0x08008d7a

08007d80 <__pow5mult>:
 8007d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d84:	4615      	mov	r5, r2
 8007d86:	f012 0203 	ands.w	r2, r2, #3
 8007d8a:	4607      	mov	r7, r0
 8007d8c:	460e      	mov	r6, r1
 8007d8e:	d007      	beq.n	8007da0 <__pow5mult+0x20>
 8007d90:	4c25      	ldr	r4, [pc, #148]	@ (8007e28 <__pow5mult+0xa8>)
 8007d92:	3a01      	subs	r2, #1
 8007d94:	2300      	movs	r3, #0
 8007d96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d9a:	f7ff fe55 	bl	8007a48 <__multadd>
 8007d9e:	4606      	mov	r6, r0
 8007da0:	10ad      	asrs	r5, r5, #2
 8007da2:	d03d      	beq.n	8007e20 <__pow5mult+0xa0>
 8007da4:	69fc      	ldr	r4, [r7, #28]
 8007da6:	b97c      	cbnz	r4, 8007dc8 <__pow5mult+0x48>
 8007da8:	2010      	movs	r0, #16
 8007daa:	f7fc feed 	bl	8004b88 <malloc>
 8007dae:	4602      	mov	r2, r0
 8007db0:	61f8      	str	r0, [r7, #28]
 8007db2:	b928      	cbnz	r0, 8007dc0 <__pow5mult+0x40>
 8007db4:	4b1d      	ldr	r3, [pc, #116]	@ (8007e2c <__pow5mult+0xac>)
 8007db6:	481e      	ldr	r0, [pc, #120]	@ (8007e30 <__pow5mult+0xb0>)
 8007db8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007dbc:	f000 fb56 	bl	800846c <__assert_func>
 8007dc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dc4:	6004      	str	r4, [r0, #0]
 8007dc6:	60c4      	str	r4, [r0, #12]
 8007dc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007dcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dd0:	b94c      	cbnz	r4, 8007de6 <__pow5mult+0x66>
 8007dd2:	f240 2171 	movw	r1, #625	@ 0x271
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	f7ff ff12 	bl	8007c00 <__i2b>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f8c8 0008 	str.w	r0, [r8, #8]
 8007de2:	4604      	mov	r4, r0
 8007de4:	6003      	str	r3, [r0, #0]
 8007de6:	f04f 0900 	mov.w	r9, #0
 8007dea:	07eb      	lsls	r3, r5, #31
 8007dec:	d50a      	bpl.n	8007e04 <__pow5mult+0x84>
 8007dee:	4631      	mov	r1, r6
 8007df0:	4622      	mov	r2, r4
 8007df2:	4638      	mov	r0, r7
 8007df4:	f7ff ff1a 	bl	8007c2c <__multiply>
 8007df8:	4631      	mov	r1, r6
 8007dfa:	4680      	mov	r8, r0
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f7ff fe01 	bl	8007a04 <_Bfree>
 8007e02:	4646      	mov	r6, r8
 8007e04:	106d      	asrs	r5, r5, #1
 8007e06:	d00b      	beq.n	8007e20 <__pow5mult+0xa0>
 8007e08:	6820      	ldr	r0, [r4, #0]
 8007e0a:	b938      	cbnz	r0, 8007e1c <__pow5mult+0x9c>
 8007e0c:	4622      	mov	r2, r4
 8007e0e:	4621      	mov	r1, r4
 8007e10:	4638      	mov	r0, r7
 8007e12:	f7ff ff0b 	bl	8007c2c <__multiply>
 8007e16:	6020      	str	r0, [r4, #0]
 8007e18:	f8c0 9000 	str.w	r9, [r0]
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	e7e4      	b.n	8007dea <__pow5mult+0x6a>
 8007e20:	4630      	mov	r0, r6
 8007e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e26:	bf00      	nop
 8007e28:	08008dd4 	.word	0x08008dd4
 8007e2c:	08008c9a 	.word	0x08008c9a
 8007e30:	08008d7a 	.word	0x08008d7a

08007e34 <__lshift>:
 8007e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e38:	460c      	mov	r4, r1
 8007e3a:	6849      	ldr	r1, [r1, #4]
 8007e3c:	6923      	ldr	r3, [r4, #16]
 8007e3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e42:	68a3      	ldr	r3, [r4, #8]
 8007e44:	4607      	mov	r7, r0
 8007e46:	4691      	mov	r9, r2
 8007e48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e4c:	f108 0601 	add.w	r6, r8, #1
 8007e50:	42b3      	cmp	r3, r6
 8007e52:	db0b      	blt.n	8007e6c <__lshift+0x38>
 8007e54:	4638      	mov	r0, r7
 8007e56:	f7ff fd95 	bl	8007984 <_Balloc>
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	b948      	cbnz	r0, 8007e72 <__lshift+0x3e>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	4b28      	ldr	r3, [pc, #160]	@ (8007f04 <__lshift+0xd0>)
 8007e62:	4829      	ldr	r0, [pc, #164]	@ (8007f08 <__lshift+0xd4>)
 8007e64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e68:	f000 fb00 	bl	800846c <__assert_func>
 8007e6c:	3101      	adds	r1, #1
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	e7ee      	b.n	8007e50 <__lshift+0x1c>
 8007e72:	2300      	movs	r3, #0
 8007e74:	f100 0114 	add.w	r1, r0, #20
 8007e78:	f100 0210 	add.w	r2, r0, #16
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	4553      	cmp	r3, sl
 8007e80:	db33      	blt.n	8007eea <__lshift+0xb6>
 8007e82:	6920      	ldr	r0, [r4, #16]
 8007e84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e88:	f104 0314 	add.w	r3, r4, #20
 8007e8c:	f019 091f 	ands.w	r9, r9, #31
 8007e90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e98:	d02b      	beq.n	8007ef2 <__lshift+0xbe>
 8007e9a:	f1c9 0e20 	rsb	lr, r9, #32
 8007e9e:	468a      	mov	sl, r1
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	fa00 f009 	lsl.w	r0, r0, r9
 8007ea8:	4310      	orrs	r0, r2
 8007eaa:	f84a 0b04 	str.w	r0, [sl], #4
 8007eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb2:	459c      	cmp	ip, r3
 8007eb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007eb8:	d8f3      	bhi.n	8007ea2 <__lshift+0x6e>
 8007eba:	ebac 0304 	sub.w	r3, ip, r4
 8007ebe:	3b15      	subs	r3, #21
 8007ec0:	f023 0303 	bic.w	r3, r3, #3
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	f104 0015 	add.w	r0, r4, #21
 8007eca:	4584      	cmp	ip, r0
 8007ecc:	bf38      	it	cc
 8007ece:	2304      	movcc	r3, #4
 8007ed0:	50ca      	str	r2, [r1, r3]
 8007ed2:	b10a      	cbz	r2, 8007ed8 <__lshift+0xa4>
 8007ed4:	f108 0602 	add.w	r6, r8, #2
 8007ed8:	3e01      	subs	r6, #1
 8007eda:	4638      	mov	r0, r7
 8007edc:	612e      	str	r6, [r5, #16]
 8007ede:	4621      	mov	r1, r4
 8007ee0:	f7ff fd90 	bl	8007a04 <_Bfree>
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eea:	f842 0f04 	str.w	r0, [r2, #4]!
 8007eee:	3301      	adds	r3, #1
 8007ef0:	e7c5      	b.n	8007e7e <__lshift+0x4a>
 8007ef2:	3904      	subs	r1, #4
 8007ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007efc:	459c      	cmp	ip, r3
 8007efe:	d8f9      	bhi.n	8007ef4 <__lshift+0xc0>
 8007f00:	e7ea      	b.n	8007ed8 <__lshift+0xa4>
 8007f02:	bf00      	nop
 8007f04:	08008d09 	.word	0x08008d09
 8007f08:	08008d7a 	.word	0x08008d7a

08007f0c <__mcmp>:
 8007f0c:	690a      	ldr	r2, [r1, #16]
 8007f0e:	4603      	mov	r3, r0
 8007f10:	6900      	ldr	r0, [r0, #16]
 8007f12:	1a80      	subs	r0, r0, r2
 8007f14:	b530      	push	{r4, r5, lr}
 8007f16:	d10e      	bne.n	8007f36 <__mcmp+0x2a>
 8007f18:	3314      	adds	r3, #20
 8007f1a:	3114      	adds	r1, #20
 8007f1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f2c:	4295      	cmp	r5, r2
 8007f2e:	d003      	beq.n	8007f38 <__mcmp+0x2c>
 8007f30:	d205      	bcs.n	8007f3e <__mcmp+0x32>
 8007f32:	f04f 30ff 	mov.w	r0, #4294967295
 8007f36:	bd30      	pop	{r4, r5, pc}
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	d3f3      	bcc.n	8007f24 <__mcmp+0x18>
 8007f3c:	e7fb      	b.n	8007f36 <__mcmp+0x2a>
 8007f3e:	2001      	movs	r0, #1
 8007f40:	e7f9      	b.n	8007f36 <__mcmp+0x2a>
	...

08007f44 <__mdiff>:
 8007f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f48:	4689      	mov	r9, r1
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	4648      	mov	r0, r9
 8007f50:	4614      	mov	r4, r2
 8007f52:	f7ff ffdb 	bl	8007f0c <__mcmp>
 8007f56:	1e05      	subs	r5, r0, #0
 8007f58:	d112      	bne.n	8007f80 <__mdiff+0x3c>
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f7ff fd11 	bl	8007984 <_Balloc>
 8007f62:	4602      	mov	r2, r0
 8007f64:	b928      	cbnz	r0, 8007f72 <__mdiff+0x2e>
 8007f66:	4b3f      	ldr	r3, [pc, #252]	@ (8008064 <__mdiff+0x120>)
 8007f68:	f240 2137 	movw	r1, #567	@ 0x237
 8007f6c:	483e      	ldr	r0, [pc, #248]	@ (8008068 <__mdiff+0x124>)
 8007f6e:	f000 fa7d 	bl	800846c <__assert_func>
 8007f72:	2301      	movs	r3, #1
 8007f74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f78:	4610      	mov	r0, r2
 8007f7a:	b003      	add	sp, #12
 8007f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f80:	bfbc      	itt	lt
 8007f82:	464b      	movlt	r3, r9
 8007f84:	46a1      	movlt	r9, r4
 8007f86:	4630      	mov	r0, r6
 8007f88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f8c:	bfba      	itte	lt
 8007f8e:	461c      	movlt	r4, r3
 8007f90:	2501      	movlt	r5, #1
 8007f92:	2500      	movge	r5, #0
 8007f94:	f7ff fcf6 	bl	8007984 <_Balloc>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	b918      	cbnz	r0, 8007fa4 <__mdiff+0x60>
 8007f9c:	4b31      	ldr	r3, [pc, #196]	@ (8008064 <__mdiff+0x120>)
 8007f9e:	f240 2145 	movw	r1, #581	@ 0x245
 8007fa2:	e7e3      	b.n	8007f6c <__mdiff+0x28>
 8007fa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007fa8:	6926      	ldr	r6, [r4, #16]
 8007faa:	60c5      	str	r5, [r0, #12]
 8007fac:	f109 0310 	add.w	r3, r9, #16
 8007fb0:	f109 0514 	add.w	r5, r9, #20
 8007fb4:	f104 0e14 	add.w	lr, r4, #20
 8007fb8:	f100 0b14 	add.w	fp, r0, #20
 8007fbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007fc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007fc4:	9301      	str	r3, [sp, #4]
 8007fc6:	46d9      	mov	r9, fp
 8007fc8:	f04f 0c00 	mov.w	ip, #0
 8007fcc:	9b01      	ldr	r3, [sp, #4]
 8007fce:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007fd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	fa1f f38a 	uxth.w	r3, sl
 8007fdc:	4619      	mov	r1, r3
 8007fde:	b283      	uxth	r3, r0
 8007fe0:	1acb      	subs	r3, r1, r3
 8007fe2:	0c00      	lsrs	r0, r0, #16
 8007fe4:	4463      	add	r3, ip
 8007fe6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007fea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ff4:	4576      	cmp	r6, lr
 8007ff6:	f849 3b04 	str.w	r3, [r9], #4
 8007ffa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ffe:	d8e5      	bhi.n	8007fcc <__mdiff+0x88>
 8008000:	1b33      	subs	r3, r6, r4
 8008002:	3b15      	subs	r3, #21
 8008004:	f023 0303 	bic.w	r3, r3, #3
 8008008:	3415      	adds	r4, #21
 800800a:	3304      	adds	r3, #4
 800800c:	42a6      	cmp	r6, r4
 800800e:	bf38      	it	cc
 8008010:	2304      	movcc	r3, #4
 8008012:	441d      	add	r5, r3
 8008014:	445b      	add	r3, fp
 8008016:	461e      	mov	r6, r3
 8008018:	462c      	mov	r4, r5
 800801a:	4544      	cmp	r4, r8
 800801c:	d30e      	bcc.n	800803c <__mdiff+0xf8>
 800801e:	f108 0103 	add.w	r1, r8, #3
 8008022:	1b49      	subs	r1, r1, r5
 8008024:	f021 0103 	bic.w	r1, r1, #3
 8008028:	3d03      	subs	r5, #3
 800802a:	45a8      	cmp	r8, r5
 800802c:	bf38      	it	cc
 800802e:	2100      	movcc	r1, #0
 8008030:	440b      	add	r3, r1
 8008032:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008036:	b191      	cbz	r1, 800805e <__mdiff+0x11a>
 8008038:	6117      	str	r7, [r2, #16]
 800803a:	e79d      	b.n	8007f78 <__mdiff+0x34>
 800803c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008040:	46e6      	mov	lr, ip
 8008042:	0c08      	lsrs	r0, r1, #16
 8008044:	fa1c fc81 	uxtah	ip, ip, r1
 8008048:	4471      	add	r1, lr
 800804a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800804e:	b289      	uxth	r1, r1
 8008050:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008054:	f846 1b04 	str.w	r1, [r6], #4
 8008058:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800805c:	e7dd      	b.n	800801a <__mdiff+0xd6>
 800805e:	3f01      	subs	r7, #1
 8008060:	e7e7      	b.n	8008032 <__mdiff+0xee>
 8008062:	bf00      	nop
 8008064:	08008d09 	.word	0x08008d09
 8008068:	08008d7a 	.word	0x08008d7a

0800806c <__ulp>:
 800806c:	b082      	sub	sp, #8
 800806e:	ed8d 0b00 	vstr	d0, [sp]
 8008072:	9a01      	ldr	r2, [sp, #4]
 8008074:	4b0f      	ldr	r3, [pc, #60]	@ (80080b4 <__ulp+0x48>)
 8008076:	4013      	ands	r3, r2
 8008078:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800807c:	2b00      	cmp	r3, #0
 800807e:	dc08      	bgt.n	8008092 <__ulp+0x26>
 8008080:	425b      	negs	r3, r3
 8008082:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008086:	ea4f 5223 	mov.w	r2, r3, asr #20
 800808a:	da04      	bge.n	8008096 <__ulp+0x2a>
 800808c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008090:	4113      	asrs	r3, r2
 8008092:	2200      	movs	r2, #0
 8008094:	e008      	b.n	80080a8 <__ulp+0x3c>
 8008096:	f1a2 0314 	sub.w	r3, r2, #20
 800809a:	2b1e      	cmp	r3, #30
 800809c:	bfda      	itte	le
 800809e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80080a2:	40da      	lsrle	r2, r3
 80080a4:	2201      	movgt	r2, #1
 80080a6:	2300      	movs	r3, #0
 80080a8:	4619      	mov	r1, r3
 80080aa:	4610      	mov	r0, r2
 80080ac:	ec41 0b10 	vmov	d0, r0, r1
 80080b0:	b002      	add	sp, #8
 80080b2:	4770      	bx	lr
 80080b4:	7ff00000 	.word	0x7ff00000

080080b8 <__b2d>:
 80080b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080bc:	6906      	ldr	r6, [r0, #16]
 80080be:	f100 0814 	add.w	r8, r0, #20
 80080c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80080c6:	1f37      	subs	r7, r6, #4
 80080c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80080cc:	4610      	mov	r0, r2
 80080ce:	f7ff fd4b 	bl	8007b68 <__hi0bits>
 80080d2:	f1c0 0320 	rsb	r3, r0, #32
 80080d6:	280a      	cmp	r0, #10
 80080d8:	600b      	str	r3, [r1, #0]
 80080da:	491b      	ldr	r1, [pc, #108]	@ (8008148 <__b2d+0x90>)
 80080dc:	dc15      	bgt.n	800810a <__b2d+0x52>
 80080de:	f1c0 0c0b 	rsb	ip, r0, #11
 80080e2:	fa22 f30c 	lsr.w	r3, r2, ip
 80080e6:	45b8      	cmp	r8, r7
 80080e8:	ea43 0501 	orr.w	r5, r3, r1
 80080ec:	bf34      	ite	cc
 80080ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80080f2:	2300      	movcs	r3, #0
 80080f4:	3015      	adds	r0, #21
 80080f6:	fa02 f000 	lsl.w	r0, r2, r0
 80080fa:	fa23 f30c 	lsr.w	r3, r3, ip
 80080fe:	4303      	orrs	r3, r0
 8008100:	461c      	mov	r4, r3
 8008102:	ec45 4b10 	vmov	d0, r4, r5
 8008106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800810a:	45b8      	cmp	r8, r7
 800810c:	bf3a      	itte	cc
 800810e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008112:	f1a6 0708 	subcc.w	r7, r6, #8
 8008116:	2300      	movcs	r3, #0
 8008118:	380b      	subs	r0, #11
 800811a:	d012      	beq.n	8008142 <__b2d+0x8a>
 800811c:	f1c0 0120 	rsb	r1, r0, #32
 8008120:	fa23 f401 	lsr.w	r4, r3, r1
 8008124:	4082      	lsls	r2, r0
 8008126:	4322      	orrs	r2, r4
 8008128:	4547      	cmp	r7, r8
 800812a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800812e:	bf8c      	ite	hi
 8008130:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008134:	2200      	movls	r2, #0
 8008136:	4083      	lsls	r3, r0
 8008138:	40ca      	lsrs	r2, r1
 800813a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800813e:	4313      	orrs	r3, r2
 8008140:	e7de      	b.n	8008100 <__b2d+0x48>
 8008142:	ea42 0501 	orr.w	r5, r2, r1
 8008146:	e7db      	b.n	8008100 <__b2d+0x48>
 8008148:	3ff00000 	.word	0x3ff00000

0800814c <__d2b>:
 800814c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008150:	460f      	mov	r7, r1
 8008152:	2101      	movs	r1, #1
 8008154:	ec59 8b10 	vmov	r8, r9, d0
 8008158:	4616      	mov	r6, r2
 800815a:	f7ff fc13 	bl	8007984 <_Balloc>
 800815e:	4604      	mov	r4, r0
 8008160:	b930      	cbnz	r0, 8008170 <__d2b+0x24>
 8008162:	4602      	mov	r2, r0
 8008164:	4b23      	ldr	r3, [pc, #140]	@ (80081f4 <__d2b+0xa8>)
 8008166:	4824      	ldr	r0, [pc, #144]	@ (80081f8 <__d2b+0xac>)
 8008168:	f240 310f 	movw	r1, #783	@ 0x30f
 800816c:	f000 f97e 	bl	800846c <__assert_func>
 8008170:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008174:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008178:	b10d      	cbz	r5, 800817e <__d2b+0x32>
 800817a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	f1b8 0300 	subs.w	r3, r8, #0
 8008184:	d023      	beq.n	80081ce <__d2b+0x82>
 8008186:	4668      	mov	r0, sp
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	f7ff fd0c 	bl	8007ba6 <__lo0bits>
 800818e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008192:	b1d0      	cbz	r0, 80081ca <__d2b+0x7e>
 8008194:	f1c0 0320 	rsb	r3, r0, #32
 8008198:	fa02 f303 	lsl.w	r3, r2, r3
 800819c:	430b      	orrs	r3, r1
 800819e:	40c2      	lsrs	r2, r0
 80081a0:	6163      	str	r3, [r4, #20]
 80081a2:	9201      	str	r2, [sp, #4]
 80081a4:	9b01      	ldr	r3, [sp, #4]
 80081a6:	61a3      	str	r3, [r4, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	bf0c      	ite	eq
 80081ac:	2201      	moveq	r2, #1
 80081ae:	2202      	movne	r2, #2
 80081b0:	6122      	str	r2, [r4, #16]
 80081b2:	b1a5      	cbz	r5, 80081de <__d2b+0x92>
 80081b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80081b8:	4405      	add	r5, r0
 80081ba:	603d      	str	r5, [r7, #0]
 80081bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80081c0:	6030      	str	r0, [r6, #0]
 80081c2:	4620      	mov	r0, r4
 80081c4:	b003      	add	sp, #12
 80081c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081ca:	6161      	str	r1, [r4, #20]
 80081cc:	e7ea      	b.n	80081a4 <__d2b+0x58>
 80081ce:	a801      	add	r0, sp, #4
 80081d0:	f7ff fce9 	bl	8007ba6 <__lo0bits>
 80081d4:	9b01      	ldr	r3, [sp, #4]
 80081d6:	6163      	str	r3, [r4, #20]
 80081d8:	3020      	adds	r0, #32
 80081da:	2201      	movs	r2, #1
 80081dc:	e7e8      	b.n	80081b0 <__d2b+0x64>
 80081de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80081e6:	6038      	str	r0, [r7, #0]
 80081e8:	6918      	ldr	r0, [r3, #16]
 80081ea:	f7ff fcbd 	bl	8007b68 <__hi0bits>
 80081ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081f2:	e7e5      	b.n	80081c0 <__d2b+0x74>
 80081f4:	08008d09 	.word	0x08008d09
 80081f8:	08008d7a 	.word	0x08008d7a

080081fc <__ratio>:
 80081fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	b085      	sub	sp, #20
 8008202:	e9cd 1000 	strd	r1, r0, [sp]
 8008206:	a902      	add	r1, sp, #8
 8008208:	f7ff ff56 	bl	80080b8 <__b2d>
 800820c:	9800      	ldr	r0, [sp, #0]
 800820e:	a903      	add	r1, sp, #12
 8008210:	ec55 4b10 	vmov	r4, r5, d0
 8008214:	f7ff ff50 	bl	80080b8 <__b2d>
 8008218:	9b01      	ldr	r3, [sp, #4]
 800821a:	6919      	ldr	r1, [r3, #16]
 800821c:	9b00      	ldr	r3, [sp, #0]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	1ac9      	subs	r1, r1, r3
 8008222:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008226:	1a9b      	subs	r3, r3, r2
 8008228:	ec5b ab10 	vmov	sl, fp, d0
 800822c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008230:	2b00      	cmp	r3, #0
 8008232:	bfce      	itee	gt
 8008234:	462a      	movgt	r2, r5
 8008236:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800823a:	465a      	movle	r2, fp
 800823c:	462f      	mov	r7, r5
 800823e:	46d9      	mov	r9, fp
 8008240:	bfcc      	ite	gt
 8008242:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008246:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800824a:	464b      	mov	r3, r9
 800824c:	4652      	mov	r2, sl
 800824e:	4620      	mov	r0, r4
 8008250:	4639      	mov	r1, r7
 8008252:	f7f8 fb2b 	bl	80008ac <__aeabi_ddiv>
 8008256:	ec41 0b10 	vmov	d0, r0, r1
 800825a:	b005      	add	sp, #20
 800825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008260 <__copybits>:
 8008260:	3901      	subs	r1, #1
 8008262:	b570      	push	{r4, r5, r6, lr}
 8008264:	1149      	asrs	r1, r1, #5
 8008266:	6914      	ldr	r4, [r2, #16]
 8008268:	3101      	adds	r1, #1
 800826a:	f102 0314 	add.w	r3, r2, #20
 800826e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008272:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008276:	1f05      	subs	r5, r0, #4
 8008278:	42a3      	cmp	r3, r4
 800827a:	d30c      	bcc.n	8008296 <__copybits+0x36>
 800827c:	1aa3      	subs	r3, r4, r2
 800827e:	3b11      	subs	r3, #17
 8008280:	f023 0303 	bic.w	r3, r3, #3
 8008284:	3211      	adds	r2, #17
 8008286:	42a2      	cmp	r2, r4
 8008288:	bf88      	it	hi
 800828a:	2300      	movhi	r3, #0
 800828c:	4418      	add	r0, r3
 800828e:	2300      	movs	r3, #0
 8008290:	4288      	cmp	r0, r1
 8008292:	d305      	bcc.n	80082a0 <__copybits+0x40>
 8008294:	bd70      	pop	{r4, r5, r6, pc}
 8008296:	f853 6b04 	ldr.w	r6, [r3], #4
 800829a:	f845 6f04 	str.w	r6, [r5, #4]!
 800829e:	e7eb      	b.n	8008278 <__copybits+0x18>
 80082a0:	f840 3b04 	str.w	r3, [r0], #4
 80082a4:	e7f4      	b.n	8008290 <__copybits+0x30>

080082a6 <__any_on>:
 80082a6:	f100 0214 	add.w	r2, r0, #20
 80082aa:	6900      	ldr	r0, [r0, #16]
 80082ac:	114b      	asrs	r3, r1, #5
 80082ae:	4298      	cmp	r0, r3
 80082b0:	b510      	push	{r4, lr}
 80082b2:	db11      	blt.n	80082d8 <__any_on+0x32>
 80082b4:	dd0a      	ble.n	80082cc <__any_on+0x26>
 80082b6:	f011 011f 	ands.w	r1, r1, #31
 80082ba:	d007      	beq.n	80082cc <__any_on+0x26>
 80082bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80082c0:	fa24 f001 	lsr.w	r0, r4, r1
 80082c4:	fa00 f101 	lsl.w	r1, r0, r1
 80082c8:	428c      	cmp	r4, r1
 80082ca:	d10b      	bne.n	80082e4 <__any_on+0x3e>
 80082cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d803      	bhi.n	80082dc <__any_on+0x36>
 80082d4:	2000      	movs	r0, #0
 80082d6:	bd10      	pop	{r4, pc}
 80082d8:	4603      	mov	r3, r0
 80082da:	e7f7      	b.n	80082cc <__any_on+0x26>
 80082dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082e0:	2900      	cmp	r1, #0
 80082e2:	d0f5      	beq.n	80082d0 <__any_on+0x2a>
 80082e4:	2001      	movs	r0, #1
 80082e6:	e7f6      	b.n	80082d6 <__any_on+0x30>

080082e8 <_malloc_usable_size_r>:
 80082e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ec:	1f18      	subs	r0, r3, #4
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	bfbc      	itt	lt
 80082f2:	580b      	ldrlt	r3, [r1, r0]
 80082f4:	18c0      	addlt	r0, r0, r3
 80082f6:	4770      	bx	lr

080082f8 <__ascii_wctomb>:
 80082f8:	4603      	mov	r3, r0
 80082fa:	4608      	mov	r0, r1
 80082fc:	b141      	cbz	r1, 8008310 <__ascii_wctomb+0x18>
 80082fe:	2aff      	cmp	r2, #255	@ 0xff
 8008300:	d904      	bls.n	800830c <__ascii_wctomb+0x14>
 8008302:	228a      	movs	r2, #138	@ 0x8a
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	f04f 30ff 	mov.w	r0, #4294967295
 800830a:	4770      	bx	lr
 800830c:	700a      	strb	r2, [r1, #0]
 800830e:	2001      	movs	r0, #1
 8008310:	4770      	bx	lr
	...

08008314 <__sflush_r>:
 8008314:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800831c:	0716      	lsls	r6, r2, #28
 800831e:	4605      	mov	r5, r0
 8008320:	460c      	mov	r4, r1
 8008322:	d454      	bmi.n	80083ce <__sflush_r+0xba>
 8008324:	684b      	ldr	r3, [r1, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	dc02      	bgt.n	8008330 <__sflush_r+0x1c>
 800832a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800832c:	2b00      	cmp	r3, #0
 800832e:	dd48      	ble.n	80083c2 <__sflush_r+0xae>
 8008330:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008332:	2e00      	cmp	r6, #0
 8008334:	d045      	beq.n	80083c2 <__sflush_r+0xae>
 8008336:	2300      	movs	r3, #0
 8008338:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800833c:	682f      	ldr	r7, [r5, #0]
 800833e:	6a21      	ldr	r1, [r4, #32]
 8008340:	602b      	str	r3, [r5, #0]
 8008342:	d030      	beq.n	80083a6 <__sflush_r+0x92>
 8008344:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	0759      	lsls	r1, r3, #29
 800834a:	d505      	bpl.n	8008358 <__sflush_r+0x44>
 800834c:	6863      	ldr	r3, [r4, #4]
 800834e:	1ad2      	subs	r2, r2, r3
 8008350:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008352:	b10b      	cbz	r3, 8008358 <__sflush_r+0x44>
 8008354:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008356:	1ad2      	subs	r2, r2, r3
 8008358:	2300      	movs	r3, #0
 800835a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800835c:	6a21      	ldr	r1, [r4, #32]
 800835e:	4628      	mov	r0, r5
 8008360:	47b0      	blx	r6
 8008362:	1c43      	adds	r3, r0, #1
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	d106      	bne.n	8008376 <__sflush_r+0x62>
 8008368:	6829      	ldr	r1, [r5, #0]
 800836a:	291d      	cmp	r1, #29
 800836c:	d82b      	bhi.n	80083c6 <__sflush_r+0xb2>
 800836e:	4a2a      	ldr	r2, [pc, #168]	@ (8008418 <__sflush_r+0x104>)
 8008370:	410a      	asrs	r2, r1
 8008372:	07d6      	lsls	r6, r2, #31
 8008374:	d427      	bmi.n	80083c6 <__sflush_r+0xb2>
 8008376:	2200      	movs	r2, #0
 8008378:	6062      	str	r2, [r4, #4]
 800837a:	04d9      	lsls	r1, r3, #19
 800837c:	6922      	ldr	r2, [r4, #16]
 800837e:	6022      	str	r2, [r4, #0]
 8008380:	d504      	bpl.n	800838c <__sflush_r+0x78>
 8008382:	1c42      	adds	r2, r0, #1
 8008384:	d101      	bne.n	800838a <__sflush_r+0x76>
 8008386:	682b      	ldr	r3, [r5, #0]
 8008388:	b903      	cbnz	r3, 800838c <__sflush_r+0x78>
 800838a:	6560      	str	r0, [r4, #84]	@ 0x54
 800838c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800838e:	602f      	str	r7, [r5, #0]
 8008390:	b1b9      	cbz	r1, 80083c2 <__sflush_r+0xae>
 8008392:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008396:	4299      	cmp	r1, r3
 8008398:	d002      	beq.n	80083a0 <__sflush_r+0x8c>
 800839a:	4628      	mov	r0, r5
 800839c:	f7fe ff5c 	bl	8007258 <_free_r>
 80083a0:	2300      	movs	r3, #0
 80083a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80083a4:	e00d      	b.n	80083c2 <__sflush_r+0xae>
 80083a6:	2301      	movs	r3, #1
 80083a8:	4628      	mov	r0, r5
 80083aa:	47b0      	blx	r6
 80083ac:	4602      	mov	r2, r0
 80083ae:	1c50      	adds	r0, r2, #1
 80083b0:	d1c9      	bne.n	8008346 <__sflush_r+0x32>
 80083b2:	682b      	ldr	r3, [r5, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0c6      	beq.n	8008346 <__sflush_r+0x32>
 80083b8:	2b1d      	cmp	r3, #29
 80083ba:	d001      	beq.n	80083c0 <__sflush_r+0xac>
 80083bc:	2b16      	cmp	r3, #22
 80083be:	d11e      	bne.n	80083fe <__sflush_r+0xea>
 80083c0:	602f      	str	r7, [r5, #0]
 80083c2:	2000      	movs	r0, #0
 80083c4:	e022      	b.n	800840c <__sflush_r+0xf8>
 80083c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083ca:	b21b      	sxth	r3, r3
 80083cc:	e01b      	b.n	8008406 <__sflush_r+0xf2>
 80083ce:	690f      	ldr	r7, [r1, #16]
 80083d0:	2f00      	cmp	r7, #0
 80083d2:	d0f6      	beq.n	80083c2 <__sflush_r+0xae>
 80083d4:	0793      	lsls	r3, r2, #30
 80083d6:	680e      	ldr	r6, [r1, #0]
 80083d8:	bf08      	it	eq
 80083da:	694b      	ldreq	r3, [r1, #20]
 80083dc:	600f      	str	r7, [r1, #0]
 80083de:	bf18      	it	ne
 80083e0:	2300      	movne	r3, #0
 80083e2:	eba6 0807 	sub.w	r8, r6, r7
 80083e6:	608b      	str	r3, [r1, #8]
 80083e8:	f1b8 0f00 	cmp.w	r8, #0
 80083ec:	dde9      	ble.n	80083c2 <__sflush_r+0xae>
 80083ee:	6a21      	ldr	r1, [r4, #32]
 80083f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80083f2:	4643      	mov	r3, r8
 80083f4:	463a      	mov	r2, r7
 80083f6:	4628      	mov	r0, r5
 80083f8:	47b0      	blx	r6
 80083fa:	2800      	cmp	r0, #0
 80083fc:	dc08      	bgt.n	8008410 <__sflush_r+0xfc>
 80083fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008406:	81a3      	strh	r3, [r4, #12]
 8008408:	f04f 30ff 	mov.w	r0, #4294967295
 800840c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008410:	4407      	add	r7, r0
 8008412:	eba8 0800 	sub.w	r8, r8, r0
 8008416:	e7e7      	b.n	80083e8 <__sflush_r+0xd4>
 8008418:	dfbffffe 	.word	0xdfbffffe

0800841c <_fflush_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	690b      	ldr	r3, [r1, #16]
 8008420:	4605      	mov	r5, r0
 8008422:	460c      	mov	r4, r1
 8008424:	b913      	cbnz	r3, 800842c <_fflush_r+0x10>
 8008426:	2500      	movs	r5, #0
 8008428:	4628      	mov	r0, r5
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	b118      	cbz	r0, 8008436 <_fflush_r+0x1a>
 800842e:	6a03      	ldr	r3, [r0, #32]
 8008430:	b90b      	cbnz	r3, 8008436 <_fflush_r+0x1a>
 8008432:	f7fd ff91 	bl	8006358 <__sinit>
 8008436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0f3      	beq.n	8008426 <_fflush_r+0xa>
 800843e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008440:	07d0      	lsls	r0, r2, #31
 8008442:	d404      	bmi.n	800844e <_fflush_r+0x32>
 8008444:	0599      	lsls	r1, r3, #22
 8008446:	d402      	bmi.n	800844e <_fflush_r+0x32>
 8008448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800844a:	f7fe f89e 	bl	800658a <__retarget_lock_acquire_recursive>
 800844e:	4628      	mov	r0, r5
 8008450:	4621      	mov	r1, r4
 8008452:	f7ff ff5f 	bl	8008314 <__sflush_r>
 8008456:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008458:	07da      	lsls	r2, r3, #31
 800845a:	4605      	mov	r5, r0
 800845c:	d4e4      	bmi.n	8008428 <_fflush_r+0xc>
 800845e:	89a3      	ldrh	r3, [r4, #12]
 8008460:	059b      	lsls	r3, r3, #22
 8008462:	d4e1      	bmi.n	8008428 <_fflush_r+0xc>
 8008464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008466:	f7fe f891 	bl	800658c <__retarget_lock_release_recursive>
 800846a:	e7dd      	b.n	8008428 <_fflush_r+0xc>

0800846c <__assert_func>:
 800846c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800846e:	4614      	mov	r4, r2
 8008470:	461a      	mov	r2, r3
 8008472:	4b09      	ldr	r3, [pc, #36]	@ (8008498 <__assert_func+0x2c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4605      	mov	r5, r0
 8008478:	68d8      	ldr	r0, [r3, #12]
 800847a:	b954      	cbnz	r4, 8008492 <__assert_func+0x26>
 800847c:	4b07      	ldr	r3, [pc, #28]	@ (800849c <__assert_func+0x30>)
 800847e:	461c      	mov	r4, r3
 8008480:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008484:	9100      	str	r1, [sp, #0]
 8008486:	462b      	mov	r3, r5
 8008488:	4905      	ldr	r1, [pc, #20]	@ (80084a0 <__assert_func+0x34>)
 800848a:	f000 f821 	bl	80084d0 <fiprintf>
 800848e:	f000 f831 	bl	80084f4 <abort>
 8008492:	4b04      	ldr	r3, [pc, #16]	@ (80084a4 <__assert_func+0x38>)
 8008494:	e7f4      	b.n	8008480 <__assert_func+0x14>
 8008496:	bf00      	nop
 8008498:	20000190 	.word	0x20000190
 800849c:	08008f0b 	.word	0x08008f0b
 80084a0:	08008edd 	.word	0x08008edd
 80084a4:	08008ed0 	.word	0x08008ed0

080084a8 <_calloc_r>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	fba1 5402 	umull	r5, r4, r1, r2
 80084ae:	b93c      	cbnz	r4, 80084c0 <_calloc_r+0x18>
 80084b0:	4629      	mov	r1, r5
 80084b2:	f7fc fb9b 	bl	8004bec <_malloc_r>
 80084b6:	4606      	mov	r6, r0
 80084b8:	b928      	cbnz	r0, 80084c6 <_calloc_r+0x1e>
 80084ba:	2600      	movs	r6, #0
 80084bc:	4630      	mov	r0, r6
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	220c      	movs	r2, #12
 80084c2:	6002      	str	r2, [r0, #0]
 80084c4:	e7f9      	b.n	80084ba <_calloc_r+0x12>
 80084c6:	462a      	mov	r2, r5
 80084c8:	4621      	mov	r1, r4
 80084ca:	f7fd ffbe 	bl	800644a <memset>
 80084ce:	e7f5      	b.n	80084bc <_calloc_r+0x14>

080084d0 <fiprintf>:
 80084d0:	b40e      	push	{r1, r2, r3}
 80084d2:	b503      	push	{r0, r1, lr}
 80084d4:	4601      	mov	r1, r0
 80084d6:	ab03      	add	r3, sp, #12
 80084d8:	4805      	ldr	r0, [pc, #20]	@ (80084f0 <fiprintf+0x20>)
 80084da:	f853 2b04 	ldr.w	r2, [r3], #4
 80084de:	6800      	ldr	r0, [r0, #0]
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	f000 f837 	bl	8008554 <_vfiprintf_r>
 80084e6:	b002      	add	sp, #8
 80084e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084ec:	b003      	add	sp, #12
 80084ee:	4770      	bx	lr
 80084f0:	20000190 	.word	0x20000190

080084f4 <abort>:
 80084f4:	b508      	push	{r3, lr}
 80084f6:	2006      	movs	r0, #6
 80084f8:	f000 fa00 	bl	80088fc <raise>
 80084fc:	2001      	movs	r0, #1
 80084fe:	f7fa f913 	bl	8002728 <_exit>

08008502 <__sfputc_r>:
 8008502:	6893      	ldr	r3, [r2, #8]
 8008504:	3b01      	subs	r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	b410      	push	{r4}
 800850a:	6093      	str	r3, [r2, #8]
 800850c:	da08      	bge.n	8008520 <__sfputc_r+0x1e>
 800850e:	6994      	ldr	r4, [r2, #24]
 8008510:	42a3      	cmp	r3, r4
 8008512:	db01      	blt.n	8008518 <__sfputc_r+0x16>
 8008514:	290a      	cmp	r1, #10
 8008516:	d103      	bne.n	8008520 <__sfputc_r+0x1e>
 8008518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800851c:	f000 b932 	b.w	8008784 <__swbuf_r>
 8008520:	6813      	ldr	r3, [r2, #0]
 8008522:	1c58      	adds	r0, r3, #1
 8008524:	6010      	str	r0, [r2, #0]
 8008526:	7019      	strb	r1, [r3, #0]
 8008528:	4608      	mov	r0, r1
 800852a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800852e:	4770      	bx	lr

08008530 <__sfputs_r>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	4606      	mov	r6, r0
 8008534:	460f      	mov	r7, r1
 8008536:	4614      	mov	r4, r2
 8008538:	18d5      	adds	r5, r2, r3
 800853a:	42ac      	cmp	r4, r5
 800853c:	d101      	bne.n	8008542 <__sfputs_r+0x12>
 800853e:	2000      	movs	r0, #0
 8008540:	e007      	b.n	8008552 <__sfputs_r+0x22>
 8008542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008546:	463a      	mov	r2, r7
 8008548:	4630      	mov	r0, r6
 800854a:	f7ff ffda 	bl	8008502 <__sfputc_r>
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	d1f3      	bne.n	800853a <__sfputs_r+0xa>
 8008552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008554 <_vfiprintf_r>:
 8008554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008558:	460d      	mov	r5, r1
 800855a:	b09d      	sub	sp, #116	@ 0x74
 800855c:	4614      	mov	r4, r2
 800855e:	4698      	mov	r8, r3
 8008560:	4606      	mov	r6, r0
 8008562:	b118      	cbz	r0, 800856c <_vfiprintf_r+0x18>
 8008564:	6a03      	ldr	r3, [r0, #32]
 8008566:	b90b      	cbnz	r3, 800856c <_vfiprintf_r+0x18>
 8008568:	f7fd fef6 	bl	8006358 <__sinit>
 800856c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800856e:	07d9      	lsls	r1, r3, #31
 8008570:	d405      	bmi.n	800857e <_vfiprintf_r+0x2a>
 8008572:	89ab      	ldrh	r3, [r5, #12]
 8008574:	059a      	lsls	r2, r3, #22
 8008576:	d402      	bmi.n	800857e <_vfiprintf_r+0x2a>
 8008578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800857a:	f7fe f806 	bl	800658a <__retarget_lock_acquire_recursive>
 800857e:	89ab      	ldrh	r3, [r5, #12]
 8008580:	071b      	lsls	r3, r3, #28
 8008582:	d501      	bpl.n	8008588 <_vfiprintf_r+0x34>
 8008584:	692b      	ldr	r3, [r5, #16]
 8008586:	b99b      	cbnz	r3, 80085b0 <_vfiprintf_r+0x5c>
 8008588:	4629      	mov	r1, r5
 800858a:	4630      	mov	r0, r6
 800858c:	f000 f938 	bl	8008800 <__swsetup_r>
 8008590:	b170      	cbz	r0, 80085b0 <_vfiprintf_r+0x5c>
 8008592:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008594:	07dc      	lsls	r4, r3, #31
 8008596:	d504      	bpl.n	80085a2 <_vfiprintf_r+0x4e>
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	b01d      	add	sp, #116	@ 0x74
 800859e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a2:	89ab      	ldrh	r3, [r5, #12]
 80085a4:	0598      	lsls	r0, r3, #22
 80085a6:	d4f7      	bmi.n	8008598 <_vfiprintf_r+0x44>
 80085a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085aa:	f7fd ffef 	bl	800658c <__retarget_lock_release_recursive>
 80085ae:	e7f3      	b.n	8008598 <_vfiprintf_r+0x44>
 80085b0:	2300      	movs	r3, #0
 80085b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b4:	2320      	movs	r3, #32
 80085b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80085be:	2330      	movs	r3, #48	@ 0x30
 80085c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008770 <_vfiprintf_r+0x21c>
 80085c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085c8:	f04f 0901 	mov.w	r9, #1
 80085cc:	4623      	mov	r3, r4
 80085ce:	469a      	mov	sl, r3
 80085d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085d4:	b10a      	cbz	r2, 80085da <_vfiprintf_r+0x86>
 80085d6:	2a25      	cmp	r2, #37	@ 0x25
 80085d8:	d1f9      	bne.n	80085ce <_vfiprintf_r+0x7a>
 80085da:	ebba 0b04 	subs.w	fp, sl, r4
 80085de:	d00b      	beq.n	80085f8 <_vfiprintf_r+0xa4>
 80085e0:	465b      	mov	r3, fp
 80085e2:	4622      	mov	r2, r4
 80085e4:	4629      	mov	r1, r5
 80085e6:	4630      	mov	r0, r6
 80085e8:	f7ff ffa2 	bl	8008530 <__sfputs_r>
 80085ec:	3001      	adds	r0, #1
 80085ee:	f000 80a7 	beq.w	8008740 <_vfiprintf_r+0x1ec>
 80085f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085f4:	445a      	add	r2, fp
 80085f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80085f8:	f89a 3000 	ldrb.w	r3, [sl]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 809f 	beq.w	8008740 <_vfiprintf_r+0x1ec>
 8008602:	2300      	movs	r3, #0
 8008604:	f04f 32ff 	mov.w	r2, #4294967295
 8008608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800860c:	f10a 0a01 	add.w	sl, sl, #1
 8008610:	9304      	str	r3, [sp, #16]
 8008612:	9307      	str	r3, [sp, #28]
 8008614:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008618:	931a      	str	r3, [sp, #104]	@ 0x68
 800861a:	4654      	mov	r4, sl
 800861c:	2205      	movs	r2, #5
 800861e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008622:	4853      	ldr	r0, [pc, #332]	@ (8008770 <_vfiprintf_r+0x21c>)
 8008624:	f7f7 fe04 	bl	8000230 <memchr>
 8008628:	9a04      	ldr	r2, [sp, #16]
 800862a:	b9d8      	cbnz	r0, 8008664 <_vfiprintf_r+0x110>
 800862c:	06d1      	lsls	r1, r2, #27
 800862e:	bf44      	itt	mi
 8008630:	2320      	movmi	r3, #32
 8008632:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008636:	0713      	lsls	r3, r2, #28
 8008638:	bf44      	itt	mi
 800863a:	232b      	movmi	r3, #43	@ 0x2b
 800863c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008640:	f89a 3000 	ldrb.w	r3, [sl]
 8008644:	2b2a      	cmp	r3, #42	@ 0x2a
 8008646:	d015      	beq.n	8008674 <_vfiprintf_r+0x120>
 8008648:	9a07      	ldr	r2, [sp, #28]
 800864a:	4654      	mov	r4, sl
 800864c:	2000      	movs	r0, #0
 800864e:	f04f 0c0a 	mov.w	ip, #10
 8008652:	4621      	mov	r1, r4
 8008654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008658:	3b30      	subs	r3, #48	@ 0x30
 800865a:	2b09      	cmp	r3, #9
 800865c:	d94b      	bls.n	80086f6 <_vfiprintf_r+0x1a2>
 800865e:	b1b0      	cbz	r0, 800868e <_vfiprintf_r+0x13a>
 8008660:	9207      	str	r2, [sp, #28]
 8008662:	e014      	b.n	800868e <_vfiprintf_r+0x13a>
 8008664:	eba0 0308 	sub.w	r3, r0, r8
 8008668:	fa09 f303 	lsl.w	r3, r9, r3
 800866c:	4313      	orrs	r3, r2
 800866e:	9304      	str	r3, [sp, #16]
 8008670:	46a2      	mov	sl, r4
 8008672:	e7d2      	b.n	800861a <_vfiprintf_r+0xc6>
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	1d19      	adds	r1, r3, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	9103      	str	r1, [sp, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	bfbb      	ittet	lt
 8008680:	425b      	neglt	r3, r3
 8008682:	f042 0202 	orrlt.w	r2, r2, #2
 8008686:	9307      	strge	r3, [sp, #28]
 8008688:	9307      	strlt	r3, [sp, #28]
 800868a:	bfb8      	it	lt
 800868c:	9204      	strlt	r2, [sp, #16]
 800868e:	7823      	ldrb	r3, [r4, #0]
 8008690:	2b2e      	cmp	r3, #46	@ 0x2e
 8008692:	d10a      	bne.n	80086aa <_vfiprintf_r+0x156>
 8008694:	7863      	ldrb	r3, [r4, #1]
 8008696:	2b2a      	cmp	r3, #42	@ 0x2a
 8008698:	d132      	bne.n	8008700 <_vfiprintf_r+0x1ac>
 800869a:	9b03      	ldr	r3, [sp, #12]
 800869c:	1d1a      	adds	r2, r3, #4
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	9203      	str	r2, [sp, #12]
 80086a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086a6:	3402      	adds	r4, #2
 80086a8:	9305      	str	r3, [sp, #20]
 80086aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008780 <_vfiprintf_r+0x22c>
 80086ae:	7821      	ldrb	r1, [r4, #0]
 80086b0:	2203      	movs	r2, #3
 80086b2:	4650      	mov	r0, sl
 80086b4:	f7f7 fdbc 	bl	8000230 <memchr>
 80086b8:	b138      	cbz	r0, 80086ca <_vfiprintf_r+0x176>
 80086ba:	9b04      	ldr	r3, [sp, #16]
 80086bc:	eba0 000a 	sub.w	r0, r0, sl
 80086c0:	2240      	movs	r2, #64	@ 0x40
 80086c2:	4082      	lsls	r2, r0
 80086c4:	4313      	orrs	r3, r2
 80086c6:	3401      	adds	r4, #1
 80086c8:	9304      	str	r3, [sp, #16]
 80086ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ce:	4829      	ldr	r0, [pc, #164]	@ (8008774 <_vfiprintf_r+0x220>)
 80086d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086d4:	2206      	movs	r2, #6
 80086d6:	f7f7 fdab 	bl	8000230 <memchr>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d03f      	beq.n	800875e <_vfiprintf_r+0x20a>
 80086de:	4b26      	ldr	r3, [pc, #152]	@ (8008778 <_vfiprintf_r+0x224>)
 80086e0:	bb1b      	cbnz	r3, 800872a <_vfiprintf_r+0x1d6>
 80086e2:	9b03      	ldr	r3, [sp, #12]
 80086e4:	3307      	adds	r3, #7
 80086e6:	f023 0307 	bic.w	r3, r3, #7
 80086ea:	3308      	adds	r3, #8
 80086ec:	9303      	str	r3, [sp, #12]
 80086ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f0:	443b      	add	r3, r7
 80086f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80086f4:	e76a      	b.n	80085cc <_vfiprintf_r+0x78>
 80086f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80086fa:	460c      	mov	r4, r1
 80086fc:	2001      	movs	r0, #1
 80086fe:	e7a8      	b.n	8008652 <_vfiprintf_r+0xfe>
 8008700:	2300      	movs	r3, #0
 8008702:	3401      	adds	r4, #1
 8008704:	9305      	str	r3, [sp, #20]
 8008706:	4619      	mov	r1, r3
 8008708:	f04f 0c0a 	mov.w	ip, #10
 800870c:	4620      	mov	r0, r4
 800870e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008712:	3a30      	subs	r2, #48	@ 0x30
 8008714:	2a09      	cmp	r2, #9
 8008716:	d903      	bls.n	8008720 <_vfiprintf_r+0x1cc>
 8008718:	2b00      	cmp	r3, #0
 800871a:	d0c6      	beq.n	80086aa <_vfiprintf_r+0x156>
 800871c:	9105      	str	r1, [sp, #20]
 800871e:	e7c4      	b.n	80086aa <_vfiprintf_r+0x156>
 8008720:	fb0c 2101 	mla	r1, ip, r1, r2
 8008724:	4604      	mov	r4, r0
 8008726:	2301      	movs	r3, #1
 8008728:	e7f0      	b.n	800870c <_vfiprintf_r+0x1b8>
 800872a:	ab03      	add	r3, sp, #12
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	462a      	mov	r2, r5
 8008730:	4b12      	ldr	r3, [pc, #72]	@ (800877c <_vfiprintf_r+0x228>)
 8008732:	a904      	add	r1, sp, #16
 8008734:	4630      	mov	r0, r6
 8008736:	f7fd f9cb 	bl	8005ad0 <_printf_float>
 800873a:	4607      	mov	r7, r0
 800873c:	1c78      	adds	r0, r7, #1
 800873e:	d1d6      	bne.n	80086ee <_vfiprintf_r+0x19a>
 8008740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008742:	07d9      	lsls	r1, r3, #31
 8008744:	d405      	bmi.n	8008752 <_vfiprintf_r+0x1fe>
 8008746:	89ab      	ldrh	r3, [r5, #12]
 8008748:	059a      	lsls	r2, r3, #22
 800874a:	d402      	bmi.n	8008752 <_vfiprintf_r+0x1fe>
 800874c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800874e:	f7fd ff1d 	bl	800658c <__retarget_lock_release_recursive>
 8008752:	89ab      	ldrh	r3, [r5, #12]
 8008754:	065b      	lsls	r3, r3, #25
 8008756:	f53f af1f 	bmi.w	8008598 <_vfiprintf_r+0x44>
 800875a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800875c:	e71e      	b.n	800859c <_vfiprintf_r+0x48>
 800875e:	ab03      	add	r3, sp, #12
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	462a      	mov	r2, r5
 8008764:	4b05      	ldr	r3, [pc, #20]	@ (800877c <_vfiprintf_r+0x228>)
 8008766:	a904      	add	r1, sp, #16
 8008768:	4630      	mov	r0, r6
 800876a:	f7fd fc49 	bl	8006000 <_printf_i>
 800876e:	e7e4      	b.n	800873a <_vfiprintf_r+0x1e6>
 8008770:	08008f0c 	.word	0x08008f0c
 8008774:	08008f16 	.word	0x08008f16
 8008778:	08005ad1 	.word	0x08005ad1
 800877c:	08008531 	.word	0x08008531
 8008780:	08008f12 	.word	0x08008f12

08008784 <__swbuf_r>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	460e      	mov	r6, r1
 8008788:	4614      	mov	r4, r2
 800878a:	4605      	mov	r5, r0
 800878c:	b118      	cbz	r0, 8008796 <__swbuf_r+0x12>
 800878e:	6a03      	ldr	r3, [r0, #32]
 8008790:	b90b      	cbnz	r3, 8008796 <__swbuf_r+0x12>
 8008792:	f7fd fde1 	bl	8006358 <__sinit>
 8008796:	69a3      	ldr	r3, [r4, #24]
 8008798:	60a3      	str	r3, [r4, #8]
 800879a:	89a3      	ldrh	r3, [r4, #12]
 800879c:	071a      	lsls	r2, r3, #28
 800879e:	d501      	bpl.n	80087a4 <__swbuf_r+0x20>
 80087a0:	6923      	ldr	r3, [r4, #16]
 80087a2:	b943      	cbnz	r3, 80087b6 <__swbuf_r+0x32>
 80087a4:	4621      	mov	r1, r4
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 f82a 	bl	8008800 <__swsetup_r>
 80087ac:	b118      	cbz	r0, 80087b6 <__swbuf_r+0x32>
 80087ae:	f04f 37ff 	mov.w	r7, #4294967295
 80087b2:	4638      	mov	r0, r7
 80087b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	6922      	ldr	r2, [r4, #16]
 80087ba:	1a98      	subs	r0, r3, r2
 80087bc:	6963      	ldr	r3, [r4, #20]
 80087be:	b2f6      	uxtb	r6, r6
 80087c0:	4283      	cmp	r3, r0
 80087c2:	4637      	mov	r7, r6
 80087c4:	dc05      	bgt.n	80087d2 <__swbuf_r+0x4e>
 80087c6:	4621      	mov	r1, r4
 80087c8:	4628      	mov	r0, r5
 80087ca:	f7ff fe27 	bl	800841c <_fflush_r>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d1ed      	bne.n	80087ae <__swbuf_r+0x2a>
 80087d2:	68a3      	ldr	r3, [r4, #8]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	60a3      	str	r3, [r4, #8]
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	1c5a      	adds	r2, r3, #1
 80087dc:	6022      	str	r2, [r4, #0]
 80087de:	701e      	strb	r6, [r3, #0]
 80087e0:	6962      	ldr	r2, [r4, #20]
 80087e2:	1c43      	adds	r3, r0, #1
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d004      	beq.n	80087f2 <__swbuf_r+0x6e>
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	07db      	lsls	r3, r3, #31
 80087ec:	d5e1      	bpl.n	80087b2 <__swbuf_r+0x2e>
 80087ee:	2e0a      	cmp	r6, #10
 80087f0:	d1df      	bne.n	80087b2 <__swbuf_r+0x2e>
 80087f2:	4621      	mov	r1, r4
 80087f4:	4628      	mov	r0, r5
 80087f6:	f7ff fe11 	bl	800841c <_fflush_r>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d0d9      	beq.n	80087b2 <__swbuf_r+0x2e>
 80087fe:	e7d6      	b.n	80087ae <__swbuf_r+0x2a>

08008800 <__swsetup_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4b29      	ldr	r3, [pc, #164]	@ (80088a8 <__swsetup_r+0xa8>)
 8008804:	4605      	mov	r5, r0
 8008806:	6818      	ldr	r0, [r3, #0]
 8008808:	460c      	mov	r4, r1
 800880a:	b118      	cbz	r0, 8008814 <__swsetup_r+0x14>
 800880c:	6a03      	ldr	r3, [r0, #32]
 800880e:	b90b      	cbnz	r3, 8008814 <__swsetup_r+0x14>
 8008810:	f7fd fda2 	bl	8006358 <__sinit>
 8008814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008818:	0719      	lsls	r1, r3, #28
 800881a:	d422      	bmi.n	8008862 <__swsetup_r+0x62>
 800881c:	06da      	lsls	r2, r3, #27
 800881e:	d407      	bmi.n	8008830 <__swsetup_r+0x30>
 8008820:	2209      	movs	r2, #9
 8008822:	602a      	str	r2, [r5, #0]
 8008824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008828:	81a3      	strh	r3, [r4, #12]
 800882a:	f04f 30ff 	mov.w	r0, #4294967295
 800882e:	e033      	b.n	8008898 <__swsetup_r+0x98>
 8008830:	0758      	lsls	r0, r3, #29
 8008832:	d512      	bpl.n	800885a <__swsetup_r+0x5a>
 8008834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008836:	b141      	cbz	r1, 800884a <__swsetup_r+0x4a>
 8008838:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800883c:	4299      	cmp	r1, r3
 800883e:	d002      	beq.n	8008846 <__swsetup_r+0x46>
 8008840:	4628      	mov	r0, r5
 8008842:	f7fe fd09 	bl	8007258 <_free_r>
 8008846:	2300      	movs	r3, #0
 8008848:	6363      	str	r3, [r4, #52]	@ 0x34
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008850:	81a3      	strh	r3, [r4, #12]
 8008852:	2300      	movs	r3, #0
 8008854:	6063      	str	r3, [r4, #4]
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	f043 0308 	orr.w	r3, r3, #8
 8008860:	81a3      	strh	r3, [r4, #12]
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	b94b      	cbnz	r3, 800887a <__swsetup_r+0x7a>
 8008866:	89a3      	ldrh	r3, [r4, #12]
 8008868:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800886c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008870:	d003      	beq.n	800887a <__swsetup_r+0x7a>
 8008872:	4621      	mov	r1, r4
 8008874:	4628      	mov	r0, r5
 8008876:	f000 f883 	bl	8008980 <__smakebuf_r>
 800887a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800887e:	f013 0201 	ands.w	r2, r3, #1
 8008882:	d00a      	beq.n	800889a <__swsetup_r+0x9a>
 8008884:	2200      	movs	r2, #0
 8008886:	60a2      	str	r2, [r4, #8]
 8008888:	6962      	ldr	r2, [r4, #20]
 800888a:	4252      	negs	r2, r2
 800888c:	61a2      	str	r2, [r4, #24]
 800888e:	6922      	ldr	r2, [r4, #16]
 8008890:	b942      	cbnz	r2, 80088a4 <__swsetup_r+0xa4>
 8008892:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008896:	d1c5      	bne.n	8008824 <__swsetup_r+0x24>
 8008898:	bd38      	pop	{r3, r4, r5, pc}
 800889a:	0799      	lsls	r1, r3, #30
 800889c:	bf58      	it	pl
 800889e:	6962      	ldrpl	r2, [r4, #20]
 80088a0:	60a2      	str	r2, [r4, #8]
 80088a2:	e7f4      	b.n	800888e <__swsetup_r+0x8e>
 80088a4:	2000      	movs	r0, #0
 80088a6:	e7f7      	b.n	8008898 <__swsetup_r+0x98>
 80088a8:	20000190 	.word	0x20000190

080088ac <_raise_r>:
 80088ac:	291f      	cmp	r1, #31
 80088ae:	b538      	push	{r3, r4, r5, lr}
 80088b0:	4605      	mov	r5, r0
 80088b2:	460c      	mov	r4, r1
 80088b4:	d904      	bls.n	80088c0 <_raise_r+0x14>
 80088b6:	2316      	movs	r3, #22
 80088b8:	6003      	str	r3, [r0, #0]
 80088ba:	f04f 30ff 	mov.w	r0, #4294967295
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088c2:	b112      	cbz	r2, 80088ca <_raise_r+0x1e>
 80088c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088c8:	b94b      	cbnz	r3, 80088de <_raise_r+0x32>
 80088ca:	4628      	mov	r0, r5
 80088cc:	f000 f830 	bl	8008930 <_getpid_r>
 80088d0:	4622      	mov	r2, r4
 80088d2:	4601      	mov	r1, r0
 80088d4:	4628      	mov	r0, r5
 80088d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088da:	f000 b817 	b.w	800890c <_kill_r>
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d00a      	beq.n	80088f8 <_raise_r+0x4c>
 80088e2:	1c59      	adds	r1, r3, #1
 80088e4:	d103      	bne.n	80088ee <_raise_r+0x42>
 80088e6:	2316      	movs	r3, #22
 80088e8:	6003      	str	r3, [r0, #0]
 80088ea:	2001      	movs	r0, #1
 80088ec:	e7e7      	b.n	80088be <_raise_r+0x12>
 80088ee:	2100      	movs	r1, #0
 80088f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80088f4:	4620      	mov	r0, r4
 80088f6:	4798      	blx	r3
 80088f8:	2000      	movs	r0, #0
 80088fa:	e7e0      	b.n	80088be <_raise_r+0x12>

080088fc <raise>:
 80088fc:	4b02      	ldr	r3, [pc, #8]	@ (8008908 <raise+0xc>)
 80088fe:	4601      	mov	r1, r0
 8008900:	6818      	ldr	r0, [r3, #0]
 8008902:	f7ff bfd3 	b.w	80088ac <_raise_r>
 8008906:	bf00      	nop
 8008908:	20000190 	.word	0x20000190

0800890c <_kill_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4d07      	ldr	r5, [pc, #28]	@ (800892c <_kill_r+0x20>)
 8008910:	2300      	movs	r3, #0
 8008912:	4604      	mov	r4, r0
 8008914:	4608      	mov	r0, r1
 8008916:	4611      	mov	r1, r2
 8008918:	602b      	str	r3, [r5, #0]
 800891a:	f7f9 fef5 	bl	8002708 <_kill>
 800891e:	1c43      	adds	r3, r0, #1
 8008920:	d102      	bne.n	8008928 <_kill_r+0x1c>
 8008922:	682b      	ldr	r3, [r5, #0]
 8008924:	b103      	cbz	r3, 8008928 <_kill_r+0x1c>
 8008926:	6023      	str	r3, [r4, #0]
 8008928:	bd38      	pop	{r3, r4, r5, pc}
 800892a:	bf00      	nop
 800892c:	200005bc 	.word	0x200005bc

08008930 <_getpid_r>:
 8008930:	f7f9 bee2 	b.w	80026f8 <_getpid>

08008934 <__swhatbuf_r>:
 8008934:	b570      	push	{r4, r5, r6, lr}
 8008936:	460c      	mov	r4, r1
 8008938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800893c:	2900      	cmp	r1, #0
 800893e:	b096      	sub	sp, #88	@ 0x58
 8008940:	4615      	mov	r5, r2
 8008942:	461e      	mov	r6, r3
 8008944:	da0d      	bge.n	8008962 <__swhatbuf_r+0x2e>
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800894c:	f04f 0100 	mov.w	r1, #0
 8008950:	bf14      	ite	ne
 8008952:	2340      	movne	r3, #64	@ 0x40
 8008954:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008958:	2000      	movs	r0, #0
 800895a:	6031      	str	r1, [r6, #0]
 800895c:	602b      	str	r3, [r5, #0]
 800895e:	b016      	add	sp, #88	@ 0x58
 8008960:	bd70      	pop	{r4, r5, r6, pc}
 8008962:	466a      	mov	r2, sp
 8008964:	f000 f848 	bl	80089f8 <_fstat_r>
 8008968:	2800      	cmp	r0, #0
 800896a:	dbec      	blt.n	8008946 <__swhatbuf_r+0x12>
 800896c:	9901      	ldr	r1, [sp, #4]
 800896e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008972:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008976:	4259      	negs	r1, r3
 8008978:	4159      	adcs	r1, r3
 800897a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800897e:	e7eb      	b.n	8008958 <__swhatbuf_r+0x24>

08008980 <__smakebuf_r>:
 8008980:	898b      	ldrh	r3, [r1, #12]
 8008982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008984:	079d      	lsls	r5, r3, #30
 8008986:	4606      	mov	r6, r0
 8008988:	460c      	mov	r4, r1
 800898a:	d507      	bpl.n	800899c <__smakebuf_r+0x1c>
 800898c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	6123      	str	r3, [r4, #16]
 8008994:	2301      	movs	r3, #1
 8008996:	6163      	str	r3, [r4, #20]
 8008998:	b003      	add	sp, #12
 800899a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800899c:	ab01      	add	r3, sp, #4
 800899e:	466a      	mov	r2, sp
 80089a0:	f7ff ffc8 	bl	8008934 <__swhatbuf_r>
 80089a4:	9f00      	ldr	r7, [sp, #0]
 80089a6:	4605      	mov	r5, r0
 80089a8:	4639      	mov	r1, r7
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7fc f91e 	bl	8004bec <_malloc_r>
 80089b0:	b948      	cbnz	r0, 80089c6 <__smakebuf_r+0x46>
 80089b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b6:	059a      	lsls	r2, r3, #22
 80089b8:	d4ee      	bmi.n	8008998 <__smakebuf_r+0x18>
 80089ba:	f023 0303 	bic.w	r3, r3, #3
 80089be:	f043 0302 	orr.w	r3, r3, #2
 80089c2:	81a3      	strh	r3, [r4, #12]
 80089c4:	e7e2      	b.n	800898c <__smakebuf_r+0xc>
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	6020      	str	r0, [r4, #0]
 80089ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ce:	81a3      	strh	r3, [r4, #12]
 80089d0:	9b01      	ldr	r3, [sp, #4]
 80089d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089d6:	b15b      	cbz	r3, 80089f0 <__smakebuf_r+0x70>
 80089d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089dc:	4630      	mov	r0, r6
 80089de:	f000 f81d 	bl	8008a1c <_isatty_r>
 80089e2:	b128      	cbz	r0, 80089f0 <__smakebuf_r+0x70>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	f023 0303 	bic.w	r3, r3, #3
 80089ea:	f043 0301 	orr.w	r3, r3, #1
 80089ee:	81a3      	strh	r3, [r4, #12]
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	431d      	orrs	r5, r3
 80089f4:	81a5      	strh	r5, [r4, #12]
 80089f6:	e7cf      	b.n	8008998 <__smakebuf_r+0x18>

080089f8 <_fstat_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	4d07      	ldr	r5, [pc, #28]	@ (8008a18 <_fstat_r+0x20>)
 80089fc:	2300      	movs	r3, #0
 80089fe:	4604      	mov	r4, r0
 8008a00:	4608      	mov	r0, r1
 8008a02:	4611      	mov	r1, r2
 8008a04:	602b      	str	r3, [r5, #0]
 8008a06:	f7f9 fedf 	bl	80027c8 <_fstat>
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	d102      	bne.n	8008a14 <_fstat_r+0x1c>
 8008a0e:	682b      	ldr	r3, [r5, #0]
 8008a10:	b103      	cbz	r3, 8008a14 <_fstat_r+0x1c>
 8008a12:	6023      	str	r3, [r4, #0]
 8008a14:	bd38      	pop	{r3, r4, r5, pc}
 8008a16:	bf00      	nop
 8008a18:	200005bc 	.word	0x200005bc

08008a1c <_isatty_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d06      	ldr	r5, [pc, #24]	@ (8008a38 <_isatty_r+0x1c>)
 8008a20:	2300      	movs	r3, #0
 8008a22:	4604      	mov	r4, r0
 8008a24:	4608      	mov	r0, r1
 8008a26:	602b      	str	r3, [r5, #0]
 8008a28:	f7f9 fede 	bl	80027e8 <_isatty>
 8008a2c:	1c43      	adds	r3, r0, #1
 8008a2e:	d102      	bne.n	8008a36 <_isatty_r+0x1a>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	b103      	cbz	r3, 8008a36 <_isatty_r+0x1a>
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	200005bc 	.word	0x200005bc

08008a3c <_init>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr

08008a48 <_fini>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	bf00      	nop
 8008a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4e:	bc08      	pop	{r3}
 8008a50:	469e      	mov	lr, r3
 8008a52:	4770      	bx	lr
