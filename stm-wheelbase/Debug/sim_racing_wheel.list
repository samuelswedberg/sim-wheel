
sim_racing_wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  080065b0  080065b0  000075b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a58  08006a58  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006a58  08006a58  00007a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a60  08006a60  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a60  08006a60  00007a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a64  08006a64  00007a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006a68  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200001d4  08006c3c  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08006c3c  000084b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000967c  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aff  00000000  00000000  00011880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  00013380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000634  00000000  00000000  00013ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e18  00000000  00000000  000141dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad33  00000000  00000000  00035ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca499  00000000  00000000  00040d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b1c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030c8  00000000  00000000  0010b204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0010e2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006598 	.word	0x08006598

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08006598 	.word	0x08006598

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <send_response>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_response(const char* response) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff f9e5 	bl	80002b0 <strlen>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	4803      	ldr	r0, [pc, #12]	@ (8000f00 <send_response+0x28>)
 8000ef2:	f001 fe3d 	bl	8002b70 <HAL_UART_Transmit>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200001f0 	.word	0x200001f0

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f08:	f000 fc12 	bl	8001730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0c:	f000 f818 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f10:	f000 f8ae 	bl	8001070 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f14:	f000 f882 	bl	800101c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_data, sizeof(rx_data));
 8000f18:	2214      	movs	r2, #20
 8000f1a:	4906      	ldr	r1, [pc, #24]	@ (8000f34 <main+0x30>)
 8000f1c:	4806      	ldr	r0, [pc, #24]	@ (8000f38 <main+0x34>)
 8000f1e:	f001 feb2 	bl	8002c86 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  send_response("Heartbeat\n");
 8000f22:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <main+0x38>)
 8000f24:	f7ff ffd8 	bl	8000ed8 <send_response>
	  HAL_Delay(5000);
 8000f28:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f2c:	f000 fc72 	bl	8001814 <HAL_Delay>
	  send_response("Heartbeat\n");
 8000f30:	bf00      	nop
 8000f32:	e7f6      	b.n	8000f22 <main+0x1e>
 8000f34:	20000238 	.word	0x20000238
 8000f38:	200001f0 	.word	0x200001f0
 8000f3c:	080065b0 	.word	0x080065b0

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	@ 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	2234      	movs	r2, #52	@ 0x34
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 fbef 	bl	8004732 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	4b2a      	ldr	r3, [pc, #168]	@ (8001014 <SystemClock_Config+0xd4>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	4a29      	ldr	r2, [pc, #164]	@ (8001014 <SystemClock_Config+0xd4>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f74:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <SystemClock_Config+0xd4>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f80:	2300      	movs	r3, #0
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <SystemClock_Config+0xd8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f8c:	4a22      	ldr	r2, [pc, #136]	@ (8001018 <SystemClock_Config+0xd8>)
 8000f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <SystemClock_Config+0xd8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa8:	2310      	movs	r3, #16
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fac:	2302      	movs	r3, #2
 8000fae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fb8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fbc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fae0 	bl	8002594 <HAL_RCC_OscConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fda:	f000 f9ef 	bl	80013bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fde:	230f      	movs	r3, #15
 8000fe0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 ff80 	bl	8001f00 <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001006:	f000 f9d9 	bl	80013bc <Error_Handler>
  }
}
 800100a:	bf00      	nop
 800100c:	3750      	adds	r7, #80	@ 0x50
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000

0800101c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001020:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 8001022:	4a12      	ldr	r2, [pc, #72]	@ (800106c <MX_USART2_UART_Init+0x50>)
 8001024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_USART2_UART_Init+0x4c>)
 8001054:	f001 fd3c 	bl	8002ad0 <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800105e:	f000 f9ad 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200001f0 	.word	0x200001f0
 800106c:	40004400 	.word	0x40004400

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	@ 0x28
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <MX_GPIO_Init+0xd0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a2c      	ldr	r2, [pc, #176]	@ (8001140 <MX_GPIO_Init+0xd0>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <MX_GPIO_Init+0xd0>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <MX_GPIO_Init+0xd0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a25      	ldr	r2, [pc, #148]	@ (8001140 <MX_GPIO_Init+0xd0>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <MX_GPIO_Init+0xd0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <MX_GPIO_Init+0xd0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001140 <MX_GPIO_Init+0xd0>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001140 <MX_GPIO_Init+0xd0>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <MX_GPIO_Init+0xd0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a17      	ldr	r2, [pc, #92]	@ (8001140 <MX_GPIO_Init+0xd0>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <MX_GPIO_Init+0xd0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2120      	movs	r1, #32
 80010fa:	4812      	ldr	r0, [pc, #72]	@ (8001144 <MX_GPIO_Init+0xd4>)
 80010fc:	f000 fee6 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001100:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001106:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	480c      	ldr	r0, [pc, #48]	@ (8001148 <MX_GPIO_Init+0xd8>)
 8001118:	f000 fd44 	bl	8001ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800111c:	2320      	movs	r3, #32
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4804      	ldr	r0, [pc, #16]	@ (8001144 <MX_GPIO_Init+0xd4>)
 8001134:	f000 fd36 	bl	8001ba4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	@ 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020800 	.word	0x40020800

0800114c <process_received_data>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // Turn off the LED
	send_response("Light off\n");
	HAL_Delay(dur);
}

void process_received_data(char *data) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if(strncmp(data, "speedKmh", 8) == 0)
 8001154:	2208      	movs	r2, #8
 8001156:	4921      	ldr	r1, [pc, #132]	@ (80011dc <process_received_data+0x90>)
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f003 faf2 	bl	8004742 <strncmp>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10b      	bne.n	800117c <process_received_data+0x30>
	{
		speed = atoi(&data[8]);  // Convert the remaining part to an integer
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3308      	adds	r3, #8
 8001168:	4618      	mov	r0, r3
 800116a:	f002 fcfd 	bl	8003b68 <atoi>
 800116e:	4603      	mov	r3, r0
 8001170:	4a1b      	ldr	r2, [pc, #108]	@ (80011e0 <process_received_data+0x94>)
 8001172:	6013      	str	r3, [r2, #0]
		send_response("Speed received\n");
 8001174:	481b      	ldr	r0, [pc, #108]	@ (80011e4 <process_received_data+0x98>)
 8001176:	f7ff feaf 	bl	8000ed8 <send_response>
	}
	else
	{
		send_response("Unknown data was sent\n");
	}
}
 800117a:	e02a      	b.n	80011d2 <process_received_data+0x86>
	else if(strncmp(data, "gear", 4) == 0)
 800117c:	2204      	movs	r2, #4
 800117e:	491a      	ldr	r1, [pc, #104]	@ (80011e8 <process_received_data+0x9c>)
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f003 fade 	bl	8004742 <strncmp>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d10b      	bne.n	80011a4 <process_received_data+0x58>
		gear = atoi(&data[4]);  // Convert the remaining part to an integer
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3304      	adds	r3, #4
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fce9 	bl	8003b68 <atoi>
 8001196:	4603      	mov	r3, r0
 8001198:	4a14      	ldr	r2, [pc, #80]	@ (80011ec <process_received_data+0xa0>)
 800119a:	6013      	str	r3, [r2, #0]
		send_response("Gear received\n");
 800119c:	4814      	ldr	r0, [pc, #80]	@ (80011f0 <process_received_data+0xa4>)
 800119e:	f7ff fe9b 	bl	8000ed8 <send_response>
}
 80011a2:	e016      	b.n	80011d2 <process_received_data+0x86>
	else if(strncmp(data, "rpm", 3) == 0)
 80011a4:	2203      	movs	r2, #3
 80011a6:	4913      	ldr	r1, [pc, #76]	@ (80011f4 <process_received_data+0xa8>)
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f003 faca 	bl	8004742 <strncmp>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10b      	bne.n	80011cc <process_received_data+0x80>
		rpm = atoi(&data[3]);  // Convert the remaining part to an integer
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3303      	adds	r3, #3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fcd5 	bl	8003b68 <atoi>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <process_received_data+0xac>)
 80011c2:	6013      	str	r3, [r2, #0]
		send_response("Rpm received\n");
 80011c4:	480d      	ldr	r0, [pc, #52]	@ (80011fc <process_received_data+0xb0>)
 80011c6:	f7ff fe87 	bl	8000ed8 <send_response>
}
 80011ca:	e002      	b.n	80011d2 <process_received_data+0x86>
		send_response("Unknown data was sent\n");
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <process_received_data+0xb4>)
 80011ce:	f7ff fe83 	bl	8000ed8 <send_response>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	080065d4 	.word	0x080065d4
 80011e0:	20000350 	.word	0x20000350
 80011e4:	080065e0 	.word	0x080065e0
 80011e8:	080065f0 	.word	0x080065f0
 80011ec:	20000354 	.word	0x20000354
 80011f0:	080065f8 	.word	0x080065f8
 80011f4:	08006608 	.word	0x08006608
 80011f8:	20000358 	.word	0x20000358
 80011fc:	0800660c 	.word	0x0800660c
 8001200:	0800661c 	.word	0x0800661c

08001204 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  if(huart->Instance == USART2) { // Checks if correct UART instance
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1d      	ldr	r2, [pc, #116]	@ (8001288 <HAL_UART_RxCpltCallback+0x84>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d134      	bne.n	8001280 <HAL_UART_RxCpltCallback+0x7c>
	  // Store received data in the circular buffer
	  rx_buffer[head] = rx_data[0];  // Store the received character
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <HAL_UART_RxCpltCallback+0x88>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <HAL_UART_RxCpltCallback+0x8c>)
 8001220:	7819      	ldrb	r1, [r3, #0]
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <HAL_UART_RxCpltCallback+0x90>)
 8001224:	5499      	strb	r1, [r3, r2]
	  head = (head + 1) % BUFFER_SIZE; // Update head position
 8001226:	4b19      	ldr	r3, [pc, #100]	@ (800128c <HAL_UART_RxCpltCallback+0x88>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	3301      	adds	r3, #1
 800122e:	425a      	negs	r2, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	bf58      	it	pl
 8001236:	4253      	negpl	r3, r2
 8001238:	b29a      	uxth	r2, r3
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <HAL_UART_RxCpltCallback+0x88>)
 800123c:	801a      	strh	r2, [r3, #0]

	  // Check if the buffer is full
	  if (head == tail) {
 800123e:	4b13      	ldr	r3, [pc, #76]	@ (800128c <HAL_UART_RxCpltCallback+0x88>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	b29a      	uxth	r2, r3
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <HAL_UART_RxCpltCallback+0x94>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	b29b      	uxth	r3, r3
 800124a:	429a      	cmp	r2, r3
 800124c:	d10b      	bne.n	8001266 <HAL_UART_RxCpltCallback+0x62>
		  // Handle buffer overflow (e.g., overwrite old data or set an error flag)
		  tail = (tail + 1) % BUFFER_SIZE; // Optionally overwrite the oldest data
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_UART_RxCpltCallback+0x94>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	3301      	adds	r3, #1
 8001256:	425a      	negs	r2, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	bf58      	it	pl
 800125e:	4253      	negpl	r3, r2
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <HAL_UART_RxCpltCallback+0x94>)
 8001264:	801a      	strh	r2, [r3, #0]
	  }

	  // Buffer is full, handle the overflow (e.g., discard old data, set an error flag, etc.)
	  process_received_data(rx_data);
 8001266:	480a      	ldr	r0, [pc, #40]	@ (8001290 <HAL_UART_RxCpltCallback+0x8c>)
 8001268:	f7ff ff70 	bl	800114c <process_received_data>

	  // Reset the buffer after processing
	  memset(rx_data, 0, sizeof(rx_data));
 800126c:	2214      	movs	r2, #20
 800126e:	2100      	movs	r1, #0
 8001270:	4807      	ldr	r0, [pc, #28]	@ (8001290 <HAL_UART_RxCpltCallback+0x8c>)
 8001272:	f003 fa5e 	bl	8004732 <memset>

	  HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_data, sizeof(rx_data));
 8001276:	2214      	movs	r2, #20
 8001278:	4905      	ldr	r1, [pc, #20]	@ (8001290 <HAL_UART_RxCpltCallback+0x8c>)
 800127a:	4808      	ldr	r0, [pc, #32]	@ (800129c <HAL_UART_RxCpltCallback+0x98>)
 800127c:	f001 fd03 	bl	8002c86 <HAL_UART_Receive_IT>
  }
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40004400 	.word	0x40004400
 800128c:	2000034c 	.word	0x2000034c
 8001290:	20000238 	.word	0x20000238
 8001294:	2000024c 	.word	0x2000024c
 8001298:	2000034e 	.word	0x2000034e
 800129c:	200001f0 	.word	0x200001f0

080012a0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b090      	sub	sp, #64	@ 0x40
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a3b      	ldr	r2, [pc, #236]	@ (800139c <HAL_UART_ErrorCallback+0xfc>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d170      	bne.n	8001394 <HAL_UART_ErrorCallback+0xf4>
        char errorMsg[50];  // Buffer to store the error message

        // Check for specific UART errors
        if (huart->ErrorCode & HAL_UART_ERROR_PE) {
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00b      	beq.n	80012d6 <HAL_UART_ErrorCallback+0x36>
            strcpy(errorMsg, "UART Parity Error occurred\r\n");
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4a37      	ldr	r2, [pc, #220]	@ (80013a0 <HAL_UART_ErrorCallback+0x100>)
 80012c4:	461c      	mov	r4, r3
 80012c6:	4615      	mov	r5, r2
 80012c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012d0:	c407      	stmia	r4!, {r0, r1, r2}
 80012d2:	7023      	strb	r3, [r4, #0]
 80012d4:	e04b      	b.n	800136e <HAL_UART_ErrorCallback+0xce>
        }
        else if (huart->ErrorCode & HAL_UART_ERROR_FE) {
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <HAL_UART_ErrorCallback+0x5a>
            strcpy(errorMsg, "UART Framing Error occurred\r\n");
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4a2f      	ldr	r2, [pc, #188]	@ (80013a4 <HAL_UART_ErrorCallback+0x104>)
 80012e8:	461c      	mov	r4, r3
 80012ea:	4615      	mov	r5, r2
 80012ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012f4:	c407      	stmia	r4!, {r0, r1, r2}
 80012f6:	8023      	strh	r3, [r4, #0]
 80012f8:	e039      	b.n	800136e <HAL_UART_ErrorCallback+0xce>
        }
        else if (huart->ErrorCode & HAL_UART_ERROR_NE) {
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00b      	beq.n	800131e <HAL_UART_ErrorCallback+0x7e>
            strcpy(errorMsg, "UART Noise Error occurred\r\n");
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	4a27      	ldr	r2, [pc, #156]	@ (80013a8 <HAL_UART_ErrorCallback+0x108>)
 800130c:	461c      	mov	r4, r3
 800130e:	4615      	mov	r5, r2
 8001310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001314:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800131c:	e027      	b.n	800136e <HAL_UART_ErrorCallback+0xce>
        }
        else if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d016      	beq.n	8001358 <HAL_UART_ErrorCallback+0xb8>
            strcpy(errorMsg, "UART Overrun Error occurred\r\n");
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ac <HAL_UART_ErrorCallback+0x10c>)
 8001330:	461c      	mov	r4, r3
 8001332:	4615      	mov	r5, r2
 8001334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001338:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800133c:	c407      	stmia	r4!, {r0, r1, r2}
 800133e:	8023      	strh	r3, [r4, #0]
            __HAL_UART_CLEAR_OREFLAG(huart);  // Clear the overrun error flag
 8001340:	2300      	movs	r3, #0
 8001342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001356:	e00a      	b.n	800136e <HAL_UART_ErrorCallback+0xce>
        }
        else {
            strcpy(errorMsg, "Unknown UART Error occurred\r\n");
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	4a14      	ldr	r2, [pc, #80]	@ (80013b0 <HAL_UART_ErrorCallback+0x110>)
 800135e:	461c      	mov	r4, r3
 8001360:	4615      	mov	r5, r2
 8001362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001366:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800136a:	c407      	stmia	r4!, {r0, r1, r2}
 800136c:	8023      	strh	r3, [r4, #0]
        }

        // Re-enable the UART receive interrupt
        HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_data, sizeof(rx_data));
 800136e:	2214      	movs	r2, #20
 8001370:	4910      	ldr	r1, [pc, #64]	@ (80013b4 <HAL_UART_ErrorCallback+0x114>)
 8001372:	4811      	ldr	r0, [pc, #68]	@ (80013b8 <HAL_UART_ErrorCallback+0x118>)
 8001374:	f001 fc87 	bl	8002c86 <HAL_UART_Receive_IT>

        // Transmit the error message via UART
        HAL_UART_Transmit(&huart2, (uint8_t *)errorMsg, strlen(errorMsg), HAL_MAX_DELAY);
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	4618      	mov	r0, r3
 800137e:	f7fe ff97 	bl	80002b0 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	b29a      	uxth	r2, r3
 8001386:	f107 0108 	add.w	r1, r7, #8
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	480a      	ldr	r0, [pc, #40]	@ (80013b8 <HAL_UART_ErrorCallback+0x118>)
 8001390:	f001 fbee 	bl	8002b70 <HAL_UART_Transmit>
    }
}
 8001394:	bf00      	nop
 8001396:	3740      	adds	r7, #64	@ 0x40
 8001398:	46bd      	mov	sp, r7
 800139a:	bdb0      	pop	{r4, r5, r7, pc}
 800139c:	40004400 	.word	0x40004400
 80013a0:	08006634 	.word	0x08006634
 80013a4:	08006654 	.word	0x08006654
 80013a8:	08006674 	.word	0x08006674
 80013ac:	08006690 	.word	0x08006690
 80013b0:	080066b0 	.word	0x080066b0
 80013b4:	20000238 	.word	0x20000238
 80013b8:	200001f0 	.word	0x200001f0

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <Error_Handler+0x8>

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001414 <HAL_MspInit+0x4c>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <HAL_MspInit+0x4c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <HAL_MspInit+0x4c>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001406:	2007      	movs	r0, #7
 8001408:	f000 faf8 	bl	80019fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800

08001418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a1d      	ldr	r2, [pc, #116]	@ (80014ac <HAL_UART_MspInit+0x94>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d133      	bne.n	80014a2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b1c      	ldr	r3, [pc, #112]	@ (80014b0 <HAL_UART_MspInit+0x98>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	4a1b      	ldr	r2, [pc, #108]	@ (80014b0 <HAL_UART_MspInit+0x98>)
 8001444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001448:	6413      	str	r3, [r2, #64]	@ 0x40
 800144a:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <HAL_UART_MspInit+0x98>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <HAL_UART_MspInit+0x98>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a14      	ldr	r2, [pc, #80]	@ (80014b0 <HAL_UART_MspInit+0x98>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_UART_MspInit+0x98>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001472:	230c      	movs	r3, #12
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001482:	2307      	movs	r3, #7
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4809      	ldr	r0, [pc, #36]	@ (80014b4 <HAL_UART_MspInit+0x9c>)
 800148e:	f000 fb89 	bl	8001ba4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2026      	movs	r0, #38	@ 0x26
 8001498:	f000 fabb 	bl	8001a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800149c:	2026      	movs	r0, #38	@ 0x26
 800149e:	f000 fad4 	bl	8001a4a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	@ 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40004400 	.word	0x40004400
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <NMI_Handler+0x4>

080014c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <HardFault_Handler+0x4>

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <MemManage_Handler+0x4>

080014d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <BusFault_Handler+0x4>

080014d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <UsageFault_Handler+0x4>

080014e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150e:	f000 f961 	bl	80017d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <USART2_IRQHandler+0x10>)
 800151e:	f001 fbd7 	bl	8002cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200001f0 	.word	0x200001f0

0800152c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return 1;
 8001530:	2301      	movs	r3, #1
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_kill>:

int _kill(int pid, int sig)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001546:	f003 f959 	bl	80047fc <__errno>
 800154a:	4603      	mov	r3, r0
 800154c:	2216      	movs	r2, #22
 800154e:	601a      	str	r2, [r3, #0]
  return -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_exit>:

void _exit (int status)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ffe7 	bl	800153c <_kill>
  while (1) {}    /* Make sure we hang here */
 800156e:	bf00      	nop
 8001570:	e7fd      	b.n	800156e <_exit+0x12>

08001572 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e00a      	b.n	800159a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001584:	f3af 8000 	nop.w
 8001588:	4601      	mov	r1, r0
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	60ba      	str	r2, [r7, #8]
 8001590:	b2ca      	uxtb	r2, r1
 8001592:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbf0      	blt.n	8001584 <_read+0x12>
  }

  return len;
 80015a2:	687b      	ldr	r3, [r7, #4]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	e009      	b.n	80015d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	60ba      	str	r2, [r7, #8]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbf1      	blt.n	80015be <_write+0x12>
  }
  return len;
 80015da:	687b      	ldr	r3, [r7, #4]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_close>:

int _close(int file)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800160c:	605a      	str	r2, [r3, #4]
  return 0;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_isatty>:

int _isatty(int file)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001624:	2301      	movs	r3, #1
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001632:	b480      	push	{r7}
 8001634:	b085      	sub	sp, #20
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001654:	4a14      	ldr	r2, [pc, #80]	@ (80016a8 <_sbrk+0x5c>)
 8001656:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <_sbrk+0x60>)
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001660:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001668:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <_sbrk+0x64>)
 800166a:	4a12      	ldr	r2, [pc, #72]	@ (80016b4 <_sbrk+0x68>)
 800166c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166e:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	429a      	cmp	r2, r3
 800167a:	d207      	bcs.n	800168c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800167c:	f003 f8be 	bl	80047fc <__errno>
 8001680:	4603      	mov	r3, r0
 8001682:	220c      	movs	r2, #12
 8001684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
 800168a:	e009      	b.n	80016a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800168c:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001692:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <_sbrk+0x64>)
 800169c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20020000 	.word	0x20020000
 80016ac:	00000400 	.word	0x00000400
 80016b0:	2000035c 	.word	0x2000035c
 80016b4:	200004b0 	.word	0x200004b0

080016b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <SystemInit+0x20>)
 80016be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016c2:	4a05      	ldr	r2, [pc, #20]	@ (80016d8 <SystemInit+0x20>)
 80016c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001714 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016e0:	f7ff ffea 	bl	80016b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016e6:	490d      	ldr	r1, [pc, #52]	@ (800171c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800170a:	f003 f87d 	bl	8004808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170e:	f7ff fbf9 	bl	8000f04 <main>
  bx  lr    
 8001712:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800171c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001720:	08006a68 	.word	0x08006a68
  ldr r2, =_sbss
 8001724:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001728:	200004b0 	.word	0x200004b0

0800172c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC_IRQHandler>
	...

08001730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001734:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <HAL_Init+0x40>)
 800173a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800173e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <HAL_Init+0x40>)
 8001746:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800174a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800174c:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a07      	ldr	r2, [pc, #28]	@ (8001770 <HAL_Init+0x40>)
 8001752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001758:	2003      	movs	r0, #3
 800175a:	f000 f94f 	bl	80019fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175e:	2000      	movs	r0, #0
 8001760:	f000 f808 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001764:	f7ff fe30 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023c00 	.word	0x40023c00

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <HAL_InitTick+0x54>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <HAL_InitTick+0x58>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178a:	fbb3 f3f1 	udiv	r3, r3, r1
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f967 	bl	8001a66 <HAL_SYSTICK_Config>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00e      	b.n	80017c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d80a      	bhi.n	80017be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a8:	2200      	movs	r2, #0
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f000 f92f 	bl	8001a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b4:	4a06      	ldr	r2, [pc, #24]	@ (80017d0 <HAL_InitTick+0x5c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e000      	b.n	80017c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000008 	.word	0x20000008
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_IncTick+0x20>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_IncTick+0x24>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <HAL_IncTick+0x24>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008
 80017f8:	20000360 	.word	0x20000360

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	@ (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000360 	.word	0x20000360

08001814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff ffee 	bl	80017fc <HAL_GetTick>
 8001820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d005      	beq.n	800183a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182e:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <HAL_Delay+0x44>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800183a:	bf00      	nop
 800183c:	f7ff ffde 	bl	80017fc <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d8f7      	bhi.n	800183c <HAL_Delay+0x28>
  {
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000008 	.word	0x20000008

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4907      	ldr	r1, [pc, #28]	@ (80018f8 <__NVIC_EnableIRQ+0x38>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	@ (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	@ (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	@ 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
         );
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	@ 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c8:	d301      	bcc.n	80019ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00f      	b.n	80019ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ce:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <SysTick_Config+0x40>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d6:	210f      	movs	r1, #15
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f7ff ff8e 	bl	80018fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <SysTick_Config+0x40>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e6:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <SysTick_Config+0x40>)
 80019e8:	2207      	movs	r2, #7
 80019ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	e000e010 	.word	0xe000e010

080019fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff29 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a24:	f7ff ff3e 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 8001a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff ff8e 	bl	8001950 <NVIC_EncodePriority>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff5d 	bl	80018fc <__NVIC_SetPriority>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff31 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffa2 	bl	80019b8 <SysTick_Config>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b084      	sub	sp, #16
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff feb6 	bl	80017fc <HAL_GetTick>
 8001a90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d008      	beq.n	8001ab0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2280      	movs	r2, #128	@ 0x80
 8001aa2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e052      	b.n	8001b56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0216 	bic.w	r2, r2, #22
 8001abe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ace:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d103      	bne.n	8001ae0 <HAL_DMA_Abort+0x62>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0208 	bic.w	r2, r2, #8
 8001aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b00:	e013      	b.n	8001b2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b02:	f7ff fe7b 	bl	80017fc <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b05      	cmp	r3, #5
 8001b0e:	d90c      	bls.n	8001b2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2220      	movs	r2, #32
 8001b14:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e015      	b.n	8001b56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e4      	bne.n	8001b02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3c:	223f      	movs	r2, #63	@ 0x3f
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d004      	beq.n	8001b7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2280      	movs	r2, #128	@ 0x80
 8001b76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e00c      	b.n	8001b96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2205      	movs	r2, #5
 8001b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	@ 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	e165      	b.n	8001e8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	f040 8154 	bne.w	8001e86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d005      	beq.n	8001bf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d130      	bne.n	8001c58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 0201 	and.w	r2, r3, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d017      	beq.n	8001c94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d123      	bne.n	8001ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	08da      	lsrs	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3208      	adds	r2, #8
 8001ce2:	69b9      	ldr	r1, [r7, #24]
 8001ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0203 	and.w	r2, r3, #3
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80ae 	beq.w	8001e86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ea4 <HAL_GPIO_Init+0x300>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	4a5c      	ldr	r2, [pc, #368]	@ (8001ea4 <HAL_GPIO_Init+0x300>)
 8001d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d3a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ea4 <HAL_GPIO_Init+0x300>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d46:	4a58      	ldr	r2, [pc, #352]	@ (8001ea8 <HAL_GPIO_Init+0x304>)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001eac <HAL_GPIO_Init+0x308>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d025      	beq.n	8001dbe <HAL_GPIO_Init+0x21a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb0 <HAL_GPIO_Init+0x30c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d01f      	beq.n	8001dba <HAL_GPIO_Init+0x216>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001eb4 <HAL_GPIO_Init+0x310>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x212>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4c      	ldr	r2, [pc, #304]	@ (8001eb8 <HAL_GPIO_Init+0x314>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x20e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001ebc <HAL_GPIO_Init+0x318>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x20a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4a      	ldr	r2, [pc, #296]	@ (8001ec0 <HAL_GPIO_Init+0x31c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x206>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a49      	ldr	r2, [pc, #292]	@ (8001ec4 <HAL_GPIO_Init+0x320>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x202>
 8001da2:	2306      	movs	r3, #6
 8001da4:	e00c      	b.n	8001dc0 <HAL_GPIO_Init+0x21c>
 8001da6:	2307      	movs	r3, #7
 8001da8:	e00a      	b.n	8001dc0 <HAL_GPIO_Init+0x21c>
 8001daa:	2305      	movs	r3, #5
 8001dac:	e008      	b.n	8001dc0 <HAL_GPIO_Init+0x21c>
 8001dae:	2304      	movs	r3, #4
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x21c>
 8001db2:	2303      	movs	r3, #3
 8001db4:	e004      	b.n	8001dc0 <HAL_GPIO_Init+0x21c>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e002      	b.n	8001dc0 <HAL_GPIO_Init+0x21c>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_GPIO_Init+0x21c>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	f002 0203 	and.w	r2, r2, #3
 8001dc6:	0092      	lsls	r2, r2, #2
 8001dc8:	4093      	lsls	r3, r2
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd0:	4935      	ldr	r1, [pc, #212]	@ (8001ea8 <HAL_GPIO_Init+0x304>)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dde:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec8 <HAL_GPIO_Init+0x324>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e02:	4a31      	ldr	r2, [pc, #196]	@ (8001ec8 <HAL_GPIO_Init+0x324>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e08:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec8 <HAL_GPIO_Init+0x324>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e2c:	4a26      	ldr	r2, [pc, #152]	@ (8001ec8 <HAL_GPIO_Init+0x324>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e32:	4b25      	ldr	r3, [pc, #148]	@ (8001ec8 <HAL_GPIO_Init+0x324>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e56:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec8 <HAL_GPIO_Init+0x324>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <HAL_GPIO_Init+0x324>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e80:	4a11      	ldr	r2, [pc, #68]	@ (8001ec8 <HAL_GPIO_Init+0x324>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2b0f      	cmp	r3, #15
 8001e90:	f67f ae96 	bls.w	8001bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3724      	adds	r7, #36	@ 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40013800 	.word	0x40013800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40020c00 	.word	0x40020c00
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40021400 	.word	0x40021400
 8001ec4:	40021800 	.word	0x40021800
 8001ec8:	40013c00 	.word	0x40013c00

08001ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001edc:	787b      	ldrb	r3, [r7, #1]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee8:	e003      	b.n	8001ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	041a      	lsls	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	619a      	str	r2, [r3, #24]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0cc      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b68      	ldr	r3, [pc, #416]	@ (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d90c      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b65      	ldr	r3, [pc, #404]	@ (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b63      	ldr	r3, [pc, #396]	@ (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b8      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f54:	4b59      	ldr	r3, [pc, #356]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a58      	ldr	r2, [pc, #352]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f6c:	4b53      	ldr	r3, [pc, #332]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4a52      	ldr	r2, [pc, #328]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4b50      	ldr	r3, [pc, #320]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	494d      	ldr	r1, [pc, #308]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d044      	beq.n	8002020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b47      	ldr	r3, [pc, #284]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d119      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e07f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d003      	beq.n	8001fbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d109      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e06f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fce:	4b3b      	ldr	r3, [pc, #236]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e067      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fde:	4b37      	ldr	r3, [pc, #220]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f023 0203 	bic.w	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4934      	ldr	r1, [pc, #208]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff0:	f7ff fc04 	bl	80017fc <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff8:	f7ff fc00 	bl	80017fc <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e04f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	4b2b      	ldr	r3, [pc, #172]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 020c 	and.w	r2, r3, #12
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	429a      	cmp	r2, r3
 800201e:	d1eb      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002020:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d20c      	bcs.n	8002048 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e032      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002054:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4916      	ldr	r1, [pc, #88]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002072:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	490e      	ldr	r1, [pc, #56]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002086:	f000 f855 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 800208a:	4602      	mov	r2, r0
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	490a      	ldr	r1, [pc, #40]	@ (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	5ccb      	ldrb	r3, [r1, r3]
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	4a09      	ldr	r2, [pc, #36]	@ (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fb64 	bl	8001774 <HAL_InitTick>

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023c00 	.word	0x40023c00
 80020bc:	40023800 	.word	0x40023800
 80020c0:	080066d0 	.word	0x080066d0
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d0:	4b03      	ldr	r3, [pc, #12]	@ (80020e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000000 	.word	0x20000000

080020e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020e8:	f7ff fff0 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	0a9b      	lsrs	r3, r3, #10
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4903      	ldr	r1, [pc, #12]	@ (8002108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40023800 	.word	0x40023800
 8002108:	080066e0 	.word	0x080066e0

0800210c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002110:	f7ff ffdc 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 8002114:	4602      	mov	r2, r0
 8002116:	4b05      	ldr	r3, [pc, #20]	@ (800212c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	0b5b      	lsrs	r3, r3, #13
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	4903      	ldr	r1, [pc, #12]	@ (8002130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002122:	5ccb      	ldrb	r3, [r1, r3]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40023800 	.word	0x40023800
 8002130:	080066e0 	.word	0x080066e0

08002134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002138:	b0ae      	sub	sp, #184	@ 0xb8
 800213a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800215a:	4bcb      	ldr	r3, [pc, #812]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x354>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b0c      	cmp	r3, #12
 8002164:	f200 8206 	bhi.w	8002574 <HAL_RCC_GetSysClockFreq+0x440>
 8002168:	a201      	add	r2, pc, #4	@ (adr r2, 8002170 <HAL_RCC_GetSysClockFreq+0x3c>)
 800216a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216e:	bf00      	nop
 8002170:	080021a5 	.word	0x080021a5
 8002174:	08002575 	.word	0x08002575
 8002178:	08002575 	.word	0x08002575
 800217c:	08002575 	.word	0x08002575
 8002180:	080021ad 	.word	0x080021ad
 8002184:	08002575 	.word	0x08002575
 8002188:	08002575 	.word	0x08002575
 800218c:	08002575 	.word	0x08002575
 8002190:	080021b5 	.word	0x080021b5
 8002194:	08002575 	.word	0x08002575
 8002198:	08002575 	.word	0x08002575
 800219c:	08002575 	.word	0x08002575
 80021a0:	080023a5 	.word	0x080023a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021a4:	4bb9      	ldr	r3, [pc, #740]	@ (800248c <HAL_RCC_GetSysClockFreq+0x358>)
 80021a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021aa:	e1e7      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ac:	4bb8      	ldr	r3, [pc, #736]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x35c>)
 80021ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021b2:	e1e3      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021b4:	4bb4      	ldr	r3, [pc, #720]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x354>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c0:	4bb1      	ldr	r3, [pc, #708]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x354>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d071      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021cc:	4bae      	ldr	r3, [pc, #696]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	099b      	lsrs	r3, r3, #6
 80021d2:	2200      	movs	r2, #0
 80021d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80021d8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80021dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80021ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80021f2:	4622      	mov	r2, r4
 80021f4:	462b      	mov	r3, r5
 80021f6:	f04f 0000 	mov.w	r0, #0
 80021fa:	f04f 0100 	mov.w	r1, #0
 80021fe:	0159      	lsls	r1, r3, #5
 8002200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002204:	0150      	lsls	r0, r2, #5
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4621      	mov	r1, r4
 800220c:	1a51      	subs	r1, r2, r1
 800220e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002210:	4629      	mov	r1, r5
 8002212:	eb63 0301 	sbc.w	r3, r3, r1
 8002216:	647b      	str	r3, [r7, #68]	@ 0x44
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002224:	4649      	mov	r1, r9
 8002226:	018b      	lsls	r3, r1, #6
 8002228:	4641      	mov	r1, r8
 800222a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800222e:	4641      	mov	r1, r8
 8002230:	018a      	lsls	r2, r1, #6
 8002232:	4641      	mov	r1, r8
 8002234:	1a51      	subs	r1, r2, r1
 8002236:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002238:	4649      	mov	r1, r9
 800223a:	eb63 0301 	sbc.w	r3, r3, r1
 800223e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800224c:	4649      	mov	r1, r9
 800224e:	00cb      	lsls	r3, r1, #3
 8002250:	4641      	mov	r1, r8
 8002252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002256:	4641      	mov	r1, r8
 8002258:	00ca      	lsls	r2, r1, #3
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	4603      	mov	r3, r0
 8002260:	4622      	mov	r2, r4
 8002262:	189b      	adds	r3, r3, r2
 8002264:	633b      	str	r3, [r7, #48]	@ 0x30
 8002266:	462b      	mov	r3, r5
 8002268:	460a      	mov	r2, r1
 800226a:	eb42 0303 	adc.w	r3, r2, r3
 800226e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800227c:	4629      	mov	r1, r5
 800227e:	024b      	lsls	r3, r1, #9
 8002280:	4621      	mov	r1, r4
 8002282:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002286:	4621      	mov	r1, r4
 8002288:	024a      	lsls	r2, r1, #9
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002292:	2200      	movs	r2, #0
 8002294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002298:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800229c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80022a0:	f7fe fca2 	bl	8000be8 <__aeabi_uldivmod>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4613      	mov	r3, r2
 80022aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022ae:	e067      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b0:	4b75      	ldr	r3, [pc, #468]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x354>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	099b      	lsrs	r3, r3, #6
 80022b6:	2200      	movs	r2, #0
 80022b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80022bc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80022c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022ca:	2300      	movs	r3, #0
 80022cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80022d2:	4622      	mov	r2, r4
 80022d4:	462b      	mov	r3, r5
 80022d6:	f04f 0000 	mov.w	r0, #0
 80022da:	f04f 0100 	mov.w	r1, #0
 80022de:	0159      	lsls	r1, r3, #5
 80022e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022e4:	0150      	lsls	r0, r2, #5
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4621      	mov	r1, r4
 80022ec:	1a51      	subs	r1, r2, r1
 80022ee:	62b9      	str	r1, [r7, #40]	@ 0x28
 80022f0:	4629      	mov	r1, r5
 80022f2:	eb63 0301 	sbc.w	r3, r3, r1
 80022f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002304:	4649      	mov	r1, r9
 8002306:	018b      	lsls	r3, r1, #6
 8002308:	4641      	mov	r1, r8
 800230a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800230e:	4641      	mov	r1, r8
 8002310:	018a      	lsls	r2, r1, #6
 8002312:	4641      	mov	r1, r8
 8002314:	ebb2 0a01 	subs.w	sl, r2, r1
 8002318:	4649      	mov	r1, r9
 800231a:	eb63 0b01 	sbc.w	fp, r3, r1
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800232a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800232e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002332:	4692      	mov	sl, r2
 8002334:	469b      	mov	fp, r3
 8002336:	4623      	mov	r3, r4
 8002338:	eb1a 0303 	adds.w	r3, sl, r3
 800233c:	623b      	str	r3, [r7, #32]
 800233e:	462b      	mov	r3, r5
 8002340:	eb4b 0303 	adc.w	r3, fp, r3
 8002344:	627b      	str	r3, [r7, #36]	@ 0x24
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002352:	4629      	mov	r1, r5
 8002354:	028b      	lsls	r3, r1, #10
 8002356:	4621      	mov	r1, r4
 8002358:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800235c:	4621      	mov	r1, r4
 800235e:	028a      	lsls	r2, r1, #10
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002368:	2200      	movs	r2, #0
 800236a:	673b      	str	r3, [r7, #112]	@ 0x70
 800236c:	677a      	str	r2, [r7, #116]	@ 0x74
 800236e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002372:	f7fe fc39 	bl	8000be8 <__aeabi_uldivmod>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4613      	mov	r3, r2
 800237c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002380:	4b41      	ldr	r3, [pc, #260]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x354>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023a2:	e0eb      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023a4:	4b38      	ldr	r3, [pc, #224]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x354>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023b0:	4b35      	ldr	r3, [pc, #212]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x354>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d06b      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023bc:	4b32      	ldr	r3, [pc, #200]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x354>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	099b      	lsrs	r3, r3, #6
 80023c2:	2200      	movs	r2, #0
 80023c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80023d0:	2300      	movs	r3, #0
 80023d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80023d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80023d8:	4622      	mov	r2, r4
 80023da:	462b      	mov	r3, r5
 80023dc:	f04f 0000 	mov.w	r0, #0
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	0159      	lsls	r1, r3, #5
 80023e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ea:	0150      	lsls	r0, r2, #5
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4621      	mov	r1, r4
 80023f2:	1a51      	subs	r1, r2, r1
 80023f4:	61b9      	str	r1, [r7, #24]
 80023f6:	4629      	mov	r1, r5
 80023f8:	eb63 0301 	sbc.w	r3, r3, r1
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800240a:	4659      	mov	r1, fp
 800240c:	018b      	lsls	r3, r1, #6
 800240e:	4651      	mov	r1, sl
 8002410:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002414:	4651      	mov	r1, sl
 8002416:	018a      	lsls	r2, r1, #6
 8002418:	4651      	mov	r1, sl
 800241a:	ebb2 0801 	subs.w	r8, r2, r1
 800241e:	4659      	mov	r1, fp
 8002420:	eb63 0901 	sbc.w	r9, r3, r1
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002430:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002434:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002438:	4690      	mov	r8, r2
 800243a:	4699      	mov	r9, r3
 800243c:	4623      	mov	r3, r4
 800243e:	eb18 0303 	adds.w	r3, r8, r3
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	462b      	mov	r3, r5
 8002446:	eb49 0303 	adc.w	r3, r9, r3
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002458:	4629      	mov	r1, r5
 800245a:	024b      	lsls	r3, r1, #9
 800245c:	4621      	mov	r1, r4
 800245e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002462:	4621      	mov	r1, r4
 8002464:	024a      	lsls	r2, r1, #9
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800246e:	2200      	movs	r2, #0
 8002470:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002472:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002474:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002478:	f7fe fbb6 	bl	8000be8 <__aeabi_uldivmod>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4613      	mov	r3, r2
 8002482:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002486:	e065      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x420>
 8002488:	40023800 	.word	0x40023800
 800248c:	00f42400 	.word	0x00f42400
 8002490:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002494:	4b3d      	ldr	r3, [pc, #244]	@ (800258c <HAL_RCC_GetSysClockFreq+0x458>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	099b      	lsrs	r3, r3, #6
 800249a:	2200      	movs	r2, #0
 800249c:	4618      	mov	r0, r3
 800249e:	4611      	mov	r1, r2
 80024a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80024a6:	2300      	movs	r3, #0
 80024a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80024aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80024ae:	4642      	mov	r2, r8
 80024b0:	464b      	mov	r3, r9
 80024b2:	f04f 0000 	mov.w	r0, #0
 80024b6:	f04f 0100 	mov.w	r1, #0
 80024ba:	0159      	lsls	r1, r3, #5
 80024bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c0:	0150      	lsls	r0, r2, #5
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4641      	mov	r1, r8
 80024c8:	1a51      	subs	r1, r2, r1
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	4649      	mov	r1, r9
 80024ce:	eb63 0301 	sbc.w	r3, r3, r1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80024e0:	4659      	mov	r1, fp
 80024e2:	018b      	lsls	r3, r1, #6
 80024e4:	4651      	mov	r1, sl
 80024e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ea:	4651      	mov	r1, sl
 80024ec:	018a      	lsls	r2, r1, #6
 80024ee:	4651      	mov	r1, sl
 80024f0:	1a54      	subs	r4, r2, r1
 80024f2:	4659      	mov	r1, fp
 80024f4:	eb63 0501 	sbc.w	r5, r3, r1
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	00eb      	lsls	r3, r5, #3
 8002502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002506:	00e2      	lsls	r2, r4, #3
 8002508:	4614      	mov	r4, r2
 800250a:	461d      	mov	r5, r3
 800250c:	4643      	mov	r3, r8
 800250e:	18e3      	adds	r3, r4, r3
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	464b      	mov	r3, r9
 8002514:	eb45 0303 	adc.w	r3, r5, r3
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002526:	4629      	mov	r1, r5
 8002528:	028b      	lsls	r3, r1, #10
 800252a:	4621      	mov	r1, r4
 800252c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002530:	4621      	mov	r1, r4
 8002532:	028a      	lsls	r2, r1, #10
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800253c:	2200      	movs	r2, #0
 800253e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002540:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002542:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002546:	f7fe fb4f 	bl	8000be8 <__aeabi_uldivmod>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4613      	mov	r3, r2
 8002550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002554:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <HAL_RCC_GetSysClockFreq+0x458>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	0f1b      	lsrs	r3, r3, #28
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002562:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002572:	e003      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800257a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800257c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002580:	4618      	mov	r0, r3
 8002582:	37b8      	adds	r7, #184	@ 0xb8
 8002584:	46bd      	mov	sp, r7
 8002586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	00f42400 	.word	0x00f42400

08002594 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e28d      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8083 	beq.w	80026ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025b4:	4b94      	ldr	r3, [pc, #592]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 030c 	and.w	r3, r3, #12
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d019      	beq.n	80025f4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025c0:	4b91      	ldr	r3, [pc, #580]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 030c 	and.w	r3, r3, #12
        || \
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d106      	bne.n	80025da <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025cc:	4b8e      	ldr	r3, [pc, #568]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025d8:	d00c      	beq.n	80025f4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025da:	4b8b      	ldr	r3, [pc, #556]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025e2:	2b0c      	cmp	r3, #12
 80025e4:	d112      	bne.n	800260c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025e6:	4b88      	ldr	r3, [pc, #544]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025f2:	d10b      	bne.n	800260c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f4:	4b84      	ldr	r3, [pc, #528]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d05b      	beq.n	80026b8 <HAL_RCC_OscConfig+0x124>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d157      	bne.n	80026b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e25a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002614:	d106      	bne.n	8002624 <HAL_RCC_OscConfig+0x90>
 8002616:	4b7c      	ldr	r3, [pc, #496]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a7b      	ldr	r2, [pc, #492]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e01d      	b.n	8002660 <HAL_RCC_OscConfig+0xcc>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0xb4>
 800262e:	4b76      	ldr	r3, [pc, #472]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a75      	ldr	r2, [pc, #468]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 8002634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b73      	ldr	r3, [pc, #460]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a72      	ldr	r2, [pc, #456]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	e00b      	b.n	8002660 <HAL_RCC_OscConfig+0xcc>
 8002648:	4b6f      	ldr	r3, [pc, #444]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a6e      	ldr	r2, [pc, #440]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 800264e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b6c      	ldr	r3, [pc, #432]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a6b      	ldr	r2, [pc, #428]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 800265a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800265e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff f8c8 	bl	80017fc <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff f8c4 	bl	80017fc <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	@ 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e21f      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	4b61      	ldr	r3, [pc, #388]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0xdc>
 800268e:	e014      	b.n	80026ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7ff f8b4 	bl	80017fc <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002698:	f7ff f8b0 	bl	80017fc <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	@ 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e20b      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	4b57      	ldr	r3, [pc, #348]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x104>
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d06f      	beq.n	80027a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026c6:	4b50      	ldr	r3, [pc, #320]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d017      	beq.n	8002702 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
        || \
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d105      	bne.n	80026ea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026de:	4b4a      	ldr	r3, [pc, #296]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ea:	4b47      	ldr	r3, [pc, #284]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026f2:	2b0c      	cmp	r3, #12
 80026f4:	d11c      	bne.n	8002730 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f6:	4b44      	ldr	r3, [pc, #272]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d116      	bne.n	8002730 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002702:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_RCC_OscConfig+0x186>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e1d3      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	4b3b      	ldr	r3, [pc, #236]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4937      	ldr	r1, [pc, #220]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272e:	e03a      	b.n	80027a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002738:	4b34      	ldr	r3, [pc, #208]	@ (800280c <HAL_RCC_OscConfig+0x278>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273e:	f7ff f85d 	bl	80017fc <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002746:	f7ff f859 	bl	80017fc <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e1b4      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002758:	4b2b      	ldr	r3, [pc, #172]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002764:	4b28      	ldr	r3, [pc, #160]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4925      	ldr	r1, [pc, #148]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 8002774:	4313      	orrs	r3, r2
 8002776:	600b      	str	r3, [r1, #0]
 8002778:	e015      	b.n	80027a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277a:	4b24      	ldr	r3, [pc, #144]	@ (800280c <HAL_RCC_OscConfig+0x278>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7ff f83c 	bl	80017fc <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002788:	f7ff f838 	bl	80017fc <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e193      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279a:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d036      	beq.n	8002820 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d016      	beq.n	80027e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <HAL_RCC_OscConfig+0x27c>)
 80027bc:	2201      	movs	r2, #1
 80027be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7ff f81c 	bl	80017fc <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c8:	f7ff f818 	bl	80017fc <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e173      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027da:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <HAL_RCC_OscConfig+0x274>)
 80027dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x234>
 80027e6:	e01b      	b.n	8002820 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e8:	4b09      	ldr	r3, [pc, #36]	@ (8002810 <HAL_RCC_OscConfig+0x27c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ee:	f7ff f805 	bl	80017fc <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f4:	e00e      	b.n	8002814 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f6:	f7ff f801 	bl	80017fc <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d907      	bls.n	8002814 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e15c      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
 8002808:	40023800 	.word	0x40023800
 800280c:	42470000 	.word	0x42470000
 8002810:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	4b8a      	ldr	r3, [pc, #552]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 8002816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1ea      	bne.n	80027f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 8097 	beq.w	800295c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002832:	4b83      	ldr	r3, [pc, #524]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10f      	bne.n	800285e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	4b7f      	ldr	r3, [pc, #508]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	4a7e      	ldr	r2, [pc, #504]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 8002848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800284c:	6413      	str	r3, [r2, #64]	@ 0x40
 800284e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285a:	2301      	movs	r3, #1
 800285c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	4b79      	ldr	r3, [pc, #484]	@ (8002a44 <HAL_RCC_OscConfig+0x4b0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d118      	bne.n	800289c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286a:	4b76      	ldr	r3, [pc, #472]	@ (8002a44 <HAL_RCC_OscConfig+0x4b0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a75      	ldr	r2, [pc, #468]	@ (8002a44 <HAL_RCC_OscConfig+0x4b0>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002876:	f7fe ffc1 	bl	80017fc <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287e:	f7fe ffbd 	bl	80017fc <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e118      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	4b6c      	ldr	r3, [pc, #432]	@ (8002a44 <HAL_RCC_OscConfig+0x4b0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x31e>
 80028a4:	4b66      	ldr	r3, [pc, #408]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a8:	4a65      	ldr	r2, [pc, #404]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b0:	e01c      	b.n	80028ec <HAL_RCC_OscConfig+0x358>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x340>
 80028ba:	4b61      	ldr	r3, [pc, #388]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028be:	4a60      	ldr	r2, [pc, #384]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ca:	4a5d      	ldr	r2, [pc, #372]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0x358>
 80028d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d8:	4a59      	ldr	r2, [pc, #356]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e0:	4b57      	ldr	r3, [pc, #348]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e4:	4a56      	ldr	r2, [pc, #344]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 80028e6:	f023 0304 	bic.w	r3, r3, #4
 80028ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d015      	beq.n	8002920 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe ff82 	bl	80017fc <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe ff7e 	bl	80017fc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0d7      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002912:	4b4b      	ldr	r3, [pc, #300]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0ee      	beq.n	80028fc <HAL_RCC_OscConfig+0x368>
 800291e:	e014      	b.n	800294a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7fe ff6c 	bl	80017fc <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002926:	e00a      	b.n	800293e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002928:	f7fe ff68 	bl	80017fc <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e0c1      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293e:	4b40      	ldr	r3, [pc, #256]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1ee      	bne.n	8002928 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002950:	4b3b      	ldr	r3, [pc, #236]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	4a3a      	ldr	r2, [pc, #232]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 8002956:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800295a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80ad 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002966:	4b36      	ldr	r3, [pc, #216]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b08      	cmp	r3, #8
 8002970:	d060      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d145      	bne.n	8002a06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b33      	ldr	r3, [pc, #204]	@ (8002a48 <HAL_RCC_OscConfig+0x4b4>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe ff3c 	bl	80017fc <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002988:	f7fe ff38 	bl	80017fc <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e093      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	4b29      	ldr	r3, [pc, #164]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	019b      	lsls	r3, r3, #6
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	085b      	lsrs	r3, r3, #1
 80029be:	3b01      	subs	r3, #1
 80029c0:	041b      	lsls	r3, r3, #16
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	061b      	lsls	r3, r3, #24
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	071b      	lsls	r3, r3, #28
 80029d2:	491b      	ldr	r1, [pc, #108]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <HAL_RCC_OscConfig+0x4b4>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7fe ff0d 	bl	80017fc <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e6:	f7fe ff09 	bl	80017fc <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e064      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f8:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x452>
 8002a04:	e05c      	b.n	8002ac0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a06:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <HAL_RCC_OscConfig+0x4b4>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fef6 	bl	80017fc <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe fef2 	bl	80017fc <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e04d      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a26:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <HAL_RCC_OscConfig+0x4ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x480>
 8002a32:	e045      	b.n	8002ac0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e040      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40007000 	.word	0x40007000
 8002a48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002acc <HAL_RCC_OscConfig+0x538>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d030      	beq.n	8002abc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d129      	bne.n	8002abc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d122      	bne.n	8002abc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d119      	bne.n	8002abc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a92:	085b      	lsrs	r3, r3, #1
 8002a94:	3b01      	subs	r3, #1
 8002a96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d10f      	bne.n	8002abc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d107      	bne.n	8002abc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e042      	b.n	8002b68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe fc8e 	bl	8001418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2224      	movs	r2, #36	@ 0x24
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fdb3 	bl	8003680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	@ 0x28
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d175      	bne.n	8002c7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_UART_Transmit+0x2c>
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e06e      	b.n	8002c7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2221      	movs	r2, #33	@ 0x21
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bae:	f7fe fe25 	bl	80017fc <HAL_GetTick>
 8002bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	88fa      	ldrh	r2, [r7, #6]
 8002bb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	88fa      	ldrh	r2, [r7, #6]
 8002bbe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bc8:	d108      	bne.n	8002bdc <HAL_UART_Transmit+0x6c>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d104      	bne.n	8002bdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	e003      	b.n	8002be4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002be4:	e02e      	b.n	8002c44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2180      	movs	r1, #128	@ 0x80
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fb15 	bl	8003220 <UART_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e03a      	b.n	8002c7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10b      	bne.n	8002c26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	3302      	adds	r3, #2
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	e007      	b.n	8002c36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	3301      	adds	r3, #1
 8002c34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1cb      	bne.n	8002be6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2200      	movs	r2, #0
 8002c56:	2140      	movs	r1, #64	@ 0x40
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 fae1 	bl	8003220 <UART_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e006      	b.n	8002c7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e000      	b.n	8002c7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	4613      	mov	r3, r2
 8002c92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d112      	bne.n	8002cc6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <HAL_UART_Receive_IT+0x26>
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e00b      	b.n	8002cc8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fb08 	bl	80032d2 <UART_Start_Receive_IT>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	e000      	b.n	8002cc8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
  }
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b0ba      	sub	sp, #232	@ 0xe8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002d0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10f      	bne.n	8002d36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <HAL_UART_IRQHandler+0x66>
 8002d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fbe8 	bl	8003504 <UART_Receive_IT>
      return;
 8002d34:	e25b      	b.n	80031ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80de 	beq.w	8002efc <HAL_UART_IRQHandler+0x22c>
 8002d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d106      	bne.n	8002d5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d50:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80d1 	beq.w	8002efc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_UART_IRQHandler+0xae>
 8002d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f043 0201 	orr.w	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_UART_IRQHandler+0xd2>
 8002d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	f043 0202 	orr.w	r2, r3, #2
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_UART_IRQHandler+0xf6>
 8002dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	f043 0204 	orr.w	r2, r3, #4
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d011      	beq.n	8002df6 <HAL_UART_IRQHandler+0x126>
 8002dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d105      	bne.n	8002dea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	f043 0208 	orr.w	r2, r3, #8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 81f2 	beq.w	80031e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_UART_IRQHandler+0x14e>
 8002e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fb73 	bl	8003504 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e28:	2b40      	cmp	r3, #64	@ 0x40
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <HAL_UART_IRQHandler+0x17a>
 8002e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d04f      	beq.n	8002eea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fa7b 	bl	8003346 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5a:	2b40      	cmp	r3, #64	@ 0x40
 8002e5c:	d141      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3314      	adds	r3, #20
 8002e64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e6c:	e853 3f00 	ldrex	r3, [r3]
 8002e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3314      	adds	r3, #20
 8002e86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e9a:	e841 2300 	strex	r3, r2, [r1]
 8002e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1d9      	bne.n	8002e5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d013      	beq.n	8002eda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80030b0 <HAL_UART_IRQHandler+0x3e0>)
 8002eb8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fe4d 	bl	8001b5e <HAL_DMA_Abort_IT>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d016      	beq.n	8002ef8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed8:	e00e      	b.n	8002ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fe f9e0 	bl	80012a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee0:	e00a      	b.n	8002ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe f9dc 	bl	80012a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee8:	e006      	b.n	8002ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fe f9d8 	bl	80012a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002ef6:	e175      	b.n	80031e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef8:	bf00      	nop
    return;
 8002efa:	e173      	b.n	80031e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	f040 814f 	bne.w	80031a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8148 	beq.w	80031a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 8141 	beq.w	80031a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f42:	2b40      	cmp	r3, #64	@ 0x40
 8002f44:	f040 80b6 	bne.w	80030b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8145 	beq.w	80031e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f66:	429a      	cmp	r2, r3
 8002f68:	f080 813e 	bcs.w	80031e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f7e:	f000 8088 	beq.w	8003092 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	330c      	adds	r3, #12
 8002f88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	330c      	adds	r3, #12
 8002faa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002fae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002fba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1d9      	bne.n	8002f82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3314      	adds	r3, #20
 8002fd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fd8:	e853 3f00 	ldrex	r3, [r3]
 8002fdc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002fde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3314      	adds	r3, #20
 8002fee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ff2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002ff6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ffa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ffe:	e841 2300 	strex	r3, r2, [r1]
 8003002:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003004:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e1      	bne.n	8002fce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3314      	adds	r3, #20
 8003010:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003012:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003014:	e853 3f00 	ldrex	r3, [r3]
 8003018:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800301a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800301c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3314      	adds	r3, #20
 800302a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800302e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003030:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003034:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800303c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e3      	bne.n	800300a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	330c      	adds	r3, #12
 8003056:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800305a:	e853 3f00 	ldrex	r3, [r3]
 800305e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003062:	f023 0310 	bic.w	r3, r3, #16
 8003066:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	330c      	adds	r3, #12
 8003070:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003074:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003076:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003078:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800307a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800307c:	e841 2300 	strex	r3, r2, [r1]
 8003080:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e3      	bne.n	8003050 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe fcf6 	bl	8001a7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f8ad 	bl	8003208 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030ae:	e09b      	b.n	80031e8 <HAL_UART_IRQHandler+0x518>
 80030b0:	0800340d 	.word	0x0800340d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030bc:	b29b      	uxth	r3, r3
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 808e 	beq.w	80031ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80030d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 8089 	beq.w	80031ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	330c      	adds	r3, #12
 80030e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e4:	e853 3f00 	ldrex	r3, [r3]
 80030e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80030ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80030fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8003100:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003102:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003104:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003106:	e841 2300 	strex	r3, r2, [r1]
 800310a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800310c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1e3      	bne.n	80030da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3314      	adds	r3, #20
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311c:	e853 3f00 	ldrex	r3, [r3]
 8003120:	623b      	str	r3, [r7, #32]
   return(result);
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3314      	adds	r3, #20
 8003132:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003136:	633a      	str	r2, [r7, #48]	@ 0x30
 8003138:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800313c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e3      	bne.n	8003112 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	e853 3f00 	ldrex	r3, [r3]
 8003166:	60fb      	str	r3, [r7, #12]
   return(result);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0310 	bic.w	r3, r3, #16
 800316e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800317c:	61fa      	str	r2, [r7, #28]
 800317e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003180:	69b9      	ldr	r1, [r7, #24]
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	e841 2300 	strex	r3, r2, [r1]
 8003188:	617b      	str	r3, [r7, #20]
   return(result);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e3      	bne.n	8003158 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003196:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f833 	bl	8003208 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031a2:	e023      	b.n	80031ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d009      	beq.n	80031c4 <HAL_UART_IRQHandler+0x4f4>
 80031b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f939 	bl	8003434 <UART_Transmit_IT>
    return;
 80031c2:	e014      	b.n	80031ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00e      	beq.n	80031ee <HAL_UART_IRQHandler+0x51e>
 80031d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f979 	bl	80034d4 <UART_EndTransmit_IT>
    return;
 80031e2:	e004      	b.n	80031ee <HAL_UART_IRQHandler+0x51e>
    return;
 80031e4:	bf00      	nop
 80031e6:	e002      	b.n	80031ee <HAL_UART_IRQHandler+0x51e>
      return;
 80031e8:	bf00      	nop
 80031ea:	e000      	b.n	80031ee <HAL_UART_IRQHandler+0x51e>
      return;
 80031ec:	bf00      	nop
  }
}
 80031ee:	37e8      	adds	r7, #232	@ 0xe8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	4613      	mov	r3, r2
 800322e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003230:	e03b      	b.n	80032aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d037      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7fe fadf 	bl	80017fc <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <UART_WaitOnFlagUntilTimeout+0x30>
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e03a      	b.n	80032ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d023      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b80      	cmp	r3, #128	@ 0x80
 8003266:	d020      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b40      	cmp	r3, #64	@ 0x40
 800326c:	d01d      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b08      	cmp	r3, #8
 800327a:	d116      	bne.n	80032aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f857 	bl	8003346 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2208      	movs	r2, #8
 800329c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e00f      	b.n	80032ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4013      	ands	r3, r2
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	bf0c      	ite	eq
 80032ba:	2301      	moveq	r3, #1
 80032bc:	2300      	movne	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d0b4      	beq.n	8003232 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	4613      	mov	r3, r2
 80032de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	88fa      	ldrh	r2, [r7, #6]
 80032ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	88fa      	ldrh	r2, [r7, #6]
 80032f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2222      	movs	r2, #34	@ 0x22
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d007      	beq.n	8003318 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003316:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0220 	orr.w	r2, r2, #32
 8003336:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003346:	b480      	push	{r7}
 8003348:	b095      	sub	sp, #84	@ 0x54
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003360:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	330c      	adds	r3, #12
 800336c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800336e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003374:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800337c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e5      	bne.n	800334e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3314      	adds	r3, #20
 8003388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	61fb      	str	r3, [r7, #28]
   return(result);
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3314      	adds	r3, #20
 80033a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e5      	bne.n	8003382 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d119      	bne.n	80033f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	330c      	adds	r3, #12
 80033c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	e853 3f00 	ldrex	r3, [r3]
 80033cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f023 0310 	bic.w	r3, r3, #16
 80033d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	330c      	adds	r3, #12
 80033dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033de:	61ba      	str	r2, [r7, #24]
 80033e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e2:	6979      	ldr	r1, [r7, #20]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	e841 2300 	strex	r3, r2, [r1]
 80033ea:	613b      	str	r3, [r7, #16]
   return(result);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e5      	bne.n	80033be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003400:	bf00      	nop
 8003402:	3754      	adds	r7, #84	@ 0x54
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003418:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7fd ff3a 	bl	80012a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b21      	cmp	r3, #33	@ 0x21
 8003446:	d13e      	bne.n	80034c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003450:	d114      	bne.n	800347c <UART_Transmit_IT+0x48>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d110      	bne.n	800347c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800346e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	1c9a      	adds	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	621a      	str	r2, [r3, #32]
 800347a:	e008      	b.n	800348e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	1c59      	adds	r1, r3, #1
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6211      	str	r1, [r2, #32]
 8003486:	781a      	ldrb	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29b      	uxth	r3, r3
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	4619      	mov	r1, r3
 800349c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10f      	bne.n	80034c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e000      	b.n	80034c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
  }
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff fe7d 	bl	80031f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08c      	sub	sp, #48	@ 0x30
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b22      	cmp	r3, #34	@ 0x22
 8003516:	f040 80ae 	bne.w	8003676 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003522:	d117      	bne.n	8003554 <UART_Receive_IT+0x50>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d113      	bne.n	8003554 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800352c:	2300      	movs	r3, #0
 800352e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003534:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	b29b      	uxth	r3, r3
 800353e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003542:	b29a      	uxth	r2, r3
 8003544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003546:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354c:	1c9a      	adds	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	629a      	str	r2, [r3, #40]	@ 0x28
 8003552:	e026      	b.n	80035a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800355a:	2300      	movs	r3, #0
 800355c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003566:	d007      	beq.n	8003578 <UART_Receive_IT+0x74>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10a      	bne.n	8003586 <UART_Receive_IT+0x82>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d106      	bne.n	8003586 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	b2da      	uxtb	r2, r3
 8003580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	e008      	b.n	8003598 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003592:	b2da      	uxtb	r2, r3
 8003594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003596:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	4619      	mov	r1, r3
 80035b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d15d      	bne.n	8003672 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0220 	bic.w	r2, r2, #32
 80035c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d135      	bne.n	8003668 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	613b      	str	r3, [r7, #16]
   return(result);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f023 0310 	bic.w	r3, r3, #16
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
 8003620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003622:	623a      	str	r2, [r7, #32]
 8003624:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	69f9      	ldr	r1, [r7, #28]
 8003628:	6a3a      	ldr	r2, [r7, #32]
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e5      	bne.n	8003602 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b10      	cmp	r3, #16
 8003642:	d10a      	bne.n	800365a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800365e:	4619      	mov	r1, r3
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff fdd1 	bl	8003208 <HAL_UARTEx_RxEventCallback>
 8003666:	e002      	b.n	800366e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7fd fdcb 	bl	8001204 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	e002      	b.n	8003678 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
  }
}
 8003678:	4618      	mov	r0, r3
 800367a:	3730      	adds	r7, #48	@ 0x30
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003684:	b0c0      	sub	sp, #256	@ 0x100
 8003686:	af00      	add	r7, sp, #0
 8003688:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369c:	68d9      	ldr	r1, [r3, #12]
 800369e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	ea40 0301 	orr.w	r3, r0, r1
 80036a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	431a      	orrs	r2, r3
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80036d8:	f021 010c 	bic.w	r1, r1, #12
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036e6:	430b      	orrs	r3, r1
 80036e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fa:	6999      	ldr	r1, [r3, #24]
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	ea40 0301 	orr.w	r3, r0, r1
 8003706:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4b8f      	ldr	r3, [pc, #572]	@ (800394c <UART_SetConfig+0x2cc>)
 8003710:	429a      	cmp	r2, r3
 8003712:	d005      	beq.n	8003720 <UART_SetConfig+0xa0>
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4b8d      	ldr	r3, [pc, #564]	@ (8003950 <UART_SetConfig+0x2d0>)
 800371c:	429a      	cmp	r2, r3
 800371e:	d104      	bne.n	800372a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003720:	f7fe fcf4 	bl	800210c <HAL_RCC_GetPCLK2Freq>
 8003724:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003728:	e003      	b.n	8003732 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800372a:	f7fe fcdb 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 800372e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800373c:	f040 810c 	bne.w	8003958 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003744:	2200      	movs	r2, #0
 8003746:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800374a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800374e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003752:	4622      	mov	r2, r4
 8003754:	462b      	mov	r3, r5
 8003756:	1891      	adds	r1, r2, r2
 8003758:	65b9      	str	r1, [r7, #88]	@ 0x58
 800375a:	415b      	adcs	r3, r3
 800375c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800375e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003762:	4621      	mov	r1, r4
 8003764:	eb12 0801 	adds.w	r8, r2, r1
 8003768:	4629      	mov	r1, r5
 800376a:	eb43 0901 	adc.w	r9, r3, r1
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800377a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800377e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003782:	4690      	mov	r8, r2
 8003784:	4699      	mov	r9, r3
 8003786:	4623      	mov	r3, r4
 8003788:	eb18 0303 	adds.w	r3, r8, r3
 800378c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003790:	462b      	mov	r3, r5
 8003792:	eb49 0303 	adc.w	r3, r9, r3
 8003796:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800379a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037ae:	460b      	mov	r3, r1
 80037b0:	18db      	adds	r3, r3, r3
 80037b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80037b4:	4613      	mov	r3, r2
 80037b6:	eb42 0303 	adc.w	r3, r2, r3
 80037ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80037bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037c4:	f7fd fa10 	bl	8000be8 <__aeabi_uldivmod>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4b61      	ldr	r3, [pc, #388]	@ (8003954 <UART_SetConfig+0x2d4>)
 80037ce:	fba3 2302 	umull	r2, r3, r3, r2
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	011c      	lsls	r4, r3, #4
 80037d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037da:	2200      	movs	r2, #0
 80037dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80037e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80037e8:	4642      	mov	r2, r8
 80037ea:	464b      	mov	r3, r9
 80037ec:	1891      	adds	r1, r2, r2
 80037ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80037f0:	415b      	adcs	r3, r3
 80037f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037f8:	4641      	mov	r1, r8
 80037fa:	eb12 0a01 	adds.w	sl, r2, r1
 80037fe:	4649      	mov	r1, r9
 8003800:	eb43 0b01 	adc.w	fp, r3, r1
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003810:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003814:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003818:	4692      	mov	sl, r2
 800381a:	469b      	mov	fp, r3
 800381c:	4643      	mov	r3, r8
 800381e:	eb1a 0303 	adds.w	r3, sl, r3
 8003822:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003826:	464b      	mov	r3, r9
 8003828:	eb4b 0303 	adc.w	r3, fp, r3
 800382c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800383c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003840:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003844:	460b      	mov	r3, r1
 8003846:	18db      	adds	r3, r3, r3
 8003848:	643b      	str	r3, [r7, #64]	@ 0x40
 800384a:	4613      	mov	r3, r2
 800384c:	eb42 0303 	adc.w	r3, r2, r3
 8003850:	647b      	str	r3, [r7, #68]	@ 0x44
 8003852:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003856:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800385a:	f7fd f9c5 	bl	8000be8 <__aeabi_uldivmod>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4611      	mov	r1, r2
 8003864:	4b3b      	ldr	r3, [pc, #236]	@ (8003954 <UART_SetConfig+0x2d4>)
 8003866:	fba3 2301 	umull	r2, r3, r3, r1
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2264      	movs	r2, #100	@ 0x64
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	1acb      	subs	r3, r1, r3
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800387a:	4b36      	ldr	r3, [pc, #216]	@ (8003954 <UART_SetConfig+0x2d4>)
 800387c:	fba3 2302 	umull	r2, r3, r3, r2
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003888:	441c      	add	r4, r3
 800388a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800388e:	2200      	movs	r2, #0
 8003890:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003894:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003898:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800389c:	4642      	mov	r2, r8
 800389e:	464b      	mov	r3, r9
 80038a0:	1891      	adds	r1, r2, r2
 80038a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038a4:	415b      	adcs	r3, r3
 80038a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80038ac:	4641      	mov	r1, r8
 80038ae:	1851      	adds	r1, r2, r1
 80038b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80038b2:	4649      	mov	r1, r9
 80038b4:	414b      	adcs	r3, r1
 80038b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038c4:	4659      	mov	r1, fp
 80038c6:	00cb      	lsls	r3, r1, #3
 80038c8:	4651      	mov	r1, sl
 80038ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ce:	4651      	mov	r1, sl
 80038d0:	00ca      	lsls	r2, r1, #3
 80038d2:	4610      	mov	r0, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	4603      	mov	r3, r0
 80038d8:	4642      	mov	r2, r8
 80038da:	189b      	adds	r3, r3, r2
 80038dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038e0:	464b      	mov	r3, r9
 80038e2:	460a      	mov	r2, r1
 80038e4:	eb42 0303 	adc.w	r3, r2, r3
 80038e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003900:	460b      	mov	r3, r1
 8003902:	18db      	adds	r3, r3, r3
 8003904:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003906:	4613      	mov	r3, r2
 8003908:	eb42 0303 	adc.w	r3, r2, r3
 800390c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800390e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003912:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003916:	f7fd f967 	bl	8000be8 <__aeabi_uldivmod>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4b0d      	ldr	r3, [pc, #52]	@ (8003954 <UART_SetConfig+0x2d4>)
 8003920:	fba3 1302 	umull	r1, r3, r3, r2
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	2164      	movs	r1, #100	@ 0x64
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	3332      	adds	r3, #50	@ 0x32
 8003932:	4a08      	ldr	r2, [pc, #32]	@ (8003954 <UART_SetConfig+0x2d4>)
 8003934:	fba2 2303 	umull	r2, r3, r2, r3
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	f003 0207 	and.w	r2, r3, #7
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4422      	add	r2, r4
 8003946:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003948:	e106      	b.n	8003b58 <UART_SetConfig+0x4d8>
 800394a:	bf00      	nop
 800394c:	40011000 	.word	0x40011000
 8003950:	40011400 	.word	0x40011400
 8003954:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800395c:	2200      	movs	r2, #0
 800395e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003962:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003966:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800396a:	4642      	mov	r2, r8
 800396c:	464b      	mov	r3, r9
 800396e:	1891      	adds	r1, r2, r2
 8003970:	6239      	str	r1, [r7, #32]
 8003972:	415b      	adcs	r3, r3
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
 8003976:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800397a:	4641      	mov	r1, r8
 800397c:	1854      	adds	r4, r2, r1
 800397e:	4649      	mov	r1, r9
 8003980:	eb43 0501 	adc.w	r5, r3, r1
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	00eb      	lsls	r3, r5, #3
 800398e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003992:	00e2      	lsls	r2, r4, #3
 8003994:	4614      	mov	r4, r2
 8003996:	461d      	mov	r5, r3
 8003998:	4643      	mov	r3, r8
 800399a:	18e3      	adds	r3, r4, r3
 800399c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039a0:	464b      	mov	r3, r9
 80039a2:	eb45 0303 	adc.w	r3, r5, r3
 80039a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80039c6:	4629      	mov	r1, r5
 80039c8:	008b      	lsls	r3, r1, #2
 80039ca:	4621      	mov	r1, r4
 80039cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039d0:	4621      	mov	r1, r4
 80039d2:	008a      	lsls	r2, r1, #2
 80039d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80039d8:	f7fd f906 	bl	8000be8 <__aeabi_uldivmod>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4b60      	ldr	r3, [pc, #384]	@ (8003b64 <UART_SetConfig+0x4e4>)
 80039e2:	fba3 2302 	umull	r2, r3, r3, r2
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	011c      	lsls	r4, r3, #4
 80039ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039fc:	4642      	mov	r2, r8
 80039fe:	464b      	mov	r3, r9
 8003a00:	1891      	adds	r1, r2, r2
 8003a02:	61b9      	str	r1, [r7, #24]
 8003a04:	415b      	adcs	r3, r3
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	1851      	adds	r1, r2, r1
 8003a10:	6139      	str	r1, [r7, #16]
 8003a12:	4649      	mov	r1, r9
 8003a14:	414b      	adcs	r3, r1
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a24:	4659      	mov	r1, fp
 8003a26:	00cb      	lsls	r3, r1, #3
 8003a28:	4651      	mov	r1, sl
 8003a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a2e:	4651      	mov	r1, sl
 8003a30:	00ca      	lsls	r2, r1, #3
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	4642      	mov	r2, r8
 8003a3a:	189b      	adds	r3, r3, r2
 8003a3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a40:	464b      	mov	r3, r9
 8003a42:	460a      	mov	r2, r1
 8003a44:	eb42 0303 	adc.w	r3, r2, r3
 8003a48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a64:	4649      	mov	r1, r9
 8003a66:	008b      	lsls	r3, r1, #2
 8003a68:	4641      	mov	r1, r8
 8003a6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a6e:	4641      	mov	r1, r8
 8003a70:	008a      	lsls	r2, r1, #2
 8003a72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a76:	f7fd f8b7 	bl	8000be8 <__aeabi_uldivmod>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4b38      	ldr	r3, [pc, #224]	@ (8003b64 <UART_SetConfig+0x4e4>)
 8003a82:	fba3 2301 	umull	r2, r3, r3, r1
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	2264      	movs	r2, #100	@ 0x64
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	1acb      	subs	r3, r1, r3
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	3332      	adds	r3, #50	@ 0x32
 8003a94:	4a33      	ldr	r2, [pc, #204]	@ (8003b64 <UART_SetConfig+0x4e4>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003aa0:	441c      	add	r4, r3
 8003aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003aaa:	677a      	str	r2, [r7, #116]	@ 0x74
 8003aac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	1891      	adds	r1, r2, r2
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	415b      	adcs	r3, r3
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ac0:	4641      	mov	r1, r8
 8003ac2:	1851      	adds	r1, r2, r1
 8003ac4:	6039      	str	r1, [r7, #0]
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	414b      	adcs	r3, r1
 8003aca:	607b      	str	r3, [r7, #4]
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ad8:	4659      	mov	r1, fp
 8003ada:	00cb      	lsls	r3, r1, #3
 8003adc:	4651      	mov	r1, sl
 8003ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ae2:	4651      	mov	r1, sl
 8003ae4:	00ca      	lsls	r2, r1, #3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	4642      	mov	r2, r8
 8003aee:	189b      	adds	r3, r3, r2
 8003af0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003af2:	464b      	mov	r3, r9
 8003af4:	460a      	mov	r2, r1
 8003af6:	eb42 0303 	adc.w	r3, r2, r3
 8003afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b06:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b14:	4649      	mov	r1, r9
 8003b16:	008b      	lsls	r3, r1, #2
 8003b18:	4641      	mov	r1, r8
 8003b1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b1e:	4641      	mov	r1, r8
 8003b20:	008a      	lsls	r2, r1, #2
 8003b22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b26:	f7fd f85f 	bl	8000be8 <__aeabi_uldivmod>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <UART_SetConfig+0x4e4>)
 8003b30:	fba3 1302 	umull	r1, r3, r3, r2
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	2164      	movs	r1, #100	@ 0x64
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	3332      	adds	r3, #50	@ 0x32
 8003b42:	4a08      	ldr	r2, [pc, #32]	@ (8003b64 <UART_SetConfig+0x4e4>)
 8003b44:	fba2 2303 	umull	r2, r3, r2, r3
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	f003 020f 	and.w	r2, r3, #15
 8003b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4422      	add	r2, r4
 8003b56:	609a      	str	r2, [r3, #8]
}
 8003b58:	bf00      	nop
 8003b5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b64:	51eb851f 	.word	0x51eb851f

08003b68 <atoi>:
 8003b68:	220a      	movs	r2, #10
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	f000 b87a 	b.w	8003c64 <strtol>

08003b70 <_strtol_l.constprop.0>:
 8003b70:	2b24      	cmp	r3, #36	@ 0x24
 8003b72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b76:	4686      	mov	lr, r0
 8003b78:	4690      	mov	r8, r2
 8003b7a:	d801      	bhi.n	8003b80 <_strtol_l.constprop.0+0x10>
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d106      	bne.n	8003b8e <_strtol_l.constprop.0+0x1e>
 8003b80:	f000 fe3c 	bl	80047fc <__errno>
 8003b84:	2316      	movs	r3, #22
 8003b86:	6003      	str	r3, [r0, #0]
 8003b88:	2000      	movs	r0, #0
 8003b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b8e:	4834      	ldr	r0, [pc, #208]	@ (8003c60 <_strtol_l.constprop.0+0xf0>)
 8003b90:	460d      	mov	r5, r1
 8003b92:	462a      	mov	r2, r5
 8003b94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b98:	5d06      	ldrb	r6, [r0, r4]
 8003b9a:	f016 0608 	ands.w	r6, r6, #8
 8003b9e:	d1f8      	bne.n	8003b92 <_strtol_l.constprop.0+0x22>
 8003ba0:	2c2d      	cmp	r4, #45	@ 0x2d
 8003ba2:	d12d      	bne.n	8003c00 <_strtol_l.constprop.0+0x90>
 8003ba4:	782c      	ldrb	r4, [r5, #0]
 8003ba6:	2601      	movs	r6, #1
 8003ba8:	1c95      	adds	r5, r2, #2
 8003baa:	f033 0210 	bics.w	r2, r3, #16
 8003bae:	d109      	bne.n	8003bc4 <_strtol_l.constprop.0+0x54>
 8003bb0:	2c30      	cmp	r4, #48	@ 0x30
 8003bb2:	d12a      	bne.n	8003c0a <_strtol_l.constprop.0+0x9a>
 8003bb4:	782a      	ldrb	r2, [r5, #0]
 8003bb6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003bba:	2a58      	cmp	r2, #88	@ 0x58
 8003bbc:	d125      	bne.n	8003c0a <_strtol_l.constprop.0+0x9a>
 8003bbe:	786c      	ldrb	r4, [r5, #1]
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	3502      	adds	r5, #2
 8003bc4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003bc8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003bcc:	2200      	movs	r2, #0
 8003bce:	fbbc f9f3 	udiv	r9, ip, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	fb03 ca19 	mls	sl, r3, r9, ip
 8003bd8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003bdc:	2f09      	cmp	r7, #9
 8003bde:	d81b      	bhi.n	8003c18 <_strtol_l.constprop.0+0xa8>
 8003be0:	463c      	mov	r4, r7
 8003be2:	42a3      	cmp	r3, r4
 8003be4:	dd27      	ble.n	8003c36 <_strtol_l.constprop.0+0xc6>
 8003be6:	1c57      	adds	r7, r2, #1
 8003be8:	d007      	beq.n	8003bfa <_strtol_l.constprop.0+0x8a>
 8003bea:	4581      	cmp	r9, r0
 8003bec:	d320      	bcc.n	8003c30 <_strtol_l.constprop.0+0xc0>
 8003bee:	d101      	bne.n	8003bf4 <_strtol_l.constprop.0+0x84>
 8003bf0:	45a2      	cmp	sl, r4
 8003bf2:	db1d      	blt.n	8003c30 <_strtol_l.constprop.0+0xc0>
 8003bf4:	fb00 4003 	mla	r0, r0, r3, r4
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bfe:	e7eb      	b.n	8003bd8 <_strtol_l.constprop.0+0x68>
 8003c00:	2c2b      	cmp	r4, #43	@ 0x2b
 8003c02:	bf04      	itt	eq
 8003c04:	782c      	ldrbeq	r4, [r5, #0]
 8003c06:	1c95      	addeq	r5, r2, #2
 8003c08:	e7cf      	b.n	8003baa <_strtol_l.constprop.0+0x3a>
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1da      	bne.n	8003bc4 <_strtol_l.constprop.0+0x54>
 8003c0e:	2c30      	cmp	r4, #48	@ 0x30
 8003c10:	bf0c      	ite	eq
 8003c12:	2308      	moveq	r3, #8
 8003c14:	230a      	movne	r3, #10
 8003c16:	e7d5      	b.n	8003bc4 <_strtol_l.constprop.0+0x54>
 8003c18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003c1c:	2f19      	cmp	r7, #25
 8003c1e:	d801      	bhi.n	8003c24 <_strtol_l.constprop.0+0xb4>
 8003c20:	3c37      	subs	r4, #55	@ 0x37
 8003c22:	e7de      	b.n	8003be2 <_strtol_l.constprop.0+0x72>
 8003c24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003c28:	2f19      	cmp	r7, #25
 8003c2a:	d804      	bhi.n	8003c36 <_strtol_l.constprop.0+0xc6>
 8003c2c:	3c57      	subs	r4, #87	@ 0x57
 8003c2e:	e7d8      	b.n	8003be2 <_strtol_l.constprop.0+0x72>
 8003c30:	f04f 32ff 	mov.w	r2, #4294967295
 8003c34:	e7e1      	b.n	8003bfa <_strtol_l.constprop.0+0x8a>
 8003c36:	1c53      	adds	r3, r2, #1
 8003c38:	d108      	bne.n	8003c4c <_strtol_l.constprop.0+0xdc>
 8003c3a:	2322      	movs	r3, #34	@ 0x22
 8003c3c:	f8ce 3000 	str.w	r3, [lr]
 8003c40:	4660      	mov	r0, ip
 8003c42:	f1b8 0f00 	cmp.w	r8, #0
 8003c46:	d0a0      	beq.n	8003b8a <_strtol_l.constprop.0+0x1a>
 8003c48:	1e69      	subs	r1, r5, #1
 8003c4a:	e006      	b.n	8003c5a <_strtol_l.constprop.0+0xea>
 8003c4c:	b106      	cbz	r6, 8003c50 <_strtol_l.constprop.0+0xe0>
 8003c4e:	4240      	negs	r0, r0
 8003c50:	f1b8 0f00 	cmp.w	r8, #0
 8003c54:	d099      	beq.n	8003b8a <_strtol_l.constprop.0+0x1a>
 8003c56:	2a00      	cmp	r2, #0
 8003c58:	d1f6      	bne.n	8003c48 <_strtol_l.constprop.0+0xd8>
 8003c5a:	f8c8 1000 	str.w	r1, [r8]
 8003c5e:	e794      	b.n	8003b8a <_strtol_l.constprop.0+0x1a>
 8003c60:	080066e9 	.word	0x080066e9

08003c64 <strtol>:
 8003c64:	4613      	mov	r3, r2
 8003c66:	460a      	mov	r2, r1
 8003c68:	4601      	mov	r1, r0
 8003c6a:	4802      	ldr	r0, [pc, #8]	@ (8003c74 <strtol+0x10>)
 8003c6c:	6800      	ldr	r0, [r0, #0]
 8003c6e:	f7ff bf7f 	b.w	8003b70 <_strtol_l.constprop.0>
 8003c72:	bf00      	nop
 8003c74:	20000018 	.word	0x20000018

08003c78 <__cvt>:
 8003c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c7c:	ec57 6b10 	vmov	r6, r7, d0
 8003c80:	2f00      	cmp	r7, #0
 8003c82:	460c      	mov	r4, r1
 8003c84:	4619      	mov	r1, r3
 8003c86:	463b      	mov	r3, r7
 8003c88:	bfbb      	ittet	lt
 8003c8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003c8e:	461f      	movlt	r7, r3
 8003c90:	2300      	movge	r3, #0
 8003c92:	232d      	movlt	r3, #45	@ 0x2d
 8003c94:	700b      	strb	r3, [r1, #0]
 8003c96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003c9c:	4691      	mov	r9, r2
 8003c9e:	f023 0820 	bic.w	r8, r3, #32
 8003ca2:	bfbc      	itt	lt
 8003ca4:	4632      	movlt	r2, r6
 8003ca6:	4616      	movlt	r6, r2
 8003ca8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003cac:	d005      	beq.n	8003cba <__cvt+0x42>
 8003cae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003cb2:	d100      	bne.n	8003cb6 <__cvt+0x3e>
 8003cb4:	3401      	adds	r4, #1
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	e000      	b.n	8003cbc <__cvt+0x44>
 8003cba:	2103      	movs	r1, #3
 8003cbc:	ab03      	add	r3, sp, #12
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	ab02      	add	r3, sp, #8
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	ec47 6b10 	vmov	d0, r6, r7
 8003cc8:	4653      	mov	r3, sl
 8003cca:	4622      	mov	r2, r4
 8003ccc:	f000 fe4c 	bl	8004968 <_dtoa_r>
 8003cd0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	d119      	bne.n	8003d0c <__cvt+0x94>
 8003cd8:	f019 0f01 	tst.w	r9, #1
 8003cdc:	d00e      	beq.n	8003cfc <__cvt+0x84>
 8003cde:	eb00 0904 	add.w	r9, r0, r4
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	4639      	mov	r1, r7
 8003cea:	f7fc ff0d 	bl	8000b08 <__aeabi_dcmpeq>
 8003cee:	b108      	cbz	r0, 8003cf4 <__cvt+0x7c>
 8003cf0:	f8cd 900c 	str.w	r9, [sp, #12]
 8003cf4:	2230      	movs	r2, #48	@ 0x30
 8003cf6:	9b03      	ldr	r3, [sp, #12]
 8003cf8:	454b      	cmp	r3, r9
 8003cfa:	d31e      	bcc.n	8003d3a <__cvt+0xc2>
 8003cfc:	9b03      	ldr	r3, [sp, #12]
 8003cfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d00:	1b5b      	subs	r3, r3, r5
 8003d02:	4628      	mov	r0, r5
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	b004      	add	sp, #16
 8003d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d10:	eb00 0904 	add.w	r9, r0, r4
 8003d14:	d1e5      	bne.n	8003ce2 <__cvt+0x6a>
 8003d16:	7803      	ldrb	r3, [r0, #0]
 8003d18:	2b30      	cmp	r3, #48	@ 0x30
 8003d1a:	d10a      	bne.n	8003d32 <__cvt+0xba>
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2300      	movs	r3, #0
 8003d20:	4630      	mov	r0, r6
 8003d22:	4639      	mov	r1, r7
 8003d24:	f7fc fef0 	bl	8000b08 <__aeabi_dcmpeq>
 8003d28:	b918      	cbnz	r0, 8003d32 <__cvt+0xba>
 8003d2a:	f1c4 0401 	rsb	r4, r4, #1
 8003d2e:	f8ca 4000 	str.w	r4, [sl]
 8003d32:	f8da 3000 	ldr.w	r3, [sl]
 8003d36:	4499      	add	r9, r3
 8003d38:	e7d3      	b.n	8003ce2 <__cvt+0x6a>
 8003d3a:	1c59      	adds	r1, r3, #1
 8003d3c:	9103      	str	r1, [sp, #12]
 8003d3e:	701a      	strb	r2, [r3, #0]
 8003d40:	e7d9      	b.n	8003cf6 <__cvt+0x7e>

08003d42 <__exponent>:
 8003d42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d44:	2900      	cmp	r1, #0
 8003d46:	bfba      	itte	lt
 8003d48:	4249      	neglt	r1, r1
 8003d4a:	232d      	movlt	r3, #45	@ 0x2d
 8003d4c:	232b      	movge	r3, #43	@ 0x2b
 8003d4e:	2909      	cmp	r1, #9
 8003d50:	7002      	strb	r2, [r0, #0]
 8003d52:	7043      	strb	r3, [r0, #1]
 8003d54:	dd29      	ble.n	8003daa <__exponent+0x68>
 8003d56:	f10d 0307 	add.w	r3, sp, #7
 8003d5a:	461d      	mov	r5, r3
 8003d5c:	270a      	movs	r7, #10
 8003d5e:	461a      	mov	r2, r3
 8003d60:	fbb1 f6f7 	udiv	r6, r1, r7
 8003d64:	fb07 1416 	mls	r4, r7, r6, r1
 8003d68:	3430      	adds	r4, #48	@ 0x30
 8003d6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003d6e:	460c      	mov	r4, r1
 8003d70:	2c63      	cmp	r4, #99	@ 0x63
 8003d72:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d76:	4631      	mov	r1, r6
 8003d78:	dcf1      	bgt.n	8003d5e <__exponent+0x1c>
 8003d7a:	3130      	adds	r1, #48	@ 0x30
 8003d7c:	1e94      	subs	r4, r2, #2
 8003d7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d82:	1c41      	adds	r1, r0, #1
 8003d84:	4623      	mov	r3, r4
 8003d86:	42ab      	cmp	r3, r5
 8003d88:	d30a      	bcc.n	8003da0 <__exponent+0x5e>
 8003d8a:	f10d 0309 	add.w	r3, sp, #9
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	42ac      	cmp	r4, r5
 8003d92:	bf88      	it	hi
 8003d94:	2300      	movhi	r3, #0
 8003d96:	3302      	adds	r3, #2
 8003d98:	4403      	add	r3, r0
 8003d9a:	1a18      	subs	r0, r3, r0
 8003d9c:	b003      	add	sp, #12
 8003d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003da4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003da8:	e7ed      	b.n	8003d86 <__exponent+0x44>
 8003daa:	2330      	movs	r3, #48	@ 0x30
 8003dac:	3130      	adds	r1, #48	@ 0x30
 8003dae:	7083      	strb	r3, [r0, #2]
 8003db0:	70c1      	strb	r1, [r0, #3]
 8003db2:	1d03      	adds	r3, r0, #4
 8003db4:	e7f1      	b.n	8003d9a <__exponent+0x58>
	...

08003db8 <_printf_float>:
 8003db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dbc:	b08d      	sub	sp, #52	@ 0x34
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003dc4:	4616      	mov	r6, r2
 8003dc6:	461f      	mov	r7, r3
 8003dc8:	4605      	mov	r5, r0
 8003dca:	f000 fccd 	bl	8004768 <_localeconv_r>
 8003dce:	6803      	ldr	r3, [r0, #0]
 8003dd0:	9304      	str	r3, [sp, #16]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fc fa6c 	bl	80002b0 <strlen>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8003de0:	9005      	str	r0, [sp, #20]
 8003de2:	3307      	adds	r3, #7
 8003de4:	f023 0307 	bic.w	r3, r3, #7
 8003de8:	f103 0208 	add.w	r2, r3, #8
 8003dec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003df0:	f8d4 b000 	ldr.w	fp, [r4]
 8003df4:	f8c8 2000 	str.w	r2, [r8]
 8003df8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003dfc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003e00:	9307      	str	r3, [sp, #28]
 8003e02:	f8cd 8018 	str.w	r8, [sp, #24]
 8003e06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003e0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e0e:	4b9c      	ldr	r3, [pc, #624]	@ (8004080 <_printf_float+0x2c8>)
 8003e10:	f04f 32ff 	mov.w	r2, #4294967295
 8003e14:	f7fc feaa 	bl	8000b6c <__aeabi_dcmpun>
 8003e18:	bb70      	cbnz	r0, 8003e78 <_printf_float+0xc0>
 8003e1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e1e:	4b98      	ldr	r3, [pc, #608]	@ (8004080 <_printf_float+0x2c8>)
 8003e20:	f04f 32ff 	mov.w	r2, #4294967295
 8003e24:	f7fc fe84 	bl	8000b30 <__aeabi_dcmple>
 8003e28:	bb30      	cbnz	r0, 8003e78 <_printf_float+0xc0>
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	4640      	mov	r0, r8
 8003e30:	4649      	mov	r1, r9
 8003e32:	f7fc fe73 	bl	8000b1c <__aeabi_dcmplt>
 8003e36:	b110      	cbz	r0, 8003e3e <_printf_float+0x86>
 8003e38:	232d      	movs	r3, #45	@ 0x2d
 8003e3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e3e:	4a91      	ldr	r2, [pc, #580]	@ (8004084 <_printf_float+0x2cc>)
 8003e40:	4b91      	ldr	r3, [pc, #580]	@ (8004088 <_printf_float+0x2d0>)
 8003e42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003e46:	bf94      	ite	ls
 8003e48:	4690      	movls	r8, r2
 8003e4a:	4698      	movhi	r8, r3
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	6123      	str	r3, [r4, #16]
 8003e50:	f02b 0304 	bic.w	r3, fp, #4
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	f04f 0900 	mov.w	r9, #0
 8003e5a:	9700      	str	r7, [sp, #0]
 8003e5c:	4633      	mov	r3, r6
 8003e5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003e60:	4621      	mov	r1, r4
 8003e62:	4628      	mov	r0, r5
 8003e64:	f000 f9d2 	bl	800420c <_printf_common>
 8003e68:	3001      	adds	r0, #1
 8003e6a:	f040 808d 	bne.w	8003f88 <_printf_float+0x1d0>
 8003e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e72:	b00d      	add	sp, #52	@ 0x34
 8003e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e78:	4642      	mov	r2, r8
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	4640      	mov	r0, r8
 8003e7e:	4649      	mov	r1, r9
 8003e80:	f7fc fe74 	bl	8000b6c <__aeabi_dcmpun>
 8003e84:	b140      	cbz	r0, 8003e98 <_printf_float+0xe0>
 8003e86:	464b      	mov	r3, r9
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bfbc      	itt	lt
 8003e8c:	232d      	movlt	r3, #45	@ 0x2d
 8003e8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e92:	4a7e      	ldr	r2, [pc, #504]	@ (800408c <_printf_float+0x2d4>)
 8003e94:	4b7e      	ldr	r3, [pc, #504]	@ (8004090 <_printf_float+0x2d8>)
 8003e96:	e7d4      	b.n	8003e42 <_printf_float+0x8a>
 8003e98:	6863      	ldr	r3, [r4, #4]
 8003e9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003e9e:	9206      	str	r2, [sp, #24]
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	d13b      	bne.n	8003f1c <_printf_float+0x164>
 8003ea4:	2306      	movs	r3, #6
 8003ea6:	6063      	str	r3, [r4, #4]
 8003ea8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003eac:	2300      	movs	r3, #0
 8003eae:	6022      	str	r2, [r4, #0]
 8003eb0:	9303      	str	r3, [sp, #12]
 8003eb2:	ab0a      	add	r3, sp, #40	@ 0x28
 8003eb4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003eb8:	ab09      	add	r3, sp, #36	@ 0x24
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	6861      	ldr	r1, [r4, #4]
 8003ebe:	ec49 8b10 	vmov	d0, r8, r9
 8003ec2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f7ff fed6 	bl	8003c78 <__cvt>
 8003ecc:	9b06      	ldr	r3, [sp, #24]
 8003ece:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003ed0:	2b47      	cmp	r3, #71	@ 0x47
 8003ed2:	4680      	mov	r8, r0
 8003ed4:	d129      	bne.n	8003f2a <_printf_float+0x172>
 8003ed6:	1cc8      	adds	r0, r1, #3
 8003ed8:	db02      	blt.n	8003ee0 <_printf_float+0x128>
 8003eda:	6863      	ldr	r3, [r4, #4]
 8003edc:	4299      	cmp	r1, r3
 8003ede:	dd41      	ble.n	8003f64 <_printf_float+0x1ac>
 8003ee0:	f1aa 0a02 	sub.w	sl, sl, #2
 8003ee4:	fa5f fa8a 	uxtb.w	sl, sl
 8003ee8:	3901      	subs	r1, #1
 8003eea:	4652      	mov	r2, sl
 8003eec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003ef0:	9109      	str	r1, [sp, #36]	@ 0x24
 8003ef2:	f7ff ff26 	bl	8003d42 <__exponent>
 8003ef6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ef8:	1813      	adds	r3, r2, r0
 8003efa:	2a01      	cmp	r2, #1
 8003efc:	4681      	mov	r9, r0
 8003efe:	6123      	str	r3, [r4, #16]
 8003f00:	dc02      	bgt.n	8003f08 <_printf_float+0x150>
 8003f02:	6822      	ldr	r2, [r4, #0]
 8003f04:	07d2      	lsls	r2, r2, #31
 8003f06:	d501      	bpl.n	8003f0c <_printf_float+0x154>
 8003f08:	3301      	adds	r3, #1
 8003f0a:	6123      	str	r3, [r4, #16]
 8003f0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0a2      	beq.n	8003e5a <_printf_float+0xa2>
 8003f14:	232d      	movs	r3, #45	@ 0x2d
 8003f16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f1a:	e79e      	b.n	8003e5a <_printf_float+0xa2>
 8003f1c:	9a06      	ldr	r2, [sp, #24]
 8003f1e:	2a47      	cmp	r2, #71	@ 0x47
 8003f20:	d1c2      	bne.n	8003ea8 <_printf_float+0xf0>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1c0      	bne.n	8003ea8 <_printf_float+0xf0>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e7bd      	b.n	8003ea6 <_printf_float+0xee>
 8003f2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f2e:	d9db      	bls.n	8003ee8 <_printf_float+0x130>
 8003f30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003f34:	d118      	bne.n	8003f68 <_printf_float+0x1b0>
 8003f36:	2900      	cmp	r1, #0
 8003f38:	6863      	ldr	r3, [r4, #4]
 8003f3a:	dd0b      	ble.n	8003f54 <_printf_float+0x19c>
 8003f3c:	6121      	str	r1, [r4, #16]
 8003f3e:	b913      	cbnz	r3, 8003f46 <_printf_float+0x18e>
 8003f40:	6822      	ldr	r2, [r4, #0]
 8003f42:	07d0      	lsls	r0, r2, #31
 8003f44:	d502      	bpl.n	8003f4c <_printf_float+0x194>
 8003f46:	3301      	adds	r3, #1
 8003f48:	440b      	add	r3, r1
 8003f4a:	6123      	str	r3, [r4, #16]
 8003f4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003f4e:	f04f 0900 	mov.w	r9, #0
 8003f52:	e7db      	b.n	8003f0c <_printf_float+0x154>
 8003f54:	b913      	cbnz	r3, 8003f5c <_printf_float+0x1a4>
 8003f56:	6822      	ldr	r2, [r4, #0]
 8003f58:	07d2      	lsls	r2, r2, #31
 8003f5a:	d501      	bpl.n	8003f60 <_printf_float+0x1a8>
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	e7f4      	b.n	8003f4a <_printf_float+0x192>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e7f2      	b.n	8003f4a <_printf_float+0x192>
 8003f64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003f68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f6a:	4299      	cmp	r1, r3
 8003f6c:	db05      	blt.n	8003f7a <_printf_float+0x1c2>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	6121      	str	r1, [r4, #16]
 8003f72:	07d8      	lsls	r0, r3, #31
 8003f74:	d5ea      	bpl.n	8003f4c <_printf_float+0x194>
 8003f76:	1c4b      	adds	r3, r1, #1
 8003f78:	e7e7      	b.n	8003f4a <_printf_float+0x192>
 8003f7a:	2900      	cmp	r1, #0
 8003f7c:	bfd4      	ite	le
 8003f7e:	f1c1 0202 	rsble	r2, r1, #2
 8003f82:	2201      	movgt	r2, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	e7e0      	b.n	8003f4a <_printf_float+0x192>
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	055a      	lsls	r2, r3, #21
 8003f8c:	d407      	bmi.n	8003f9e <_printf_float+0x1e6>
 8003f8e:	6923      	ldr	r3, [r4, #16]
 8003f90:	4642      	mov	r2, r8
 8003f92:	4631      	mov	r1, r6
 8003f94:	4628      	mov	r0, r5
 8003f96:	47b8      	blx	r7
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d12b      	bne.n	8003ff4 <_printf_float+0x23c>
 8003f9c:	e767      	b.n	8003e6e <_printf_float+0xb6>
 8003f9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003fa2:	f240 80dd 	bls.w	8004160 <_printf_float+0x3a8>
 8003fa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003faa:	2200      	movs	r2, #0
 8003fac:	2300      	movs	r3, #0
 8003fae:	f7fc fdab 	bl	8000b08 <__aeabi_dcmpeq>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d033      	beq.n	800401e <_printf_float+0x266>
 8003fb6:	4a37      	ldr	r2, [pc, #220]	@ (8004094 <_printf_float+0x2dc>)
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4631      	mov	r1, r6
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	47b8      	blx	r7
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	f43f af54 	beq.w	8003e6e <_printf_float+0xb6>
 8003fc6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003fca:	4543      	cmp	r3, r8
 8003fcc:	db02      	blt.n	8003fd4 <_printf_float+0x21c>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	07d8      	lsls	r0, r3, #31
 8003fd2:	d50f      	bpl.n	8003ff4 <_printf_float+0x23c>
 8003fd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fd8:	4631      	mov	r1, r6
 8003fda:	4628      	mov	r0, r5
 8003fdc:	47b8      	blx	r7
 8003fde:	3001      	adds	r0, #1
 8003fe0:	f43f af45 	beq.w	8003e6e <_printf_float+0xb6>
 8003fe4:	f04f 0900 	mov.w	r9, #0
 8003fe8:	f108 38ff 	add.w	r8, r8, #4294967295
 8003fec:	f104 0a1a 	add.w	sl, r4, #26
 8003ff0:	45c8      	cmp	r8, r9
 8003ff2:	dc09      	bgt.n	8004008 <_printf_float+0x250>
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	079b      	lsls	r3, r3, #30
 8003ff8:	f100 8103 	bmi.w	8004202 <_printf_float+0x44a>
 8003ffc:	68e0      	ldr	r0, [r4, #12]
 8003ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004000:	4298      	cmp	r0, r3
 8004002:	bfb8      	it	lt
 8004004:	4618      	movlt	r0, r3
 8004006:	e734      	b.n	8003e72 <_printf_float+0xba>
 8004008:	2301      	movs	r3, #1
 800400a:	4652      	mov	r2, sl
 800400c:	4631      	mov	r1, r6
 800400e:	4628      	mov	r0, r5
 8004010:	47b8      	blx	r7
 8004012:	3001      	adds	r0, #1
 8004014:	f43f af2b 	beq.w	8003e6e <_printf_float+0xb6>
 8004018:	f109 0901 	add.w	r9, r9, #1
 800401c:	e7e8      	b.n	8003ff0 <_printf_float+0x238>
 800401e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004020:	2b00      	cmp	r3, #0
 8004022:	dc39      	bgt.n	8004098 <_printf_float+0x2e0>
 8004024:	4a1b      	ldr	r2, [pc, #108]	@ (8004094 <_printf_float+0x2dc>)
 8004026:	2301      	movs	r3, #1
 8004028:	4631      	mov	r1, r6
 800402a:	4628      	mov	r0, r5
 800402c:	47b8      	blx	r7
 800402e:	3001      	adds	r0, #1
 8004030:	f43f af1d 	beq.w	8003e6e <_printf_float+0xb6>
 8004034:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004038:	ea59 0303 	orrs.w	r3, r9, r3
 800403c:	d102      	bne.n	8004044 <_printf_float+0x28c>
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	07d9      	lsls	r1, r3, #31
 8004042:	d5d7      	bpl.n	8003ff4 <_printf_float+0x23c>
 8004044:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004048:	4631      	mov	r1, r6
 800404a:	4628      	mov	r0, r5
 800404c:	47b8      	blx	r7
 800404e:	3001      	adds	r0, #1
 8004050:	f43f af0d 	beq.w	8003e6e <_printf_float+0xb6>
 8004054:	f04f 0a00 	mov.w	sl, #0
 8004058:	f104 0b1a 	add.w	fp, r4, #26
 800405c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800405e:	425b      	negs	r3, r3
 8004060:	4553      	cmp	r3, sl
 8004062:	dc01      	bgt.n	8004068 <_printf_float+0x2b0>
 8004064:	464b      	mov	r3, r9
 8004066:	e793      	b.n	8003f90 <_printf_float+0x1d8>
 8004068:	2301      	movs	r3, #1
 800406a:	465a      	mov	r2, fp
 800406c:	4631      	mov	r1, r6
 800406e:	4628      	mov	r0, r5
 8004070:	47b8      	blx	r7
 8004072:	3001      	adds	r0, #1
 8004074:	f43f aefb 	beq.w	8003e6e <_printf_float+0xb6>
 8004078:	f10a 0a01 	add.w	sl, sl, #1
 800407c:	e7ee      	b.n	800405c <_printf_float+0x2a4>
 800407e:	bf00      	nop
 8004080:	7fefffff 	.word	0x7fefffff
 8004084:	080067e9 	.word	0x080067e9
 8004088:	080067ed 	.word	0x080067ed
 800408c:	080067f1 	.word	0x080067f1
 8004090:	080067f5 	.word	0x080067f5
 8004094:	080067f9 	.word	0x080067f9
 8004098:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800409a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800409e:	4553      	cmp	r3, sl
 80040a0:	bfa8      	it	ge
 80040a2:	4653      	movge	r3, sl
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	4699      	mov	r9, r3
 80040a8:	dc36      	bgt.n	8004118 <_printf_float+0x360>
 80040aa:	f04f 0b00 	mov.w	fp, #0
 80040ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040b2:	f104 021a 	add.w	r2, r4, #26
 80040b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80040b8:	9306      	str	r3, [sp, #24]
 80040ba:	eba3 0309 	sub.w	r3, r3, r9
 80040be:	455b      	cmp	r3, fp
 80040c0:	dc31      	bgt.n	8004126 <_printf_float+0x36e>
 80040c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040c4:	459a      	cmp	sl, r3
 80040c6:	dc3a      	bgt.n	800413e <_printf_float+0x386>
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	07da      	lsls	r2, r3, #31
 80040cc:	d437      	bmi.n	800413e <_printf_float+0x386>
 80040ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040d0:	ebaa 0903 	sub.w	r9, sl, r3
 80040d4:	9b06      	ldr	r3, [sp, #24]
 80040d6:	ebaa 0303 	sub.w	r3, sl, r3
 80040da:	4599      	cmp	r9, r3
 80040dc:	bfa8      	it	ge
 80040de:	4699      	movge	r9, r3
 80040e0:	f1b9 0f00 	cmp.w	r9, #0
 80040e4:	dc33      	bgt.n	800414e <_printf_float+0x396>
 80040e6:	f04f 0800 	mov.w	r8, #0
 80040ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040ee:	f104 0b1a 	add.w	fp, r4, #26
 80040f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040f4:	ebaa 0303 	sub.w	r3, sl, r3
 80040f8:	eba3 0309 	sub.w	r3, r3, r9
 80040fc:	4543      	cmp	r3, r8
 80040fe:	f77f af79 	ble.w	8003ff4 <_printf_float+0x23c>
 8004102:	2301      	movs	r3, #1
 8004104:	465a      	mov	r2, fp
 8004106:	4631      	mov	r1, r6
 8004108:	4628      	mov	r0, r5
 800410a:	47b8      	blx	r7
 800410c:	3001      	adds	r0, #1
 800410e:	f43f aeae 	beq.w	8003e6e <_printf_float+0xb6>
 8004112:	f108 0801 	add.w	r8, r8, #1
 8004116:	e7ec      	b.n	80040f2 <_printf_float+0x33a>
 8004118:	4642      	mov	r2, r8
 800411a:	4631      	mov	r1, r6
 800411c:	4628      	mov	r0, r5
 800411e:	47b8      	blx	r7
 8004120:	3001      	adds	r0, #1
 8004122:	d1c2      	bne.n	80040aa <_printf_float+0x2f2>
 8004124:	e6a3      	b.n	8003e6e <_printf_float+0xb6>
 8004126:	2301      	movs	r3, #1
 8004128:	4631      	mov	r1, r6
 800412a:	4628      	mov	r0, r5
 800412c:	9206      	str	r2, [sp, #24]
 800412e:	47b8      	blx	r7
 8004130:	3001      	adds	r0, #1
 8004132:	f43f ae9c 	beq.w	8003e6e <_printf_float+0xb6>
 8004136:	9a06      	ldr	r2, [sp, #24]
 8004138:	f10b 0b01 	add.w	fp, fp, #1
 800413c:	e7bb      	b.n	80040b6 <_printf_float+0x2fe>
 800413e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004142:	4631      	mov	r1, r6
 8004144:	4628      	mov	r0, r5
 8004146:	47b8      	blx	r7
 8004148:	3001      	adds	r0, #1
 800414a:	d1c0      	bne.n	80040ce <_printf_float+0x316>
 800414c:	e68f      	b.n	8003e6e <_printf_float+0xb6>
 800414e:	9a06      	ldr	r2, [sp, #24]
 8004150:	464b      	mov	r3, r9
 8004152:	4442      	add	r2, r8
 8004154:	4631      	mov	r1, r6
 8004156:	4628      	mov	r0, r5
 8004158:	47b8      	blx	r7
 800415a:	3001      	adds	r0, #1
 800415c:	d1c3      	bne.n	80040e6 <_printf_float+0x32e>
 800415e:	e686      	b.n	8003e6e <_printf_float+0xb6>
 8004160:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004164:	f1ba 0f01 	cmp.w	sl, #1
 8004168:	dc01      	bgt.n	800416e <_printf_float+0x3b6>
 800416a:	07db      	lsls	r3, r3, #31
 800416c:	d536      	bpl.n	80041dc <_printf_float+0x424>
 800416e:	2301      	movs	r3, #1
 8004170:	4642      	mov	r2, r8
 8004172:	4631      	mov	r1, r6
 8004174:	4628      	mov	r0, r5
 8004176:	47b8      	blx	r7
 8004178:	3001      	adds	r0, #1
 800417a:	f43f ae78 	beq.w	8003e6e <_printf_float+0xb6>
 800417e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004182:	4631      	mov	r1, r6
 8004184:	4628      	mov	r0, r5
 8004186:	47b8      	blx	r7
 8004188:	3001      	adds	r0, #1
 800418a:	f43f ae70 	beq.w	8003e6e <_printf_float+0xb6>
 800418e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004192:	2200      	movs	r2, #0
 8004194:	2300      	movs	r3, #0
 8004196:	f10a 3aff 	add.w	sl, sl, #4294967295
 800419a:	f7fc fcb5 	bl	8000b08 <__aeabi_dcmpeq>
 800419e:	b9c0      	cbnz	r0, 80041d2 <_printf_float+0x41a>
 80041a0:	4653      	mov	r3, sl
 80041a2:	f108 0201 	add.w	r2, r8, #1
 80041a6:	4631      	mov	r1, r6
 80041a8:	4628      	mov	r0, r5
 80041aa:	47b8      	blx	r7
 80041ac:	3001      	adds	r0, #1
 80041ae:	d10c      	bne.n	80041ca <_printf_float+0x412>
 80041b0:	e65d      	b.n	8003e6e <_printf_float+0xb6>
 80041b2:	2301      	movs	r3, #1
 80041b4:	465a      	mov	r2, fp
 80041b6:	4631      	mov	r1, r6
 80041b8:	4628      	mov	r0, r5
 80041ba:	47b8      	blx	r7
 80041bc:	3001      	adds	r0, #1
 80041be:	f43f ae56 	beq.w	8003e6e <_printf_float+0xb6>
 80041c2:	f108 0801 	add.w	r8, r8, #1
 80041c6:	45d0      	cmp	r8, sl
 80041c8:	dbf3      	blt.n	80041b2 <_printf_float+0x3fa>
 80041ca:	464b      	mov	r3, r9
 80041cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80041d0:	e6df      	b.n	8003f92 <_printf_float+0x1da>
 80041d2:	f04f 0800 	mov.w	r8, #0
 80041d6:	f104 0b1a 	add.w	fp, r4, #26
 80041da:	e7f4      	b.n	80041c6 <_printf_float+0x40e>
 80041dc:	2301      	movs	r3, #1
 80041de:	4642      	mov	r2, r8
 80041e0:	e7e1      	b.n	80041a6 <_printf_float+0x3ee>
 80041e2:	2301      	movs	r3, #1
 80041e4:	464a      	mov	r2, r9
 80041e6:	4631      	mov	r1, r6
 80041e8:	4628      	mov	r0, r5
 80041ea:	47b8      	blx	r7
 80041ec:	3001      	adds	r0, #1
 80041ee:	f43f ae3e 	beq.w	8003e6e <_printf_float+0xb6>
 80041f2:	f108 0801 	add.w	r8, r8, #1
 80041f6:	68e3      	ldr	r3, [r4, #12]
 80041f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80041fa:	1a5b      	subs	r3, r3, r1
 80041fc:	4543      	cmp	r3, r8
 80041fe:	dcf0      	bgt.n	80041e2 <_printf_float+0x42a>
 8004200:	e6fc      	b.n	8003ffc <_printf_float+0x244>
 8004202:	f04f 0800 	mov.w	r8, #0
 8004206:	f104 0919 	add.w	r9, r4, #25
 800420a:	e7f4      	b.n	80041f6 <_printf_float+0x43e>

0800420c <_printf_common>:
 800420c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004210:	4616      	mov	r6, r2
 8004212:	4698      	mov	r8, r3
 8004214:	688a      	ldr	r2, [r1, #8]
 8004216:	690b      	ldr	r3, [r1, #16]
 8004218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800421c:	4293      	cmp	r3, r2
 800421e:	bfb8      	it	lt
 8004220:	4613      	movlt	r3, r2
 8004222:	6033      	str	r3, [r6, #0]
 8004224:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004228:	4607      	mov	r7, r0
 800422a:	460c      	mov	r4, r1
 800422c:	b10a      	cbz	r2, 8004232 <_printf_common+0x26>
 800422e:	3301      	adds	r3, #1
 8004230:	6033      	str	r3, [r6, #0]
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	0699      	lsls	r1, r3, #26
 8004236:	bf42      	ittt	mi
 8004238:	6833      	ldrmi	r3, [r6, #0]
 800423a:	3302      	addmi	r3, #2
 800423c:	6033      	strmi	r3, [r6, #0]
 800423e:	6825      	ldr	r5, [r4, #0]
 8004240:	f015 0506 	ands.w	r5, r5, #6
 8004244:	d106      	bne.n	8004254 <_printf_common+0x48>
 8004246:	f104 0a19 	add.w	sl, r4, #25
 800424a:	68e3      	ldr	r3, [r4, #12]
 800424c:	6832      	ldr	r2, [r6, #0]
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	42ab      	cmp	r3, r5
 8004252:	dc26      	bgt.n	80042a2 <_printf_common+0x96>
 8004254:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004258:	6822      	ldr	r2, [r4, #0]
 800425a:	3b00      	subs	r3, #0
 800425c:	bf18      	it	ne
 800425e:	2301      	movne	r3, #1
 8004260:	0692      	lsls	r2, r2, #26
 8004262:	d42b      	bmi.n	80042bc <_printf_common+0xb0>
 8004264:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004268:	4641      	mov	r1, r8
 800426a:	4638      	mov	r0, r7
 800426c:	47c8      	blx	r9
 800426e:	3001      	adds	r0, #1
 8004270:	d01e      	beq.n	80042b0 <_printf_common+0xa4>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	6922      	ldr	r2, [r4, #16]
 8004276:	f003 0306 	and.w	r3, r3, #6
 800427a:	2b04      	cmp	r3, #4
 800427c:	bf02      	ittt	eq
 800427e:	68e5      	ldreq	r5, [r4, #12]
 8004280:	6833      	ldreq	r3, [r6, #0]
 8004282:	1aed      	subeq	r5, r5, r3
 8004284:	68a3      	ldr	r3, [r4, #8]
 8004286:	bf0c      	ite	eq
 8004288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800428c:	2500      	movne	r5, #0
 800428e:	4293      	cmp	r3, r2
 8004290:	bfc4      	itt	gt
 8004292:	1a9b      	subgt	r3, r3, r2
 8004294:	18ed      	addgt	r5, r5, r3
 8004296:	2600      	movs	r6, #0
 8004298:	341a      	adds	r4, #26
 800429a:	42b5      	cmp	r5, r6
 800429c:	d11a      	bne.n	80042d4 <_printf_common+0xc8>
 800429e:	2000      	movs	r0, #0
 80042a0:	e008      	b.n	80042b4 <_printf_common+0xa8>
 80042a2:	2301      	movs	r3, #1
 80042a4:	4652      	mov	r2, sl
 80042a6:	4641      	mov	r1, r8
 80042a8:	4638      	mov	r0, r7
 80042aa:	47c8      	blx	r9
 80042ac:	3001      	adds	r0, #1
 80042ae:	d103      	bne.n	80042b8 <_printf_common+0xac>
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b8:	3501      	adds	r5, #1
 80042ba:	e7c6      	b.n	800424a <_printf_common+0x3e>
 80042bc:	18e1      	adds	r1, r4, r3
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	2030      	movs	r0, #48	@ 0x30
 80042c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042c6:	4422      	add	r2, r4
 80042c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042d0:	3302      	adds	r3, #2
 80042d2:	e7c7      	b.n	8004264 <_printf_common+0x58>
 80042d4:	2301      	movs	r3, #1
 80042d6:	4622      	mov	r2, r4
 80042d8:	4641      	mov	r1, r8
 80042da:	4638      	mov	r0, r7
 80042dc:	47c8      	blx	r9
 80042de:	3001      	adds	r0, #1
 80042e0:	d0e6      	beq.n	80042b0 <_printf_common+0xa4>
 80042e2:	3601      	adds	r6, #1
 80042e4:	e7d9      	b.n	800429a <_printf_common+0x8e>
	...

080042e8 <_printf_i>:
 80042e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042ec:	7e0f      	ldrb	r7, [r1, #24]
 80042ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042f0:	2f78      	cmp	r7, #120	@ 0x78
 80042f2:	4691      	mov	r9, r2
 80042f4:	4680      	mov	r8, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	469a      	mov	sl, r3
 80042fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042fe:	d807      	bhi.n	8004310 <_printf_i+0x28>
 8004300:	2f62      	cmp	r7, #98	@ 0x62
 8004302:	d80a      	bhi.n	800431a <_printf_i+0x32>
 8004304:	2f00      	cmp	r7, #0
 8004306:	f000 80d2 	beq.w	80044ae <_printf_i+0x1c6>
 800430a:	2f58      	cmp	r7, #88	@ 0x58
 800430c:	f000 80b9 	beq.w	8004482 <_printf_i+0x19a>
 8004310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004314:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004318:	e03a      	b.n	8004390 <_printf_i+0xa8>
 800431a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800431e:	2b15      	cmp	r3, #21
 8004320:	d8f6      	bhi.n	8004310 <_printf_i+0x28>
 8004322:	a101      	add	r1, pc, #4	@ (adr r1, 8004328 <_printf_i+0x40>)
 8004324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004328:	08004381 	.word	0x08004381
 800432c:	08004395 	.word	0x08004395
 8004330:	08004311 	.word	0x08004311
 8004334:	08004311 	.word	0x08004311
 8004338:	08004311 	.word	0x08004311
 800433c:	08004311 	.word	0x08004311
 8004340:	08004395 	.word	0x08004395
 8004344:	08004311 	.word	0x08004311
 8004348:	08004311 	.word	0x08004311
 800434c:	08004311 	.word	0x08004311
 8004350:	08004311 	.word	0x08004311
 8004354:	08004495 	.word	0x08004495
 8004358:	080043bf 	.word	0x080043bf
 800435c:	0800444f 	.word	0x0800444f
 8004360:	08004311 	.word	0x08004311
 8004364:	08004311 	.word	0x08004311
 8004368:	080044b7 	.word	0x080044b7
 800436c:	08004311 	.word	0x08004311
 8004370:	080043bf 	.word	0x080043bf
 8004374:	08004311 	.word	0x08004311
 8004378:	08004311 	.word	0x08004311
 800437c:	08004457 	.word	0x08004457
 8004380:	6833      	ldr	r3, [r6, #0]
 8004382:	1d1a      	adds	r2, r3, #4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6032      	str	r2, [r6, #0]
 8004388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800438c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004390:	2301      	movs	r3, #1
 8004392:	e09d      	b.n	80044d0 <_printf_i+0x1e8>
 8004394:	6833      	ldr	r3, [r6, #0]
 8004396:	6820      	ldr	r0, [r4, #0]
 8004398:	1d19      	adds	r1, r3, #4
 800439a:	6031      	str	r1, [r6, #0]
 800439c:	0606      	lsls	r6, r0, #24
 800439e:	d501      	bpl.n	80043a4 <_printf_i+0xbc>
 80043a0:	681d      	ldr	r5, [r3, #0]
 80043a2:	e003      	b.n	80043ac <_printf_i+0xc4>
 80043a4:	0645      	lsls	r5, r0, #25
 80043a6:	d5fb      	bpl.n	80043a0 <_printf_i+0xb8>
 80043a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043ac:	2d00      	cmp	r5, #0
 80043ae:	da03      	bge.n	80043b8 <_printf_i+0xd0>
 80043b0:	232d      	movs	r3, #45	@ 0x2d
 80043b2:	426d      	negs	r5, r5
 80043b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043b8:	4859      	ldr	r0, [pc, #356]	@ (8004520 <_printf_i+0x238>)
 80043ba:	230a      	movs	r3, #10
 80043bc:	e011      	b.n	80043e2 <_printf_i+0xfa>
 80043be:	6821      	ldr	r1, [r4, #0]
 80043c0:	6833      	ldr	r3, [r6, #0]
 80043c2:	0608      	lsls	r0, r1, #24
 80043c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80043c8:	d402      	bmi.n	80043d0 <_printf_i+0xe8>
 80043ca:	0649      	lsls	r1, r1, #25
 80043cc:	bf48      	it	mi
 80043ce:	b2ad      	uxthmi	r5, r5
 80043d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80043d2:	4853      	ldr	r0, [pc, #332]	@ (8004520 <_printf_i+0x238>)
 80043d4:	6033      	str	r3, [r6, #0]
 80043d6:	bf14      	ite	ne
 80043d8:	230a      	movne	r3, #10
 80043da:	2308      	moveq	r3, #8
 80043dc:	2100      	movs	r1, #0
 80043de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043e2:	6866      	ldr	r6, [r4, #4]
 80043e4:	60a6      	str	r6, [r4, #8]
 80043e6:	2e00      	cmp	r6, #0
 80043e8:	bfa2      	ittt	ge
 80043ea:	6821      	ldrge	r1, [r4, #0]
 80043ec:	f021 0104 	bicge.w	r1, r1, #4
 80043f0:	6021      	strge	r1, [r4, #0]
 80043f2:	b90d      	cbnz	r5, 80043f8 <_printf_i+0x110>
 80043f4:	2e00      	cmp	r6, #0
 80043f6:	d04b      	beq.n	8004490 <_printf_i+0x1a8>
 80043f8:	4616      	mov	r6, r2
 80043fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80043fe:	fb03 5711 	mls	r7, r3, r1, r5
 8004402:	5dc7      	ldrb	r7, [r0, r7]
 8004404:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004408:	462f      	mov	r7, r5
 800440a:	42bb      	cmp	r3, r7
 800440c:	460d      	mov	r5, r1
 800440e:	d9f4      	bls.n	80043fa <_printf_i+0x112>
 8004410:	2b08      	cmp	r3, #8
 8004412:	d10b      	bne.n	800442c <_printf_i+0x144>
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	07df      	lsls	r7, r3, #31
 8004418:	d508      	bpl.n	800442c <_printf_i+0x144>
 800441a:	6923      	ldr	r3, [r4, #16]
 800441c:	6861      	ldr	r1, [r4, #4]
 800441e:	4299      	cmp	r1, r3
 8004420:	bfde      	ittt	le
 8004422:	2330      	movle	r3, #48	@ 0x30
 8004424:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004428:	f106 36ff 	addle.w	r6, r6, #4294967295
 800442c:	1b92      	subs	r2, r2, r6
 800442e:	6122      	str	r2, [r4, #16]
 8004430:	f8cd a000 	str.w	sl, [sp]
 8004434:	464b      	mov	r3, r9
 8004436:	aa03      	add	r2, sp, #12
 8004438:	4621      	mov	r1, r4
 800443a:	4640      	mov	r0, r8
 800443c:	f7ff fee6 	bl	800420c <_printf_common>
 8004440:	3001      	adds	r0, #1
 8004442:	d14a      	bne.n	80044da <_printf_i+0x1f2>
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	b004      	add	sp, #16
 800444a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	f043 0320 	orr.w	r3, r3, #32
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	4833      	ldr	r0, [pc, #204]	@ (8004524 <_printf_i+0x23c>)
 8004458:	2778      	movs	r7, #120	@ 0x78
 800445a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	6831      	ldr	r1, [r6, #0]
 8004462:	061f      	lsls	r7, r3, #24
 8004464:	f851 5b04 	ldr.w	r5, [r1], #4
 8004468:	d402      	bmi.n	8004470 <_printf_i+0x188>
 800446a:	065f      	lsls	r7, r3, #25
 800446c:	bf48      	it	mi
 800446e:	b2ad      	uxthmi	r5, r5
 8004470:	6031      	str	r1, [r6, #0]
 8004472:	07d9      	lsls	r1, r3, #31
 8004474:	bf44      	itt	mi
 8004476:	f043 0320 	orrmi.w	r3, r3, #32
 800447a:	6023      	strmi	r3, [r4, #0]
 800447c:	b11d      	cbz	r5, 8004486 <_printf_i+0x19e>
 800447e:	2310      	movs	r3, #16
 8004480:	e7ac      	b.n	80043dc <_printf_i+0xf4>
 8004482:	4827      	ldr	r0, [pc, #156]	@ (8004520 <_printf_i+0x238>)
 8004484:	e7e9      	b.n	800445a <_printf_i+0x172>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	f023 0320 	bic.w	r3, r3, #32
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	e7f6      	b.n	800447e <_printf_i+0x196>
 8004490:	4616      	mov	r6, r2
 8004492:	e7bd      	b.n	8004410 <_printf_i+0x128>
 8004494:	6833      	ldr	r3, [r6, #0]
 8004496:	6825      	ldr	r5, [r4, #0]
 8004498:	6961      	ldr	r1, [r4, #20]
 800449a:	1d18      	adds	r0, r3, #4
 800449c:	6030      	str	r0, [r6, #0]
 800449e:	062e      	lsls	r6, r5, #24
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	d501      	bpl.n	80044a8 <_printf_i+0x1c0>
 80044a4:	6019      	str	r1, [r3, #0]
 80044a6:	e002      	b.n	80044ae <_printf_i+0x1c6>
 80044a8:	0668      	lsls	r0, r5, #25
 80044aa:	d5fb      	bpl.n	80044a4 <_printf_i+0x1bc>
 80044ac:	8019      	strh	r1, [r3, #0]
 80044ae:	2300      	movs	r3, #0
 80044b0:	6123      	str	r3, [r4, #16]
 80044b2:	4616      	mov	r6, r2
 80044b4:	e7bc      	b.n	8004430 <_printf_i+0x148>
 80044b6:	6833      	ldr	r3, [r6, #0]
 80044b8:	1d1a      	adds	r2, r3, #4
 80044ba:	6032      	str	r2, [r6, #0]
 80044bc:	681e      	ldr	r6, [r3, #0]
 80044be:	6862      	ldr	r2, [r4, #4]
 80044c0:	2100      	movs	r1, #0
 80044c2:	4630      	mov	r0, r6
 80044c4:	f7fb fea4 	bl	8000210 <memchr>
 80044c8:	b108      	cbz	r0, 80044ce <_printf_i+0x1e6>
 80044ca:	1b80      	subs	r0, r0, r6
 80044cc:	6060      	str	r0, [r4, #4]
 80044ce:	6863      	ldr	r3, [r4, #4]
 80044d0:	6123      	str	r3, [r4, #16]
 80044d2:	2300      	movs	r3, #0
 80044d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044d8:	e7aa      	b.n	8004430 <_printf_i+0x148>
 80044da:	6923      	ldr	r3, [r4, #16]
 80044dc:	4632      	mov	r2, r6
 80044de:	4649      	mov	r1, r9
 80044e0:	4640      	mov	r0, r8
 80044e2:	47d0      	blx	sl
 80044e4:	3001      	adds	r0, #1
 80044e6:	d0ad      	beq.n	8004444 <_printf_i+0x15c>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	079b      	lsls	r3, r3, #30
 80044ec:	d413      	bmi.n	8004516 <_printf_i+0x22e>
 80044ee:	68e0      	ldr	r0, [r4, #12]
 80044f0:	9b03      	ldr	r3, [sp, #12]
 80044f2:	4298      	cmp	r0, r3
 80044f4:	bfb8      	it	lt
 80044f6:	4618      	movlt	r0, r3
 80044f8:	e7a6      	b.n	8004448 <_printf_i+0x160>
 80044fa:	2301      	movs	r3, #1
 80044fc:	4632      	mov	r2, r6
 80044fe:	4649      	mov	r1, r9
 8004500:	4640      	mov	r0, r8
 8004502:	47d0      	blx	sl
 8004504:	3001      	adds	r0, #1
 8004506:	d09d      	beq.n	8004444 <_printf_i+0x15c>
 8004508:	3501      	adds	r5, #1
 800450a:	68e3      	ldr	r3, [r4, #12]
 800450c:	9903      	ldr	r1, [sp, #12]
 800450e:	1a5b      	subs	r3, r3, r1
 8004510:	42ab      	cmp	r3, r5
 8004512:	dcf2      	bgt.n	80044fa <_printf_i+0x212>
 8004514:	e7eb      	b.n	80044ee <_printf_i+0x206>
 8004516:	2500      	movs	r5, #0
 8004518:	f104 0619 	add.w	r6, r4, #25
 800451c:	e7f5      	b.n	800450a <_printf_i+0x222>
 800451e:	bf00      	nop
 8004520:	080067fb 	.word	0x080067fb
 8004524:	0800680c 	.word	0x0800680c

08004528 <std>:
 8004528:	2300      	movs	r3, #0
 800452a:	b510      	push	{r4, lr}
 800452c:	4604      	mov	r4, r0
 800452e:	e9c0 3300 	strd	r3, r3, [r0]
 8004532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004536:	6083      	str	r3, [r0, #8]
 8004538:	8181      	strh	r1, [r0, #12]
 800453a:	6643      	str	r3, [r0, #100]	@ 0x64
 800453c:	81c2      	strh	r2, [r0, #14]
 800453e:	6183      	str	r3, [r0, #24]
 8004540:	4619      	mov	r1, r3
 8004542:	2208      	movs	r2, #8
 8004544:	305c      	adds	r0, #92	@ 0x5c
 8004546:	f000 f8f4 	bl	8004732 <memset>
 800454a:	4b0d      	ldr	r3, [pc, #52]	@ (8004580 <std+0x58>)
 800454c:	6263      	str	r3, [r4, #36]	@ 0x24
 800454e:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <std+0x5c>)
 8004550:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004552:	4b0d      	ldr	r3, [pc, #52]	@ (8004588 <std+0x60>)
 8004554:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004556:	4b0d      	ldr	r3, [pc, #52]	@ (800458c <std+0x64>)
 8004558:	6323      	str	r3, [r4, #48]	@ 0x30
 800455a:	4b0d      	ldr	r3, [pc, #52]	@ (8004590 <std+0x68>)
 800455c:	6224      	str	r4, [r4, #32]
 800455e:	429c      	cmp	r4, r3
 8004560:	d006      	beq.n	8004570 <std+0x48>
 8004562:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004566:	4294      	cmp	r4, r2
 8004568:	d002      	beq.n	8004570 <std+0x48>
 800456a:	33d0      	adds	r3, #208	@ 0xd0
 800456c:	429c      	cmp	r4, r3
 800456e:	d105      	bne.n	800457c <std+0x54>
 8004570:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004578:	f000 b96a 	b.w	8004850 <__retarget_lock_init_recursive>
 800457c:	bd10      	pop	{r4, pc}
 800457e:	bf00      	nop
 8004580:	080046ad 	.word	0x080046ad
 8004584:	080046cf 	.word	0x080046cf
 8004588:	08004707 	.word	0x08004707
 800458c:	0800472b 	.word	0x0800472b
 8004590:	20000364 	.word	0x20000364

08004594 <stdio_exit_handler>:
 8004594:	4a02      	ldr	r2, [pc, #8]	@ (80045a0 <stdio_exit_handler+0xc>)
 8004596:	4903      	ldr	r1, [pc, #12]	@ (80045a4 <stdio_exit_handler+0x10>)
 8004598:	4803      	ldr	r0, [pc, #12]	@ (80045a8 <stdio_exit_handler+0x14>)
 800459a:	f000 b869 	b.w	8004670 <_fwalk_sglue>
 800459e:	bf00      	nop
 80045a0:	2000000c 	.word	0x2000000c
 80045a4:	08005efd 	.word	0x08005efd
 80045a8:	2000001c 	.word	0x2000001c

080045ac <cleanup_stdio>:
 80045ac:	6841      	ldr	r1, [r0, #4]
 80045ae:	4b0c      	ldr	r3, [pc, #48]	@ (80045e0 <cleanup_stdio+0x34>)
 80045b0:	4299      	cmp	r1, r3
 80045b2:	b510      	push	{r4, lr}
 80045b4:	4604      	mov	r4, r0
 80045b6:	d001      	beq.n	80045bc <cleanup_stdio+0x10>
 80045b8:	f001 fca0 	bl	8005efc <_fflush_r>
 80045bc:	68a1      	ldr	r1, [r4, #8]
 80045be:	4b09      	ldr	r3, [pc, #36]	@ (80045e4 <cleanup_stdio+0x38>)
 80045c0:	4299      	cmp	r1, r3
 80045c2:	d002      	beq.n	80045ca <cleanup_stdio+0x1e>
 80045c4:	4620      	mov	r0, r4
 80045c6:	f001 fc99 	bl	8005efc <_fflush_r>
 80045ca:	68e1      	ldr	r1, [r4, #12]
 80045cc:	4b06      	ldr	r3, [pc, #24]	@ (80045e8 <cleanup_stdio+0x3c>)
 80045ce:	4299      	cmp	r1, r3
 80045d0:	d004      	beq.n	80045dc <cleanup_stdio+0x30>
 80045d2:	4620      	mov	r0, r4
 80045d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d8:	f001 bc90 	b.w	8005efc <_fflush_r>
 80045dc:	bd10      	pop	{r4, pc}
 80045de:	bf00      	nop
 80045e0:	20000364 	.word	0x20000364
 80045e4:	200003cc 	.word	0x200003cc
 80045e8:	20000434 	.word	0x20000434

080045ec <global_stdio_init.part.0>:
 80045ec:	b510      	push	{r4, lr}
 80045ee:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <global_stdio_init.part.0+0x30>)
 80045f0:	4c0b      	ldr	r4, [pc, #44]	@ (8004620 <global_stdio_init.part.0+0x34>)
 80045f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004624 <global_stdio_init.part.0+0x38>)
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	4620      	mov	r0, r4
 80045f8:	2200      	movs	r2, #0
 80045fa:	2104      	movs	r1, #4
 80045fc:	f7ff ff94 	bl	8004528 <std>
 8004600:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004604:	2201      	movs	r2, #1
 8004606:	2109      	movs	r1, #9
 8004608:	f7ff ff8e 	bl	8004528 <std>
 800460c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004610:	2202      	movs	r2, #2
 8004612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004616:	2112      	movs	r1, #18
 8004618:	f7ff bf86 	b.w	8004528 <std>
 800461c:	2000049c 	.word	0x2000049c
 8004620:	20000364 	.word	0x20000364
 8004624:	08004595 	.word	0x08004595

08004628 <__sfp_lock_acquire>:
 8004628:	4801      	ldr	r0, [pc, #4]	@ (8004630 <__sfp_lock_acquire+0x8>)
 800462a:	f000 b912 	b.w	8004852 <__retarget_lock_acquire_recursive>
 800462e:	bf00      	nop
 8004630:	200004a5 	.word	0x200004a5

08004634 <__sfp_lock_release>:
 8004634:	4801      	ldr	r0, [pc, #4]	@ (800463c <__sfp_lock_release+0x8>)
 8004636:	f000 b90d 	b.w	8004854 <__retarget_lock_release_recursive>
 800463a:	bf00      	nop
 800463c:	200004a5 	.word	0x200004a5

08004640 <__sinit>:
 8004640:	b510      	push	{r4, lr}
 8004642:	4604      	mov	r4, r0
 8004644:	f7ff fff0 	bl	8004628 <__sfp_lock_acquire>
 8004648:	6a23      	ldr	r3, [r4, #32]
 800464a:	b11b      	cbz	r3, 8004654 <__sinit+0x14>
 800464c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004650:	f7ff bff0 	b.w	8004634 <__sfp_lock_release>
 8004654:	4b04      	ldr	r3, [pc, #16]	@ (8004668 <__sinit+0x28>)
 8004656:	6223      	str	r3, [r4, #32]
 8004658:	4b04      	ldr	r3, [pc, #16]	@ (800466c <__sinit+0x2c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f5      	bne.n	800464c <__sinit+0xc>
 8004660:	f7ff ffc4 	bl	80045ec <global_stdio_init.part.0>
 8004664:	e7f2      	b.n	800464c <__sinit+0xc>
 8004666:	bf00      	nop
 8004668:	080045ad 	.word	0x080045ad
 800466c:	2000049c 	.word	0x2000049c

08004670 <_fwalk_sglue>:
 8004670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004674:	4607      	mov	r7, r0
 8004676:	4688      	mov	r8, r1
 8004678:	4614      	mov	r4, r2
 800467a:	2600      	movs	r6, #0
 800467c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004680:	f1b9 0901 	subs.w	r9, r9, #1
 8004684:	d505      	bpl.n	8004692 <_fwalk_sglue+0x22>
 8004686:	6824      	ldr	r4, [r4, #0]
 8004688:	2c00      	cmp	r4, #0
 800468a:	d1f7      	bne.n	800467c <_fwalk_sglue+0xc>
 800468c:	4630      	mov	r0, r6
 800468e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004692:	89ab      	ldrh	r3, [r5, #12]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d907      	bls.n	80046a8 <_fwalk_sglue+0x38>
 8004698:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800469c:	3301      	adds	r3, #1
 800469e:	d003      	beq.n	80046a8 <_fwalk_sglue+0x38>
 80046a0:	4629      	mov	r1, r5
 80046a2:	4638      	mov	r0, r7
 80046a4:	47c0      	blx	r8
 80046a6:	4306      	orrs	r6, r0
 80046a8:	3568      	adds	r5, #104	@ 0x68
 80046aa:	e7e9      	b.n	8004680 <_fwalk_sglue+0x10>

080046ac <__sread>:
 80046ac:	b510      	push	{r4, lr}
 80046ae:	460c      	mov	r4, r1
 80046b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b4:	f000 f87e 	bl	80047b4 <_read_r>
 80046b8:	2800      	cmp	r0, #0
 80046ba:	bfab      	itete	ge
 80046bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80046be:	89a3      	ldrhlt	r3, [r4, #12]
 80046c0:	181b      	addge	r3, r3, r0
 80046c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80046c6:	bfac      	ite	ge
 80046c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80046ca:	81a3      	strhlt	r3, [r4, #12]
 80046cc:	bd10      	pop	{r4, pc}

080046ce <__swrite>:
 80046ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046d2:	461f      	mov	r7, r3
 80046d4:	898b      	ldrh	r3, [r1, #12]
 80046d6:	05db      	lsls	r3, r3, #23
 80046d8:	4605      	mov	r5, r0
 80046da:	460c      	mov	r4, r1
 80046dc:	4616      	mov	r6, r2
 80046de:	d505      	bpl.n	80046ec <__swrite+0x1e>
 80046e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e4:	2302      	movs	r3, #2
 80046e6:	2200      	movs	r2, #0
 80046e8:	f000 f852 	bl	8004790 <_lseek_r>
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046f6:	81a3      	strh	r3, [r4, #12]
 80046f8:	4632      	mov	r2, r6
 80046fa:	463b      	mov	r3, r7
 80046fc:	4628      	mov	r0, r5
 80046fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004702:	f000 b869 	b.w	80047d8 <_write_r>

08004706 <__sseek>:
 8004706:	b510      	push	{r4, lr}
 8004708:	460c      	mov	r4, r1
 800470a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800470e:	f000 f83f 	bl	8004790 <_lseek_r>
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	bf15      	itete	ne
 8004718:	6560      	strne	r0, [r4, #84]	@ 0x54
 800471a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800471e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004722:	81a3      	strheq	r3, [r4, #12]
 8004724:	bf18      	it	ne
 8004726:	81a3      	strhne	r3, [r4, #12]
 8004728:	bd10      	pop	{r4, pc}

0800472a <__sclose>:
 800472a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800472e:	f000 b81f 	b.w	8004770 <_close_r>

08004732 <memset>:
 8004732:	4402      	add	r2, r0
 8004734:	4603      	mov	r3, r0
 8004736:	4293      	cmp	r3, r2
 8004738:	d100      	bne.n	800473c <memset+0xa>
 800473a:	4770      	bx	lr
 800473c:	f803 1b01 	strb.w	r1, [r3], #1
 8004740:	e7f9      	b.n	8004736 <memset+0x4>

08004742 <strncmp>:
 8004742:	b510      	push	{r4, lr}
 8004744:	b16a      	cbz	r2, 8004762 <strncmp+0x20>
 8004746:	3901      	subs	r1, #1
 8004748:	1884      	adds	r4, r0, r2
 800474a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800474e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004752:	429a      	cmp	r2, r3
 8004754:	d103      	bne.n	800475e <strncmp+0x1c>
 8004756:	42a0      	cmp	r0, r4
 8004758:	d001      	beq.n	800475e <strncmp+0x1c>
 800475a:	2a00      	cmp	r2, #0
 800475c:	d1f5      	bne.n	800474a <strncmp+0x8>
 800475e:	1ad0      	subs	r0, r2, r3
 8004760:	bd10      	pop	{r4, pc}
 8004762:	4610      	mov	r0, r2
 8004764:	e7fc      	b.n	8004760 <strncmp+0x1e>
	...

08004768 <_localeconv_r>:
 8004768:	4800      	ldr	r0, [pc, #0]	@ (800476c <_localeconv_r+0x4>)
 800476a:	4770      	bx	lr
 800476c:	20000158 	.word	0x20000158

08004770 <_close_r>:
 8004770:	b538      	push	{r3, r4, r5, lr}
 8004772:	4d06      	ldr	r5, [pc, #24]	@ (800478c <_close_r+0x1c>)
 8004774:	2300      	movs	r3, #0
 8004776:	4604      	mov	r4, r0
 8004778:	4608      	mov	r0, r1
 800477a:	602b      	str	r3, [r5, #0]
 800477c:	f7fc ff32 	bl	80015e4 <_close>
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	d102      	bne.n	800478a <_close_r+0x1a>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	b103      	cbz	r3, 800478a <_close_r+0x1a>
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	bd38      	pop	{r3, r4, r5, pc}
 800478c:	200004a0 	.word	0x200004a0

08004790 <_lseek_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4d07      	ldr	r5, [pc, #28]	@ (80047b0 <_lseek_r+0x20>)
 8004794:	4604      	mov	r4, r0
 8004796:	4608      	mov	r0, r1
 8004798:	4611      	mov	r1, r2
 800479a:	2200      	movs	r2, #0
 800479c:	602a      	str	r2, [r5, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	f7fc ff47 	bl	8001632 <_lseek>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d102      	bne.n	80047ae <_lseek_r+0x1e>
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	b103      	cbz	r3, 80047ae <_lseek_r+0x1e>
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
 80047b0:	200004a0 	.word	0x200004a0

080047b4 <_read_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4d07      	ldr	r5, [pc, #28]	@ (80047d4 <_read_r+0x20>)
 80047b8:	4604      	mov	r4, r0
 80047ba:	4608      	mov	r0, r1
 80047bc:	4611      	mov	r1, r2
 80047be:	2200      	movs	r2, #0
 80047c0:	602a      	str	r2, [r5, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	f7fc fed5 	bl	8001572 <_read>
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	d102      	bne.n	80047d2 <_read_r+0x1e>
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	b103      	cbz	r3, 80047d2 <_read_r+0x1e>
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	bd38      	pop	{r3, r4, r5, pc}
 80047d4:	200004a0 	.word	0x200004a0

080047d8 <_write_r>:
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	4d07      	ldr	r5, [pc, #28]	@ (80047f8 <_write_r+0x20>)
 80047dc:	4604      	mov	r4, r0
 80047de:	4608      	mov	r0, r1
 80047e0:	4611      	mov	r1, r2
 80047e2:	2200      	movs	r2, #0
 80047e4:	602a      	str	r2, [r5, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f7fc fee0 	bl	80015ac <_write>
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d102      	bne.n	80047f6 <_write_r+0x1e>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	b103      	cbz	r3, 80047f6 <_write_r+0x1e>
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	200004a0 	.word	0x200004a0

080047fc <__errno>:
 80047fc:	4b01      	ldr	r3, [pc, #4]	@ (8004804 <__errno+0x8>)
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000018 	.word	0x20000018

08004808 <__libc_init_array>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4d0d      	ldr	r5, [pc, #52]	@ (8004840 <__libc_init_array+0x38>)
 800480c:	4c0d      	ldr	r4, [pc, #52]	@ (8004844 <__libc_init_array+0x3c>)
 800480e:	1b64      	subs	r4, r4, r5
 8004810:	10a4      	asrs	r4, r4, #2
 8004812:	2600      	movs	r6, #0
 8004814:	42a6      	cmp	r6, r4
 8004816:	d109      	bne.n	800482c <__libc_init_array+0x24>
 8004818:	4d0b      	ldr	r5, [pc, #44]	@ (8004848 <__libc_init_array+0x40>)
 800481a:	4c0c      	ldr	r4, [pc, #48]	@ (800484c <__libc_init_array+0x44>)
 800481c:	f001 febc 	bl	8006598 <_init>
 8004820:	1b64      	subs	r4, r4, r5
 8004822:	10a4      	asrs	r4, r4, #2
 8004824:	2600      	movs	r6, #0
 8004826:	42a6      	cmp	r6, r4
 8004828:	d105      	bne.n	8004836 <__libc_init_array+0x2e>
 800482a:	bd70      	pop	{r4, r5, r6, pc}
 800482c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004830:	4798      	blx	r3
 8004832:	3601      	adds	r6, #1
 8004834:	e7ee      	b.n	8004814 <__libc_init_array+0xc>
 8004836:	f855 3b04 	ldr.w	r3, [r5], #4
 800483a:	4798      	blx	r3
 800483c:	3601      	adds	r6, #1
 800483e:	e7f2      	b.n	8004826 <__libc_init_array+0x1e>
 8004840:	08006a60 	.word	0x08006a60
 8004844:	08006a60 	.word	0x08006a60
 8004848:	08006a60 	.word	0x08006a60
 800484c:	08006a64 	.word	0x08006a64

08004850 <__retarget_lock_init_recursive>:
 8004850:	4770      	bx	lr

08004852 <__retarget_lock_acquire_recursive>:
 8004852:	4770      	bx	lr

08004854 <__retarget_lock_release_recursive>:
 8004854:	4770      	bx	lr

08004856 <quorem>:
 8004856:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485a:	6903      	ldr	r3, [r0, #16]
 800485c:	690c      	ldr	r4, [r1, #16]
 800485e:	42a3      	cmp	r3, r4
 8004860:	4607      	mov	r7, r0
 8004862:	db7e      	blt.n	8004962 <quorem+0x10c>
 8004864:	3c01      	subs	r4, #1
 8004866:	f101 0814 	add.w	r8, r1, #20
 800486a:	00a3      	lsls	r3, r4, #2
 800486c:	f100 0514 	add.w	r5, r0, #20
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800487c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004880:	3301      	adds	r3, #1
 8004882:	429a      	cmp	r2, r3
 8004884:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004888:	fbb2 f6f3 	udiv	r6, r2, r3
 800488c:	d32e      	bcc.n	80048ec <quorem+0x96>
 800488e:	f04f 0a00 	mov.w	sl, #0
 8004892:	46c4      	mov	ip, r8
 8004894:	46ae      	mov	lr, r5
 8004896:	46d3      	mov	fp, sl
 8004898:	f85c 3b04 	ldr.w	r3, [ip], #4
 800489c:	b298      	uxth	r0, r3
 800489e:	fb06 a000 	mla	r0, r6, r0, sl
 80048a2:	0c02      	lsrs	r2, r0, #16
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	fb06 2303 	mla	r3, r6, r3, r2
 80048aa:	f8de 2000 	ldr.w	r2, [lr]
 80048ae:	b280      	uxth	r0, r0
 80048b0:	b292      	uxth	r2, r2
 80048b2:	1a12      	subs	r2, r2, r0
 80048b4:	445a      	add	r2, fp
 80048b6:	f8de 0000 	ldr.w	r0, [lr]
 80048ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80048be:	b29b      	uxth	r3, r3
 80048c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80048c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80048c8:	b292      	uxth	r2, r2
 80048ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80048ce:	45e1      	cmp	r9, ip
 80048d0:	f84e 2b04 	str.w	r2, [lr], #4
 80048d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80048d8:	d2de      	bcs.n	8004898 <quorem+0x42>
 80048da:	9b00      	ldr	r3, [sp, #0]
 80048dc:	58eb      	ldr	r3, [r5, r3]
 80048de:	b92b      	cbnz	r3, 80048ec <quorem+0x96>
 80048e0:	9b01      	ldr	r3, [sp, #4]
 80048e2:	3b04      	subs	r3, #4
 80048e4:	429d      	cmp	r5, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	d32f      	bcc.n	800494a <quorem+0xf4>
 80048ea:	613c      	str	r4, [r7, #16]
 80048ec:	4638      	mov	r0, r7
 80048ee:	f001 f979 	bl	8005be4 <__mcmp>
 80048f2:	2800      	cmp	r0, #0
 80048f4:	db25      	blt.n	8004942 <quorem+0xec>
 80048f6:	4629      	mov	r1, r5
 80048f8:	2000      	movs	r0, #0
 80048fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80048fe:	f8d1 c000 	ldr.w	ip, [r1]
 8004902:	fa1f fe82 	uxth.w	lr, r2
 8004906:	fa1f f38c 	uxth.w	r3, ip
 800490a:	eba3 030e 	sub.w	r3, r3, lr
 800490e:	4403      	add	r3, r0
 8004910:	0c12      	lsrs	r2, r2, #16
 8004912:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004916:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800491a:	b29b      	uxth	r3, r3
 800491c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004920:	45c1      	cmp	r9, r8
 8004922:	f841 3b04 	str.w	r3, [r1], #4
 8004926:	ea4f 4022 	mov.w	r0, r2, asr #16
 800492a:	d2e6      	bcs.n	80048fa <quorem+0xa4>
 800492c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004930:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004934:	b922      	cbnz	r2, 8004940 <quorem+0xea>
 8004936:	3b04      	subs	r3, #4
 8004938:	429d      	cmp	r5, r3
 800493a:	461a      	mov	r2, r3
 800493c:	d30b      	bcc.n	8004956 <quorem+0x100>
 800493e:	613c      	str	r4, [r7, #16]
 8004940:	3601      	adds	r6, #1
 8004942:	4630      	mov	r0, r6
 8004944:	b003      	add	sp, #12
 8004946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	3b04      	subs	r3, #4
 800494e:	2a00      	cmp	r2, #0
 8004950:	d1cb      	bne.n	80048ea <quorem+0x94>
 8004952:	3c01      	subs	r4, #1
 8004954:	e7c6      	b.n	80048e4 <quorem+0x8e>
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	3b04      	subs	r3, #4
 800495a:	2a00      	cmp	r2, #0
 800495c:	d1ef      	bne.n	800493e <quorem+0xe8>
 800495e:	3c01      	subs	r4, #1
 8004960:	e7ea      	b.n	8004938 <quorem+0xe2>
 8004962:	2000      	movs	r0, #0
 8004964:	e7ee      	b.n	8004944 <quorem+0xee>
	...

08004968 <_dtoa_r>:
 8004968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496c:	69c7      	ldr	r7, [r0, #28]
 800496e:	b099      	sub	sp, #100	@ 0x64
 8004970:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004974:	ec55 4b10 	vmov	r4, r5, d0
 8004978:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800497a:	9109      	str	r1, [sp, #36]	@ 0x24
 800497c:	4683      	mov	fp, r0
 800497e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004980:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004982:	b97f      	cbnz	r7, 80049a4 <_dtoa_r+0x3c>
 8004984:	2010      	movs	r0, #16
 8004986:	f000 fdfd 	bl	8005584 <malloc>
 800498a:	4602      	mov	r2, r0
 800498c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004990:	b920      	cbnz	r0, 800499c <_dtoa_r+0x34>
 8004992:	4ba7      	ldr	r3, [pc, #668]	@ (8004c30 <_dtoa_r+0x2c8>)
 8004994:	21ef      	movs	r1, #239	@ 0xef
 8004996:	48a7      	ldr	r0, [pc, #668]	@ (8004c34 <_dtoa_r+0x2cc>)
 8004998:	f001 faf6 	bl	8005f88 <__assert_func>
 800499c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80049a0:	6007      	str	r7, [r0, #0]
 80049a2:	60c7      	str	r7, [r0, #12]
 80049a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80049a8:	6819      	ldr	r1, [r3, #0]
 80049aa:	b159      	cbz	r1, 80049c4 <_dtoa_r+0x5c>
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	604a      	str	r2, [r1, #4]
 80049b0:	2301      	movs	r3, #1
 80049b2:	4093      	lsls	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
 80049b6:	4658      	mov	r0, fp
 80049b8:	f000 feda 	bl	8005770 <_Bfree>
 80049bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	1e2b      	subs	r3, r5, #0
 80049c6:	bfb9      	ittee	lt
 80049c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80049cc:	9303      	strlt	r3, [sp, #12]
 80049ce:	2300      	movge	r3, #0
 80049d0:	6033      	strge	r3, [r6, #0]
 80049d2:	9f03      	ldr	r7, [sp, #12]
 80049d4:	4b98      	ldr	r3, [pc, #608]	@ (8004c38 <_dtoa_r+0x2d0>)
 80049d6:	bfbc      	itt	lt
 80049d8:	2201      	movlt	r2, #1
 80049da:	6032      	strlt	r2, [r6, #0]
 80049dc:	43bb      	bics	r3, r7
 80049de:	d112      	bne.n	8004a06 <_dtoa_r+0x9e>
 80049e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80049e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80049ec:	4323      	orrs	r3, r4
 80049ee:	f000 854d 	beq.w	800548c <_dtoa_r+0xb24>
 80049f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80049f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004c4c <_dtoa_r+0x2e4>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 854f 	beq.w	800549c <_dtoa_r+0xb34>
 80049fe:	f10a 0303 	add.w	r3, sl, #3
 8004a02:	f000 bd49 	b.w	8005498 <_dtoa_r+0xb30>
 8004a06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	ec51 0b17 	vmov	r0, r1, d7
 8004a10:	2300      	movs	r3, #0
 8004a12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004a16:	f7fc f877 	bl	8000b08 <__aeabi_dcmpeq>
 8004a1a:	4680      	mov	r8, r0
 8004a1c:	b158      	cbz	r0, 8004a36 <_dtoa_r+0xce>
 8004a1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004a20:	2301      	movs	r3, #1
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004a26:	b113      	cbz	r3, 8004a2e <_dtoa_r+0xc6>
 8004a28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004a2a:	4b84      	ldr	r3, [pc, #528]	@ (8004c3c <_dtoa_r+0x2d4>)
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004c50 <_dtoa_r+0x2e8>
 8004a32:	f000 bd33 	b.w	800549c <_dtoa_r+0xb34>
 8004a36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004a3a:	aa16      	add	r2, sp, #88	@ 0x58
 8004a3c:	a917      	add	r1, sp, #92	@ 0x5c
 8004a3e:	4658      	mov	r0, fp
 8004a40:	f001 f980 	bl	8005d44 <__d2b>
 8004a44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004a48:	4681      	mov	r9, r0
 8004a4a:	2e00      	cmp	r6, #0
 8004a4c:	d077      	beq.n	8004b3e <_dtoa_r+0x1d6>
 8004a4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004a60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004a64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004a68:	4619      	mov	r1, r3
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	4b74      	ldr	r3, [pc, #464]	@ (8004c40 <_dtoa_r+0x2d8>)
 8004a6e:	f7fb fc2b 	bl	80002c8 <__aeabi_dsub>
 8004a72:	a369      	add	r3, pc, #420	@ (adr r3, 8004c18 <_dtoa_r+0x2b0>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f7fb fdde 	bl	8000638 <__aeabi_dmul>
 8004a7c:	a368      	add	r3, pc, #416	@ (adr r3, 8004c20 <_dtoa_r+0x2b8>)
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	f7fb fc23 	bl	80002cc <__adddf3>
 8004a86:	4604      	mov	r4, r0
 8004a88:	4630      	mov	r0, r6
 8004a8a:	460d      	mov	r5, r1
 8004a8c:	f7fb fd6a 	bl	8000564 <__aeabi_i2d>
 8004a90:	a365      	add	r3, pc, #404	@ (adr r3, 8004c28 <_dtoa_r+0x2c0>)
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	f7fb fdcf 	bl	8000638 <__aeabi_dmul>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	f7fb fc13 	bl	80002cc <__adddf3>
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	460d      	mov	r5, r1
 8004aaa:	f7fc f875 	bl	8000b98 <__aeabi_d2iz>
 8004aae:	2200      	movs	r2, #0
 8004ab0:	4607      	mov	r7, r0
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	f7fc f830 	bl	8000b1c <__aeabi_dcmplt>
 8004abc:	b140      	cbz	r0, 8004ad0 <_dtoa_r+0x168>
 8004abe:	4638      	mov	r0, r7
 8004ac0:	f7fb fd50 	bl	8000564 <__aeabi_i2d>
 8004ac4:	4622      	mov	r2, r4
 8004ac6:	462b      	mov	r3, r5
 8004ac8:	f7fc f81e 	bl	8000b08 <__aeabi_dcmpeq>
 8004acc:	b900      	cbnz	r0, 8004ad0 <_dtoa_r+0x168>
 8004ace:	3f01      	subs	r7, #1
 8004ad0:	2f16      	cmp	r7, #22
 8004ad2:	d851      	bhi.n	8004b78 <_dtoa_r+0x210>
 8004ad4:	4b5b      	ldr	r3, [pc, #364]	@ (8004c44 <_dtoa_r+0x2dc>)
 8004ad6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ae2:	f7fc f81b 	bl	8000b1c <__aeabi_dcmplt>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d048      	beq.n	8004b7c <_dtoa_r+0x214>
 8004aea:	3f01      	subs	r7, #1
 8004aec:	2300      	movs	r3, #0
 8004aee:	9312      	str	r3, [sp, #72]	@ 0x48
 8004af0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004af2:	1b9b      	subs	r3, r3, r6
 8004af4:	1e5a      	subs	r2, r3, #1
 8004af6:	bf44      	itt	mi
 8004af8:	f1c3 0801 	rsbmi	r8, r3, #1
 8004afc:	2300      	movmi	r3, #0
 8004afe:	9208      	str	r2, [sp, #32]
 8004b00:	bf54      	ite	pl
 8004b02:	f04f 0800 	movpl.w	r8, #0
 8004b06:	9308      	strmi	r3, [sp, #32]
 8004b08:	2f00      	cmp	r7, #0
 8004b0a:	db39      	blt.n	8004b80 <_dtoa_r+0x218>
 8004b0c:	9b08      	ldr	r3, [sp, #32]
 8004b0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004b10:	443b      	add	r3, r7
 8004b12:	9308      	str	r3, [sp, #32]
 8004b14:	2300      	movs	r3, #0
 8004b16:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b1a:	2b09      	cmp	r3, #9
 8004b1c:	d864      	bhi.n	8004be8 <_dtoa_r+0x280>
 8004b1e:	2b05      	cmp	r3, #5
 8004b20:	bfc4      	itt	gt
 8004b22:	3b04      	subgt	r3, #4
 8004b24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b28:	f1a3 0302 	sub.w	r3, r3, #2
 8004b2c:	bfcc      	ite	gt
 8004b2e:	2400      	movgt	r4, #0
 8004b30:	2401      	movle	r4, #1
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d863      	bhi.n	8004bfe <_dtoa_r+0x296>
 8004b36:	e8df f003 	tbb	[pc, r3]
 8004b3a:	372a      	.short	0x372a
 8004b3c:	5535      	.short	0x5535
 8004b3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004b42:	441e      	add	r6, r3
 8004b44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	bfc1      	itttt	gt
 8004b4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004b50:	409f      	lslgt	r7, r3
 8004b52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004b56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004b5a:	bfd6      	itet	le
 8004b5c:	f1c3 0320 	rsble	r3, r3, #32
 8004b60:	ea47 0003 	orrgt.w	r0, r7, r3
 8004b64:	fa04 f003 	lslle.w	r0, r4, r3
 8004b68:	f7fb fcec 	bl	8000544 <__aeabi_ui2d>
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004b72:	3e01      	subs	r6, #1
 8004b74:	9214      	str	r2, [sp, #80]	@ 0x50
 8004b76:	e777      	b.n	8004a68 <_dtoa_r+0x100>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e7b8      	b.n	8004aee <_dtoa_r+0x186>
 8004b7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8004b7e:	e7b7      	b.n	8004af0 <_dtoa_r+0x188>
 8004b80:	427b      	negs	r3, r7
 8004b82:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b84:	2300      	movs	r3, #0
 8004b86:	eba8 0807 	sub.w	r8, r8, r7
 8004b8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004b8c:	e7c4      	b.n	8004b18 <_dtoa_r+0x1b0>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	dc35      	bgt.n	8004c04 <_dtoa_r+0x29c>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	9307      	str	r3, [sp, #28]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	920e      	str	r2, [sp, #56]	@ 0x38
 8004ba2:	e00b      	b.n	8004bbc <_dtoa_r+0x254>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e7f3      	b.n	8004b90 <_dtoa_r+0x228>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004bac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	9307      	str	r3, [sp, #28]
 8004bb8:	bfb8      	it	lt
 8004bba:	2301      	movlt	r3, #1
 8004bbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	f102 0514 	add.w	r5, r2, #20
 8004bc8:	429d      	cmp	r5, r3
 8004bca:	d91f      	bls.n	8004c0c <_dtoa_r+0x2a4>
 8004bcc:	6041      	str	r1, [r0, #4]
 8004bce:	4658      	mov	r0, fp
 8004bd0:	f000 fd8e 	bl	80056f0 <_Balloc>
 8004bd4:	4682      	mov	sl, r0
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d13c      	bne.n	8004c54 <_dtoa_r+0x2ec>
 8004bda:	4b1b      	ldr	r3, [pc, #108]	@ (8004c48 <_dtoa_r+0x2e0>)
 8004bdc:	4602      	mov	r2, r0
 8004bde:	f240 11af 	movw	r1, #431	@ 0x1af
 8004be2:	e6d8      	b.n	8004996 <_dtoa_r+0x2e>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e7e0      	b.n	8004baa <_dtoa_r+0x242>
 8004be8:	2401      	movs	r4, #1
 8004bea:	2300      	movs	r3, #0
 8004bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	9307      	str	r3, [sp, #28]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2312      	movs	r3, #18
 8004bfc:	e7d0      	b.n	8004ba0 <_dtoa_r+0x238>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c02:	e7f5      	b.n	8004bf0 <_dtoa_r+0x288>
 8004c04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	9307      	str	r3, [sp, #28]
 8004c0a:	e7d7      	b.n	8004bbc <_dtoa_r+0x254>
 8004c0c:	3101      	adds	r1, #1
 8004c0e:	0052      	lsls	r2, r2, #1
 8004c10:	e7d8      	b.n	8004bc4 <_dtoa_r+0x25c>
 8004c12:	bf00      	nop
 8004c14:	f3af 8000 	nop.w
 8004c18:	636f4361 	.word	0x636f4361
 8004c1c:	3fd287a7 	.word	0x3fd287a7
 8004c20:	8b60c8b3 	.word	0x8b60c8b3
 8004c24:	3fc68a28 	.word	0x3fc68a28
 8004c28:	509f79fb 	.word	0x509f79fb
 8004c2c:	3fd34413 	.word	0x3fd34413
 8004c30:	0800682a 	.word	0x0800682a
 8004c34:	08006841 	.word	0x08006841
 8004c38:	7ff00000 	.word	0x7ff00000
 8004c3c:	080067fa 	.word	0x080067fa
 8004c40:	3ff80000 	.word	0x3ff80000
 8004c44:	08006938 	.word	0x08006938
 8004c48:	08006899 	.word	0x08006899
 8004c4c:	08006826 	.word	0x08006826
 8004c50:	080067f9 	.word	0x080067f9
 8004c54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c58:	6018      	str	r0, [r3, #0]
 8004c5a:	9b07      	ldr	r3, [sp, #28]
 8004c5c:	2b0e      	cmp	r3, #14
 8004c5e:	f200 80a4 	bhi.w	8004daa <_dtoa_r+0x442>
 8004c62:	2c00      	cmp	r4, #0
 8004c64:	f000 80a1 	beq.w	8004daa <_dtoa_r+0x442>
 8004c68:	2f00      	cmp	r7, #0
 8004c6a:	dd33      	ble.n	8004cd4 <_dtoa_r+0x36c>
 8004c6c:	4bad      	ldr	r3, [pc, #692]	@ (8004f24 <_dtoa_r+0x5bc>)
 8004c6e:	f007 020f 	and.w	r2, r7, #15
 8004c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c76:	ed93 7b00 	vldr	d7, [r3]
 8004c7a:	05f8      	lsls	r0, r7, #23
 8004c7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004c80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004c84:	d516      	bpl.n	8004cb4 <_dtoa_r+0x34c>
 8004c86:	4ba8      	ldr	r3, [pc, #672]	@ (8004f28 <_dtoa_r+0x5c0>)
 8004c88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c90:	f7fb fdfc 	bl	800088c <__aeabi_ddiv>
 8004c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c98:	f004 040f 	and.w	r4, r4, #15
 8004c9c:	2603      	movs	r6, #3
 8004c9e:	4da2      	ldr	r5, [pc, #648]	@ (8004f28 <_dtoa_r+0x5c0>)
 8004ca0:	b954      	cbnz	r4, 8004cb8 <_dtoa_r+0x350>
 8004ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004caa:	f7fb fdef 	bl	800088c <__aeabi_ddiv>
 8004cae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cb2:	e028      	b.n	8004d06 <_dtoa_r+0x39e>
 8004cb4:	2602      	movs	r6, #2
 8004cb6:	e7f2      	b.n	8004c9e <_dtoa_r+0x336>
 8004cb8:	07e1      	lsls	r1, r4, #31
 8004cba:	d508      	bpl.n	8004cce <_dtoa_r+0x366>
 8004cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004cc4:	f7fb fcb8 	bl	8000638 <__aeabi_dmul>
 8004cc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ccc:	3601      	adds	r6, #1
 8004cce:	1064      	asrs	r4, r4, #1
 8004cd0:	3508      	adds	r5, #8
 8004cd2:	e7e5      	b.n	8004ca0 <_dtoa_r+0x338>
 8004cd4:	f000 80d2 	beq.w	8004e7c <_dtoa_r+0x514>
 8004cd8:	427c      	negs	r4, r7
 8004cda:	4b92      	ldr	r3, [pc, #584]	@ (8004f24 <_dtoa_r+0x5bc>)
 8004cdc:	4d92      	ldr	r5, [pc, #584]	@ (8004f28 <_dtoa_r+0x5c0>)
 8004cde:	f004 020f 	and.w	r2, r4, #15
 8004ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004cee:	f7fb fca3 	bl	8000638 <__aeabi_dmul>
 8004cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cf6:	1124      	asrs	r4, r4, #4
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	2602      	movs	r6, #2
 8004cfc:	2c00      	cmp	r4, #0
 8004cfe:	f040 80b2 	bne.w	8004e66 <_dtoa_r+0x4fe>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1d3      	bne.n	8004cae <_dtoa_r+0x346>
 8004d06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004d08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80b7 	beq.w	8004e80 <_dtoa_r+0x518>
 8004d12:	4b86      	ldr	r3, [pc, #536]	@ (8004f2c <_dtoa_r+0x5c4>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	4620      	mov	r0, r4
 8004d18:	4629      	mov	r1, r5
 8004d1a:	f7fb feff 	bl	8000b1c <__aeabi_dcmplt>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	f000 80ae 	beq.w	8004e80 <_dtoa_r+0x518>
 8004d24:	9b07      	ldr	r3, [sp, #28]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80aa 	beq.w	8004e80 <_dtoa_r+0x518>
 8004d2c:	9b00      	ldr	r3, [sp, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	dd37      	ble.n	8004da2 <_dtoa_r+0x43a>
 8004d32:	1e7b      	subs	r3, r7, #1
 8004d34:	9304      	str	r3, [sp, #16]
 8004d36:	4620      	mov	r0, r4
 8004d38:	4b7d      	ldr	r3, [pc, #500]	@ (8004f30 <_dtoa_r+0x5c8>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	f7fb fc7b 	bl	8000638 <__aeabi_dmul>
 8004d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d46:	9c00      	ldr	r4, [sp, #0]
 8004d48:	3601      	adds	r6, #1
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	f7fb fc0a 	bl	8000564 <__aeabi_i2d>
 8004d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d54:	f7fb fc70 	bl	8000638 <__aeabi_dmul>
 8004d58:	4b76      	ldr	r3, [pc, #472]	@ (8004f34 <_dtoa_r+0x5cc>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f7fb fab6 	bl	80002cc <__adddf3>
 8004d60:	4605      	mov	r5, r0
 8004d62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004d66:	2c00      	cmp	r4, #0
 8004d68:	f040 808d 	bne.w	8004e86 <_dtoa_r+0x51e>
 8004d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d70:	4b71      	ldr	r3, [pc, #452]	@ (8004f38 <_dtoa_r+0x5d0>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	f7fb faa8 	bl	80002c8 <__aeabi_dsub>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d80:	462a      	mov	r2, r5
 8004d82:	4633      	mov	r3, r6
 8004d84:	f7fb fee8 	bl	8000b58 <__aeabi_dcmpgt>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	f040 828b 	bne.w	80052a4 <_dtoa_r+0x93c>
 8004d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d92:	462a      	mov	r2, r5
 8004d94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004d98:	f7fb fec0 	bl	8000b1c <__aeabi_dcmplt>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	f040 8128 	bne.w	8004ff2 <_dtoa_r+0x68a>
 8004da2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004da6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004daa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f2c0 815a 	blt.w	8005066 <_dtoa_r+0x6fe>
 8004db2:	2f0e      	cmp	r7, #14
 8004db4:	f300 8157 	bgt.w	8005066 <_dtoa_r+0x6fe>
 8004db8:	4b5a      	ldr	r3, [pc, #360]	@ (8004f24 <_dtoa_r+0x5bc>)
 8004dba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004dbe:	ed93 7b00 	vldr	d7, [r3]
 8004dc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	ed8d 7b00 	vstr	d7, [sp]
 8004dca:	da03      	bge.n	8004dd4 <_dtoa_r+0x46c>
 8004dcc:	9b07      	ldr	r3, [sp, #28]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f340 8101 	ble.w	8004fd6 <_dtoa_r+0x66e>
 8004dd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004dd8:	4656      	mov	r6, sl
 8004dda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dde:	4620      	mov	r0, r4
 8004de0:	4629      	mov	r1, r5
 8004de2:	f7fb fd53 	bl	800088c <__aeabi_ddiv>
 8004de6:	f7fb fed7 	bl	8000b98 <__aeabi_d2iz>
 8004dea:	4680      	mov	r8, r0
 8004dec:	f7fb fbba 	bl	8000564 <__aeabi_i2d>
 8004df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004df4:	f7fb fc20 	bl	8000638 <__aeabi_dmul>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	4629      	mov	r1, r5
 8004e00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004e04:	f7fb fa60 	bl	80002c8 <__aeabi_dsub>
 8004e08:	f806 4b01 	strb.w	r4, [r6], #1
 8004e0c:	9d07      	ldr	r5, [sp, #28]
 8004e0e:	eba6 040a 	sub.w	r4, r6, sl
 8004e12:	42a5      	cmp	r5, r4
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	f040 8117 	bne.w	800504a <_dtoa_r+0x6e2>
 8004e1c:	f7fb fa56 	bl	80002cc <__adddf3>
 8004e20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e24:	4604      	mov	r4, r0
 8004e26:	460d      	mov	r5, r1
 8004e28:	f7fb fe96 	bl	8000b58 <__aeabi_dcmpgt>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	f040 80f9 	bne.w	8005024 <_dtoa_r+0x6bc>
 8004e32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e36:	4620      	mov	r0, r4
 8004e38:	4629      	mov	r1, r5
 8004e3a:	f7fb fe65 	bl	8000b08 <__aeabi_dcmpeq>
 8004e3e:	b118      	cbz	r0, 8004e48 <_dtoa_r+0x4e0>
 8004e40:	f018 0f01 	tst.w	r8, #1
 8004e44:	f040 80ee 	bne.w	8005024 <_dtoa_r+0x6bc>
 8004e48:	4649      	mov	r1, r9
 8004e4a:	4658      	mov	r0, fp
 8004e4c:	f000 fc90 	bl	8005770 <_Bfree>
 8004e50:	2300      	movs	r3, #0
 8004e52:	7033      	strb	r3, [r6, #0]
 8004e54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004e56:	3701      	adds	r7, #1
 8004e58:	601f      	str	r7, [r3, #0]
 8004e5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 831d 	beq.w	800549c <_dtoa_r+0xb34>
 8004e62:	601e      	str	r6, [r3, #0]
 8004e64:	e31a      	b.n	800549c <_dtoa_r+0xb34>
 8004e66:	07e2      	lsls	r2, r4, #31
 8004e68:	d505      	bpl.n	8004e76 <_dtoa_r+0x50e>
 8004e6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e6e:	f7fb fbe3 	bl	8000638 <__aeabi_dmul>
 8004e72:	3601      	adds	r6, #1
 8004e74:	2301      	movs	r3, #1
 8004e76:	1064      	asrs	r4, r4, #1
 8004e78:	3508      	adds	r5, #8
 8004e7a:	e73f      	b.n	8004cfc <_dtoa_r+0x394>
 8004e7c:	2602      	movs	r6, #2
 8004e7e:	e742      	b.n	8004d06 <_dtoa_r+0x39e>
 8004e80:	9c07      	ldr	r4, [sp, #28]
 8004e82:	9704      	str	r7, [sp, #16]
 8004e84:	e761      	b.n	8004d4a <_dtoa_r+0x3e2>
 8004e86:	4b27      	ldr	r3, [pc, #156]	@ (8004f24 <_dtoa_r+0x5bc>)
 8004e88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e92:	4454      	add	r4, sl
 8004e94:	2900      	cmp	r1, #0
 8004e96:	d053      	beq.n	8004f40 <_dtoa_r+0x5d8>
 8004e98:	4928      	ldr	r1, [pc, #160]	@ (8004f3c <_dtoa_r+0x5d4>)
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f7fb fcf6 	bl	800088c <__aeabi_ddiv>
 8004ea0:	4633      	mov	r3, r6
 8004ea2:	462a      	mov	r2, r5
 8004ea4:	f7fb fa10 	bl	80002c8 <__aeabi_dsub>
 8004ea8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004eac:	4656      	mov	r6, sl
 8004eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eb2:	f7fb fe71 	bl	8000b98 <__aeabi_d2iz>
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	f7fb fb54 	bl	8000564 <__aeabi_i2d>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ec4:	f7fb fa00 	bl	80002c8 <__aeabi_dsub>
 8004ec8:	3530      	adds	r5, #48	@ 0x30
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ed2:	f806 5b01 	strb.w	r5, [r6], #1
 8004ed6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004eda:	f7fb fe1f 	bl	8000b1c <__aeabi_dcmplt>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d171      	bne.n	8004fc6 <_dtoa_r+0x65e>
 8004ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ee6:	4911      	ldr	r1, [pc, #68]	@ (8004f2c <_dtoa_r+0x5c4>)
 8004ee8:	2000      	movs	r0, #0
 8004eea:	f7fb f9ed 	bl	80002c8 <__aeabi_dsub>
 8004eee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ef2:	f7fb fe13 	bl	8000b1c <__aeabi_dcmplt>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	f040 8095 	bne.w	8005026 <_dtoa_r+0x6be>
 8004efc:	42a6      	cmp	r6, r4
 8004efe:	f43f af50 	beq.w	8004da2 <_dtoa_r+0x43a>
 8004f02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004f06:	4b0a      	ldr	r3, [pc, #40]	@ (8004f30 <_dtoa_r+0x5c8>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f7fb fb95 	bl	8000638 <__aeabi_dmul>
 8004f0e:	4b08      	ldr	r3, [pc, #32]	@ (8004f30 <_dtoa_r+0x5c8>)
 8004f10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004f14:	2200      	movs	r2, #0
 8004f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f1a:	f7fb fb8d 	bl	8000638 <__aeabi_dmul>
 8004f1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f22:	e7c4      	b.n	8004eae <_dtoa_r+0x546>
 8004f24:	08006938 	.word	0x08006938
 8004f28:	08006910 	.word	0x08006910
 8004f2c:	3ff00000 	.word	0x3ff00000
 8004f30:	40240000 	.word	0x40240000
 8004f34:	401c0000 	.word	0x401c0000
 8004f38:	40140000 	.word	0x40140000
 8004f3c:	3fe00000 	.word	0x3fe00000
 8004f40:	4631      	mov	r1, r6
 8004f42:	4628      	mov	r0, r5
 8004f44:	f7fb fb78 	bl	8000638 <__aeabi_dmul>
 8004f48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004f4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8004f4e:	4656      	mov	r6, sl
 8004f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f54:	f7fb fe20 	bl	8000b98 <__aeabi_d2iz>
 8004f58:	4605      	mov	r5, r0
 8004f5a:	f7fb fb03 	bl	8000564 <__aeabi_i2d>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f66:	f7fb f9af 	bl	80002c8 <__aeabi_dsub>
 8004f6a:	3530      	adds	r5, #48	@ 0x30
 8004f6c:	f806 5b01 	strb.w	r5, [r6], #1
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	42a6      	cmp	r6, r4
 8004f76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	d124      	bne.n	8004fca <_dtoa_r+0x662>
 8004f80:	4bac      	ldr	r3, [pc, #688]	@ (8005234 <_dtoa_r+0x8cc>)
 8004f82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004f86:	f7fb f9a1 	bl	80002cc <__adddf3>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f92:	f7fb fde1 	bl	8000b58 <__aeabi_dcmpgt>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d145      	bne.n	8005026 <_dtoa_r+0x6be>
 8004f9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f9e:	49a5      	ldr	r1, [pc, #660]	@ (8005234 <_dtoa_r+0x8cc>)
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f7fb f991 	bl	80002c8 <__aeabi_dsub>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fae:	f7fb fdb5 	bl	8000b1c <__aeabi_dcmplt>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	f43f aef5 	beq.w	8004da2 <_dtoa_r+0x43a>
 8004fb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004fba:	1e73      	subs	r3, r6, #1
 8004fbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8004fbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004fc2:	2b30      	cmp	r3, #48	@ 0x30
 8004fc4:	d0f8      	beq.n	8004fb8 <_dtoa_r+0x650>
 8004fc6:	9f04      	ldr	r7, [sp, #16]
 8004fc8:	e73e      	b.n	8004e48 <_dtoa_r+0x4e0>
 8004fca:	4b9b      	ldr	r3, [pc, #620]	@ (8005238 <_dtoa_r+0x8d0>)
 8004fcc:	f7fb fb34 	bl	8000638 <__aeabi_dmul>
 8004fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fd4:	e7bc      	b.n	8004f50 <_dtoa_r+0x5e8>
 8004fd6:	d10c      	bne.n	8004ff2 <_dtoa_r+0x68a>
 8004fd8:	4b98      	ldr	r3, [pc, #608]	@ (800523c <_dtoa_r+0x8d4>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fe0:	f7fb fb2a 	bl	8000638 <__aeabi_dmul>
 8004fe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fe8:	f7fb fdac 	bl	8000b44 <__aeabi_dcmpge>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	f000 8157 	beq.w	80052a0 <_dtoa_r+0x938>
 8004ff2:	2400      	movs	r4, #0
 8004ff4:	4625      	mov	r5, r4
 8004ff6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	9304      	str	r3, [sp, #16]
 8004ffc:	4656      	mov	r6, sl
 8004ffe:	2700      	movs	r7, #0
 8005000:	4621      	mov	r1, r4
 8005002:	4658      	mov	r0, fp
 8005004:	f000 fbb4 	bl	8005770 <_Bfree>
 8005008:	2d00      	cmp	r5, #0
 800500a:	d0dc      	beq.n	8004fc6 <_dtoa_r+0x65e>
 800500c:	b12f      	cbz	r7, 800501a <_dtoa_r+0x6b2>
 800500e:	42af      	cmp	r7, r5
 8005010:	d003      	beq.n	800501a <_dtoa_r+0x6b2>
 8005012:	4639      	mov	r1, r7
 8005014:	4658      	mov	r0, fp
 8005016:	f000 fbab 	bl	8005770 <_Bfree>
 800501a:	4629      	mov	r1, r5
 800501c:	4658      	mov	r0, fp
 800501e:	f000 fba7 	bl	8005770 <_Bfree>
 8005022:	e7d0      	b.n	8004fc6 <_dtoa_r+0x65e>
 8005024:	9704      	str	r7, [sp, #16]
 8005026:	4633      	mov	r3, r6
 8005028:	461e      	mov	r6, r3
 800502a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800502e:	2a39      	cmp	r2, #57	@ 0x39
 8005030:	d107      	bne.n	8005042 <_dtoa_r+0x6da>
 8005032:	459a      	cmp	sl, r3
 8005034:	d1f8      	bne.n	8005028 <_dtoa_r+0x6c0>
 8005036:	9a04      	ldr	r2, [sp, #16]
 8005038:	3201      	adds	r2, #1
 800503a:	9204      	str	r2, [sp, #16]
 800503c:	2230      	movs	r2, #48	@ 0x30
 800503e:	f88a 2000 	strb.w	r2, [sl]
 8005042:	781a      	ldrb	r2, [r3, #0]
 8005044:	3201      	adds	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	e7bd      	b.n	8004fc6 <_dtoa_r+0x65e>
 800504a:	4b7b      	ldr	r3, [pc, #492]	@ (8005238 <_dtoa_r+0x8d0>)
 800504c:	2200      	movs	r2, #0
 800504e:	f7fb faf3 	bl	8000638 <__aeabi_dmul>
 8005052:	2200      	movs	r2, #0
 8005054:	2300      	movs	r3, #0
 8005056:	4604      	mov	r4, r0
 8005058:	460d      	mov	r5, r1
 800505a:	f7fb fd55 	bl	8000b08 <__aeabi_dcmpeq>
 800505e:	2800      	cmp	r0, #0
 8005060:	f43f aebb 	beq.w	8004dda <_dtoa_r+0x472>
 8005064:	e6f0      	b.n	8004e48 <_dtoa_r+0x4e0>
 8005066:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005068:	2a00      	cmp	r2, #0
 800506a:	f000 80db 	beq.w	8005224 <_dtoa_r+0x8bc>
 800506e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005070:	2a01      	cmp	r2, #1
 8005072:	f300 80bf 	bgt.w	80051f4 <_dtoa_r+0x88c>
 8005076:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005078:	2a00      	cmp	r2, #0
 800507a:	f000 80b7 	beq.w	80051ec <_dtoa_r+0x884>
 800507e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005082:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005084:	4646      	mov	r6, r8
 8005086:	9a08      	ldr	r2, [sp, #32]
 8005088:	2101      	movs	r1, #1
 800508a:	441a      	add	r2, r3
 800508c:	4658      	mov	r0, fp
 800508e:	4498      	add	r8, r3
 8005090:	9208      	str	r2, [sp, #32]
 8005092:	f000 fc21 	bl	80058d8 <__i2b>
 8005096:	4605      	mov	r5, r0
 8005098:	b15e      	cbz	r6, 80050b2 <_dtoa_r+0x74a>
 800509a:	9b08      	ldr	r3, [sp, #32]
 800509c:	2b00      	cmp	r3, #0
 800509e:	dd08      	ble.n	80050b2 <_dtoa_r+0x74a>
 80050a0:	42b3      	cmp	r3, r6
 80050a2:	9a08      	ldr	r2, [sp, #32]
 80050a4:	bfa8      	it	ge
 80050a6:	4633      	movge	r3, r6
 80050a8:	eba8 0803 	sub.w	r8, r8, r3
 80050ac:	1af6      	subs	r6, r6, r3
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	9308      	str	r3, [sp, #32]
 80050b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050b4:	b1f3      	cbz	r3, 80050f4 <_dtoa_r+0x78c>
 80050b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 80b7 	beq.w	800522c <_dtoa_r+0x8c4>
 80050be:	b18c      	cbz	r4, 80050e4 <_dtoa_r+0x77c>
 80050c0:	4629      	mov	r1, r5
 80050c2:	4622      	mov	r2, r4
 80050c4:	4658      	mov	r0, fp
 80050c6:	f000 fcc7 	bl	8005a58 <__pow5mult>
 80050ca:	464a      	mov	r2, r9
 80050cc:	4601      	mov	r1, r0
 80050ce:	4605      	mov	r5, r0
 80050d0:	4658      	mov	r0, fp
 80050d2:	f000 fc17 	bl	8005904 <__multiply>
 80050d6:	4649      	mov	r1, r9
 80050d8:	9004      	str	r0, [sp, #16]
 80050da:	4658      	mov	r0, fp
 80050dc:	f000 fb48 	bl	8005770 <_Bfree>
 80050e0:	9b04      	ldr	r3, [sp, #16]
 80050e2:	4699      	mov	r9, r3
 80050e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050e6:	1b1a      	subs	r2, r3, r4
 80050e8:	d004      	beq.n	80050f4 <_dtoa_r+0x78c>
 80050ea:	4649      	mov	r1, r9
 80050ec:	4658      	mov	r0, fp
 80050ee:	f000 fcb3 	bl	8005a58 <__pow5mult>
 80050f2:	4681      	mov	r9, r0
 80050f4:	2101      	movs	r1, #1
 80050f6:	4658      	mov	r0, fp
 80050f8:	f000 fbee 	bl	80058d8 <__i2b>
 80050fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050fe:	4604      	mov	r4, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 81cf 	beq.w	80054a4 <_dtoa_r+0xb3c>
 8005106:	461a      	mov	r2, r3
 8005108:	4601      	mov	r1, r0
 800510a:	4658      	mov	r0, fp
 800510c:	f000 fca4 	bl	8005a58 <__pow5mult>
 8005110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005112:	2b01      	cmp	r3, #1
 8005114:	4604      	mov	r4, r0
 8005116:	f300 8095 	bgt.w	8005244 <_dtoa_r+0x8dc>
 800511a:	9b02      	ldr	r3, [sp, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f040 8087 	bne.w	8005230 <_dtoa_r+0x8c8>
 8005122:	9b03      	ldr	r3, [sp, #12]
 8005124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005128:	2b00      	cmp	r3, #0
 800512a:	f040 8089 	bne.w	8005240 <_dtoa_r+0x8d8>
 800512e:	9b03      	ldr	r3, [sp, #12]
 8005130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005134:	0d1b      	lsrs	r3, r3, #20
 8005136:	051b      	lsls	r3, r3, #20
 8005138:	b12b      	cbz	r3, 8005146 <_dtoa_r+0x7de>
 800513a:	9b08      	ldr	r3, [sp, #32]
 800513c:	3301      	adds	r3, #1
 800513e:	9308      	str	r3, [sp, #32]
 8005140:	f108 0801 	add.w	r8, r8, #1
 8005144:	2301      	movs	r3, #1
 8005146:	930a      	str	r3, [sp, #40]	@ 0x28
 8005148:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 81b0 	beq.w	80054b0 <_dtoa_r+0xb48>
 8005150:	6923      	ldr	r3, [r4, #16]
 8005152:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005156:	6918      	ldr	r0, [r3, #16]
 8005158:	f000 fb72 	bl	8005840 <__hi0bits>
 800515c:	f1c0 0020 	rsb	r0, r0, #32
 8005160:	9b08      	ldr	r3, [sp, #32]
 8005162:	4418      	add	r0, r3
 8005164:	f010 001f 	ands.w	r0, r0, #31
 8005168:	d077      	beq.n	800525a <_dtoa_r+0x8f2>
 800516a:	f1c0 0320 	rsb	r3, r0, #32
 800516e:	2b04      	cmp	r3, #4
 8005170:	dd6b      	ble.n	800524a <_dtoa_r+0x8e2>
 8005172:	9b08      	ldr	r3, [sp, #32]
 8005174:	f1c0 001c 	rsb	r0, r0, #28
 8005178:	4403      	add	r3, r0
 800517a:	4480      	add	r8, r0
 800517c:	4406      	add	r6, r0
 800517e:	9308      	str	r3, [sp, #32]
 8005180:	f1b8 0f00 	cmp.w	r8, #0
 8005184:	dd05      	ble.n	8005192 <_dtoa_r+0x82a>
 8005186:	4649      	mov	r1, r9
 8005188:	4642      	mov	r2, r8
 800518a:	4658      	mov	r0, fp
 800518c:	f000 fcbe 	bl	8005b0c <__lshift>
 8005190:	4681      	mov	r9, r0
 8005192:	9b08      	ldr	r3, [sp, #32]
 8005194:	2b00      	cmp	r3, #0
 8005196:	dd05      	ble.n	80051a4 <_dtoa_r+0x83c>
 8005198:	4621      	mov	r1, r4
 800519a:	461a      	mov	r2, r3
 800519c:	4658      	mov	r0, fp
 800519e:	f000 fcb5 	bl	8005b0c <__lshift>
 80051a2:	4604      	mov	r4, r0
 80051a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d059      	beq.n	800525e <_dtoa_r+0x8f6>
 80051aa:	4621      	mov	r1, r4
 80051ac:	4648      	mov	r0, r9
 80051ae:	f000 fd19 	bl	8005be4 <__mcmp>
 80051b2:	2800      	cmp	r0, #0
 80051b4:	da53      	bge.n	800525e <_dtoa_r+0x8f6>
 80051b6:	1e7b      	subs	r3, r7, #1
 80051b8:	9304      	str	r3, [sp, #16]
 80051ba:	4649      	mov	r1, r9
 80051bc:	2300      	movs	r3, #0
 80051be:	220a      	movs	r2, #10
 80051c0:	4658      	mov	r0, fp
 80051c2:	f000 faf7 	bl	80057b4 <__multadd>
 80051c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051c8:	4681      	mov	r9, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8172 	beq.w	80054b4 <_dtoa_r+0xb4c>
 80051d0:	2300      	movs	r3, #0
 80051d2:	4629      	mov	r1, r5
 80051d4:	220a      	movs	r2, #10
 80051d6:	4658      	mov	r0, fp
 80051d8:	f000 faec 	bl	80057b4 <__multadd>
 80051dc:	9b00      	ldr	r3, [sp, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	4605      	mov	r5, r0
 80051e2:	dc67      	bgt.n	80052b4 <_dtoa_r+0x94c>
 80051e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	dc41      	bgt.n	800526e <_dtoa_r+0x906>
 80051ea:	e063      	b.n	80052b4 <_dtoa_r+0x94c>
 80051ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80051ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80051f2:	e746      	b.n	8005082 <_dtoa_r+0x71a>
 80051f4:	9b07      	ldr	r3, [sp, #28]
 80051f6:	1e5c      	subs	r4, r3, #1
 80051f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051fa:	42a3      	cmp	r3, r4
 80051fc:	bfbf      	itttt	lt
 80051fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005200:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005202:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005204:	1ae3      	sublt	r3, r4, r3
 8005206:	bfb4      	ite	lt
 8005208:	18d2      	addlt	r2, r2, r3
 800520a:	1b1c      	subge	r4, r3, r4
 800520c:	9b07      	ldr	r3, [sp, #28]
 800520e:	bfbc      	itt	lt
 8005210:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005212:	2400      	movlt	r4, #0
 8005214:	2b00      	cmp	r3, #0
 8005216:	bfb5      	itete	lt
 8005218:	eba8 0603 	sublt.w	r6, r8, r3
 800521c:	9b07      	ldrge	r3, [sp, #28]
 800521e:	2300      	movlt	r3, #0
 8005220:	4646      	movge	r6, r8
 8005222:	e730      	b.n	8005086 <_dtoa_r+0x71e>
 8005224:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005226:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005228:	4646      	mov	r6, r8
 800522a:	e735      	b.n	8005098 <_dtoa_r+0x730>
 800522c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800522e:	e75c      	b.n	80050ea <_dtoa_r+0x782>
 8005230:	2300      	movs	r3, #0
 8005232:	e788      	b.n	8005146 <_dtoa_r+0x7de>
 8005234:	3fe00000 	.word	0x3fe00000
 8005238:	40240000 	.word	0x40240000
 800523c:	40140000 	.word	0x40140000
 8005240:	9b02      	ldr	r3, [sp, #8]
 8005242:	e780      	b.n	8005146 <_dtoa_r+0x7de>
 8005244:	2300      	movs	r3, #0
 8005246:	930a      	str	r3, [sp, #40]	@ 0x28
 8005248:	e782      	b.n	8005150 <_dtoa_r+0x7e8>
 800524a:	d099      	beq.n	8005180 <_dtoa_r+0x818>
 800524c:	9a08      	ldr	r2, [sp, #32]
 800524e:	331c      	adds	r3, #28
 8005250:	441a      	add	r2, r3
 8005252:	4498      	add	r8, r3
 8005254:	441e      	add	r6, r3
 8005256:	9208      	str	r2, [sp, #32]
 8005258:	e792      	b.n	8005180 <_dtoa_r+0x818>
 800525a:	4603      	mov	r3, r0
 800525c:	e7f6      	b.n	800524c <_dtoa_r+0x8e4>
 800525e:	9b07      	ldr	r3, [sp, #28]
 8005260:	9704      	str	r7, [sp, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	dc20      	bgt.n	80052a8 <_dtoa_r+0x940>
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800526a:	2b02      	cmp	r3, #2
 800526c:	dd1e      	ble.n	80052ac <_dtoa_r+0x944>
 800526e:	9b00      	ldr	r3, [sp, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	f47f aec0 	bne.w	8004ff6 <_dtoa_r+0x68e>
 8005276:	4621      	mov	r1, r4
 8005278:	2205      	movs	r2, #5
 800527a:	4658      	mov	r0, fp
 800527c:	f000 fa9a 	bl	80057b4 <__multadd>
 8005280:	4601      	mov	r1, r0
 8005282:	4604      	mov	r4, r0
 8005284:	4648      	mov	r0, r9
 8005286:	f000 fcad 	bl	8005be4 <__mcmp>
 800528a:	2800      	cmp	r0, #0
 800528c:	f77f aeb3 	ble.w	8004ff6 <_dtoa_r+0x68e>
 8005290:	4656      	mov	r6, sl
 8005292:	2331      	movs	r3, #49	@ 0x31
 8005294:	f806 3b01 	strb.w	r3, [r6], #1
 8005298:	9b04      	ldr	r3, [sp, #16]
 800529a:	3301      	adds	r3, #1
 800529c:	9304      	str	r3, [sp, #16]
 800529e:	e6ae      	b.n	8004ffe <_dtoa_r+0x696>
 80052a0:	9c07      	ldr	r4, [sp, #28]
 80052a2:	9704      	str	r7, [sp, #16]
 80052a4:	4625      	mov	r5, r4
 80052a6:	e7f3      	b.n	8005290 <_dtoa_r+0x928>
 80052a8:	9b07      	ldr	r3, [sp, #28]
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 8104 	beq.w	80054bc <_dtoa_r+0xb54>
 80052b4:	2e00      	cmp	r6, #0
 80052b6:	dd05      	ble.n	80052c4 <_dtoa_r+0x95c>
 80052b8:	4629      	mov	r1, r5
 80052ba:	4632      	mov	r2, r6
 80052bc:	4658      	mov	r0, fp
 80052be:	f000 fc25 	bl	8005b0c <__lshift>
 80052c2:	4605      	mov	r5, r0
 80052c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d05a      	beq.n	8005380 <_dtoa_r+0xa18>
 80052ca:	6869      	ldr	r1, [r5, #4]
 80052cc:	4658      	mov	r0, fp
 80052ce:	f000 fa0f 	bl	80056f0 <_Balloc>
 80052d2:	4606      	mov	r6, r0
 80052d4:	b928      	cbnz	r0, 80052e2 <_dtoa_r+0x97a>
 80052d6:	4b84      	ldr	r3, [pc, #528]	@ (80054e8 <_dtoa_r+0xb80>)
 80052d8:	4602      	mov	r2, r0
 80052da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80052de:	f7ff bb5a 	b.w	8004996 <_dtoa_r+0x2e>
 80052e2:	692a      	ldr	r2, [r5, #16]
 80052e4:	3202      	adds	r2, #2
 80052e6:	0092      	lsls	r2, r2, #2
 80052e8:	f105 010c 	add.w	r1, r5, #12
 80052ec:	300c      	adds	r0, #12
 80052ee:	f000 fe3d 	bl	8005f6c <memcpy>
 80052f2:	2201      	movs	r2, #1
 80052f4:	4631      	mov	r1, r6
 80052f6:	4658      	mov	r0, fp
 80052f8:	f000 fc08 	bl	8005b0c <__lshift>
 80052fc:	f10a 0301 	add.w	r3, sl, #1
 8005300:	9307      	str	r3, [sp, #28]
 8005302:	9b00      	ldr	r3, [sp, #0]
 8005304:	4453      	add	r3, sl
 8005306:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005308:	9b02      	ldr	r3, [sp, #8]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	462f      	mov	r7, r5
 8005310:	930a      	str	r3, [sp, #40]	@ 0x28
 8005312:	4605      	mov	r5, r0
 8005314:	9b07      	ldr	r3, [sp, #28]
 8005316:	4621      	mov	r1, r4
 8005318:	3b01      	subs	r3, #1
 800531a:	4648      	mov	r0, r9
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	f7ff fa9a 	bl	8004856 <quorem>
 8005322:	4639      	mov	r1, r7
 8005324:	9002      	str	r0, [sp, #8]
 8005326:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800532a:	4648      	mov	r0, r9
 800532c:	f000 fc5a 	bl	8005be4 <__mcmp>
 8005330:	462a      	mov	r2, r5
 8005332:	9008      	str	r0, [sp, #32]
 8005334:	4621      	mov	r1, r4
 8005336:	4658      	mov	r0, fp
 8005338:	f000 fc70 	bl	8005c1c <__mdiff>
 800533c:	68c2      	ldr	r2, [r0, #12]
 800533e:	4606      	mov	r6, r0
 8005340:	bb02      	cbnz	r2, 8005384 <_dtoa_r+0xa1c>
 8005342:	4601      	mov	r1, r0
 8005344:	4648      	mov	r0, r9
 8005346:	f000 fc4d 	bl	8005be4 <__mcmp>
 800534a:	4602      	mov	r2, r0
 800534c:	4631      	mov	r1, r6
 800534e:	4658      	mov	r0, fp
 8005350:	920e      	str	r2, [sp, #56]	@ 0x38
 8005352:	f000 fa0d 	bl	8005770 <_Bfree>
 8005356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005358:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800535a:	9e07      	ldr	r6, [sp, #28]
 800535c:	ea43 0102 	orr.w	r1, r3, r2
 8005360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005362:	4319      	orrs	r1, r3
 8005364:	d110      	bne.n	8005388 <_dtoa_r+0xa20>
 8005366:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800536a:	d029      	beq.n	80053c0 <_dtoa_r+0xa58>
 800536c:	9b08      	ldr	r3, [sp, #32]
 800536e:	2b00      	cmp	r3, #0
 8005370:	dd02      	ble.n	8005378 <_dtoa_r+0xa10>
 8005372:	9b02      	ldr	r3, [sp, #8]
 8005374:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005378:	9b00      	ldr	r3, [sp, #0]
 800537a:	f883 8000 	strb.w	r8, [r3]
 800537e:	e63f      	b.n	8005000 <_dtoa_r+0x698>
 8005380:	4628      	mov	r0, r5
 8005382:	e7bb      	b.n	80052fc <_dtoa_r+0x994>
 8005384:	2201      	movs	r2, #1
 8005386:	e7e1      	b.n	800534c <_dtoa_r+0x9e4>
 8005388:	9b08      	ldr	r3, [sp, #32]
 800538a:	2b00      	cmp	r3, #0
 800538c:	db04      	blt.n	8005398 <_dtoa_r+0xa30>
 800538e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005390:	430b      	orrs	r3, r1
 8005392:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005394:	430b      	orrs	r3, r1
 8005396:	d120      	bne.n	80053da <_dtoa_r+0xa72>
 8005398:	2a00      	cmp	r2, #0
 800539a:	dded      	ble.n	8005378 <_dtoa_r+0xa10>
 800539c:	4649      	mov	r1, r9
 800539e:	2201      	movs	r2, #1
 80053a0:	4658      	mov	r0, fp
 80053a2:	f000 fbb3 	bl	8005b0c <__lshift>
 80053a6:	4621      	mov	r1, r4
 80053a8:	4681      	mov	r9, r0
 80053aa:	f000 fc1b 	bl	8005be4 <__mcmp>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	dc03      	bgt.n	80053ba <_dtoa_r+0xa52>
 80053b2:	d1e1      	bne.n	8005378 <_dtoa_r+0xa10>
 80053b4:	f018 0f01 	tst.w	r8, #1
 80053b8:	d0de      	beq.n	8005378 <_dtoa_r+0xa10>
 80053ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80053be:	d1d8      	bne.n	8005372 <_dtoa_r+0xa0a>
 80053c0:	9a00      	ldr	r2, [sp, #0]
 80053c2:	2339      	movs	r3, #57	@ 0x39
 80053c4:	7013      	strb	r3, [r2, #0]
 80053c6:	4633      	mov	r3, r6
 80053c8:	461e      	mov	r6, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80053d0:	2a39      	cmp	r2, #57	@ 0x39
 80053d2:	d052      	beq.n	800547a <_dtoa_r+0xb12>
 80053d4:	3201      	adds	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	e612      	b.n	8005000 <_dtoa_r+0x698>
 80053da:	2a00      	cmp	r2, #0
 80053dc:	dd07      	ble.n	80053ee <_dtoa_r+0xa86>
 80053de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80053e2:	d0ed      	beq.n	80053c0 <_dtoa_r+0xa58>
 80053e4:	9a00      	ldr	r2, [sp, #0]
 80053e6:	f108 0301 	add.w	r3, r8, #1
 80053ea:	7013      	strb	r3, [r2, #0]
 80053ec:	e608      	b.n	8005000 <_dtoa_r+0x698>
 80053ee:	9b07      	ldr	r3, [sp, #28]
 80053f0:	9a07      	ldr	r2, [sp, #28]
 80053f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80053f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d028      	beq.n	800544e <_dtoa_r+0xae6>
 80053fc:	4649      	mov	r1, r9
 80053fe:	2300      	movs	r3, #0
 8005400:	220a      	movs	r2, #10
 8005402:	4658      	mov	r0, fp
 8005404:	f000 f9d6 	bl	80057b4 <__multadd>
 8005408:	42af      	cmp	r7, r5
 800540a:	4681      	mov	r9, r0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	f04f 020a 	mov.w	r2, #10
 8005414:	4639      	mov	r1, r7
 8005416:	4658      	mov	r0, fp
 8005418:	d107      	bne.n	800542a <_dtoa_r+0xac2>
 800541a:	f000 f9cb 	bl	80057b4 <__multadd>
 800541e:	4607      	mov	r7, r0
 8005420:	4605      	mov	r5, r0
 8005422:	9b07      	ldr	r3, [sp, #28]
 8005424:	3301      	adds	r3, #1
 8005426:	9307      	str	r3, [sp, #28]
 8005428:	e774      	b.n	8005314 <_dtoa_r+0x9ac>
 800542a:	f000 f9c3 	bl	80057b4 <__multadd>
 800542e:	4629      	mov	r1, r5
 8005430:	4607      	mov	r7, r0
 8005432:	2300      	movs	r3, #0
 8005434:	220a      	movs	r2, #10
 8005436:	4658      	mov	r0, fp
 8005438:	f000 f9bc 	bl	80057b4 <__multadd>
 800543c:	4605      	mov	r5, r0
 800543e:	e7f0      	b.n	8005422 <_dtoa_r+0xaba>
 8005440:	9b00      	ldr	r3, [sp, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	bfcc      	ite	gt
 8005446:	461e      	movgt	r6, r3
 8005448:	2601      	movle	r6, #1
 800544a:	4456      	add	r6, sl
 800544c:	2700      	movs	r7, #0
 800544e:	4649      	mov	r1, r9
 8005450:	2201      	movs	r2, #1
 8005452:	4658      	mov	r0, fp
 8005454:	f000 fb5a 	bl	8005b0c <__lshift>
 8005458:	4621      	mov	r1, r4
 800545a:	4681      	mov	r9, r0
 800545c:	f000 fbc2 	bl	8005be4 <__mcmp>
 8005460:	2800      	cmp	r0, #0
 8005462:	dcb0      	bgt.n	80053c6 <_dtoa_r+0xa5e>
 8005464:	d102      	bne.n	800546c <_dtoa_r+0xb04>
 8005466:	f018 0f01 	tst.w	r8, #1
 800546a:	d1ac      	bne.n	80053c6 <_dtoa_r+0xa5e>
 800546c:	4633      	mov	r3, r6
 800546e:	461e      	mov	r6, r3
 8005470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005474:	2a30      	cmp	r2, #48	@ 0x30
 8005476:	d0fa      	beq.n	800546e <_dtoa_r+0xb06>
 8005478:	e5c2      	b.n	8005000 <_dtoa_r+0x698>
 800547a:	459a      	cmp	sl, r3
 800547c:	d1a4      	bne.n	80053c8 <_dtoa_r+0xa60>
 800547e:	9b04      	ldr	r3, [sp, #16]
 8005480:	3301      	adds	r3, #1
 8005482:	9304      	str	r3, [sp, #16]
 8005484:	2331      	movs	r3, #49	@ 0x31
 8005486:	f88a 3000 	strb.w	r3, [sl]
 800548a:	e5b9      	b.n	8005000 <_dtoa_r+0x698>
 800548c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800548e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80054ec <_dtoa_r+0xb84>
 8005492:	b11b      	cbz	r3, 800549c <_dtoa_r+0xb34>
 8005494:	f10a 0308 	add.w	r3, sl, #8
 8005498:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	4650      	mov	r0, sl
 800549e:	b019      	add	sp, #100	@ 0x64
 80054a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	f77f ae37 	ble.w	800511a <_dtoa_r+0x7b2>
 80054ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80054b0:	2001      	movs	r0, #1
 80054b2:	e655      	b.n	8005160 <_dtoa_r+0x7f8>
 80054b4:	9b00      	ldr	r3, [sp, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f77f aed6 	ble.w	8005268 <_dtoa_r+0x900>
 80054bc:	4656      	mov	r6, sl
 80054be:	4621      	mov	r1, r4
 80054c0:	4648      	mov	r0, r9
 80054c2:	f7ff f9c8 	bl	8004856 <quorem>
 80054c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80054ca:	f806 8b01 	strb.w	r8, [r6], #1
 80054ce:	9b00      	ldr	r3, [sp, #0]
 80054d0:	eba6 020a 	sub.w	r2, r6, sl
 80054d4:	4293      	cmp	r3, r2
 80054d6:	ddb3      	ble.n	8005440 <_dtoa_r+0xad8>
 80054d8:	4649      	mov	r1, r9
 80054da:	2300      	movs	r3, #0
 80054dc:	220a      	movs	r2, #10
 80054de:	4658      	mov	r0, fp
 80054e0:	f000 f968 	bl	80057b4 <__multadd>
 80054e4:	4681      	mov	r9, r0
 80054e6:	e7ea      	b.n	80054be <_dtoa_r+0xb56>
 80054e8:	08006899 	.word	0x08006899
 80054ec:	0800681d 	.word	0x0800681d

080054f0 <_free_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4605      	mov	r5, r0
 80054f4:	2900      	cmp	r1, #0
 80054f6:	d041      	beq.n	800557c <_free_r+0x8c>
 80054f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054fc:	1f0c      	subs	r4, r1, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bfb8      	it	lt
 8005502:	18e4      	addlt	r4, r4, r3
 8005504:	f000 f8e8 	bl	80056d8 <__malloc_lock>
 8005508:	4a1d      	ldr	r2, [pc, #116]	@ (8005580 <_free_r+0x90>)
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	b933      	cbnz	r3, 800551c <_free_r+0x2c>
 800550e:	6063      	str	r3, [r4, #4]
 8005510:	6014      	str	r4, [r2, #0]
 8005512:	4628      	mov	r0, r5
 8005514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005518:	f000 b8e4 	b.w	80056e4 <__malloc_unlock>
 800551c:	42a3      	cmp	r3, r4
 800551e:	d908      	bls.n	8005532 <_free_r+0x42>
 8005520:	6820      	ldr	r0, [r4, #0]
 8005522:	1821      	adds	r1, r4, r0
 8005524:	428b      	cmp	r3, r1
 8005526:	bf01      	itttt	eq
 8005528:	6819      	ldreq	r1, [r3, #0]
 800552a:	685b      	ldreq	r3, [r3, #4]
 800552c:	1809      	addeq	r1, r1, r0
 800552e:	6021      	streq	r1, [r4, #0]
 8005530:	e7ed      	b.n	800550e <_free_r+0x1e>
 8005532:	461a      	mov	r2, r3
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	b10b      	cbz	r3, 800553c <_free_r+0x4c>
 8005538:	42a3      	cmp	r3, r4
 800553a:	d9fa      	bls.n	8005532 <_free_r+0x42>
 800553c:	6811      	ldr	r1, [r2, #0]
 800553e:	1850      	adds	r0, r2, r1
 8005540:	42a0      	cmp	r0, r4
 8005542:	d10b      	bne.n	800555c <_free_r+0x6c>
 8005544:	6820      	ldr	r0, [r4, #0]
 8005546:	4401      	add	r1, r0
 8005548:	1850      	adds	r0, r2, r1
 800554a:	4283      	cmp	r3, r0
 800554c:	6011      	str	r1, [r2, #0]
 800554e:	d1e0      	bne.n	8005512 <_free_r+0x22>
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	6053      	str	r3, [r2, #4]
 8005556:	4408      	add	r0, r1
 8005558:	6010      	str	r0, [r2, #0]
 800555a:	e7da      	b.n	8005512 <_free_r+0x22>
 800555c:	d902      	bls.n	8005564 <_free_r+0x74>
 800555e:	230c      	movs	r3, #12
 8005560:	602b      	str	r3, [r5, #0]
 8005562:	e7d6      	b.n	8005512 <_free_r+0x22>
 8005564:	6820      	ldr	r0, [r4, #0]
 8005566:	1821      	adds	r1, r4, r0
 8005568:	428b      	cmp	r3, r1
 800556a:	bf04      	itt	eq
 800556c:	6819      	ldreq	r1, [r3, #0]
 800556e:	685b      	ldreq	r3, [r3, #4]
 8005570:	6063      	str	r3, [r4, #4]
 8005572:	bf04      	itt	eq
 8005574:	1809      	addeq	r1, r1, r0
 8005576:	6021      	streq	r1, [r4, #0]
 8005578:	6054      	str	r4, [r2, #4]
 800557a:	e7ca      	b.n	8005512 <_free_r+0x22>
 800557c:	bd38      	pop	{r3, r4, r5, pc}
 800557e:	bf00      	nop
 8005580:	200004ac 	.word	0x200004ac

08005584 <malloc>:
 8005584:	4b02      	ldr	r3, [pc, #8]	@ (8005590 <malloc+0xc>)
 8005586:	4601      	mov	r1, r0
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	f000 b825 	b.w	80055d8 <_malloc_r>
 800558e:	bf00      	nop
 8005590:	20000018 	.word	0x20000018

08005594 <sbrk_aligned>:
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	4e0f      	ldr	r6, [pc, #60]	@ (80055d4 <sbrk_aligned+0x40>)
 8005598:	460c      	mov	r4, r1
 800559a:	6831      	ldr	r1, [r6, #0]
 800559c:	4605      	mov	r5, r0
 800559e:	b911      	cbnz	r1, 80055a6 <sbrk_aligned+0x12>
 80055a0:	f000 fcd4 	bl	8005f4c <_sbrk_r>
 80055a4:	6030      	str	r0, [r6, #0]
 80055a6:	4621      	mov	r1, r4
 80055a8:	4628      	mov	r0, r5
 80055aa:	f000 fccf 	bl	8005f4c <_sbrk_r>
 80055ae:	1c43      	adds	r3, r0, #1
 80055b0:	d103      	bne.n	80055ba <sbrk_aligned+0x26>
 80055b2:	f04f 34ff 	mov.w	r4, #4294967295
 80055b6:	4620      	mov	r0, r4
 80055b8:	bd70      	pop	{r4, r5, r6, pc}
 80055ba:	1cc4      	adds	r4, r0, #3
 80055bc:	f024 0403 	bic.w	r4, r4, #3
 80055c0:	42a0      	cmp	r0, r4
 80055c2:	d0f8      	beq.n	80055b6 <sbrk_aligned+0x22>
 80055c4:	1a21      	subs	r1, r4, r0
 80055c6:	4628      	mov	r0, r5
 80055c8:	f000 fcc0 	bl	8005f4c <_sbrk_r>
 80055cc:	3001      	adds	r0, #1
 80055ce:	d1f2      	bne.n	80055b6 <sbrk_aligned+0x22>
 80055d0:	e7ef      	b.n	80055b2 <sbrk_aligned+0x1e>
 80055d2:	bf00      	nop
 80055d4:	200004a8 	.word	0x200004a8

080055d8 <_malloc_r>:
 80055d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055dc:	1ccd      	adds	r5, r1, #3
 80055de:	f025 0503 	bic.w	r5, r5, #3
 80055e2:	3508      	adds	r5, #8
 80055e4:	2d0c      	cmp	r5, #12
 80055e6:	bf38      	it	cc
 80055e8:	250c      	movcc	r5, #12
 80055ea:	2d00      	cmp	r5, #0
 80055ec:	4606      	mov	r6, r0
 80055ee:	db01      	blt.n	80055f4 <_malloc_r+0x1c>
 80055f0:	42a9      	cmp	r1, r5
 80055f2:	d904      	bls.n	80055fe <_malloc_r+0x26>
 80055f4:	230c      	movs	r3, #12
 80055f6:	6033      	str	r3, [r6, #0]
 80055f8:	2000      	movs	r0, #0
 80055fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056d4 <_malloc_r+0xfc>
 8005602:	f000 f869 	bl	80056d8 <__malloc_lock>
 8005606:	f8d8 3000 	ldr.w	r3, [r8]
 800560a:	461c      	mov	r4, r3
 800560c:	bb44      	cbnz	r4, 8005660 <_malloc_r+0x88>
 800560e:	4629      	mov	r1, r5
 8005610:	4630      	mov	r0, r6
 8005612:	f7ff ffbf 	bl	8005594 <sbrk_aligned>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	4604      	mov	r4, r0
 800561a:	d158      	bne.n	80056ce <_malloc_r+0xf6>
 800561c:	f8d8 4000 	ldr.w	r4, [r8]
 8005620:	4627      	mov	r7, r4
 8005622:	2f00      	cmp	r7, #0
 8005624:	d143      	bne.n	80056ae <_malloc_r+0xd6>
 8005626:	2c00      	cmp	r4, #0
 8005628:	d04b      	beq.n	80056c2 <_malloc_r+0xea>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	4639      	mov	r1, r7
 800562e:	4630      	mov	r0, r6
 8005630:	eb04 0903 	add.w	r9, r4, r3
 8005634:	f000 fc8a 	bl	8005f4c <_sbrk_r>
 8005638:	4581      	cmp	r9, r0
 800563a:	d142      	bne.n	80056c2 <_malloc_r+0xea>
 800563c:	6821      	ldr	r1, [r4, #0]
 800563e:	1a6d      	subs	r5, r5, r1
 8005640:	4629      	mov	r1, r5
 8005642:	4630      	mov	r0, r6
 8005644:	f7ff ffa6 	bl	8005594 <sbrk_aligned>
 8005648:	3001      	adds	r0, #1
 800564a:	d03a      	beq.n	80056c2 <_malloc_r+0xea>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	442b      	add	r3, r5
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	f8d8 3000 	ldr.w	r3, [r8]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	bb62      	cbnz	r2, 80056b4 <_malloc_r+0xdc>
 800565a:	f8c8 7000 	str.w	r7, [r8]
 800565e:	e00f      	b.n	8005680 <_malloc_r+0xa8>
 8005660:	6822      	ldr	r2, [r4, #0]
 8005662:	1b52      	subs	r2, r2, r5
 8005664:	d420      	bmi.n	80056a8 <_malloc_r+0xd0>
 8005666:	2a0b      	cmp	r2, #11
 8005668:	d917      	bls.n	800569a <_malloc_r+0xc2>
 800566a:	1961      	adds	r1, r4, r5
 800566c:	42a3      	cmp	r3, r4
 800566e:	6025      	str	r5, [r4, #0]
 8005670:	bf18      	it	ne
 8005672:	6059      	strne	r1, [r3, #4]
 8005674:	6863      	ldr	r3, [r4, #4]
 8005676:	bf08      	it	eq
 8005678:	f8c8 1000 	streq.w	r1, [r8]
 800567c:	5162      	str	r2, [r4, r5]
 800567e:	604b      	str	r3, [r1, #4]
 8005680:	4630      	mov	r0, r6
 8005682:	f000 f82f 	bl	80056e4 <__malloc_unlock>
 8005686:	f104 000b 	add.w	r0, r4, #11
 800568a:	1d23      	adds	r3, r4, #4
 800568c:	f020 0007 	bic.w	r0, r0, #7
 8005690:	1ac2      	subs	r2, r0, r3
 8005692:	bf1c      	itt	ne
 8005694:	1a1b      	subne	r3, r3, r0
 8005696:	50a3      	strne	r3, [r4, r2]
 8005698:	e7af      	b.n	80055fa <_malloc_r+0x22>
 800569a:	6862      	ldr	r2, [r4, #4]
 800569c:	42a3      	cmp	r3, r4
 800569e:	bf0c      	ite	eq
 80056a0:	f8c8 2000 	streq.w	r2, [r8]
 80056a4:	605a      	strne	r2, [r3, #4]
 80056a6:	e7eb      	b.n	8005680 <_malloc_r+0xa8>
 80056a8:	4623      	mov	r3, r4
 80056aa:	6864      	ldr	r4, [r4, #4]
 80056ac:	e7ae      	b.n	800560c <_malloc_r+0x34>
 80056ae:	463c      	mov	r4, r7
 80056b0:	687f      	ldr	r7, [r7, #4]
 80056b2:	e7b6      	b.n	8005622 <_malloc_r+0x4a>
 80056b4:	461a      	mov	r2, r3
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	d1fb      	bne.n	80056b4 <_malloc_r+0xdc>
 80056bc:	2300      	movs	r3, #0
 80056be:	6053      	str	r3, [r2, #4]
 80056c0:	e7de      	b.n	8005680 <_malloc_r+0xa8>
 80056c2:	230c      	movs	r3, #12
 80056c4:	6033      	str	r3, [r6, #0]
 80056c6:	4630      	mov	r0, r6
 80056c8:	f000 f80c 	bl	80056e4 <__malloc_unlock>
 80056cc:	e794      	b.n	80055f8 <_malloc_r+0x20>
 80056ce:	6005      	str	r5, [r0, #0]
 80056d0:	e7d6      	b.n	8005680 <_malloc_r+0xa8>
 80056d2:	bf00      	nop
 80056d4:	200004ac 	.word	0x200004ac

080056d8 <__malloc_lock>:
 80056d8:	4801      	ldr	r0, [pc, #4]	@ (80056e0 <__malloc_lock+0x8>)
 80056da:	f7ff b8ba 	b.w	8004852 <__retarget_lock_acquire_recursive>
 80056de:	bf00      	nop
 80056e0:	200004a4 	.word	0x200004a4

080056e4 <__malloc_unlock>:
 80056e4:	4801      	ldr	r0, [pc, #4]	@ (80056ec <__malloc_unlock+0x8>)
 80056e6:	f7ff b8b5 	b.w	8004854 <__retarget_lock_release_recursive>
 80056ea:	bf00      	nop
 80056ec:	200004a4 	.word	0x200004a4

080056f0 <_Balloc>:
 80056f0:	b570      	push	{r4, r5, r6, lr}
 80056f2:	69c6      	ldr	r6, [r0, #28]
 80056f4:	4604      	mov	r4, r0
 80056f6:	460d      	mov	r5, r1
 80056f8:	b976      	cbnz	r6, 8005718 <_Balloc+0x28>
 80056fa:	2010      	movs	r0, #16
 80056fc:	f7ff ff42 	bl	8005584 <malloc>
 8005700:	4602      	mov	r2, r0
 8005702:	61e0      	str	r0, [r4, #28]
 8005704:	b920      	cbnz	r0, 8005710 <_Balloc+0x20>
 8005706:	4b18      	ldr	r3, [pc, #96]	@ (8005768 <_Balloc+0x78>)
 8005708:	4818      	ldr	r0, [pc, #96]	@ (800576c <_Balloc+0x7c>)
 800570a:	216b      	movs	r1, #107	@ 0x6b
 800570c:	f000 fc3c 	bl	8005f88 <__assert_func>
 8005710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005714:	6006      	str	r6, [r0, #0]
 8005716:	60c6      	str	r6, [r0, #12]
 8005718:	69e6      	ldr	r6, [r4, #28]
 800571a:	68f3      	ldr	r3, [r6, #12]
 800571c:	b183      	cbz	r3, 8005740 <_Balloc+0x50>
 800571e:	69e3      	ldr	r3, [r4, #28]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005726:	b9b8      	cbnz	r0, 8005758 <_Balloc+0x68>
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f605 	lsl.w	r6, r1, r5
 800572e:	1d72      	adds	r2, r6, #5
 8005730:	0092      	lsls	r2, r2, #2
 8005732:	4620      	mov	r0, r4
 8005734:	f000 fc46 	bl	8005fc4 <_calloc_r>
 8005738:	b160      	cbz	r0, 8005754 <_Balloc+0x64>
 800573a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800573e:	e00e      	b.n	800575e <_Balloc+0x6e>
 8005740:	2221      	movs	r2, #33	@ 0x21
 8005742:	2104      	movs	r1, #4
 8005744:	4620      	mov	r0, r4
 8005746:	f000 fc3d 	bl	8005fc4 <_calloc_r>
 800574a:	69e3      	ldr	r3, [r4, #28]
 800574c:	60f0      	str	r0, [r6, #12]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e4      	bne.n	800571e <_Balloc+0x2e>
 8005754:	2000      	movs	r0, #0
 8005756:	bd70      	pop	{r4, r5, r6, pc}
 8005758:	6802      	ldr	r2, [r0, #0]
 800575a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800575e:	2300      	movs	r3, #0
 8005760:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005764:	e7f7      	b.n	8005756 <_Balloc+0x66>
 8005766:	bf00      	nop
 8005768:	0800682a 	.word	0x0800682a
 800576c:	080068aa 	.word	0x080068aa

08005770 <_Bfree>:
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	69c6      	ldr	r6, [r0, #28]
 8005774:	4605      	mov	r5, r0
 8005776:	460c      	mov	r4, r1
 8005778:	b976      	cbnz	r6, 8005798 <_Bfree+0x28>
 800577a:	2010      	movs	r0, #16
 800577c:	f7ff ff02 	bl	8005584 <malloc>
 8005780:	4602      	mov	r2, r0
 8005782:	61e8      	str	r0, [r5, #28]
 8005784:	b920      	cbnz	r0, 8005790 <_Bfree+0x20>
 8005786:	4b09      	ldr	r3, [pc, #36]	@ (80057ac <_Bfree+0x3c>)
 8005788:	4809      	ldr	r0, [pc, #36]	@ (80057b0 <_Bfree+0x40>)
 800578a:	218f      	movs	r1, #143	@ 0x8f
 800578c:	f000 fbfc 	bl	8005f88 <__assert_func>
 8005790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005794:	6006      	str	r6, [r0, #0]
 8005796:	60c6      	str	r6, [r0, #12]
 8005798:	b13c      	cbz	r4, 80057aa <_Bfree+0x3a>
 800579a:	69eb      	ldr	r3, [r5, #28]
 800579c:	6862      	ldr	r2, [r4, #4]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057a4:	6021      	str	r1, [r4, #0]
 80057a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80057aa:	bd70      	pop	{r4, r5, r6, pc}
 80057ac:	0800682a 	.word	0x0800682a
 80057b0:	080068aa 	.word	0x080068aa

080057b4 <__multadd>:
 80057b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b8:	690d      	ldr	r5, [r1, #16]
 80057ba:	4607      	mov	r7, r0
 80057bc:	460c      	mov	r4, r1
 80057be:	461e      	mov	r6, r3
 80057c0:	f101 0c14 	add.w	ip, r1, #20
 80057c4:	2000      	movs	r0, #0
 80057c6:	f8dc 3000 	ldr.w	r3, [ip]
 80057ca:	b299      	uxth	r1, r3
 80057cc:	fb02 6101 	mla	r1, r2, r1, r6
 80057d0:	0c1e      	lsrs	r6, r3, #16
 80057d2:	0c0b      	lsrs	r3, r1, #16
 80057d4:	fb02 3306 	mla	r3, r2, r6, r3
 80057d8:	b289      	uxth	r1, r1
 80057da:	3001      	adds	r0, #1
 80057dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80057e0:	4285      	cmp	r5, r0
 80057e2:	f84c 1b04 	str.w	r1, [ip], #4
 80057e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80057ea:	dcec      	bgt.n	80057c6 <__multadd+0x12>
 80057ec:	b30e      	cbz	r6, 8005832 <__multadd+0x7e>
 80057ee:	68a3      	ldr	r3, [r4, #8]
 80057f0:	42ab      	cmp	r3, r5
 80057f2:	dc19      	bgt.n	8005828 <__multadd+0x74>
 80057f4:	6861      	ldr	r1, [r4, #4]
 80057f6:	4638      	mov	r0, r7
 80057f8:	3101      	adds	r1, #1
 80057fa:	f7ff ff79 	bl	80056f0 <_Balloc>
 80057fe:	4680      	mov	r8, r0
 8005800:	b928      	cbnz	r0, 800580e <__multadd+0x5a>
 8005802:	4602      	mov	r2, r0
 8005804:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <__multadd+0x84>)
 8005806:	480d      	ldr	r0, [pc, #52]	@ (800583c <__multadd+0x88>)
 8005808:	21ba      	movs	r1, #186	@ 0xba
 800580a:	f000 fbbd 	bl	8005f88 <__assert_func>
 800580e:	6922      	ldr	r2, [r4, #16]
 8005810:	3202      	adds	r2, #2
 8005812:	f104 010c 	add.w	r1, r4, #12
 8005816:	0092      	lsls	r2, r2, #2
 8005818:	300c      	adds	r0, #12
 800581a:	f000 fba7 	bl	8005f6c <memcpy>
 800581e:	4621      	mov	r1, r4
 8005820:	4638      	mov	r0, r7
 8005822:	f7ff ffa5 	bl	8005770 <_Bfree>
 8005826:	4644      	mov	r4, r8
 8005828:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800582c:	3501      	adds	r5, #1
 800582e:	615e      	str	r6, [r3, #20]
 8005830:	6125      	str	r5, [r4, #16]
 8005832:	4620      	mov	r0, r4
 8005834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005838:	08006899 	.word	0x08006899
 800583c:	080068aa 	.word	0x080068aa

08005840 <__hi0bits>:
 8005840:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005844:	4603      	mov	r3, r0
 8005846:	bf36      	itet	cc
 8005848:	0403      	lslcc	r3, r0, #16
 800584a:	2000      	movcs	r0, #0
 800584c:	2010      	movcc	r0, #16
 800584e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005852:	bf3c      	itt	cc
 8005854:	021b      	lslcc	r3, r3, #8
 8005856:	3008      	addcc	r0, #8
 8005858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800585c:	bf3c      	itt	cc
 800585e:	011b      	lslcc	r3, r3, #4
 8005860:	3004      	addcc	r0, #4
 8005862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005866:	bf3c      	itt	cc
 8005868:	009b      	lslcc	r3, r3, #2
 800586a:	3002      	addcc	r0, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	db05      	blt.n	800587c <__hi0bits+0x3c>
 8005870:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005874:	f100 0001 	add.w	r0, r0, #1
 8005878:	bf08      	it	eq
 800587a:	2020      	moveq	r0, #32
 800587c:	4770      	bx	lr

0800587e <__lo0bits>:
 800587e:	6803      	ldr	r3, [r0, #0]
 8005880:	4602      	mov	r2, r0
 8005882:	f013 0007 	ands.w	r0, r3, #7
 8005886:	d00b      	beq.n	80058a0 <__lo0bits+0x22>
 8005888:	07d9      	lsls	r1, r3, #31
 800588a:	d421      	bmi.n	80058d0 <__lo0bits+0x52>
 800588c:	0798      	lsls	r0, r3, #30
 800588e:	bf49      	itett	mi
 8005890:	085b      	lsrmi	r3, r3, #1
 8005892:	089b      	lsrpl	r3, r3, #2
 8005894:	2001      	movmi	r0, #1
 8005896:	6013      	strmi	r3, [r2, #0]
 8005898:	bf5c      	itt	pl
 800589a:	6013      	strpl	r3, [r2, #0]
 800589c:	2002      	movpl	r0, #2
 800589e:	4770      	bx	lr
 80058a0:	b299      	uxth	r1, r3
 80058a2:	b909      	cbnz	r1, 80058a8 <__lo0bits+0x2a>
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	2010      	movs	r0, #16
 80058a8:	b2d9      	uxtb	r1, r3
 80058aa:	b909      	cbnz	r1, 80058b0 <__lo0bits+0x32>
 80058ac:	3008      	adds	r0, #8
 80058ae:	0a1b      	lsrs	r3, r3, #8
 80058b0:	0719      	lsls	r1, r3, #28
 80058b2:	bf04      	itt	eq
 80058b4:	091b      	lsreq	r3, r3, #4
 80058b6:	3004      	addeq	r0, #4
 80058b8:	0799      	lsls	r1, r3, #30
 80058ba:	bf04      	itt	eq
 80058bc:	089b      	lsreq	r3, r3, #2
 80058be:	3002      	addeq	r0, #2
 80058c0:	07d9      	lsls	r1, r3, #31
 80058c2:	d403      	bmi.n	80058cc <__lo0bits+0x4e>
 80058c4:	085b      	lsrs	r3, r3, #1
 80058c6:	f100 0001 	add.w	r0, r0, #1
 80058ca:	d003      	beq.n	80058d4 <__lo0bits+0x56>
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	4770      	bx	lr
 80058d0:	2000      	movs	r0, #0
 80058d2:	4770      	bx	lr
 80058d4:	2020      	movs	r0, #32
 80058d6:	4770      	bx	lr

080058d8 <__i2b>:
 80058d8:	b510      	push	{r4, lr}
 80058da:	460c      	mov	r4, r1
 80058dc:	2101      	movs	r1, #1
 80058de:	f7ff ff07 	bl	80056f0 <_Balloc>
 80058e2:	4602      	mov	r2, r0
 80058e4:	b928      	cbnz	r0, 80058f2 <__i2b+0x1a>
 80058e6:	4b05      	ldr	r3, [pc, #20]	@ (80058fc <__i2b+0x24>)
 80058e8:	4805      	ldr	r0, [pc, #20]	@ (8005900 <__i2b+0x28>)
 80058ea:	f240 1145 	movw	r1, #325	@ 0x145
 80058ee:	f000 fb4b 	bl	8005f88 <__assert_func>
 80058f2:	2301      	movs	r3, #1
 80058f4:	6144      	str	r4, [r0, #20]
 80058f6:	6103      	str	r3, [r0, #16]
 80058f8:	bd10      	pop	{r4, pc}
 80058fa:	bf00      	nop
 80058fc:	08006899 	.word	0x08006899
 8005900:	080068aa 	.word	0x080068aa

08005904 <__multiply>:
 8005904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005908:	4614      	mov	r4, r2
 800590a:	690a      	ldr	r2, [r1, #16]
 800590c:	6923      	ldr	r3, [r4, #16]
 800590e:	429a      	cmp	r2, r3
 8005910:	bfa8      	it	ge
 8005912:	4623      	movge	r3, r4
 8005914:	460f      	mov	r7, r1
 8005916:	bfa4      	itt	ge
 8005918:	460c      	movge	r4, r1
 800591a:	461f      	movge	r7, r3
 800591c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005920:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005924:	68a3      	ldr	r3, [r4, #8]
 8005926:	6861      	ldr	r1, [r4, #4]
 8005928:	eb0a 0609 	add.w	r6, sl, r9
 800592c:	42b3      	cmp	r3, r6
 800592e:	b085      	sub	sp, #20
 8005930:	bfb8      	it	lt
 8005932:	3101      	addlt	r1, #1
 8005934:	f7ff fedc 	bl	80056f0 <_Balloc>
 8005938:	b930      	cbnz	r0, 8005948 <__multiply+0x44>
 800593a:	4602      	mov	r2, r0
 800593c:	4b44      	ldr	r3, [pc, #272]	@ (8005a50 <__multiply+0x14c>)
 800593e:	4845      	ldr	r0, [pc, #276]	@ (8005a54 <__multiply+0x150>)
 8005940:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005944:	f000 fb20 	bl	8005f88 <__assert_func>
 8005948:	f100 0514 	add.w	r5, r0, #20
 800594c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005950:	462b      	mov	r3, r5
 8005952:	2200      	movs	r2, #0
 8005954:	4543      	cmp	r3, r8
 8005956:	d321      	bcc.n	800599c <__multiply+0x98>
 8005958:	f107 0114 	add.w	r1, r7, #20
 800595c:	f104 0214 	add.w	r2, r4, #20
 8005960:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005964:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005968:	9302      	str	r3, [sp, #8]
 800596a:	1b13      	subs	r3, r2, r4
 800596c:	3b15      	subs	r3, #21
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	3304      	adds	r3, #4
 8005974:	f104 0715 	add.w	r7, r4, #21
 8005978:	42ba      	cmp	r2, r7
 800597a:	bf38      	it	cc
 800597c:	2304      	movcc	r3, #4
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	9b02      	ldr	r3, [sp, #8]
 8005982:	9103      	str	r1, [sp, #12]
 8005984:	428b      	cmp	r3, r1
 8005986:	d80c      	bhi.n	80059a2 <__multiply+0x9e>
 8005988:	2e00      	cmp	r6, #0
 800598a:	dd03      	ble.n	8005994 <__multiply+0x90>
 800598c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005990:	2b00      	cmp	r3, #0
 8005992:	d05b      	beq.n	8005a4c <__multiply+0x148>
 8005994:	6106      	str	r6, [r0, #16]
 8005996:	b005      	add	sp, #20
 8005998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599c:	f843 2b04 	str.w	r2, [r3], #4
 80059a0:	e7d8      	b.n	8005954 <__multiply+0x50>
 80059a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80059a6:	f1ba 0f00 	cmp.w	sl, #0
 80059aa:	d024      	beq.n	80059f6 <__multiply+0xf2>
 80059ac:	f104 0e14 	add.w	lr, r4, #20
 80059b0:	46a9      	mov	r9, r5
 80059b2:	f04f 0c00 	mov.w	ip, #0
 80059b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80059ba:	f8d9 3000 	ldr.w	r3, [r9]
 80059be:	fa1f fb87 	uxth.w	fp, r7
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80059c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80059cc:	f8d9 7000 	ldr.w	r7, [r9]
 80059d0:	4463      	add	r3, ip
 80059d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80059d6:	fb0a c70b 	mla	r7, sl, fp, ip
 80059da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80059de:	b29b      	uxth	r3, r3
 80059e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80059e4:	4572      	cmp	r2, lr
 80059e6:	f849 3b04 	str.w	r3, [r9], #4
 80059ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80059ee:	d8e2      	bhi.n	80059b6 <__multiply+0xb2>
 80059f0:	9b01      	ldr	r3, [sp, #4]
 80059f2:	f845 c003 	str.w	ip, [r5, r3]
 80059f6:	9b03      	ldr	r3, [sp, #12]
 80059f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80059fc:	3104      	adds	r1, #4
 80059fe:	f1b9 0f00 	cmp.w	r9, #0
 8005a02:	d021      	beq.n	8005a48 <__multiply+0x144>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	f104 0c14 	add.w	ip, r4, #20
 8005a0a:	46ae      	mov	lr, r5
 8005a0c:	f04f 0a00 	mov.w	sl, #0
 8005a10:	f8bc b000 	ldrh.w	fp, [ip]
 8005a14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005a18:	fb09 770b 	mla	r7, r9, fp, r7
 8005a1c:	4457      	add	r7, sl
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005a24:	f84e 3b04 	str.w	r3, [lr], #4
 8005a28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005a2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a30:	f8be 3000 	ldrh.w	r3, [lr]
 8005a34:	fb09 330a 	mla	r3, r9, sl, r3
 8005a38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005a3c:	4562      	cmp	r2, ip
 8005a3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a42:	d8e5      	bhi.n	8005a10 <__multiply+0x10c>
 8005a44:	9f01      	ldr	r7, [sp, #4]
 8005a46:	51eb      	str	r3, [r5, r7]
 8005a48:	3504      	adds	r5, #4
 8005a4a:	e799      	b.n	8005980 <__multiply+0x7c>
 8005a4c:	3e01      	subs	r6, #1
 8005a4e:	e79b      	b.n	8005988 <__multiply+0x84>
 8005a50:	08006899 	.word	0x08006899
 8005a54:	080068aa 	.word	0x080068aa

08005a58 <__pow5mult>:
 8005a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a5c:	4615      	mov	r5, r2
 8005a5e:	f012 0203 	ands.w	r2, r2, #3
 8005a62:	4607      	mov	r7, r0
 8005a64:	460e      	mov	r6, r1
 8005a66:	d007      	beq.n	8005a78 <__pow5mult+0x20>
 8005a68:	4c25      	ldr	r4, [pc, #148]	@ (8005b00 <__pow5mult+0xa8>)
 8005a6a:	3a01      	subs	r2, #1
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a72:	f7ff fe9f 	bl	80057b4 <__multadd>
 8005a76:	4606      	mov	r6, r0
 8005a78:	10ad      	asrs	r5, r5, #2
 8005a7a:	d03d      	beq.n	8005af8 <__pow5mult+0xa0>
 8005a7c:	69fc      	ldr	r4, [r7, #28]
 8005a7e:	b97c      	cbnz	r4, 8005aa0 <__pow5mult+0x48>
 8005a80:	2010      	movs	r0, #16
 8005a82:	f7ff fd7f 	bl	8005584 <malloc>
 8005a86:	4602      	mov	r2, r0
 8005a88:	61f8      	str	r0, [r7, #28]
 8005a8a:	b928      	cbnz	r0, 8005a98 <__pow5mult+0x40>
 8005a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005b04 <__pow5mult+0xac>)
 8005a8e:	481e      	ldr	r0, [pc, #120]	@ (8005b08 <__pow5mult+0xb0>)
 8005a90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005a94:	f000 fa78 	bl	8005f88 <__assert_func>
 8005a98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a9c:	6004      	str	r4, [r0, #0]
 8005a9e:	60c4      	str	r4, [r0, #12]
 8005aa0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005aa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005aa8:	b94c      	cbnz	r4, 8005abe <__pow5mult+0x66>
 8005aaa:	f240 2171 	movw	r1, #625	@ 0x271
 8005aae:	4638      	mov	r0, r7
 8005ab0:	f7ff ff12 	bl	80058d8 <__i2b>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005aba:	4604      	mov	r4, r0
 8005abc:	6003      	str	r3, [r0, #0]
 8005abe:	f04f 0900 	mov.w	r9, #0
 8005ac2:	07eb      	lsls	r3, r5, #31
 8005ac4:	d50a      	bpl.n	8005adc <__pow5mult+0x84>
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4622      	mov	r2, r4
 8005aca:	4638      	mov	r0, r7
 8005acc:	f7ff ff1a 	bl	8005904 <__multiply>
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	4680      	mov	r8, r0
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	f7ff fe4b 	bl	8005770 <_Bfree>
 8005ada:	4646      	mov	r6, r8
 8005adc:	106d      	asrs	r5, r5, #1
 8005ade:	d00b      	beq.n	8005af8 <__pow5mult+0xa0>
 8005ae0:	6820      	ldr	r0, [r4, #0]
 8005ae2:	b938      	cbnz	r0, 8005af4 <__pow5mult+0x9c>
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	4638      	mov	r0, r7
 8005aea:	f7ff ff0b 	bl	8005904 <__multiply>
 8005aee:	6020      	str	r0, [r4, #0]
 8005af0:	f8c0 9000 	str.w	r9, [r0]
 8005af4:	4604      	mov	r4, r0
 8005af6:	e7e4      	b.n	8005ac2 <__pow5mult+0x6a>
 8005af8:	4630      	mov	r0, r6
 8005afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005afe:	bf00      	nop
 8005b00:	08006904 	.word	0x08006904
 8005b04:	0800682a 	.word	0x0800682a
 8005b08:	080068aa 	.word	0x080068aa

08005b0c <__lshift>:
 8005b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b10:	460c      	mov	r4, r1
 8005b12:	6849      	ldr	r1, [r1, #4]
 8005b14:	6923      	ldr	r3, [r4, #16]
 8005b16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005b1a:	68a3      	ldr	r3, [r4, #8]
 8005b1c:	4607      	mov	r7, r0
 8005b1e:	4691      	mov	r9, r2
 8005b20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b24:	f108 0601 	add.w	r6, r8, #1
 8005b28:	42b3      	cmp	r3, r6
 8005b2a:	db0b      	blt.n	8005b44 <__lshift+0x38>
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	f7ff fddf 	bl	80056f0 <_Balloc>
 8005b32:	4605      	mov	r5, r0
 8005b34:	b948      	cbnz	r0, 8005b4a <__lshift+0x3e>
 8005b36:	4602      	mov	r2, r0
 8005b38:	4b28      	ldr	r3, [pc, #160]	@ (8005bdc <__lshift+0xd0>)
 8005b3a:	4829      	ldr	r0, [pc, #164]	@ (8005be0 <__lshift+0xd4>)
 8005b3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005b40:	f000 fa22 	bl	8005f88 <__assert_func>
 8005b44:	3101      	adds	r1, #1
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	e7ee      	b.n	8005b28 <__lshift+0x1c>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f100 0114 	add.w	r1, r0, #20
 8005b50:	f100 0210 	add.w	r2, r0, #16
 8005b54:	4618      	mov	r0, r3
 8005b56:	4553      	cmp	r3, sl
 8005b58:	db33      	blt.n	8005bc2 <__lshift+0xb6>
 8005b5a:	6920      	ldr	r0, [r4, #16]
 8005b5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b60:	f104 0314 	add.w	r3, r4, #20
 8005b64:	f019 091f 	ands.w	r9, r9, #31
 8005b68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b70:	d02b      	beq.n	8005bca <__lshift+0xbe>
 8005b72:	f1c9 0e20 	rsb	lr, r9, #32
 8005b76:	468a      	mov	sl, r1
 8005b78:	2200      	movs	r2, #0
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	fa00 f009 	lsl.w	r0, r0, r9
 8005b80:	4310      	orrs	r0, r2
 8005b82:	f84a 0b04 	str.w	r0, [sl], #4
 8005b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b8a:	459c      	cmp	ip, r3
 8005b8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b90:	d8f3      	bhi.n	8005b7a <__lshift+0x6e>
 8005b92:	ebac 0304 	sub.w	r3, ip, r4
 8005b96:	3b15      	subs	r3, #21
 8005b98:	f023 0303 	bic.w	r3, r3, #3
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	f104 0015 	add.w	r0, r4, #21
 8005ba2:	4584      	cmp	ip, r0
 8005ba4:	bf38      	it	cc
 8005ba6:	2304      	movcc	r3, #4
 8005ba8:	50ca      	str	r2, [r1, r3]
 8005baa:	b10a      	cbz	r2, 8005bb0 <__lshift+0xa4>
 8005bac:	f108 0602 	add.w	r6, r8, #2
 8005bb0:	3e01      	subs	r6, #1
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	612e      	str	r6, [r5, #16]
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	f7ff fdda 	bl	8005770 <_Bfree>
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	e7c5      	b.n	8005b56 <__lshift+0x4a>
 8005bca:	3904      	subs	r1, #4
 8005bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005bd4:	459c      	cmp	ip, r3
 8005bd6:	d8f9      	bhi.n	8005bcc <__lshift+0xc0>
 8005bd8:	e7ea      	b.n	8005bb0 <__lshift+0xa4>
 8005bda:	bf00      	nop
 8005bdc:	08006899 	.word	0x08006899
 8005be0:	080068aa 	.word	0x080068aa

08005be4 <__mcmp>:
 8005be4:	690a      	ldr	r2, [r1, #16]
 8005be6:	4603      	mov	r3, r0
 8005be8:	6900      	ldr	r0, [r0, #16]
 8005bea:	1a80      	subs	r0, r0, r2
 8005bec:	b530      	push	{r4, r5, lr}
 8005bee:	d10e      	bne.n	8005c0e <__mcmp+0x2a>
 8005bf0:	3314      	adds	r3, #20
 8005bf2:	3114      	adds	r1, #20
 8005bf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005bf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005bfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005c04:	4295      	cmp	r5, r2
 8005c06:	d003      	beq.n	8005c10 <__mcmp+0x2c>
 8005c08:	d205      	bcs.n	8005c16 <__mcmp+0x32>
 8005c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0e:	bd30      	pop	{r4, r5, pc}
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	d3f3      	bcc.n	8005bfc <__mcmp+0x18>
 8005c14:	e7fb      	b.n	8005c0e <__mcmp+0x2a>
 8005c16:	2001      	movs	r0, #1
 8005c18:	e7f9      	b.n	8005c0e <__mcmp+0x2a>
	...

08005c1c <__mdiff>:
 8005c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c20:	4689      	mov	r9, r1
 8005c22:	4606      	mov	r6, r0
 8005c24:	4611      	mov	r1, r2
 8005c26:	4648      	mov	r0, r9
 8005c28:	4614      	mov	r4, r2
 8005c2a:	f7ff ffdb 	bl	8005be4 <__mcmp>
 8005c2e:	1e05      	subs	r5, r0, #0
 8005c30:	d112      	bne.n	8005c58 <__mdiff+0x3c>
 8005c32:	4629      	mov	r1, r5
 8005c34:	4630      	mov	r0, r6
 8005c36:	f7ff fd5b 	bl	80056f0 <_Balloc>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	b928      	cbnz	r0, 8005c4a <__mdiff+0x2e>
 8005c3e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d3c <__mdiff+0x120>)
 8005c40:	f240 2137 	movw	r1, #567	@ 0x237
 8005c44:	483e      	ldr	r0, [pc, #248]	@ (8005d40 <__mdiff+0x124>)
 8005c46:	f000 f99f 	bl	8005f88 <__assert_func>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c50:	4610      	mov	r0, r2
 8005c52:	b003      	add	sp, #12
 8005c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c58:	bfbc      	itt	lt
 8005c5a:	464b      	movlt	r3, r9
 8005c5c:	46a1      	movlt	r9, r4
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005c64:	bfba      	itte	lt
 8005c66:	461c      	movlt	r4, r3
 8005c68:	2501      	movlt	r5, #1
 8005c6a:	2500      	movge	r5, #0
 8005c6c:	f7ff fd40 	bl	80056f0 <_Balloc>
 8005c70:	4602      	mov	r2, r0
 8005c72:	b918      	cbnz	r0, 8005c7c <__mdiff+0x60>
 8005c74:	4b31      	ldr	r3, [pc, #196]	@ (8005d3c <__mdiff+0x120>)
 8005c76:	f240 2145 	movw	r1, #581	@ 0x245
 8005c7a:	e7e3      	b.n	8005c44 <__mdiff+0x28>
 8005c7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005c80:	6926      	ldr	r6, [r4, #16]
 8005c82:	60c5      	str	r5, [r0, #12]
 8005c84:	f109 0310 	add.w	r3, r9, #16
 8005c88:	f109 0514 	add.w	r5, r9, #20
 8005c8c:	f104 0e14 	add.w	lr, r4, #20
 8005c90:	f100 0b14 	add.w	fp, r0, #20
 8005c94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005c98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	46d9      	mov	r9, fp
 8005ca0:	f04f 0c00 	mov.w	ip, #0
 8005ca4:	9b01      	ldr	r3, [sp, #4]
 8005ca6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005caa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	fa1f f38a 	uxth.w	r3, sl
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	b283      	uxth	r3, r0
 8005cb8:	1acb      	subs	r3, r1, r3
 8005cba:	0c00      	lsrs	r0, r0, #16
 8005cbc:	4463      	add	r3, ip
 8005cbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005cc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ccc:	4576      	cmp	r6, lr
 8005cce:	f849 3b04 	str.w	r3, [r9], #4
 8005cd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005cd6:	d8e5      	bhi.n	8005ca4 <__mdiff+0x88>
 8005cd8:	1b33      	subs	r3, r6, r4
 8005cda:	3b15      	subs	r3, #21
 8005cdc:	f023 0303 	bic.w	r3, r3, #3
 8005ce0:	3415      	adds	r4, #21
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	42a6      	cmp	r6, r4
 8005ce6:	bf38      	it	cc
 8005ce8:	2304      	movcc	r3, #4
 8005cea:	441d      	add	r5, r3
 8005cec:	445b      	add	r3, fp
 8005cee:	461e      	mov	r6, r3
 8005cf0:	462c      	mov	r4, r5
 8005cf2:	4544      	cmp	r4, r8
 8005cf4:	d30e      	bcc.n	8005d14 <__mdiff+0xf8>
 8005cf6:	f108 0103 	add.w	r1, r8, #3
 8005cfa:	1b49      	subs	r1, r1, r5
 8005cfc:	f021 0103 	bic.w	r1, r1, #3
 8005d00:	3d03      	subs	r5, #3
 8005d02:	45a8      	cmp	r8, r5
 8005d04:	bf38      	it	cc
 8005d06:	2100      	movcc	r1, #0
 8005d08:	440b      	add	r3, r1
 8005d0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005d0e:	b191      	cbz	r1, 8005d36 <__mdiff+0x11a>
 8005d10:	6117      	str	r7, [r2, #16]
 8005d12:	e79d      	b.n	8005c50 <__mdiff+0x34>
 8005d14:	f854 1b04 	ldr.w	r1, [r4], #4
 8005d18:	46e6      	mov	lr, ip
 8005d1a:	0c08      	lsrs	r0, r1, #16
 8005d1c:	fa1c fc81 	uxtah	ip, ip, r1
 8005d20:	4471      	add	r1, lr
 8005d22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005d26:	b289      	uxth	r1, r1
 8005d28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005d2c:	f846 1b04 	str.w	r1, [r6], #4
 8005d30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005d34:	e7dd      	b.n	8005cf2 <__mdiff+0xd6>
 8005d36:	3f01      	subs	r7, #1
 8005d38:	e7e7      	b.n	8005d0a <__mdiff+0xee>
 8005d3a:	bf00      	nop
 8005d3c:	08006899 	.word	0x08006899
 8005d40:	080068aa 	.word	0x080068aa

08005d44 <__d2b>:
 8005d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d48:	460f      	mov	r7, r1
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	ec59 8b10 	vmov	r8, r9, d0
 8005d50:	4616      	mov	r6, r2
 8005d52:	f7ff fccd 	bl	80056f0 <_Balloc>
 8005d56:	4604      	mov	r4, r0
 8005d58:	b930      	cbnz	r0, 8005d68 <__d2b+0x24>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	4b23      	ldr	r3, [pc, #140]	@ (8005dec <__d2b+0xa8>)
 8005d5e:	4824      	ldr	r0, [pc, #144]	@ (8005df0 <__d2b+0xac>)
 8005d60:	f240 310f 	movw	r1, #783	@ 0x30f
 8005d64:	f000 f910 	bl	8005f88 <__assert_func>
 8005d68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d70:	b10d      	cbz	r5, 8005d76 <__d2b+0x32>
 8005d72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d76:	9301      	str	r3, [sp, #4]
 8005d78:	f1b8 0300 	subs.w	r3, r8, #0
 8005d7c:	d023      	beq.n	8005dc6 <__d2b+0x82>
 8005d7e:	4668      	mov	r0, sp
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	f7ff fd7c 	bl	800587e <__lo0bits>
 8005d86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005d8a:	b1d0      	cbz	r0, 8005dc2 <__d2b+0x7e>
 8005d8c:	f1c0 0320 	rsb	r3, r0, #32
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	430b      	orrs	r3, r1
 8005d96:	40c2      	lsrs	r2, r0
 8005d98:	6163      	str	r3, [r4, #20]
 8005d9a:	9201      	str	r2, [sp, #4]
 8005d9c:	9b01      	ldr	r3, [sp, #4]
 8005d9e:	61a3      	str	r3, [r4, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	bf0c      	ite	eq
 8005da4:	2201      	moveq	r2, #1
 8005da6:	2202      	movne	r2, #2
 8005da8:	6122      	str	r2, [r4, #16]
 8005daa:	b1a5      	cbz	r5, 8005dd6 <__d2b+0x92>
 8005dac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005db0:	4405      	add	r5, r0
 8005db2:	603d      	str	r5, [r7, #0]
 8005db4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005db8:	6030      	str	r0, [r6, #0]
 8005dba:	4620      	mov	r0, r4
 8005dbc:	b003      	add	sp, #12
 8005dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dc2:	6161      	str	r1, [r4, #20]
 8005dc4:	e7ea      	b.n	8005d9c <__d2b+0x58>
 8005dc6:	a801      	add	r0, sp, #4
 8005dc8:	f7ff fd59 	bl	800587e <__lo0bits>
 8005dcc:	9b01      	ldr	r3, [sp, #4]
 8005dce:	6163      	str	r3, [r4, #20]
 8005dd0:	3020      	adds	r0, #32
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	e7e8      	b.n	8005da8 <__d2b+0x64>
 8005dd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005dda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005dde:	6038      	str	r0, [r7, #0]
 8005de0:	6918      	ldr	r0, [r3, #16]
 8005de2:	f7ff fd2d 	bl	8005840 <__hi0bits>
 8005de6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005dea:	e7e5      	b.n	8005db8 <__d2b+0x74>
 8005dec:	08006899 	.word	0x08006899
 8005df0:	080068aa 	.word	0x080068aa

08005df4 <__sflush_r>:
 8005df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfc:	0716      	lsls	r6, r2, #28
 8005dfe:	4605      	mov	r5, r0
 8005e00:	460c      	mov	r4, r1
 8005e02:	d454      	bmi.n	8005eae <__sflush_r+0xba>
 8005e04:	684b      	ldr	r3, [r1, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	dc02      	bgt.n	8005e10 <__sflush_r+0x1c>
 8005e0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dd48      	ble.n	8005ea2 <__sflush_r+0xae>
 8005e10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	d045      	beq.n	8005ea2 <__sflush_r+0xae>
 8005e16:	2300      	movs	r3, #0
 8005e18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e1c:	682f      	ldr	r7, [r5, #0]
 8005e1e:	6a21      	ldr	r1, [r4, #32]
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	d030      	beq.n	8005e86 <__sflush_r+0x92>
 8005e24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	0759      	lsls	r1, r3, #29
 8005e2a:	d505      	bpl.n	8005e38 <__sflush_r+0x44>
 8005e2c:	6863      	ldr	r3, [r4, #4]
 8005e2e:	1ad2      	subs	r2, r2, r3
 8005e30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e32:	b10b      	cbz	r3, 8005e38 <__sflush_r+0x44>
 8005e34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e36:	1ad2      	subs	r2, r2, r3
 8005e38:	2300      	movs	r3, #0
 8005e3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e3c:	6a21      	ldr	r1, [r4, #32]
 8005e3e:	4628      	mov	r0, r5
 8005e40:	47b0      	blx	r6
 8005e42:	1c43      	adds	r3, r0, #1
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	d106      	bne.n	8005e56 <__sflush_r+0x62>
 8005e48:	6829      	ldr	r1, [r5, #0]
 8005e4a:	291d      	cmp	r1, #29
 8005e4c:	d82b      	bhi.n	8005ea6 <__sflush_r+0xb2>
 8005e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ef8 <__sflush_r+0x104>)
 8005e50:	410a      	asrs	r2, r1
 8005e52:	07d6      	lsls	r6, r2, #31
 8005e54:	d427      	bmi.n	8005ea6 <__sflush_r+0xb2>
 8005e56:	2200      	movs	r2, #0
 8005e58:	6062      	str	r2, [r4, #4]
 8005e5a:	04d9      	lsls	r1, r3, #19
 8005e5c:	6922      	ldr	r2, [r4, #16]
 8005e5e:	6022      	str	r2, [r4, #0]
 8005e60:	d504      	bpl.n	8005e6c <__sflush_r+0x78>
 8005e62:	1c42      	adds	r2, r0, #1
 8005e64:	d101      	bne.n	8005e6a <__sflush_r+0x76>
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	b903      	cbnz	r3, 8005e6c <__sflush_r+0x78>
 8005e6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e6e:	602f      	str	r7, [r5, #0]
 8005e70:	b1b9      	cbz	r1, 8005ea2 <__sflush_r+0xae>
 8005e72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e76:	4299      	cmp	r1, r3
 8005e78:	d002      	beq.n	8005e80 <__sflush_r+0x8c>
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f7ff fb38 	bl	80054f0 <_free_r>
 8005e80:	2300      	movs	r3, #0
 8005e82:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e84:	e00d      	b.n	8005ea2 <__sflush_r+0xae>
 8005e86:	2301      	movs	r3, #1
 8005e88:	4628      	mov	r0, r5
 8005e8a:	47b0      	blx	r6
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	1c50      	adds	r0, r2, #1
 8005e90:	d1c9      	bne.n	8005e26 <__sflush_r+0x32>
 8005e92:	682b      	ldr	r3, [r5, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0c6      	beq.n	8005e26 <__sflush_r+0x32>
 8005e98:	2b1d      	cmp	r3, #29
 8005e9a:	d001      	beq.n	8005ea0 <__sflush_r+0xac>
 8005e9c:	2b16      	cmp	r3, #22
 8005e9e:	d11e      	bne.n	8005ede <__sflush_r+0xea>
 8005ea0:	602f      	str	r7, [r5, #0]
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	e022      	b.n	8005eec <__sflush_r+0xf8>
 8005ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eaa:	b21b      	sxth	r3, r3
 8005eac:	e01b      	b.n	8005ee6 <__sflush_r+0xf2>
 8005eae:	690f      	ldr	r7, [r1, #16]
 8005eb0:	2f00      	cmp	r7, #0
 8005eb2:	d0f6      	beq.n	8005ea2 <__sflush_r+0xae>
 8005eb4:	0793      	lsls	r3, r2, #30
 8005eb6:	680e      	ldr	r6, [r1, #0]
 8005eb8:	bf08      	it	eq
 8005eba:	694b      	ldreq	r3, [r1, #20]
 8005ebc:	600f      	str	r7, [r1, #0]
 8005ebe:	bf18      	it	ne
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	eba6 0807 	sub.w	r8, r6, r7
 8005ec6:	608b      	str	r3, [r1, #8]
 8005ec8:	f1b8 0f00 	cmp.w	r8, #0
 8005ecc:	dde9      	ble.n	8005ea2 <__sflush_r+0xae>
 8005ece:	6a21      	ldr	r1, [r4, #32]
 8005ed0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005ed2:	4643      	mov	r3, r8
 8005ed4:	463a      	mov	r2, r7
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	47b0      	blx	r6
 8005eda:	2800      	cmp	r0, #0
 8005edc:	dc08      	bgt.n	8005ef0 <__sflush_r+0xfc>
 8005ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ee6:	81a3      	strh	r3, [r4, #12]
 8005ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef0:	4407      	add	r7, r0
 8005ef2:	eba8 0800 	sub.w	r8, r8, r0
 8005ef6:	e7e7      	b.n	8005ec8 <__sflush_r+0xd4>
 8005ef8:	dfbffffe 	.word	0xdfbffffe

08005efc <_fflush_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	690b      	ldr	r3, [r1, #16]
 8005f00:	4605      	mov	r5, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	b913      	cbnz	r3, 8005f0c <_fflush_r+0x10>
 8005f06:	2500      	movs	r5, #0
 8005f08:	4628      	mov	r0, r5
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	b118      	cbz	r0, 8005f16 <_fflush_r+0x1a>
 8005f0e:	6a03      	ldr	r3, [r0, #32]
 8005f10:	b90b      	cbnz	r3, 8005f16 <_fflush_r+0x1a>
 8005f12:	f7fe fb95 	bl	8004640 <__sinit>
 8005f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0f3      	beq.n	8005f06 <_fflush_r+0xa>
 8005f1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f20:	07d0      	lsls	r0, r2, #31
 8005f22:	d404      	bmi.n	8005f2e <_fflush_r+0x32>
 8005f24:	0599      	lsls	r1, r3, #22
 8005f26:	d402      	bmi.n	8005f2e <_fflush_r+0x32>
 8005f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f2a:	f7fe fc92 	bl	8004852 <__retarget_lock_acquire_recursive>
 8005f2e:	4628      	mov	r0, r5
 8005f30:	4621      	mov	r1, r4
 8005f32:	f7ff ff5f 	bl	8005df4 <__sflush_r>
 8005f36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f38:	07da      	lsls	r2, r3, #31
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	d4e4      	bmi.n	8005f08 <_fflush_r+0xc>
 8005f3e:	89a3      	ldrh	r3, [r4, #12]
 8005f40:	059b      	lsls	r3, r3, #22
 8005f42:	d4e1      	bmi.n	8005f08 <_fflush_r+0xc>
 8005f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f46:	f7fe fc85 	bl	8004854 <__retarget_lock_release_recursive>
 8005f4a:	e7dd      	b.n	8005f08 <_fflush_r+0xc>

08005f4c <_sbrk_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4d06      	ldr	r5, [pc, #24]	@ (8005f68 <_sbrk_r+0x1c>)
 8005f50:	2300      	movs	r3, #0
 8005f52:	4604      	mov	r4, r0
 8005f54:	4608      	mov	r0, r1
 8005f56:	602b      	str	r3, [r5, #0]
 8005f58:	f7fb fb78 	bl	800164c <_sbrk>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	d102      	bne.n	8005f66 <_sbrk_r+0x1a>
 8005f60:	682b      	ldr	r3, [r5, #0]
 8005f62:	b103      	cbz	r3, 8005f66 <_sbrk_r+0x1a>
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	200004a0 	.word	0x200004a0

08005f6c <memcpy>:
 8005f6c:	440a      	add	r2, r1
 8005f6e:	4291      	cmp	r1, r2
 8005f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f74:	d100      	bne.n	8005f78 <memcpy+0xc>
 8005f76:	4770      	bx	lr
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f82:	4291      	cmp	r1, r2
 8005f84:	d1f9      	bne.n	8005f7a <memcpy+0xe>
 8005f86:	bd10      	pop	{r4, pc}

08005f88 <__assert_func>:
 8005f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f8a:	4614      	mov	r4, r2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4b09      	ldr	r3, [pc, #36]	@ (8005fb4 <__assert_func+0x2c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4605      	mov	r5, r0
 8005f94:	68d8      	ldr	r0, [r3, #12]
 8005f96:	b954      	cbnz	r4, 8005fae <__assert_func+0x26>
 8005f98:	4b07      	ldr	r3, [pc, #28]	@ (8005fb8 <__assert_func+0x30>)
 8005f9a:	461c      	mov	r4, r3
 8005f9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005fa0:	9100      	str	r1, [sp, #0]
 8005fa2:	462b      	mov	r3, r5
 8005fa4:	4905      	ldr	r1, [pc, #20]	@ (8005fbc <__assert_func+0x34>)
 8005fa6:	f000 f841 	bl	800602c <fiprintf>
 8005faa:	f000 f851 	bl	8006050 <abort>
 8005fae:	4b04      	ldr	r3, [pc, #16]	@ (8005fc0 <__assert_func+0x38>)
 8005fb0:	e7f4      	b.n	8005f9c <__assert_func+0x14>
 8005fb2:	bf00      	nop
 8005fb4:	20000018 	.word	0x20000018
 8005fb8:	08006a45 	.word	0x08006a45
 8005fbc:	08006a17 	.word	0x08006a17
 8005fc0:	08006a0a 	.word	0x08006a0a

08005fc4 <_calloc_r>:
 8005fc4:	b570      	push	{r4, r5, r6, lr}
 8005fc6:	fba1 5402 	umull	r5, r4, r1, r2
 8005fca:	b93c      	cbnz	r4, 8005fdc <_calloc_r+0x18>
 8005fcc:	4629      	mov	r1, r5
 8005fce:	f7ff fb03 	bl	80055d8 <_malloc_r>
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	b928      	cbnz	r0, 8005fe2 <_calloc_r+0x1e>
 8005fd6:	2600      	movs	r6, #0
 8005fd8:	4630      	mov	r0, r6
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
 8005fdc:	220c      	movs	r2, #12
 8005fde:	6002      	str	r2, [r0, #0]
 8005fe0:	e7f9      	b.n	8005fd6 <_calloc_r+0x12>
 8005fe2:	462a      	mov	r2, r5
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	f7fe fba4 	bl	8004732 <memset>
 8005fea:	e7f5      	b.n	8005fd8 <_calloc_r+0x14>

08005fec <__ascii_mbtowc>:
 8005fec:	b082      	sub	sp, #8
 8005fee:	b901      	cbnz	r1, 8005ff2 <__ascii_mbtowc+0x6>
 8005ff0:	a901      	add	r1, sp, #4
 8005ff2:	b142      	cbz	r2, 8006006 <__ascii_mbtowc+0x1a>
 8005ff4:	b14b      	cbz	r3, 800600a <__ascii_mbtowc+0x1e>
 8005ff6:	7813      	ldrb	r3, [r2, #0]
 8005ff8:	600b      	str	r3, [r1, #0]
 8005ffa:	7812      	ldrb	r2, [r2, #0]
 8005ffc:	1e10      	subs	r0, r2, #0
 8005ffe:	bf18      	it	ne
 8006000:	2001      	movne	r0, #1
 8006002:	b002      	add	sp, #8
 8006004:	4770      	bx	lr
 8006006:	4610      	mov	r0, r2
 8006008:	e7fb      	b.n	8006002 <__ascii_mbtowc+0x16>
 800600a:	f06f 0001 	mvn.w	r0, #1
 800600e:	e7f8      	b.n	8006002 <__ascii_mbtowc+0x16>

08006010 <__ascii_wctomb>:
 8006010:	4603      	mov	r3, r0
 8006012:	4608      	mov	r0, r1
 8006014:	b141      	cbz	r1, 8006028 <__ascii_wctomb+0x18>
 8006016:	2aff      	cmp	r2, #255	@ 0xff
 8006018:	d904      	bls.n	8006024 <__ascii_wctomb+0x14>
 800601a:	228a      	movs	r2, #138	@ 0x8a
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	f04f 30ff 	mov.w	r0, #4294967295
 8006022:	4770      	bx	lr
 8006024:	700a      	strb	r2, [r1, #0]
 8006026:	2001      	movs	r0, #1
 8006028:	4770      	bx	lr
	...

0800602c <fiprintf>:
 800602c:	b40e      	push	{r1, r2, r3}
 800602e:	b503      	push	{r0, r1, lr}
 8006030:	4601      	mov	r1, r0
 8006032:	ab03      	add	r3, sp, #12
 8006034:	4805      	ldr	r0, [pc, #20]	@ (800604c <fiprintf+0x20>)
 8006036:	f853 2b04 	ldr.w	r2, [r3], #4
 800603a:	6800      	ldr	r0, [r0, #0]
 800603c:	9301      	str	r3, [sp, #4]
 800603e:	f000 f837 	bl	80060b0 <_vfiprintf_r>
 8006042:	b002      	add	sp, #8
 8006044:	f85d eb04 	ldr.w	lr, [sp], #4
 8006048:	b003      	add	sp, #12
 800604a:	4770      	bx	lr
 800604c:	20000018 	.word	0x20000018

08006050 <abort>:
 8006050:	b508      	push	{r3, lr}
 8006052:	2006      	movs	r0, #6
 8006054:	f000 fa00 	bl	8006458 <raise>
 8006058:	2001      	movs	r0, #1
 800605a:	f7fb fa7f 	bl	800155c <_exit>

0800605e <__sfputc_r>:
 800605e:	6893      	ldr	r3, [r2, #8]
 8006060:	3b01      	subs	r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	b410      	push	{r4}
 8006066:	6093      	str	r3, [r2, #8]
 8006068:	da08      	bge.n	800607c <__sfputc_r+0x1e>
 800606a:	6994      	ldr	r4, [r2, #24]
 800606c:	42a3      	cmp	r3, r4
 800606e:	db01      	blt.n	8006074 <__sfputc_r+0x16>
 8006070:	290a      	cmp	r1, #10
 8006072:	d103      	bne.n	800607c <__sfputc_r+0x1e>
 8006074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006078:	f000 b932 	b.w	80062e0 <__swbuf_r>
 800607c:	6813      	ldr	r3, [r2, #0]
 800607e:	1c58      	adds	r0, r3, #1
 8006080:	6010      	str	r0, [r2, #0]
 8006082:	7019      	strb	r1, [r3, #0]
 8006084:	4608      	mov	r0, r1
 8006086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800608a:	4770      	bx	lr

0800608c <__sfputs_r>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	4606      	mov	r6, r0
 8006090:	460f      	mov	r7, r1
 8006092:	4614      	mov	r4, r2
 8006094:	18d5      	adds	r5, r2, r3
 8006096:	42ac      	cmp	r4, r5
 8006098:	d101      	bne.n	800609e <__sfputs_r+0x12>
 800609a:	2000      	movs	r0, #0
 800609c:	e007      	b.n	80060ae <__sfputs_r+0x22>
 800609e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a2:	463a      	mov	r2, r7
 80060a4:	4630      	mov	r0, r6
 80060a6:	f7ff ffda 	bl	800605e <__sfputc_r>
 80060aa:	1c43      	adds	r3, r0, #1
 80060ac:	d1f3      	bne.n	8006096 <__sfputs_r+0xa>
 80060ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080060b0 <_vfiprintf_r>:
 80060b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b4:	460d      	mov	r5, r1
 80060b6:	b09d      	sub	sp, #116	@ 0x74
 80060b8:	4614      	mov	r4, r2
 80060ba:	4698      	mov	r8, r3
 80060bc:	4606      	mov	r6, r0
 80060be:	b118      	cbz	r0, 80060c8 <_vfiprintf_r+0x18>
 80060c0:	6a03      	ldr	r3, [r0, #32]
 80060c2:	b90b      	cbnz	r3, 80060c8 <_vfiprintf_r+0x18>
 80060c4:	f7fe fabc 	bl	8004640 <__sinit>
 80060c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060ca:	07d9      	lsls	r1, r3, #31
 80060cc:	d405      	bmi.n	80060da <_vfiprintf_r+0x2a>
 80060ce:	89ab      	ldrh	r3, [r5, #12]
 80060d0:	059a      	lsls	r2, r3, #22
 80060d2:	d402      	bmi.n	80060da <_vfiprintf_r+0x2a>
 80060d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060d6:	f7fe fbbc 	bl	8004852 <__retarget_lock_acquire_recursive>
 80060da:	89ab      	ldrh	r3, [r5, #12]
 80060dc:	071b      	lsls	r3, r3, #28
 80060de:	d501      	bpl.n	80060e4 <_vfiprintf_r+0x34>
 80060e0:	692b      	ldr	r3, [r5, #16]
 80060e2:	b99b      	cbnz	r3, 800610c <_vfiprintf_r+0x5c>
 80060e4:	4629      	mov	r1, r5
 80060e6:	4630      	mov	r0, r6
 80060e8:	f000 f938 	bl	800635c <__swsetup_r>
 80060ec:	b170      	cbz	r0, 800610c <_vfiprintf_r+0x5c>
 80060ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060f0:	07dc      	lsls	r4, r3, #31
 80060f2:	d504      	bpl.n	80060fe <_vfiprintf_r+0x4e>
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	b01d      	add	sp, #116	@ 0x74
 80060fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fe:	89ab      	ldrh	r3, [r5, #12]
 8006100:	0598      	lsls	r0, r3, #22
 8006102:	d4f7      	bmi.n	80060f4 <_vfiprintf_r+0x44>
 8006104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006106:	f7fe fba5 	bl	8004854 <__retarget_lock_release_recursive>
 800610a:	e7f3      	b.n	80060f4 <_vfiprintf_r+0x44>
 800610c:	2300      	movs	r3, #0
 800610e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006110:	2320      	movs	r3, #32
 8006112:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006116:	f8cd 800c 	str.w	r8, [sp, #12]
 800611a:	2330      	movs	r3, #48	@ 0x30
 800611c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80062cc <_vfiprintf_r+0x21c>
 8006120:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006124:	f04f 0901 	mov.w	r9, #1
 8006128:	4623      	mov	r3, r4
 800612a:	469a      	mov	sl, r3
 800612c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006130:	b10a      	cbz	r2, 8006136 <_vfiprintf_r+0x86>
 8006132:	2a25      	cmp	r2, #37	@ 0x25
 8006134:	d1f9      	bne.n	800612a <_vfiprintf_r+0x7a>
 8006136:	ebba 0b04 	subs.w	fp, sl, r4
 800613a:	d00b      	beq.n	8006154 <_vfiprintf_r+0xa4>
 800613c:	465b      	mov	r3, fp
 800613e:	4622      	mov	r2, r4
 8006140:	4629      	mov	r1, r5
 8006142:	4630      	mov	r0, r6
 8006144:	f7ff ffa2 	bl	800608c <__sfputs_r>
 8006148:	3001      	adds	r0, #1
 800614a:	f000 80a7 	beq.w	800629c <_vfiprintf_r+0x1ec>
 800614e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006150:	445a      	add	r2, fp
 8006152:	9209      	str	r2, [sp, #36]	@ 0x24
 8006154:	f89a 3000 	ldrb.w	r3, [sl]
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 809f 	beq.w	800629c <_vfiprintf_r+0x1ec>
 800615e:	2300      	movs	r3, #0
 8006160:	f04f 32ff 	mov.w	r2, #4294967295
 8006164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006168:	f10a 0a01 	add.w	sl, sl, #1
 800616c:	9304      	str	r3, [sp, #16]
 800616e:	9307      	str	r3, [sp, #28]
 8006170:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006174:	931a      	str	r3, [sp, #104]	@ 0x68
 8006176:	4654      	mov	r4, sl
 8006178:	2205      	movs	r2, #5
 800617a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800617e:	4853      	ldr	r0, [pc, #332]	@ (80062cc <_vfiprintf_r+0x21c>)
 8006180:	f7fa f846 	bl	8000210 <memchr>
 8006184:	9a04      	ldr	r2, [sp, #16]
 8006186:	b9d8      	cbnz	r0, 80061c0 <_vfiprintf_r+0x110>
 8006188:	06d1      	lsls	r1, r2, #27
 800618a:	bf44      	itt	mi
 800618c:	2320      	movmi	r3, #32
 800618e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006192:	0713      	lsls	r3, r2, #28
 8006194:	bf44      	itt	mi
 8006196:	232b      	movmi	r3, #43	@ 0x2b
 8006198:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800619c:	f89a 3000 	ldrb.w	r3, [sl]
 80061a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80061a2:	d015      	beq.n	80061d0 <_vfiprintf_r+0x120>
 80061a4:	9a07      	ldr	r2, [sp, #28]
 80061a6:	4654      	mov	r4, sl
 80061a8:	2000      	movs	r0, #0
 80061aa:	f04f 0c0a 	mov.w	ip, #10
 80061ae:	4621      	mov	r1, r4
 80061b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061b4:	3b30      	subs	r3, #48	@ 0x30
 80061b6:	2b09      	cmp	r3, #9
 80061b8:	d94b      	bls.n	8006252 <_vfiprintf_r+0x1a2>
 80061ba:	b1b0      	cbz	r0, 80061ea <_vfiprintf_r+0x13a>
 80061bc:	9207      	str	r2, [sp, #28]
 80061be:	e014      	b.n	80061ea <_vfiprintf_r+0x13a>
 80061c0:	eba0 0308 	sub.w	r3, r0, r8
 80061c4:	fa09 f303 	lsl.w	r3, r9, r3
 80061c8:	4313      	orrs	r3, r2
 80061ca:	9304      	str	r3, [sp, #16]
 80061cc:	46a2      	mov	sl, r4
 80061ce:	e7d2      	b.n	8006176 <_vfiprintf_r+0xc6>
 80061d0:	9b03      	ldr	r3, [sp, #12]
 80061d2:	1d19      	adds	r1, r3, #4
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	9103      	str	r1, [sp, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	bfbb      	ittet	lt
 80061dc:	425b      	neglt	r3, r3
 80061de:	f042 0202 	orrlt.w	r2, r2, #2
 80061e2:	9307      	strge	r3, [sp, #28]
 80061e4:	9307      	strlt	r3, [sp, #28]
 80061e6:	bfb8      	it	lt
 80061e8:	9204      	strlt	r2, [sp, #16]
 80061ea:	7823      	ldrb	r3, [r4, #0]
 80061ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80061ee:	d10a      	bne.n	8006206 <_vfiprintf_r+0x156>
 80061f0:	7863      	ldrb	r3, [r4, #1]
 80061f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80061f4:	d132      	bne.n	800625c <_vfiprintf_r+0x1ac>
 80061f6:	9b03      	ldr	r3, [sp, #12]
 80061f8:	1d1a      	adds	r2, r3, #4
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	9203      	str	r2, [sp, #12]
 80061fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006202:	3402      	adds	r4, #2
 8006204:	9305      	str	r3, [sp, #20]
 8006206:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80062dc <_vfiprintf_r+0x22c>
 800620a:	7821      	ldrb	r1, [r4, #0]
 800620c:	2203      	movs	r2, #3
 800620e:	4650      	mov	r0, sl
 8006210:	f7f9 fffe 	bl	8000210 <memchr>
 8006214:	b138      	cbz	r0, 8006226 <_vfiprintf_r+0x176>
 8006216:	9b04      	ldr	r3, [sp, #16]
 8006218:	eba0 000a 	sub.w	r0, r0, sl
 800621c:	2240      	movs	r2, #64	@ 0x40
 800621e:	4082      	lsls	r2, r0
 8006220:	4313      	orrs	r3, r2
 8006222:	3401      	adds	r4, #1
 8006224:	9304      	str	r3, [sp, #16]
 8006226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800622a:	4829      	ldr	r0, [pc, #164]	@ (80062d0 <_vfiprintf_r+0x220>)
 800622c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006230:	2206      	movs	r2, #6
 8006232:	f7f9 ffed 	bl	8000210 <memchr>
 8006236:	2800      	cmp	r0, #0
 8006238:	d03f      	beq.n	80062ba <_vfiprintf_r+0x20a>
 800623a:	4b26      	ldr	r3, [pc, #152]	@ (80062d4 <_vfiprintf_r+0x224>)
 800623c:	bb1b      	cbnz	r3, 8006286 <_vfiprintf_r+0x1d6>
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	3307      	adds	r3, #7
 8006242:	f023 0307 	bic.w	r3, r3, #7
 8006246:	3308      	adds	r3, #8
 8006248:	9303      	str	r3, [sp, #12]
 800624a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800624c:	443b      	add	r3, r7
 800624e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006250:	e76a      	b.n	8006128 <_vfiprintf_r+0x78>
 8006252:	fb0c 3202 	mla	r2, ip, r2, r3
 8006256:	460c      	mov	r4, r1
 8006258:	2001      	movs	r0, #1
 800625a:	e7a8      	b.n	80061ae <_vfiprintf_r+0xfe>
 800625c:	2300      	movs	r3, #0
 800625e:	3401      	adds	r4, #1
 8006260:	9305      	str	r3, [sp, #20]
 8006262:	4619      	mov	r1, r3
 8006264:	f04f 0c0a 	mov.w	ip, #10
 8006268:	4620      	mov	r0, r4
 800626a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800626e:	3a30      	subs	r2, #48	@ 0x30
 8006270:	2a09      	cmp	r2, #9
 8006272:	d903      	bls.n	800627c <_vfiprintf_r+0x1cc>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0c6      	beq.n	8006206 <_vfiprintf_r+0x156>
 8006278:	9105      	str	r1, [sp, #20]
 800627a:	e7c4      	b.n	8006206 <_vfiprintf_r+0x156>
 800627c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006280:	4604      	mov	r4, r0
 8006282:	2301      	movs	r3, #1
 8006284:	e7f0      	b.n	8006268 <_vfiprintf_r+0x1b8>
 8006286:	ab03      	add	r3, sp, #12
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	462a      	mov	r2, r5
 800628c:	4b12      	ldr	r3, [pc, #72]	@ (80062d8 <_vfiprintf_r+0x228>)
 800628e:	a904      	add	r1, sp, #16
 8006290:	4630      	mov	r0, r6
 8006292:	f7fd fd91 	bl	8003db8 <_printf_float>
 8006296:	4607      	mov	r7, r0
 8006298:	1c78      	adds	r0, r7, #1
 800629a:	d1d6      	bne.n	800624a <_vfiprintf_r+0x19a>
 800629c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800629e:	07d9      	lsls	r1, r3, #31
 80062a0:	d405      	bmi.n	80062ae <_vfiprintf_r+0x1fe>
 80062a2:	89ab      	ldrh	r3, [r5, #12]
 80062a4:	059a      	lsls	r2, r3, #22
 80062a6:	d402      	bmi.n	80062ae <_vfiprintf_r+0x1fe>
 80062a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062aa:	f7fe fad3 	bl	8004854 <__retarget_lock_release_recursive>
 80062ae:	89ab      	ldrh	r3, [r5, #12]
 80062b0:	065b      	lsls	r3, r3, #25
 80062b2:	f53f af1f 	bmi.w	80060f4 <_vfiprintf_r+0x44>
 80062b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062b8:	e71e      	b.n	80060f8 <_vfiprintf_r+0x48>
 80062ba:	ab03      	add	r3, sp, #12
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	462a      	mov	r2, r5
 80062c0:	4b05      	ldr	r3, [pc, #20]	@ (80062d8 <_vfiprintf_r+0x228>)
 80062c2:	a904      	add	r1, sp, #16
 80062c4:	4630      	mov	r0, r6
 80062c6:	f7fe f80f 	bl	80042e8 <_printf_i>
 80062ca:	e7e4      	b.n	8006296 <_vfiprintf_r+0x1e6>
 80062cc:	08006a46 	.word	0x08006a46
 80062d0:	08006a50 	.word	0x08006a50
 80062d4:	08003db9 	.word	0x08003db9
 80062d8:	0800608d 	.word	0x0800608d
 80062dc:	08006a4c 	.word	0x08006a4c

080062e0 <__swbuf_r>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	460e      	mov	r6, r1
 80062e4:	4614      	mov	r4, r2
 80062e6:	4605      	mov	r5, r0
 80062e8:	b118      	cbz	r0, 80062f2 <__swbuf_r+0x12>
 80062ea:	6a03      	ldr	r3, [r0, #32]
 80062ec:	b90b      	cbnz	r3, 80062f2 <__swbuf_r+0x12>
 80062ee:	f7fe f9a7 	bl	8004640 <__sinit>
 80062f2:	69a3      	ldr	r3, [r4, #24]
 80062f4:	60a3      	str	r3, [r4, #8]
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	071a      	lsls	r2, r3, #28
 80062fa:	d501      	bpl.n	8006300 <__swbuf_r+0x20>
 80062fc:	6923      	ldr	r3, [r4, #16]
 80062fe:	b943      	cbnz	r3, 8006312 <__swbuf_r+0x32>
 8006300:	4621      	mov	r1, r4
 8006302:	4628      	mov	r0, r5
 8006304:	f000 f82a 	bl	800635c <__swsetup_r>
 8006308:	b118      	cbz	r0, 8006312 <__swbuf_r+0x32>
 800630a:	f04f 37ff 	mov.w	r7, #4294967295
 800630e:	4638      	mov	r0, r7
 8006310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	6922      	ldr	r2, [r4, #16]
 8006316:	1a98      	subs	r0, r3, r2
 8006318:	6963      	ldr	r3, [r4, #20]
 800631a:	b2f6      	uxtb	r6, r6
 800631c:	4283      	cmp	r3, r0
 800631e:	4637      	mov	r7, r6
 8006320:	dc05      	bgt.n	800632e <__swbuf_r+0x4e>
 8006322:	4621      	mov	r1, r4
 8006324:	4628      	mov	r0, r5
 8006326:	f7ff fde9 	bl	8005efc <_fflush_r>
 800632a:	2800      	cmp	r0, #0
 800632c:	d1ed      	bne.n	800630a <__swbuf_r+0x2a>
 800632e:	68a3      	ldr	r3, [r4, #8]
 8006330:	3b01      	subs	r3, #1
 8006332:	60a3      	str	r3, [r4, #8]
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	6022      	str	r2, [r4, #0]
 800633a:	701e      	strb	r6, [r3, #0]
 800633c:	6962      	ldr	r2, [r4, #20]
 800633e:	1c43      	adds	r3, r0, #1
 8006340:	429a      	cmp	r2, r3
 8006342:	d004      	beq.n	800634e <__swbuf_r+0x6e>
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	07db      	lsls	r3, r3, #31
 8006348:	d5e1      	bpl.n	800630e <__swbuf_r+0x2e>
 800634a:	2e0a      	cmp	r6, #10
 800634c:	d1df      	bne.n	800630e <__swbuf_r+0x2e>
 800634e:	4621      	mov	r1, r4
 8006350:	4628      	mov	r0, r5
 8006352:	f7ff fdd3 	bl	8005efc <_fflush_r>
 8006356:	2800      	cmp	r0, #0
 8006358:	d0d9      	beq.n	800630e <__swbuf_r+0x2e>
 800635a:	e7d6      	b.n	800630a <__swbuf_r+0x2a>

0800635c <__swsetup_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4b29      	ldr	r3, [pc, #164]	@ (8006404 <__swsetup_r+0xa8>)
 8006360:	4605      	mov	r5, r0
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	460c      	mov	r4, r1
 8006366:	b118      	cbz	r0, 8006370 <__swsetup_r+0x14>
 8006368:	6a03      	ldr	r3, [r0, #32]
 800636a:	b90b      	cbnz	r3, 8006370 <__swsetup_r+0x14>
 800636c:	f7fe f968 	bl	8004640 <__sinit>
 8006370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006374:	0719      	lsls	r1, r3, #28
 8006376:	d422      	bmi.n	80063be <__swsetup_r+0x62>
 8006378:	06da      	lsls	r2, r3, #27
 800637a:	d407      	bmi.n	800638c <__swsetup_r+0x30>
 800637c:	2209      	movs	r2, #9
 800637e:	602a      	str	r2, [r5, #0]
 8006380:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006384:	81a3      	strh	r3, [r4, #12]
 8006386:	f04f 30ff 	mov.w	r0, #4294967295
 800638a:	e033      	b.n	80063f4 <__swsetup_r+0x98>
 800638c:	0758      	lsls	r0, r3, #29
 800638e:	d512      	bpl.n	80063b6 <__swsetup_r+0x5a>
 8006390:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006392:	b141      	cbz	r1, 80063a6 <__swsetup_r+0x4a>
 8006394:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006398:	4299      	cmp	r1, r3
 800639a:	d002      	beq.n	80063a2 <__swsetup_r+0x46>
 800639c:	4628      	mov	r0, r5
 800639e:	f7ff f8a7 	bl	80054f0 <_free_r>
 80063a2:	2300      	movs	r3, #0
 80063a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	2300      	movs	r3, #0
 80063b0:	6063      	str	r3, [r4, #4]
 80063b2:	6923      	ldr	r3, [r4, #16]
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	f043 0308 	orr.w	r3, r3, #8
 80063bc:	81a3      	strh	r3, [r4, #12]
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	b94b      	cbnz	r3, 80063d6 <__swsetup_r+0x7a>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063cc:	d003      	beq.n	80063d6 <__swsetup_r+0x7a>
 80063ce:	4621      	mov	r1, r4
 80063d0:	4628      	mov	r0, r5
 80063d2:	f000 f883 	bl	80064dc <__smakebuf_r>
 80063d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063da:	f013 0201 	ands.w	r2, r3, #1
 80063de:	d00a      	beq.n	80063f6 <__swsetup_r+0x9a>
 80063e0:	2200      	movs	r2, #0
 80063e2:	60a2      	str	r2, [r4, #8]
 80063e4:	6962      	ldr	r2, [r4, #20]
 80063e6:	4252      	negs	r2, r2
 80063e8:	61a2      	str	r2, [r4, #24]
 80063ea:	6922      	ldr	r2, [r4, #16]
 80063ec:	b942      	cbnz	r2, 8006400 <__swsetup_r+0xa4>
 80063ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80063f2:	d1c5      	bne.n	8006380 <__swsetup_r+0x24>
 80063f4:	bd38      	pop	{r3, r4, r5, pc}
 80063f6:	0799      	lsls	r1, r3, #30
 80063f8:	bf58      	it	pl
 80063fa:	6962      	ldrpl	r2, [r4, #20]
 80063fc:	60a2      	str	r2, [r4, #8]
 80063fe:	e7f4      	b.n	80063ea <__swsetup_r+0x8e>
 8006400:	2000      	movs	r0, #0
 8006402:	e7f7      	b.n	80063f4 <__swsetup_r+0x98>
 8006404:	20000018 	.word	0x20000018

08006408 <_raise_r>:
 8006408:	291f      	cmp	r1, #31
 800640a:	b538      	push	{r3, r4, r5, lr}
 800640c:	4605      	mov	r5, r0
 800640e:	460c      	mov	r4, r1
 8006410:	d904      	bls.n	800641c <_raise_r+0x14>
 8006412:	2316      	movs	r3, #22
 8006414:	6003      	str	r3, [r0, #0]
 8006416:	f04f 30ff 	mov.w	r0, #4294967295
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800641e:	b112      	cbz	r2, 8006426 <_raise_r+0x1e>
 8006420:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006424:	b94b      	cbnz	r3, 800643a <_raise_r+0x32>
 8006426:	4628      	mov	r0, r5
 8006428:	f000 f830 	bl	800648c <_getpid_r>
 800642c:	4622      	mov	r2, r4
 800642e:	4601      	mov	r1, r0
 8006430:	4628      	mov	r0, r5
 8006432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006436:	f000 b817 	b.w	8006468 <_kill_r>
 800643a:	2b01      	cmp	r3, #1
 800643c:	d00a      	beq.n	8006454 <_raise_r+0x4c>
 800643e:	1c59      	adds	r1, r3, #1
 8006440:	d103      	bne.n	800644a <_raise_r+0x42>
 8006442:	2316      	movs	r3, #22
 8006444:	6003      	str	r3, [r0, #0]
 8006446:	2001      	movs	r0, #1
 8006448:	e7e7      	b.n	800641a <_raise_r+0x12>
 800644a:	2100      	movs	r1, #0
 800644c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006450:	4620      	mov	r0, r4
 8006452:	4798      	blx	r3
 8006454:	2000      	movs	r0, #0
 8006456:	e7e0      	b.n	800641a <_raise_r+0x12>

08006458 <raise>:
 8006458:	4b02      	ldr	r3, [pc, #8]	@ (8006464 <raise+0xc>)
 800645a:	4601      	mov	r1, r0
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	f7ff bfd3 	b.w	8006408 <_raise_r>
 8006462:	bf00      	nop
 8006464:	20000018 	.word	0x20000018

08006468 <_kill_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	4d07      	ldr	r5, [pc, #28]	@ (8006488 <_kill_r+0x20>)
 800646c:	2300      	movs	r3, #0
 800646e:	4604      	mov	r4, r0
 8006470:	4608      	mov	r0, r1
 8006472:	4611      	mov	r1, r2
 8006474:	602b      	str	r3, [r5, #0]
 8006476:	f7fb f861 	bl	800153c <_kill>
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	d102      	bne.n	8006484 <_kill_r+0x1c>
 800647e:	682b      	ldr	r3, [r5, #0]
 8006480:	b103      	cbz	r3, 8006484 <_kill_r+0x1c>
 8006482:	6023      	str	r3, [r4, #0]
 8006484:	bd38      	pop	{r3, r4, r5, pc}
 8006486:	bf00      	nop
 8006488:	200004a0 	.word	0x200004a0

0800648c <_getpid_r>:
 800648c:	f7fb b84e 	b.w	800152c <_getpid>

08006490 <__swhatbuf_r>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	460c      	mov	r4, r1
 8006494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006498:	2900      	cmp	r1, #0
 800649a:	b096      	sub	sp, #88	@ 0x58
 800649c:	4615      	mov	r5, r2
 800649e:	461e      	mov	r6, r3
 80064a0:	da0d      	bge.n	80064be <__swhatbuf_r+0x2e>
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80064a8:	f04f 0100 	mov.w	r1, #0
 80064ac:	bf14      	ite	ne
 80064ae:	2340      	movne	r3, #64	@ 0x40
 80064b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80064b4:	2000      	movs	r0, #0
 80064b6:	6031      	str	r1, [r6, #0]
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	b016      	add	sp, #88	@ 0x58
 80064bc:	bd70      	pop	{r4, r5, r6, pc}
 80064be:	466a      	mov	r2, sp
 80064c0:	f000 f848 	bl	8006554 <_fstat_r>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	dbec      	blt.n	80064a2 <__swhatbuf_r+0x12>
 80064c8:	9901      	ldr	r1, [sp, #4]
 80064ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064d2:	4259      	negs	r1, r3
 80064d4:	4159      	adcs	r1, r3
 80064d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064da:	e7eb      	b.n	80064b4 <__swhatbuf_r+0x24>

080064dc <__smakebuf_r>:
 80064dc:	898b      	ldrh	r3, [r1, #12]
 80064de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064e0:	079d      	lsls	r5, r3, #30
 80064e2:	4606      	mov	r6, r0
 80064e4:	460c      	mov	r4, r1
 80064e6:	d507      	bpl.n	80064f8 <__smakebuf_r+0x1c>
 80064e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	6123      	str	r3, [r4, #16]
 80064f0:	2301      	movs	r3, #1
 80064f2:	6163      	str	r3, [r4, #20]
 80064f4:	b003      	add	sp, #12
 80064f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f8:	ab01      	add	r3, sp, #4
 80064fa:	466a      	mov	r2, sp
 80064fc:	f7ff ffc8 	bl	8006490 <__swhatbuf_r>
 8006500:	9f00      	ldr	r7, [sp, #0]
 8006502:	4605      	mov	r5, r0
 8006504:	4639      	mov	r1, r7
 8006506:	4630      	mov	r0, r6
 8006508:	f7ff f866 	bl	80055d8 <_malloc_r>
 800650c:	b948      	cbnz	r0, 8006522 <__smakebuf_r+0x46>
 800650e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006512:	059a      	lsls	r2, r3, #22
 8006514:	d4ee      	bmi.n	80064f4 <__smakebuf_r+0x18>
 8006516:	f023 0303 	bic.w	r3, r3, #3
 800651a:	f043 0302 	orr.w	r3, r3, #2
 800651e:	81a3      	strh	r3, [r4, #12]
 8006520:	e7e2      	b.n	80064e8 <__smakebuf_r+0xc>
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	6020      	str	r0, [r4, #0]
 8006526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800652a:	81a3      	strh	r3, [r4, #12]
 800652c:	9b01      	ldr	r3, [sp, #4]
 800652e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006532:	b15b      	cbz	r3, 800654c <__smakebuf_r+0x70>
 8006534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006538:	4630      	mov	r0, r6
 800653a:	f000 f81d 	bl	8006578 <_isatty_r>
 800653e:	b128      	cbz	r0, 800654c <__smakebuf_r+0x70>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f023 0303 	bic.w	r3, r3, #3
 8006546:	f043 0301 	orr.w	r3, r3, #1
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	431d      	orrs	r5, r3
 8006550:	81a5      	strh	r5, [r4, #12]
 8006552:	e7cf      	b.n	80064f4 <__smakebuf_r+0x18>

08006554 <_fstat_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d07      	ldr	r5, [pc, #28]	@ (8006574 <_fstat_r+0x20>)
 8006558:	2300      	movs	r3, #0
 800655a:	4604      	mov	r4, r0
 800655c:	4608      	mov	r0, r1
 800655e:	4611      	mov	r1, r2
 8006560:	602b      	str	r3, [r5, #0]
 8006562:	f7fb f84b 	bl	80015fc <_fstat>
 8006566:	1c43      	adds	r3, r0, #1
 8006568:	d102      	bne.n	8006570 <_fstat_r+0x1c>
 800656a:	682b      	ldr	r3, [r5, #0]
 800656c:	b103      	cbz	r3, 8006570 <_fstat_r+0x1c>
 800656e:	6023      	str	r3, [r4, #0]
 8006570:	bd38      	pop	{r3, r4, r5, pc}
 8006572:	bf00      	nop
 8006574:	200004a0 	.word	0x200004a0

08006578 <_isatty_r>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4d06      	ldr	r5, [pc, #24]	@ (8006594 <_isatty_r+0x1c>)
 800657c:	2300      	movs	r3, #0
 800657e:	4604      	mov	r4, r0
 8006580:	4608      	mov	r0, r1
 8006582:	602b      	str	r3, [r5, #0]
 8006584:	f7fb f84a 	bl	800161c <_isatty>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d102      	bne.n	8006592 <_isatty_r+0x1a>
 800658c:	682b      	ldr	r3, [r5, #0]
 800658e:	b103      	cbz	r3, 8006592 <_isatty_r+0x1a>
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	200004a0 	.word	0x200004a0

08006598 <_init>:
 8006598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659a:	bf00      	nop
 800659c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659e:	bc08      	pop	{r3}
 80065a0:	469e      	mov	lr, r3
 80065a2:	4770      	bx	lr

080065a4 <_fini>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	bf00      	nop
 80065a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065aa:	bc08      	pop	{r3}
 80065ac:	469e      	mov	lr, r3
 80065ae:	4770      	bx	lr
